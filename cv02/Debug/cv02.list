
cv02.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000004d4  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000594  0800059c  0001059c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000594  08000594  0001059c  2**0
                  CONTENTS
  4 .ARM          00000000  08000594  08000594  0001059c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000594  0800059c  0001059c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000594  08000594  00010594  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000598  08000598  00010598  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  0001059c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000038  20000000  0800059c  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000038  0800059c  00020038  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0001059c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000092b  00000000  00000000  000105c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000002fa  00000000  00000000  00010eef  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000000a8  00000000  00000000  000111f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000080  00000000  00000000  00011298  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00004756  00000000  00000000  00011318  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00000af1  00000000  00000000  00015a6e  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000184b9  00000000  00000000  0001655f  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0002ea18  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000178  00000000  00000000  0002ea94  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000000 	.word	0x20000000
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800057c 	.word	0x0800057c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000004 	.word	0x20000004
 8000104:	0800057c 	.word	0x0800057c

08000108 <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000108:	b580      	push	{r7, lr}
 800010a:	b082      	sub	sp, #8
 800010c:	af00      	add	r7, sp, #0
 800010e:	0002      	movs	r2, r0
 8000110:	1dfb      	adds	r3, r7, #7
 8000112:	701a      	strb	r2, [r3, #0]
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
 8000114:	1dfb      	adds	r3, r7, #7
 8000116:	781b      	ldrb	r3, [r3, #0]
 8000118:	001a      	movs	r2, r3
 800011a:	231f      	movs	r3, #31
 800011c:	4013      	ands	r3, r2
 800011e:	2201      	movs	r2, #1
 8000120:	409a      	lsls	r2, r3
 8000122:	4b03      	ldr	r3, [pc, #12]	; (8000130 <NVIC_EnableIRQ+0x28>)
 8000124:	601a      	str	r2, [r3, #0]
}
 8000126:	46c0      	nop			; (mov r8, r8)
 8000128:	46bd      	mov	sp, r7
 800012a:	b002      	add	sp, #8
 800012c:	bd80      	pop	{r7, pc}
 800012e:	46c0      	nop			; (mov r8, r8)
 8000130:	e000e100 	.word	0xe000e100

08000134 <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000134:	b590      	push	{r4, r7, lr}
 8000136:	b083      	sub	sp, #12
 8000138:	af00      	add	r7, sp, #0
 800013a:	0002      	movs	r2, r0
 800013c:	6039      	str	r1, [r7, #0]
 800013e:	1dfb      	adds	r3, r7, #7
 8000140:	701a      	strb	r2, [r3, #0]
  if(IRQn < 0) {
 8000142:	1dfb      	adds	r3, r7, #7
 8000144:	781b      	ldrb	r3, [r3, #0]
 8000146:	2b7f      	cmp	r3, #127	; 0x7f
 8000148:	d932      	bls.n	80001b0 <NVIC_SetPriority+0x7c>
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
 800014a:	4a2f      	ldr	r2, [pc, #188]	; (8000208 <NVIC_SetPriority+0xd4>)
 800014c:	1dfb      	adds	r3, r7, #7
 800014e:	781b      	ldrb	r3, [r3, #0]
 8000150:	0019      	movs	r1, r3
 8000152:	230f      	movs	r3, #15
 8000154:	400b      	ands	r3, r1
 8000156:	3b08      	subs	r3, #8
 8000158:	089b      	lsrs	r3, r3, #2
 800015a:	3306      	adds	r3, #6
 800015c:	009b      	lsls	r3, r3, #2
 800015e:	18d3      	adds	r3, r2, r3
 8000160:	3304      	adds	r3, #4
 8000162:	681b      	ldr	r3, [r3, #0]
 8000164:	1dfa      	adds	r2, r7, #7
 8000166:	7812      	ldrb	r2, [r2, #0]
 8000168:	0011      	movs	r1, r2
 800016a:	2203      	movs	r2, #3
 800016c:	400a      	ands	r2, r1
 800016e:	00d2      	lsls	r2, r2, #3
 8000170:	21ff      	movs	r1, #255	; 0xff
 8000172:	4091      	lsls	r1, r2
 8000174:	000a      	movs	r2, r1
 8000176:	43d2      	mvns	r2, r2
 8000178:	401a      	ands	r2, r3
 800017a:	0011      	movs	r1, r2
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
 800017c:	683b      	ldr	r3, [r7, #0]
 800017e:	019b      	lsls	r3, r3, #6
 8000180:	22ff      	movs	r2, #255	; 0xff
 8000182:	401a      	ands	r2, r3
 8000184:	1dfb      	adds	r3, r7, #7
 8000186:	781b      	ldrb	r3, [r3, #0]
 8000188:	0018      	movs	r0, r3
 800018a:	2303      	movs	r3, #3
 800018c:	4003      	ands	r3, r0
 800018e:	00db      	lsls	r3, r3, #3
 8000190:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
 8000192:	481d      	ldr	r0, [pc, #116]	; (8000208 <NVIC_SetPriority+0xd4>)
 8000194:	1dfb      	adds	r3, r7, #7
 8000196:	781b      	ldrb	r3, [r3, #0]
 8000198:	001c      	movs	r4, r3
 800019a:	230f      	movs	r3, #15
 800019c:	4023      	ands	r3, r4
 800019e:	3b08      	subs	r3, #8
 80001a0:	089b      	lsrs	r3, r3, #2
 80001a2:	430a      	orrs	r2, r1
 80001a4:	3306      	adds	r3, #6
 80001a6:	009b      	lsls	r3, r3, #2
 80001a8:	18c3      	adds	r3, r0, r3
 80001aa:	3304      	adds	r3, #4
 80001ac:	601a      	str	r2, [r3, #0]
  else {
    NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
}
 80001ae:	e027      	b.n	8000200 <NVIC_SetPriority+0xcc>
    NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
 80001b0:	4a16      	ldr	r2, [pc, #88]	; (800020c <NVIC_SetPriority+0xd8>)
 80001b2:	1dfb      	adds	r3, r7, #7
 80001b4:	781b      	ldrb	r3, [r3, #0]
 80001b6:	b25b      	sxtb	r3, r3
 80001b8:	089b      	lsrs	r3, r3, #2
 80001ba:	33c0      	adds	r3, #192	; 0xc0
 80001bc:	009b      	lsls	r3, r3, #2
 80001be:	589b      	ldr	r3, [r3, r2]
 80001c0:	1dfa      	adds	r2, r7, #7
 80001c2:	7812      	ldrb	r2, [r2, #0]
 80001c4:	0011      	movs	r1, r2
 80001c6:	2203      	movs	r2, #3
 80001c8:	400a      	ands	r2, r1
 80001ca:	00d2      	lsls	r2, r2, #3
 80001cc:	21ff      	movs	r1, #255	; 0xff
 80001ce:	4091      	lsls	r1, r2
 80001d0:	000a      	movs	r2, r1
 80001d2:	43d2      	mvns	r2, r2
 80001d4:	401a      	ands	r2, r3
 80001d6:	0011      	movs	r1, r2
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
 80001d8:	683b      	ldr	r3, [r7, #0]
 80001da:	019b      	lsls	r3, r3, #6
 80001dc:	22ff      	movs	r2, #255	; 0xff
 80001de:	401a      	ands	r2, r3
 80001e0:	1dfb      	adds	r3, r7, #7
 80001e2:	781b      	ldrb	r3, [r3, #0]
 80001e4:	0018      	movs	r0, r3
 80001e6:	2303      	movs	r3, #3
 80001e8:	4003      	ands	r3, r0
 80001ea:	00db      	lsls	r3, r3, #3
 80001ec:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
 80001ee:	4807      	ldr	r0, [pc, #28]	; (800020c <NVIC_SetPriority+0xd8>)
 80001f0:	1dfb      	adds	r3, r7, #7
 80001f2:	781b      	ldrb	r3, [r3, #0]
 80001f4:	b25b      	sxtb	r3, r3
 80001f6:	089b      	lsrs	r3, r3, #2
 80001f8:	430a      	orrs	r2, r1
 80001fa:	33c0      	adds	r3, #192	; 0xc0
 80001fc:	009b      	lsls	r3, r3, #2
 80001fe:	501a      	str	r2, [r3, r0]
}
 8000200:	46c0      	nop			; (mov r8, r8)
 8000202:	46bd      	mov	sp, r7
 8000204:	b003      	add	sp, #12
 8000206:	bd90      	pop	{r4, r7, pc}
 8000208:	e000ed00 	.word	0xe000ed00
 800020c:	e000e100 	.word	0xe000e100

08000210 <SysTick_Config>:
    function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000210:	b580      	push	{r7, lr}
 8000212:	b082      	sub	sp, #8
 8000214:	af00      	add	r7, sp, #0
 8000216:	6078      	str	r0, [r7, #4]
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */
 8000218:	687b      	ldr	r3, [r7, #4]
 800021a:	3b01      	subs	r3, #1
 800021c:	4a0c      	ldr	r2, [pc, #48]	; (8000250 <SysTick_Config+0x40>)
 800021e:	4293      	cmp	r3, r2
 8000220:	d901      	bls.n	8000226 <SysTick_Config+0x16>
 8000222:	2301      	movs	r3, #1
 8000224:	e010      	b.n	8000248 <SysTick_Config+0x38>

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
 8000226:	4b0b      	ldr	r3, [pc, #44]	; (8000254 <SysTick_Config+0x44>)
 8000228:	687a      	ldr	r2, [r7, #4]
 800022a:	3a01      	subs	r2, #1
 800022c:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
 800022e:	2301      	movs	r3, #1
 8000230:	425b      	negs	r3, r3
 8000232:	2103      	movs	r1, #3
 8000234:	0018      	movs	r0, r3
 8000236:	f7ff ff7d 	bl	8000134 <NVIC_SetPriority>
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 800023a:	4b06      	ldr	r3, [pc, #24]	; (8000254 <SysTick_Config+0x44>)
 800023c:	2200      	movs	r2, #0
 800023e:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000240:	4b04      	ldr	r3, [pc, #16]	; (8000254 <SysTick_Config+0x44>)
 8000242:	2207      	movs	r2, #7
 8000244:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                    /* Enable SysTick IRQ and SysTick Timer */
  return (0);                                                  /* Function successful */
 8000246:	2300      	movs	r3, #0
}
 8000248:	0018      	movs	r0, r3
 800024a:	46bd      	mov	sp, r7
 800024c:	b002      	add	sp, #8
 800024e:	bd80      	pop	{r7, pc}
 8000250:	00ffffff 	.word	0x00ffffff
 8000254:	e000e010 	.word	0xe000e010

08000258 <EXTI0_1_IRQHandler>:
#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

void EXTI0_1_IRQHandler(void)
{
 8000258:	b580      	push	{r7, lr}
 800025a:	af00      	add	r7, sp, #0
	if (EXTI->PR & EXTI_PR_PR0)		// check line 0 has triggered the IT
 800025c:	4b09      	ldr	r3, [pc, #36]	; (8000284 <EXTI0_1_IRQHandler+0x2c>)
 800025e:	695b      	ldr	r3, [r3, #20]
 8000260:	2201      	movs	r2, #1
 8000262:	4013      	ands	r3, r2
 8000264:	d00b      	beq.n	800027e <EXTI0_1_IRQHandler+0x26>
	{
		EXTI->PR |= EXTI_PR_PR0; 	// clear the pending bit
 8000266:	4b07      	ldr	r3, [pc, #28]	; (8000284 <EXTI0_1_IRQHandler+0x2c>)
 8000268:	695a      	ldr	r2, [r3, #20]
 800026a:	4b06      	ldr	r3, [pc, #24]	; (8000284 <EXTI0_1_IRQHandler+0x2c>)
 800026c:	2101      	movs	r1, #1
 800026e:	430a      	orrs	r2, r1
 8000270:	615a      	str	r2, [r3, #20]
		GPIOB->ODR ^= (1<<0);
 8000272:	4b05      	ldr	r3, [pc, #20]	; (8000288 <EXTI0_1_IRQHandler+0x30>)
 8000274:	695a      	ldr	r2, [r3, #20]
 8000276:	4b04      	ldr	r3, [pc, #16]	; (8000288 <EXTI0_1_IRQHandler+0x30>)
 8000278:	2101      	movs	r1, #1
 800027a:	404a      	eors	r2, r1
 800027c:	615a      	str	r2, [r3, #20]
	}
}
 800027e:	46c0      	nop			; (mov r8, r8)
 8000280:	46bd      	mov	sp, r7
 8000282:	bd80      	pop	{r7, pc}
 8000284:	40010400 	.word	0x40010400
 8000288:	48000400 	.word	0x48000400

0800028c <SysTick_Handler>:

void SysTick_Handler(void)			//vektor preruseni
{
 800028c:	b580      	push	{r7, lr}
 800028e:	af00      	add	r7, sp, #0
	Tick++;							//kazdou ms se zvysi o 1
 8000290:	4b03      	ldr	r3, [pc, #12]	; (80002a0 <SysTick_Handler+0x14>)
 8000292:	681b      	ldr	r3, [r3, #0]
 8000294:	1c5a      	adds	r2, r3, #1
 8000296:	4b02      	ldr	r3, [pc, #8]	; (80002a0 <SysTick_Handler+0x14>)
 8000298:	601a      	str	r2, [r3, #0]
}
 800029a:	46c0      	nop			; (mov r8, r8)
 800029c:	46bd      	mov	sp, r7
 800029e:	bd80      	pop	{r7, pc}
 80002a0:	2000001c 	.word	0x2000001c

080002a4 <blikac>:

void blikac(void)
{
 80002a4:	b580      	push	{r7, lr}
 80002a6:	af00      	add	r7, sp, #0
	static uint32_t delay;

	if (Tick > delay + LED_TIME_BLINK)
 80002a8:	4b0b      	ldr	r3, [pc, #44]	; (80002d8 <blikac+0x34>)
 80002aa:	681b      	ldr	r3, [r3, #0]
 80002ac:	332d      	adds	r3, #45	; 0x2d
 80002ae:	33ff      	adds	r3, #255	; 0xff
 80002b0:	001a      	movs	r2, r3
 80002b2:	4b0a      	ldr	r3, [pc, #40]	; (80002dc <blikac+0x38>)
 80002b4:	681b      	ldr	r3, [r3, #0]
 80002b6:	429a      	cmp	r2, r3
 80002b8:	d20b      	bcs.n	80002d2 <blikac+0x2e>
	{
		GPIOA->ODR ^= (1<<4);
 80002ba:	2390      	movs	r3, #144	; 0x90
 80002bc:	05db      	lsls	r3, r3, #23
 80002be:	695a      	ldr	r2, [r3, #20]
 80002c0:	2390      	movs	r3, #144	; 0x90
 80002c2:	05db      	lsls	r3, r3, #23
 80002c4:	2110      	movs	r1, #16
 80002c6:	404a      	eors	r2, r1
 80002c8:	615a      	str	r2, [r3, #20]
		delay = Tick;
 80002ca:	4b04      	ldr	r3, [pc, #16]	; (80002dc <blikac+0x38>)
 80002cc:	681a      	ldr	r2, [r3, #0]
 80002ce:	4b02      	ldr	r3, [pc, #8]	; (80002d8 <blikac+0x34>)
 80002d0:	601a      	str	r2, [r3, #0]
	}
}
 80002d2:	46c0      	nop			; (mov r8, r8)
 80002d4:	46bd      	mov	sp, r7
 80002d6:	bd80      	pop	{r7, pc}
 80002d8:	20000020 	.word	0x20000020
 80002dc:	2000001c 	.word	0x2000001c

080002e0 <tlacitka>:

void tlacitka(void)
{
 80002e0:	b580      	push	{r7, lr}
 80002e2:	b082      	sub	sp, #8
 80002e4:	af00      	add	r7, sp, #0
	static uint32_t debounce1 = 0;
	static uint32_t off_time1;
	static uint32_t off_time2;

	if (Tick > debounce1 + BUTTON_DEBOUNCE)
 80002e6:	4b2a      	ldr	r3, [pc, #168]	; (8000390 <tlacitka+0xb0>)
 80002e8:	681b      	ldr	r3, [r3, #0]
 80002ea:	3328      	adds	r3, #40	; 0x28
 80002ec:	001a      	movs	r2, r3
 80002ee:	4b29      	ldr	r3, [pc, #164]	; (8000394 <tlacitka+0xb4>)
 80002f0:	681b      	ldr	r3, [r3, #0]
 80002f2:	429a      	cmp	r2, r3
 80002f4:	d235      	bcs.n	8000362 <tlacitka+0x82>
	{
		static uint32_t old_s2;					//puvodoni hodnota stavu vstpniho pinu S2
		uint32_t new_s2  = GPIOC->IDR& (1<<0);	//aktualni hodnota stavu vstpniho pinu S2
 80002f6:	4b28      	ldr	r3, [pc, #160]	; (8000398 <tlacitka+0xb8>)
 80002f8:	691b      	ldr	r3, [r3, #16]
 80002fa:	2201      	movs	r2, #1
 80002fc:	4013      	ands	r3, r2
 80002fe:	607b      	str	r3, [r7, #4]
		debounce1 = Tick;						//prirazeni aktualniho casu pomoci Tick
 8000300:	4b24      	ldr	r3, [pc, #144]	; (8000394 <tlacitka+0xb4>)
 8000302:	681a      	ldr	r2, [r3, #0]
 8000304:	4b22      	ldr	r3, [pc, #136]	; (8000390 <tlacitka+0xb0>)
 8000306:	601a      	str	r2, [r3, #0]
		if(old_s2 && !new_s2)					//falling edge
 8000308:	4b24      	ldr	r3, [pc, #144]	; (800039c <tlacitka+0xbc>)
 800030a:	681b      	ldr	r3, [r3, #0]
 800030c:	2b00      	cmp	r3, #0
 800030e:	d00b      	beq.n	8000328 <tlacitka+0x48>
 8000310:	687b      	ldr	r3, [r7, #4]
 8000312:	2b00      	cmp	r3, #0
 8000314:	d108      	bne.n	8000328 <tlacitka+0x48>
		{
			off_time2 = Tick + LED_TIME_SHORT;	//nastaveni vypinaciho casu
 8000316:	4b1f      	ldr	r3, [pc, #124]	; (8000394 <tlacitka+0xb4>)
 8000318:	681b      	ldr	r3, [r3, #0]
 800031a:	3364      	adds	r3, #100	; 0x64
 800031c:	001a      	movs	r2, r3
 800031e:	4b20      	ldr	r3, [pc, #128]	; (80003a0 <tlacitka+0xc0>)
 8000320:	601a      	str	r2, [r3, #0]
			GPIOB->BSRR = (1<<0);				//rozsviceni LED2
 8000322:	4b20      	ldr	r3, [pc, #128]	; (80003a4 <tlacitka+0xc4>)
 8000324:	2201      	movs	r2, #1
 8000326:	619a      	str	r2, [r3, #24]
		}
		old_s2 = new_s2;
 8000328:	4b1c      	ldr	r3, [pc, #112]	; (800039c <tlacitka+0xbc>)
 800032a:	687a      	ldr	r2, [r7, #4]
 800032c:	601a      	str	r2, [r3, #0]

		static uint32_t old_s1;					//puvodoni hodnota stavu vstpniho pinu S1
		uint32_t new_s1  = GPIOC->IDR& (1<<1);	//aktualni hodnota stavu vstpniho pinu S1
 800032e:	4b1a      	ldr	r3, [pc, #104]	; (8000398 <tlacitka+0xb8>)
 8000330:	691b      	ldr	r3, [r3, #16]
 8000332:	2202      	movs	r2, #2
 8000334:	4013      	ands	r3, r2
 8000336:	603b      	str	r3, [r7, #0]
		if(old_s1 && !new_s1)					//falling edge
 8000338:	4b1b      	ldr	r3, [pc, #108]	; (80003a8 <tlacitka+0xc8>)
 800033a:	681b      	ldr	r3, [r3, #0]
 800033c:	2b00      	cmp	r3, #0
 800033e:	d00d      	beq.n	800035c <tlacitka+0x7c>
 8000340:	683b      	ldr	r3, [r7, #0]
 8000342:	2b00      	cmp	r3, #0
 8000344:	d10a      	bne.n	800035c <tlacitka+0x7c>
		{
			off_time1 = Tick + LED_TIME_LONG;	//nastaveni vypinaciho casu
 8000346:	4b13      	ldr	r3, [pc, #76]	; (8000394 <tlacitka+0xb4>)
 8000348:	681b      	ldr	r3, [r3, #0]
 800034a:	22fa      	movs	r2, #250	; 0xfa
 800034c:	0092      	lsls	r2, r2, #2
 800034e:	189a      	adds	r2, r3, r2
 8000350:	4b16      	ldr	r3, [pc, #88]	; (80003ac <tlacitka+0xcc>)
 8000352:	601a      	str	r2, [r3, #0]
			GPIOA->BSRR = (1<<4);				//rozsviceni LED1
 8000354:	2390      	movs	r3, #144	; 0x90
 8000356:	05db      	lsls	r3, r3, #23
 8000358:	2210      	movs	r2, #16
 800035a:	619a      	str	r2, [r3, #24]
		}
		old_s1 = new_s1;
 800035c:	4b12      	ldr	r3, [pc, #72]	; (80003a8 <tlacitka+0xc8>)
 800035e:	683a      	ldr	r2, [r7, #0]
 8000360:	601a      	str	r2, [r3, #0]
	}

	if(Tick > off_time2)
 8000362:	4b0c      	ldr	r3, [pc, #48]	; (8000394 <tlacitka+0xb4>)
 8000364:	681a      	ldr	r2, [r3, #0]
 8000366:	4b0e      	ldr	r3, [pc, #56]	; (80003a0 <tlacitka+0xc0>)
 8000368:	681b      	ldr	r3, [r3, #0]
 800036a:	429a      	cmp	r2, r3
 800036c:	d902      	bls.n	8000374 <tlacitka+0x94>
	{
		GPIOB->BRR = (1<<0);					//vypnuti LED2
 800036e:	4b0d      	ldr	r3, [pc, #52]	; (80003a4 <tlacitka+0xc4>)
 8000370:	2201      	movs	r2, #1
 8000372:	629a      	str	r2, [r3, #40]	; 0x28
	}
	if(Tick > off_time1)
 8000374:	4b07      	ldr	r3, [pc, #28]	; (8000394 <tlacitka+0xb4>)
 8000376:	681a      	ldr	r2, [r3, #0]
 8000378:	4b0c      	ldr	r3, [pc, #48]	; (80003ac <tlacitka+0xcc>)
 800037a:	681b      	ldr	r3, [r3, #0]
 800037c:	429a      	cmp	r2, r3
 800037e:	d903      	bls.n	8000388 <tlacitka+0xa8>
	{
		GPIOA->BRR = (1<<4);					//vypnuti LED1
 8000380:	2390      	movs	r3, #144	; 0x90
 8000382:	05db      	lsls	r3, r3, #23
 8000384:	2210      	movs	r2, #16
 8000386:	629a      	str	r2, [r3, #40]	; 0x28
	}
}
 8000388:	46c0      	nop			; (mov r8, r8)
 800038a:	46bd      	mov	sp, r7
 800038c:	b002      	add	sp, #8
 800038e:	bd80      	pop	{r7, pc}
 8000390:	20000024 	.word	0x20000024
 8000394:	2000001c 	.word	0x2000001c
 8000398:	48000800 	.word	0x48000800
 800039c:	20000028 	.word	0x20000028
 80003a0:	2000002c 	.word	0x2000002c
 80003a4:	48000400 	.word	0x48000400
 80003a8:	20000030 	.word	0x20000030
 80003ac:	20000034 	.word	0x20000034

080003b0 <main>:

int main(void)
{
 80003b0:	b580      	push	{r7, lr}
 80003b2:	af00      	add	r7, sp, #0
	 RCC->AHBENR |= RCC_AHBENR_GPIOAEN | RCC_AHBENR_GPIOBEN | RCC_AHBENR_GPIOCEN; // enable
 80003b4:	4b23      	ldr	r3, [pc, #140]	; (8000444 <main+0x94>)
 80003b6:	695a      	ldr	r2, [r3, #20]
 80003b8:	4b22      	ldr	r3, [pc, #136]	; (8000444 <main+0x94>)
 80003ba:	21e0      	movs	r1, #224	; 0xe0
 80003bc:	0309      	lsls	r1, r1, #12
 80003be:	430a      	orrs	r2, r1
 80003c0:	615a      	str	r2, [r3, #20]
	 GPIOA->MODER |= GPIO_MODER_MODER4_0; // LED1 = PA4, output
 80003c2:	2390      	movs	r3, #144	; 0x90
 80003c4:	05db      	lsls	r3, r3, #23
 80003c6:	681a      	ldr	r2, [r3, #0]
 80003c8:	2390      	movs	r3, #144	; 0x90
 80003ca:	05db      	lsls	r3, r3, #23
 80003cc:	2180      	movs	r1, #128	; 0x80
 80003ce:	0049      	lsls	r1, r1, #1
 80003d0:	430a      	orrs	r2, r1
 80003d2:	601a      	str	r2, [r3, #0]
	 GPIOB->MODER |= GPIO_MODER_MODER0_0; // LED2 = PB0, output
 80003d4:	4b1c      	ldr	r3, [pc, #112]	; (8000448 <main+0x98>)
 80003d6:	681a      	ldr	r2, [r3, #0]
 80003d8:	4b1b      	ldr	r3, [pc, #108]	; (8000448 <main+0x98>)
 80003da:	2101      	movs	r1, #1
 80003dc:	430a      	orrs	r2, r1
 80003de:	601a      	str	r2, [r3, #0]
	 GPIOC->PUPDR |= GPIO_PUPDR_PUPDR0_0; // S2 = PC0, pullup
 80003e0:	4b1a      	ldr	r3, [pc, #104]	; (800044c <main+0x9c>)
 80003e2:	68da      	ldr	r2, [r3, #12]
 80003e4:	4b19      	ldr	r3, [pc, #100]	; (800044c <main+0x9c>)
 80003e6:	2101      	movs	r1, #1
 80003e8:	430a      	orrs	r2, r1
 80003ea:	60da      	str	r2, [r3, #12]
	 GPIOC->PUPDR |= GPIO_PUPDR_PUPDR1_0; // S1 = PC1, pullup
 80003ec:	4b17      	ldr	r3, [pc, #92]	; (800044c <main+0x9c>)
 80003ee:	68da      	ldr	r2, [r3, #12]
 80003f0:	4b16      	ldr	r3, [pc, #88]	; (800044c <main+0x9c>)
 80003f2:	2104      	movs	r1, #4
 80003f4:	430a      	orrs	r2, r1
 80003f6:	60da      	str	r2, [r3, #12]

	 RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 80003f8:	4b12      	ldr	r3, [pc, #72]	; (8000444 <main+0x94>)
 80003fa:	699a      	ldr	r2, [r3, #24]
 80003fc:	4b11      	ldr	r3, [pc, #68]	; (8000444 <main+0x94>)
 80003fe:	2101      	movs	r1, #1
 8000400:	430a      	orrs	r2, r1
 8000402:	619a      	str	r2, [r3, #24]

	 SysTick_Config(8000); // 1ms
 8000404:	23fa      	movs	r3, #250	; 0xfa
 8000406:	015b      	lsls	r3, r3, #5
 8000408:	0018      	movs	r0, r3
 800040a:	f7ff ff01 	bl	8000210 <SysTick_Config>

	 SYSCFG->EXTICR[0] |= SYSCFG_EXTICR1_EXTI0_PC; // select PC0 for EXTI0
 800040e:	4b10      	ldr	r3, [pc, #64]	; (8000450 <main+0xa0>)
 8000410:	689a      	ldr	r2, [r3, #8]
 8000412:	4b0f      	ldr	r3, [pc, #60]	; (8000450 <main+0xa0>)
 8000414:	2102      	movs	r1, #2
 8000416:	430a      	orrs	r2, r1
 8000418:	609a      	str	r2, [r3, #8]
	 EXTI->IMR |= EXTI_IMR_MR0; // mask
 800041a:	4b0e      	ldr	r3, [pc, #56]	; (8000454 <main+0xa4>)
 800041c:	681a      	ldr	r2, [r3, #0]
 800041e:	4b0d      	ldr	r3, [pc, #52]	; (8000454 <main+0xa4>)
 8000420:	2101      	movs	r1, #1
 8000422:	430a      	orrs	r2, r1
 8000424:	601a      	str	r2, [r3, #0]
	 EXTI->FTSR |= EXTI_FTSR_TR0; // trigger on falling edge
 8000426:	4b0b      	ldr	r3, [pc, #44]	; (8000454 <main+0xa4>)
 8000428:	68da      	ldr	r2, [r3, #12]
 800042a:	4b0a      	ldr	r3, [pc, #40]	; (8000454 <main+0xa4>)
 800042c:	2101      	movs	r1, #1
 800042e:	430a      	orrs	r2, r1
 8000430:	60da      	str	r2, [r3, #12]
	 NVIC_EnableIRQ(EXTI0_1_IRQn); // enable EXTI0_1
 8000432:	2005      	movs	r0, #5
 8000434:	f7ff fe68 	bl	8000108 <NVIC_EnableIRQ>


    /* Loop forever */
	for(;;)
	{
		blikac();
 8000438:	f7ff ff34 	bl	80002a4 <blikac>
		tlacitka();
 800043c:	f7ff ff50 	bl	80002e0 <tlacitka>
		blikac();
 8000440:	e7fa      	b.n	8000438 <main+0x88>
 8000442:	46c0      	nop			; (mov r8, r8)
 8000444:	40021000 	.word	0x40021000
 8000448:	48000400 	.word	0x48000400
 800044c:	48000800 	.word	0x48000800
 8000450:	40010000 	.word	0x40010000
 8000454:	40010400 	.word	0x40010400

08000458 <SystemInit>:
  *         Initialize the default HSI clock source, vector table location and the PLL configuration is reset.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000458:	b580      	push	{r7, lr}
 800045a:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800045c:	4b1a      	ldr	r3, [pc, #104]	; (80004c8 <SystemInit+0x70>)
 800045e:	681a      	ldr	r2, [r3, #0]
 8000460:	4b19      	ldr	r3, [pc, #100]	; (80004c8 <SystemInit+0x70>)
 8000462:	2101      	movs	r1, #1
 8000464:	430a      	orrs	r2, r1
 8000466:	601a      	str	r2, [r3, #0]
#if defined (STM32F051x8) || defined (STM32F058x8)
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[2:0] bits */
  RCC->CFGR &= (uint32_t)0xF8FFB80C;
#else
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE, MCOSEL[2:0], MCOPRE[2:0] and PLLNODIV bits */
  RCC->CFGR &= (uint32_t)0x08FFB80C;
 8000468:	4b17      	ldr	r3, [pc, #92]	; (80004c8 <SystemInit+0x70>)
 800046a:	685a      	ldr	r2, [r3, #4]
 800046c:	4b16      	ldr	r3, [pc, #88]	; (80004c8 <SystemInit+0x70>)
 800046e:	4917      	ldr	r1, [pc, #92]	; (80004cc <SystemInit+0x74>)
 8000470:	400a      	ands	r2, r1
 8000472:	605a      	str	r2, [r3, #4]
#endif /* STM32F051x8 or STM32F058x8 */
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000474:	4b14      	ldr	r3, [pc, #80]	; (80004c8 <SystemInit+0x70>)
 8000476:	681a      	ldr	r2, [r3, #0]
 8000478:	4b13      	ldr	r3, [pc, #76]	; (80004c8 <SystemInit+0x70>)
 800047a:	4915      	ldr	r1, [pc, #84]	; (80004d0 <SystemInit+0x78>)
 800047c:	400a      	ands	r2, r1
 800047e:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000480:	4b11      	ldr	r3, [pc, #68]	; (80004c8 <SystemInit+0x70>)
 8000482:	681a      	ldr	r2, [r3, #0]
 8000484:	4b10      	ldr	r3, [pc, #64]	; (80004c8 <SystemInit+0x70>)
 8000486:	4913      	ldr	r1, [pc, #76]	; (80004d4 <SystemInit+0x7c>)
 8000488:	400a      	ands	r2, r1
 800048a:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC0FFFF;
 800048c:	4b0e      	ldr	r3, [pc, #56]	; (80004c8 <SystemInit+0x70>)
 800048e:	685a      	ldr	r2, [r3, #4]
 8000490:	4b0d      	ldr	r3, [pc, #52]	; (80004c8 <SystemInit+0x70>)
 8000492:	4911      	ldr	r1, [pc, #68]	; (80004d8 <SystemInit+0x80>)
 8000494:	400a      	ands	r2, r1
 8000496:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0;
 8000498:	4b0b      	ldr	r3, [pc, #44]	; (80004c8 <SystemInit+0x70>)
 800049a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800049c:	4b0a      	ldr	r3, [pc, #40]	; (80004c8 <SystemInit+0x70>)
 800049e:	210f      	movs	r1, #15
 80004a0:	438a      	bics	r2, r1
 80004a2:	62da      	str	r2, [r3, #44]	; 0x2c
#elif defined (STM32F091xC) || defined (STM32F098xx)
  /* Reset USART3SW[1:0], USART2SW[1:0], USART1SW[1:0], I2C1SW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFF0FEAC;
#elif defined (STM32F030x6) || defined (STM32F030x8) || defined (STM32F031x6) || defined (STM32F038xx) || defined (STM32F030xC)
  /* Reset USART1SW[1:0], I2C1SW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFFEEC;
 80004a4:	4b08      	ldr	r3, [pc, #32]	; (80004c8 <SystemInit+0x70>)
 80004a6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80004a8:	4b07      	ldr	r3, [pc, #28]	; (80004c8 <SystemInit+0x70>)
 80004aa:	490c      	ldr	r1, [pc, #48]	; (80004dc <SystemInit+0x84>)
 80004ac:	400a      	ands	r2, r1
 80004ae:	631a      	str	r2, [r3, #48]	; 0x30
#else
 #warning "No target selected"
#endif

  /* Reset HSI14 bit */
  RCC->CR2 &= (uint32_t)0xFFFFFFFE;
 80004b0:	4b05      	ldr	r3, [pc, #20]	; (80004c8 <SystemInit+0x70>)
 80004b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80004b4:	4b04      	ldr	r3, [pc, #16]	; (80004c8 <SystemInit+0x70>)
 80004b6:	2101      	movs	r1, #1
 80004b8:	438a      	bics	r2, r1
 80004ba:	635a      	str	r2, [r3, #52]	; 0x34

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80004bc:	4b02      	ldr	r3, [pc, #8]	; (80004c8 <SystemInit+0x70>)
 80004be:	2200      	movs	r2, #0
 80004c0:	609a      	str	r2, [r3, #8]

}
 80004c2:	46c0      	nop			; (mov r8, r8)
 80004c4:	46bd      	mov	sp, r7
 80004c6:	bd80      	pop	{r7, pc}
 80004c8:	40021000 	.word	0x40021000
 80004cc:	08ffb80c 	.word	0x08ffb80c
 80004d0:	fef6ffff 	.word	0xfef6ffff
 80004d4:	fffbffff 	.word	0xfffbffff
 80004d8:	ffc0ffff 	.word	0xffc0ffff
 80004dc:	fffffeec 	.word	0xfffffeec

080004e0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80004e0:	480d      	ldr	r0, [pc, #52]	; (8000518 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80004e2:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 80004e4:	f7ff ffb8 	bl	8000458 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80004e8:	480c      	ldr	r0, [pc, #48]	; (800051c <LoopForever+0x6>)
  ldr r1, =_edata
 80004ea:	490d      	ldr	r1, [pc, #52]	; (8000520 <LoopForever+0xa>)
  ldr r2, =_sidata
 80004ec:	4a0d      	ldr	r2, [pc, #52]	; (8000524 <LoopForever+0xe>)
  movs r3, #0
 80004ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80004f0:	e002      	b.n	80004f8 <LoopCopyDataInit>

080004f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80004f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80004f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80004f6:	3304      	adds	r3, #4

080004f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80004f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80004fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80004fc:	d3f9      	bcc.n	80004f2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80004fe:	4a0a      	ldr	r2, [pc, #40]	; (8000528 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000500:	4c0a      	ldr	r4, [pc, #40]	; (800052c <LoopForever+0x16>)
  movs r3, #0
 8000502:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000504:	e001      	b.n	800050a <LoopFillZerobss>

08000506 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000506:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000508:	3204      	adds	r2, #4

0800050a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800050a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800050c:	d3fb      	bcc.n	8000506 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800050e:	f000 f811 	bl	8000534 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000512:	f7ff ff4d 	bl	80003b0 <main>

08000516 <LoopForever>:

LoopForever:
    b LoopForever
 8000516:	e7fe      	b.n	8000516 <LoopForever>
  ldr   r0, =_estack
 8000518:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 800051c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000520:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000524:	0800059c 	.word	0x0800059c
  ldr r2, =_sbss
 8000528:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 800052c:	20000038 	.word	0x20000038

08000530 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000530:	e7fe      	b.n	8000530 <ADC_IRQHandler>
	...

08000534 <__libc_init_array>:
 8000534:	b570      	push	{r4, r5, r6, lr}
 8000536:	2600      	movs	r6, #0
 8000538:	4d0c      	ldr	r5, [pc, #48]	; (800056c <__libc_init_array+0x38>)
 800053a:	4c0d      	ldr	r4, [pc, #52]	; (8000570 <__libc_init_array+0x3c>)
 800053c:	1b64      	subs	r4, r4, r5
 800053e:	10a4      	asrs	r4, r4, #2
 8000540:	42a6      	cmp	r6, r4
 8000542:	d109      	bne.n	8000558 <__libc_init_array+0x24>
 8000544:	2600      	movs	r6, #0
 8000546:	f000 f819 	bl	800057c <_init>
 800054a:	4d0a      	ldr	r5, [pc, #40]	; (8000574 <__libc_init_array+0x40>)
 800054c:	4c0a      	ldr	r4, [pc, #40]	; (8000578 <__libc_init_array+0x44>)
 800054e:	1b64      	subs	r4, r4, r5
 8000550:	10a4      	asrs	r4, r4, #2
 8000552:	42a6      	cmp	r6, r4
 8000554:	d105      	bne.n	8000562 <__libc_init_array+0x2e>
 8000556:	bd70      	pop	{r4, r5, r6, pc}
 8000558:	00b3      	lsls	r3, r6, #2
 800055a:	58eb      	ldr	r3, [r5, r3]
 800055c:	4798      	blx	r3
 800055e:	3601      	adds	r6, #1
 8000560:	e7ee      	b.n	8000540 <__libc_init_array+0xc>
 8000562:	00b3      	lsls	r3, r6, #2
 8000564:	58eb      	ldr	r3, [r5, r3]
 8000566:	4798      	blx	r3
 8000568:	3601      	adds	r6, #1
 800056a:	e7f2      	b.n	8000552 <__libc_init_array+0x1e>
 800056c:	08000594 	.word	0x08000594
 8000570:	08000594 	.word	0x08000594
 8000574:	08000594 	.word	0x08000594
 8000578:	08000598 	.word	0x08000598

0800057c <_init>:
 800057c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800057e:	46c0      	nop			; (mov r8, r8)
 8000580:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000582:	bc08      	pop	{r3}
 8000584:	469e      	mov	lr, r3
 8000586:	4770      	bx	lr

08000588 <_fini>:
 8000588:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800058a:	46c0      	nop			; (mov r8, r8)
 800058c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800058e:	bc08      	pop	{r3}
 8000590:	469e      	mov	lr, r3
 8000592:	4770      	bx	lr
