
cv06.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001da8  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008a8  08001e68  08001e68  00011e68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002710  08002710  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002710  08002710  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002710  08002710  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002710  08002710  00012710  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002714  08002714  00012714  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002718  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000060  2000000c  08002724  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000006c  08002724  0002006c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000056e7  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000014d9  00000000  00000000  0002571b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000520  00000000  00000000  00026bf8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000458  00000000  00000000  00027118  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000c683  00000000  00000000  00027570  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00006023  00000000  00000000  00033bf3  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000438ae  00000000  00000000  00039c16  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0007d4c4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001004  00000000  00000000  0007d540  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08001e50 	.word	0x08001e50

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08001e50 	.word	0x08001e50

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <OWInit>:
/******************************************************************
 * LOW LEVEL functions for 1-wire bus
 ******************************************************************/

void OWInit(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
    OWSetLink(1);
 8000224:	2390      	movs	r3, #144	; 0x90
 8000226:	05db      	lsls	r3, r3, #23
 8000228:	2280      	movs	r2, #128	; 0x80
 800022a:	00d2      	lsls	r2, r2, #3
 800022c:	619a      	str	r2, [r3, #24]
    OWInitHw();

    OWReset();
 800022e:	f000 f803 	bl	8000238 <OWReset>
}
 8000232:	46c0      	nop			; (mov r8, r8)
 8000234:	46bd      	mov	sp, r7
 8000236:	bd80      	pop	{r7, pc}

08000238 <OWReset>:

uint8_t OWReset(void)
{
 8000238:	b580      	push	{r7, lr}
 800023a:	b084      	sub	sp, #16
 800023c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800023e:	b672      	cpsid	i
    uint8_t result;

    DELAY_G;
    __disable_irq();
    OWSetLink(0);
 8000240:	2390      	movs	r3, #144	; 0x90
 8000242:	05db      	lsls	r3, r3, #23
 8000244:	2280      	movs	r2, #128	; 0x80
 8000246:	00d2      	lsls	r2, r2, #3
 8000248:	629a      	str	r2, [r3, #40]	; 0x28
 800024a:	23ff      	movs	r3, #255	; 0xff
 800024c:	005b      	lsls	r3, r3, #1
 800024e:	603b      	str	r3, [r7, #0]

/* Dumb delay for F030. Tuned for default clock configuration, i.e. 48MHz with 1 wait state. */
__attribute__((always_inline))
inline static void _delay_us(volatile uint32_t micros)
{
    micros = (micros * 19) / 4; /* Go to clock cycles */
 8000250:	683a      	ldr	r2, [r7, #0]
 8000252:	0013      	movs	r3, r2
 8000254:	00db      	lsls	r3, r3, #3
 8000256:	189b      	adds	r3, r3, r2
 8000258:	005b      	lsls	r3, r3, #1
 800025a:	189b      	adds	r3, r3, r2
 800025c:	089b      	lsrs	r3, r3, #2
 800025e:	603b      	str	r3, [r7, #0]
    while (micros--); /* Wait till done */
 8000260:	683b      	ldr	r3, [r7, #0]
 8000262:	1e5a      	subs	r2, r3, #1
 8000264:	603a      	str	r2, [r7, #0]
 8000266:	2b00      	cmp	r3, #0
 8000268:	d1fa      	bne.n	8000260 <OWReset+0x28>
    DELAY_H;
    OWSetLink(1);
 800026a:	2390      	movs	r3, #144	; 0x90
 800026c:	05db      	lsls	r3, r3, #23
 800026e:	2280      	movs	r2, #128	; 0x80
 8000270:	00d2      	lsls	r2, r2, #3
 8000272:	619a      	str	r2, [r3, #24]
 8000274:	2346      	movs	r3, #70	; 0x46
 8000276:	60bb      	str	r3, [r7, #8]
    micros = (micros * 19) / 4; /* Go to clock cycles */
 8000278:	68ba      	ldr	r2, [r7, #8]
 800027a:	0013      	movs	r3, r2
 800027c:	00db      	lsls	r3, r3, #3
 800027e:	189b      	adds	r3, r3, r2
 8000280:	005b      	lsls	r3, r3, #1
 8000282:	189b      	adds	r3, r3, r2
 8000284:	089b      	lsrs	r3, r3, #2
 8000286:	60bb      	str	r3, [r7, #8]
    while (micros--); /* Wait till done */
 8000288:	68bb      	ldr	r3, [r7, #8]
 800028a:	1e5a      	subs	r2, r3, #1
 800028c:	60ba      	str	r2, [r7, #8]
 800028e:	2b00      	cmp	r3, #0
 8000290:	d1fa      	bne.n	8000288 <OWReset+0x50>
    DELAY_I;
    result = OWGetLink();
 8000292:	2390      	movs	r3, #144	; 0x90
 8000294:	05db      	lsls	r3, r3, #23
 8000296:	691a      	ldr	r2, [r3, #16]
 8000298:	2380      	movs	r3, #128	; 0x80
 800029a:	00db      	lsls	r3, r3, #3
 800029c:	4013      	ands	r3, r2
 800029e:	1e5a      	subs	r2, r3, #1
 80002a0:	4193      	sbcs	r3, r2
 80002a2:	b2da      	uxtb	r2, r3
 80002a4:	230f      	movs	r3, #15
 80002a6:	18fb      	adds	r3, r7, r3
 80002a8:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80002aa:	b662      	cpsie	i
 80002ac:	4b0a      	ldr	r3, [pc, #40]	; (80002d8 <OWReset+0xa0>)
 80002ae:	607b      	str	r3, [r7, #4]
    micros = (micros * 19) / 4; /* Go to clock cycles */
 80002b0:	687a      	ldr	r2, [r7, #4]
 80002b2:	0013      	movs	r3, r2
 80002b4:	00db      	lsls	r3, r3, #3
 80002b6:	189b      	adds	r3, r3, r2
 80002b8:	005b      	lsls	r3, r3, #1
 80002ba:	189b      	adds	r3, r3, r2
 80002bc:	089b      	lsrs	r3, r3, #2
 80002be:	607b      	str	r3, [r7, #4]
    while (micros--); /* Wait till done */
 80002c0:	687b      	ldr	r3, [r7, #4]
 80002c2:	1e5a      	subs	r2, r3, #1
 80002c4:	607a      	str	r2, [r7, #4]
 80002c6:	2b00      	cmp	r3, #0
 80002c8:	d1fa      	bne.n	80002c0 <OWReset+0x88>
    __enable_irq();
    DELAY_J;
    return result;
 80002ca:	230f      	movs	r3, #15
 80002cc:	18fb      	adds	r3, r7, r3
 80002ce:	781b      	ldrb	r3, [r3, #0]
}
 80002d0:	0018      	movs	r0, r3
 80002d2:	46bd      	mov	sp, r7
 80002d4:	b004      	add	sp, #16
 80002d6:	bd80      	pop	{r7, pc}
 80002d8:	00000d0c 	.word	0x00000d0c

080002dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002dc:	b580      	push	{r7, lr}
 80002de:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002e0:	f000 fac4 	bl	800086c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002e4:	f000 f826 	bl	8000334 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002e8:	f000 f8c4 	bl	8000474 <MX_GPIO_Init>
  MX_ADC_Init();
 80002ec:	f000 f868 	bl	80003c0 <MX_ADC_Init>
  /* USER CODE BEGIN 2 */

  sct_init();
 80002f0:	f000 f99c 	bl	800062c <sct_init>
  OWInit();
 80002f4:	f7ff ff94 	bl	8000220 <OWInit>

  HAL_ADCEx_Calibration_Start(&hadc);
 80002f8:	4b0c      	ldr	r3, [pc, #48]	; (800032c <main+0x50>)
 80002fa:	0018      	movs	r0, r3
 80002fc:	f000 fe4e 	bl	8000f9c <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start(&hadc);
 8000300:	4b0a      	ldr	r3, [pc, #40]	; (800032c <main+0x50>)
 8000302:	0018      	movs	r0, r3
 8000304:	f000 fc78 	bl	8000bf8 <HAL_ADC_Start>
	  OWReadTemperature(&temp_18b20);	//precteni teploty pomoci funkce z 1wire.c

	  sct_value(temp_18b20 / 10);
*/

	  sct_value(ntc_lookup[HAL_ADC_GetValue(&hadc)]);
 8000308:	4b08      	ldr	r3, [pc, #32]	; (800032c <main+0x50>)
 800030a:	0018      	movs	r0, r3
 800030c:	f000 fcc8 	bl	8000ca0 <HAL_ADC_GetValue>
 8000310:	0002      	movs	r2, r0
 8000312:	4b07      	ldr	r3, [pc, #28]	; (8000330 <main+0x54>)
 8000314:	0052      	lsls	r2, r2, #1
 8000316:	5ed3      	ldrsh	r3, [r2, r3]
 8000318:	b29b      	uxth	r3, r3
 800031a:	0018      	movs	r0, r3
 800031c:	f000 f9a6 	bl	800066c <sct_value>
	  HAL_Delay(500);
 8000320:	23fa      	movs	r3, #250	; 0xfa
 8000322:	005b      	lsls	r3, r3, #1
 8000324:	0018      	movs	r0, r3
 8000326:	f000 fb05 	bl	8000934 <HAL_Delay>
	  sct_value(ntc_lookup[HAL_ADC_GetValue(&hadc)]);
 800032a:	e7ed      	b.n	8000308 <main+0x2c>
 800032c:	20000028 	.word	0x20000028
 8000330:	08001e88 	.word	0x08001e88

08000334 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000334:	b590      	push	{r4, r7, lr}
 8000336:	b091      	sub	sp, #68	; 0x44
 8000338:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800033a:	2410      	movs	r4, #16
 800033c:	193b      	adds	r3, r7, r4
 800033e:	0018      	movs	r0, r3
 8000340:	2330      	movs	r3, #48	; 0x30
 8000342:	001a      	movs	r2, r3
 8000344:	2100      	movs	r1, #0
 8000346:	f001 fd7b 	bl	8001e40 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800034a:	003b      	movs	r3, r7
 800034c:	0018      	movs	r0, r3
 800034e:	2310      	movs	r3, #16
 8000350:	001a      	movs	r2, r3
 8000352:	2100      	movs	r1, #0
 8000354:	f001 fd74 	bl	8001e40 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14;
 8000358:	0021      	movs	r1, r4
 800035a:	187b      	adds	r3, r7, r1
 800035c:	2212      	movs	r2, #18
 800035e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000360:	187b      	adds	r3, r7, r1
 8000362:	2201      	movs	r2, #1
 8000364:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 8000366:	187b      	adds	r3, r7, r1
 8000368:	2201      	movs	r2, #1
 800036a:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800036c:	187b      	adds	r3, r7, r1
 800036e:	2210      	movs	r2, #16
 8000370:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 8000372:	187b      	adds	r3, r7, r1
 8000374:	2210      	movs	r2, #16
 8000376:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000378:	187b      	adds	r3, r7, r1
 800037a:	2200      	movs	r2, #0
 800037c:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800037e:	187b      	adds	r3, r7, r1
 8000380:	0018      	movs	r0, r3
 8000382:	f001 f8eb 	bl	800155c <HAL_RCC_OscConfig>
 8000386:	1e03      	subs	r3, r0, #0
 8000388:	d001      	beq.n	800038e <SystemClock_Config+0x5a>
  {
    Error_Handler();
 800038a:	f000 f915 	bl	80005b8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800038e:	003b      	movs	r3, r7
 8000390:	2207      	movs	r2, #7
 8000392:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000394:	003b      	movs	r3, r7
 8000396:	2200      	movs	r2, #0
 8000398:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800039a:	003b      	movs	r3, r7
 800039c:	2200      	movs	r2, #0
 800039e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80003a0:	003b      	movs	r3, r7
 80003a2:	2200      	movs	r2, #0
 80003a4:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80003a6:	003b      	movs	r3, r7
 80003a8:	2100      	movs	r1, #0
 80003aa:	0018      	movs	r0, r3
 80003ac:	f001 fbf2 	bl	8001b94 <HAL_RCC_ClockConfig>
 80003b0:	1e03      	subs	r3, r0, #0
 80003b2:	d001      	beq.n	80003b8 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80003b4:	f000 f900 	bl	80005b8 <Error_Handler>
  }
}
 80003b8:	46c0      	nop			; (mov r8, r8)
 80003ba:	46bd      	mov	sp, r7
 80003bc:	b011      	add	sp, #68	; 0x44
 80003be:	bd90      	pop	{r4, r7, pc}

080003c0 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 80003c0:	b580      	push	{r7, lr}
 80003c2:	b084      	sub	sp, #16
 80003c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80003c6:	1d3b      	adds	r3, r7, #4
 80003c8:	0018      	movs	r0, r3
 80003ca:	230c      	movs	r3, #12
 80003cc:	001a      	movs	r2, r3
 80003ce:	2100      	movs	r1, #0
 80003d0:	f001 fd36 	bl	8001e40 <memset>
  /* USER CODE BEGIN ADC_Init 1 */

  /* USER CODE END ADC_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 80003d4:	4b25      	ldr	r3, [pc, #148]	; (800046c <MX_ADC_Init+0xac>)
 80003d6:	4a26      	ldr	r2, [pc, #152]	; (8000470 <MX_ADC_Init+0xb0>)
 80003d8:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80003da:	4b24      	ldr	r3, [pc, #144]	; (800046c <MX_ADC_Init+0xac>)
 80003dc:	2200      	movs	r2, #0
 80003de:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_10B;
 80003e0:	4b22      	ldr	r3, [pc, #136]	; (800046c <MX_ADC_Init+0xac>)
 80003e2:	2208      	movs	r2, #8
 80003e4:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80003e6:	4b21      	ldr	r3, [pc, #132]	; (800046c <MX_ADC_Init+0xac>)
 80003e8:	2200      	movs	r2, #0
 80003ea:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 80003ec:	4b1f      	ldr	r3, [pc, #124]	; (800046c <MX_ADC_Init+0xac>)
 80003ee:	2201      	movs	r2, #1
 80003f0:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80003f2:	4b1e      	ldr	r3, [pc, #120]	; (800046c <MX_ADC_Init+0xac>)
 80003f4:	2204      	movs	r2, #4
 80003f6:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 80003f8:	4b1c      	ldr	r3, [pc, #112]	; (800046c <MX_ADC_Init+0xac>)
 80003fa:	2200      	movs	r2, #0
 80003fc:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 80003fe:	4b1b      	ldr	r3, [pc, #108]	; (800046c <MX_ADC_Init+0xac>)
 8000400:	2200      	movs	r2, #0
 8000402:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = ENABLE;
 8000404:	4b19      	ldr	r3, [pc, #100]	; (800046c <MX_ADC_Init+0xac>)
 8000406:	2201      	movs	r2, #1
 8000408:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 800040a:	4b18      	ldr	r3, [pc, #96]	; (800046c <MX_ADC_Init+0xac>)
 800040c:	2200      	movs	r2, #0
 800040e:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000410:	4b16      	ldr	r3, [pc, #88]	; (800046c <MX_ADC_Init+0xac>)
 8000412:	22c2      	movs	r2, #194	; 0xc2
 8000414:	32ff      	adds	r2, #255	; 0xff
 8000416:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000418:	4b14      	ldr	r3, [pc, #80]	; (800046c <MX_ADC_Init+0xac>)
 800041a:	2200      	movs	r2, #0
 800041c:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 800041e:	4b13      	ldr	r3, [pc, #76]	; (800046c <MX_ADC_Init+0xac>)
 8000420:	2224      	movs	r2, #36	; 0x24
 8000422:	2100      	movs	r1, #0
 8000424:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000426:	4b11      	ldr	r3, [pc, #68]	; (800046c <MX_ADC_Init+0xac>)
 8000428:	2200      	movs	r2, #0
 800042a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 800042c:	4b0f      	ldr	r3, [pc, #60]	; (800046c <MX_ADC_Init+0xac>)
 800042e:	0018      	movs	r0, r3
 8000430:	f000 faa2 	bl	8000978 <HAL_ADC_Init>
 8000434:	1e03      	subs	r3, r0, #0
 8000436:	d001      	beq.n	800043c <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 8000438:	f000 f8be 	bl	80005b8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800043c:	1d3b      	adds	r3, r7, #4
 800043e:	2201      	movs	r2, #1
 8000440:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8000442:	1d3b      	adds	r3, r7, #4
 8000444:	2280      	movs	r2, #128	; 0x80
 8000446:	0152      	lsls	r2, r2, #5
 8000448:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 800044a:	1d3b      	adds	r3, r7, #4
 800044c:	2207      	movs	r2, #7
 800044e:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000450:	1d3a      	adds	r2, r7, #4
 8000452:	4b06      	ldr	r3, [pc, #24]	; (800046c <MX_ADC_Init+0xac>)
 8000454:	0011      	movs	r1, r2
 8000456:	0018      	movs	r0, r3
 8000458:	f000 fc2e 	bl	8000cb8 <HAL_ADC_ConfigChannel>
 800045c:	1e03      	subs	r3, r0, #0
 800045e:	d001      	beq.n	8000464 <MX_ADC_Init+0xa4>
  {
    Error_Handler();
 8000460:	f000 f8aa 	bl	80005b8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8000464:	46c0      	nop			; (mov r8, r8)
 8000466:	46bd      	mov	sp, r7
 8000468:	b004      	add	sp, #16
 800046a:	bd80      	pop	{r7, pc}
 800046c:	20000028 	.word	0x20000028
 8000470:	40012400 	.word	0x40012400

08000474 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000474:	b590      	push	{r4, r7, lr}
 8000476:	b089      	sub	sp, #36	; 0x24
 8000478:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800047a:	240c      	movs	r4, #12
 800047c:	193b      	adds	r3, r7, r4
 800047e:	0018      	movs	r0, r3
 8000480:	2314      	movs	r3, #20
 8000482:	001a      	movs	r2, r3
 8000484:	2100      	movs	r1, #0
 8000486:	f001 fcdb 	bl	8001e40 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800048a:	4b47      	ldr	r3, [pc, #284]	; (80005a8 <MX_GPIO_Init+0x134>)
 800048c:	695a      	ldr	r2, [r3, #20]
 800048e:	4b46      	ldr	r3, [pc, #280]	; (80005a8 <MX_GPIO_Init+0x134>)
 8000490:	2180      	movs	r1, #128	; 0x80
 8000492:	0309      	lsls	r1, r1, #12
 8000494:	430a      	orrs	r2, r1
 8000496:	615a      	str	r2, [r3, #20]
 8000498:	4b43      	ldr	r3, [pc, #268]	; (80005a8 <MX_GPIO_Init+0x134>)
 800049a:	695a      	ldr	r2, [r3, #20]
 800049c:	2380      	movs	r3, #128	; 0x80
 800049e:	031b      	lsls	r3, r3, #12
 80004a0:	4013      	ands	r3, r2
 80004a2:	60bb      	str	r3, [r7, #8]
 80004a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004a6:	4b40      	ldr	r3, [pc, #256]	; (80005a8 <MX_GPIO_Init+0x134>)
 80004a8:	695a      	ldr	r2, [r3, #20]
 80004aa:	4b3f      	ldr	r3, [pc, #252]	; (80005a8 <MX_GPIO_Init+0x134>)
 80004ac:	2180      	movs	r1, #128	; 0x80
 80004ae:	0289      	lsls	r1, r1, #10
 80004b0:	430a      	orrs	r2, r1
 80004b2:	615a      	str	r2, [r3, #20]
 80004b4:	4b3c      	ldr	r3, [pc, #240]	; (80005a8 <MX_GPIO_Init+0x134>)
 80004b6:	695a      	ldr	r2, [r3, #20]
 80004b8:	2380      	movs	r3, #128	; 0x80
 80004ba:	029b      	lsls	r3, r3, #10
 80004bc:	4013      	ands	r3, r2
 80004be:	607b      	str	r3, [r7, #4]
 80004c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004c2:	4b39      	ldr	r3, [pc, #228]	; (80005a8 <MX_GPIO_Init+0x134>)
 80004c4:	695a      	ldr	r2, [r3, #20]
 80004c6:	4b38      	ldr	r3, [pc, #224]	; (80005a8 <MX_GPIO_Init+0x134>)
 80004c8:	2180      	movs	r1, #128	; 0x80
 80004ca:	02c9      	lsls	r1, r1, #11
 80004cc:	430a      	orrs	r2, r1
 80004ce:	615a      	str	r2, [r3, #20]
 80004d0:	4b35      	ldr	r3, [pc, #212]	; (80005a8 <MX_GPIO_Init+0x134>)
 80004d2:	695a      	ldr	r2, [r3, #20]
 80004d4:	2380      	movs	r3, #128	; 0x80
 80004d6:	02db      	lsls	r3, r3, #11
 80004d8:	4013      	ands	r3, r2
 80004da:	603b      	str	r3, [r7, #0]
 80004dc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 80004de:	2390      	movs	r3, #144	; 0x90
 80004e0:	05db      	lsls	r3, r3, #23
 80004e2:	2200      	movs	r2, #0
 80004e4:	2110      	movs	r1, #16
 80004e6:	0018      	movs	r0, r3
 80004e8:	f001 f81a 	bl	8001520 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED2_Pin|SCT_NOL_Pin|SCT_CLK_Pin|SCT_SDI_Pin
 80004ec:	492f      	ldr	r1, [pc, #188]	; (80005ac <MX_GPIO_Init+0x138>)
 80004ee:	4b30      	ldr	r3, [pc, #192]	; (80005b0 <MX_GPIO_Init+0x13c>)
 80004f0:	2200      	movs	r2, #0
 80004f2:	0018      	movs	r0, r3
 80004f4:	f001 f814 	bl	8001520 <HAL_GPIO_WritePin>
                          |SCT_NLA_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DQ_GPIO_Port, DQ_Pin, GPIO_PIN_SET);
 80004f8:	2380      	movs	r3, #128	; 0x80
 80004fa:	00d9      	lsls	r1, r3, #3
 80004fc:	2390      	movs	r3, #144	; 0x90
 80004fe:	05db      	lsls	r3, r3, #23
 8000500:	2201      	movs	r2, #1
 8000502:	0018      	movs	r0, r3
 8000504:	f001 f80c 	bl	8001520 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : S2_Pin S1_Pin */
  GPIO_InitStruct.Pin = S2_Pin|S1_Pin;
 8000508:	193b      	adds	r3, r7, r4
 800050a:	2203      	movs	r2, #3
 800050c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800050e:	193b      	adds	r3, r7, r4
 8000510:	2200      	movs	r2, #0
 8000512:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000514:	193b      	adds	r3, r7, r4
 8000516:	2201      	movs	r2, #1
 8000518:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800051a:	193b      	adds	r3, r7, r4
 800051c:	4a25      	ldr	r2, [pc, #148]	; (80005b4 <MX_GPIO_Init+0x140>)
 800051e:	0019      	movs	r1, r3
 8000520:	0010      	movs	r0, r2
 8000522:	f000 fe8d 	bl	8001240 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED1_Pin */
  GPIO_InitStruct.Pin = LED1_Pin;
 8000526:	193b      	adds	r3, r7, r4
 8000528:	2210      	movs	r2, #16
 800052a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800052c:	193b      	adds	r3, r7, r4
 800052e:	2201      	movs	r2, #1
 8000530:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000532:	193b      	adds	r3, r7, r4
 8000534:	2200      	movs	r2, #0
 8000536:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000538:	193b      	adds	r3, r7, r4
 800053a:	2200      	movs	r2, #0
 800053c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 800053e:	193a      	adds	r2, r7, r4
 8000540:	2390      	movs	r3, #144	; 0x90
 8000542:	05db      	lsls	r3, r3, #23
 8000544:	0011      	movs	r1, r2
 8000546:	0018      	movs	r0, r3
 8000548:	f000 fe7a 	bl	8001240 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED2_Pin SCT_NOL_Pin SCT_CLK_Pin SCT_SDI_Pin
                           SCT_NLA_Pin */
  GPIO_InitStruct.Pin = LED2_Pin|SCT_NOL_Pin|SCT_CLK_Pin|SCT_SDI_Pin
 800054c:	0021      	movs	r1, r4
 800054e:	187b      	adds	r3, r7, r1
 8000550:	4a16      	ldr	r2, [pc, #88]	; (80005ac <MX_GPIO_Init+0x138>)
 8000552:	601a      	str	r2, [r3, #0]
                          |SCT_NLA_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000554:	187b      	adds	r3, r7, r1
 8000556:	2201      	movs	r2, #1
 8000558:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800055a:	187b      	adds	r3, r7, r1
 800055c:	2200      	movs	r2, #0
 800055e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000560:	187b      	adds	r3, r7, r1
 8000562:	2200      	movs	r2, #0
 8000564:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000566:	000c      	movs	r4, r1
 8000568:	187b      	adds	r3, r7, r1
 800056a:	4a11      	ldr	r2, [pc, #68]	; (80005b0 <MX_GPIO_Init+0x13c>)
 800056c:	0019      	movs	r1, r3
 800056e:	0010      	movs	r0, r2
 8000570:	f000 fe66 	bl	8001240 <HAL_GPIO_Init>

  /*Configure GPIO pin : DQ_Pin */
  GPIO_InitStruct.Pin = DQ_Pin;
 8000574:	0021      	movs	r1, r4
 8000576:	187b      	adds	r3, r7, r1
 8000578:	2280      	movs	r2, #128	; 0x80
 800057a:	00d2      	lsls	r2, r2, #3
 800057c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800057e:	187b      	adds	r3, r7, r1
 8000580:	2211      	movs	r2, #17
 8000582:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000584:	187b      	adds	r3, r7, r1
 8000586:	2200      	movs	r2, #0
 8000588:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800058a:	187b      	adds	r3, r7, r1
 800058c:	2200      	movs	r2, #0
 800058e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(DQ_GPIO_Port, &GPIO_InitStruct);
 8000590:	187a      	adds	r2, r7, r1
 8000592:	2390      	movs	r3, #144	; 0x90
 8000594:	05db      	lsls	r3, r3, #23
 8000596:	0011      	movs	r1, r2
 8000598:	0018      	movs	r0, r3
 800059a:	f000 fe51 	bl	8001240 <HAL_GPIO_Init>

}
 800059e:	46c0      	nop			; (mov r8, r8)
 80005a0:	46bd      	mov	sp, r7
 80005a2:	b009      	add	sp, #36	; 0x24
 80005a4:	bd90      	pop	{r4, r7, pc}
 80005a6:	46c0      	nop			; (mov r8, r8)
 80005a8:	40021000 	.word	0x40021000
 80005ac:	00000439 	.word	0x00000439
 80005b0:	48000400 	.word	0x48000400
 80005b4:	48000800 	.word	0x48000800

080005b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80005bc:	46c0      	nop			; (mov r8, r8)
 80005be:	46bd      	mov	sp, r7
 80005c0:	bd80      	pop	{r7, pc}
	...

080005c4 <sct_led>:
#define sct_noe(x) do { if (x) GPIOB->BSRR = (1 << 10); else GPIOB->BRR = (1 << 10); } while (0)
#define sct_sdi(x) do { if (x) GPIOB->BSRR = (1 << 4); else GPIOB->BRR = (1 << 4); } while (0)
#define sct_clk(x) do { if (x) GPIOB->BSRR = (1 << 3); else GPIOB->BRR = (1 << 3); } while (0)

void sct_led(uint32_t value)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b084      	sub	sp, #16
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]
	for(uint8_t j = 0; j < 32; j++)
 80005cc:	230f      	movs	r3, #15
 80005ce:	18fb      	adds	r3, r7, r3
 80005d0:	2200      	movs	r2, #0
 80005d2:	701a      	strb	r2, [r3, #0]
 80005d4:	e019      	b.n	800060a <sct_led+0x46>
	{
		sct_sdi(value & 1);
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	2201      	movs	r2, #1
 80005da:	4013      	ands	r3, r2
 80005dc:	d003      	beq.n	80005e6 <sct_led+0x22>
 80005de:	4b12      	ldr	r3, [pc, #72]	; (8000628 <sct_led+0x64>)
 80005e0:	2210      	movs	r2, #16
 80005e2:	619a      	str	r2, [r3, #24]
 80005e4:	e002      	b.n	80005ec <sct_led+0x28>
 80005e6:	4b10      	ldr	r3, [pc, #64]	; (8000628 <sct_led+0x64>)
 80005e8:	2210      	movs	r2, #16
 80005ea:	629a      	str	r2, [r3, #40]	; 0x28
		value >>=1;
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	085b      	lsrs	r3, r3, #1
 80005f0:	607b      	str	r3, [r7, #4]
		sct_clk(1);
 80005f2:	4b0d      	ldr	r3, [pc, #52]	; (8000628 <sct_led+0x64>)
 80005f4:	2208      	movs	r2, #8
 80005f6:	619a      	str	r2, [r3, #24]
		sct_clk(0);
 80005f8:	4b0b      	ldr	r3, [pc, #44]	; (8000628 <sct_led+0x64>)
 80005fa:	2208      	movs	r2, #8
 80005fc:	629a      	str	r2, [r3, #40]	; 0x28
	for(uint8_t j = 0; j < 32; j++)
 80005fe:	210f      	movs	r1, #15
 8000600:	187b      	adds	r3, r7, r1
 8000602:	781a      	ldrb	r2, [r3, #0]
 8000604:	187b      	adds	r3, r7, r1
 8000606:	3201      	adds	r2, #1
 8000608:	701a      	strb	r2, [r3, #0]
 800060a:	230f      	movs	r3, #15
 800060c:	18fb      	adds	r3, r7, r3
 800060e:	781b      	ldrb	r3, [r3, #0]
 8000610:	2b1f      	cmp	r3, #31
 8000612:	d9e0      	bls.n	80005d6 <sct_led+0x12>
	}
	sct_nla(1);		// povoleni latch
 8000614:	4b04      	ldr	r3, [pc, #16]	; (8000628 <sct_led+0x64>)
 8000616:	2220      	movs	r2, #32
 8000618:	619a      	str	r2, [r3, #24]
	sct_nla(0);
 800061a:	4b03      	ldr	r3, [pc, #12]	; (8000628 <sct_led+0x64>)
 800061c:	2220      	movs	r2, #32
 800061e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000620:	46c0      	nop			; (mov r8, r8)
 8000622:	46bd      	mov	sp, r7
 8000624:	b004      	add	sp, #16
 8000626:	bd80      	pop	{r7, pc}
 8000628:	48000400 	.word	0x48000400

0800062c <sct_init>:

void sct_init(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	af00      	add	r7, sp, #0
	RCC->AHBENR |= RCC_AHBENR_GPIOBEN;
 8000630:	4b0b      	ldr	r3, [pc, #44]	; (8000660 <sct_init+0x34>)
 8000632:	695a      	ldr	r2, [r3, #20]
 8000634:	4b0a      	ldr	r3, [pc, #40]	; (8000660 <sct_init+0x34>)
 8000636:	2180      	movs	r1, #128	; 0x80
 8000638:	02c9      	lsls	r1, r1, #11
 800063a:	430a      	orrs	r2, r1
 800063c:	615a      	str	r2, [r3, #20]
	GPIOB->MODER |= GPIO_MODER_MODER3_0 | GPIO_MODER_MODER4_0 | GPIO_MODER_MODER5_0 | GPIO_MODER_MODER10_0;
 800063e:	4b09      	ldr	r3, [pc, #36]	; (8000664 <sct_init+0x38>)
 8000640:	681a      	ldr	r2, [r3, #0]
 8000642:	4b08      	ldr	r3, [pc, #32]	; (8000664 <sct_init+0x38>)
 8000644:	4908      	ldr	r1, [pc, #32]	; (8000668 <sct_init+0x3c>)
 8000646:	430a      	orrs	r2, r1
 8000648:	601a      	str	r2, [r3, #0]
	sct_noe(0);
 800064a:	4b06      	ldr	r3, [pc, #24]	; (8000664 <sct_init+0x38>)
 800064c:	2280      	movs	r2, #128	; 0x80
 800064e:	00d2      	lsls	r2, r2, #3
 8000650:	629a      	str	r2, [r3, #40]	; 0x28
	sct_led(0);
 8000652:	2000      	movs	r0, #0
 8000654:	f7ff ffb6 	bl	80005c4 <sct_led>
}
 8000658:	46c0      	nop			; (mov r8, r8)
 800065a:	46bd      	mov	sp, r7
 800065c:	bd80      	pop	{r7, pc}
 800065e:	46c0      	nop			; (mov r8, r8)
 8000660:	40021000 	.word	0x40021000
 8000664:	48000400 	.word	0x48000400
 8000668:	00100540 	.word	0x00100540

0800066c <sct_value>:

void sct_value(uint16_t value)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b084      	sub	sp, #16
 8000670:	af00      	add	r7, sp, #0
 8000672:	0002      	movs	r2, r0
 8000674:	1dbb      	adds	r3, r7, #6
 8000676:	801a      	strh	r2, [r3, #0]
		0b0111000000001111 << 0,
		0b0110000000001111 << 0,
	},
	};

	uint32_t reg =0;
 8000678:	2300      	movs	r3, #0
 800067a:	60fb      	str	r3, [r7, #12]

	reg |= reg_value[0][value / 100 % 10];		//stovky
 800067c:	1dbb      	adds	r3, r7, #6
 800067e:	881b      	ldrh	r3, [r3, #0]
 8000680:	2164      	movs	r1, #100	; 0x64
 8000682:	0018      	movs	r0, r3
 8000684:	f7ff fd40 	bl	8000108 <__udivsi3>
 8000688:	0003      	movs	r3, r0
 800068a:	b29b      	uxth	r3, r3
 800068c:	210a      	movs	r1, #10
 800068e:	0018      	movs	r0, r3
 8000690:	f7ff fdc0 	bl	8000214 <__aeabi_uidivmod>
 8000694:	000b      	movs	r3, r1
 8000696:	b29b      	uxth	r3, r3
 8000698:	001a      	movs	r2, r3
 800069a:	4b1a      	ldr	r3, [pc, #104]	; (8000704 <sct_value+0x98>)
 800069c:	0092      	lsls	r2, r2, #2
 800069e:	58d3      	ldr	r3, [r2, r3]
 80006a0:	68fa      	ldr	r2, [r7, #12]
 80006a2:	4313      	orrs	r3, r2
 80006a4:	60fb      	str	r3, [r7, #12]
	reg |= reg_value[1][value / 10 % 10];		//desitky
 80006a6:	1dbb      	adds	r3, r7, #6
 80006a8:	881b      	ldrh	r3, [r3, #0]
 80006aa:	210a      	movs	r1, #10
 80006ac:	0018      	movs	r0, r3
 80006ae:	f7ff fd2b 	bl	8000108 <__udivsi3>
 80006b2:	0003      	movs	r3, r0
 80006b4:	b29b      	uxth	r3, r3
 80006b6:	210a      	movs	r1, #10
 80006b8:	0018      	movs	r0, r3
 80006ba:	f7ff fdab 	bl	8000214 <__aeabi_uidivmod>
 80006be:	000b      	movs	r3, r1
 80006c0:	b29b      	uxth	r3, r3
 80006c2:	001a      	movs	r2, r3
 80006c4:	4b0f      	ldr	r3, [pc, #60]	; (8000704 <sct_value+0x98>)
 80006c6:	320a      	adds	r2, #10
 80006c8:	0092      	lsls	r2, r2, #2
 80006ca:	58d3      	ldr	r3, [r2, r3]
 80006cc:	68fa      	ldr	r2, [r7, #12]
 80006ce:	4313      	orrs	r3, r2
 80006d0:	60fb      	str	r3, [r7, #12]
	reg |= reg_value[2][value / 1 % 10];		//jednotky
 80006d2:	1dbb      	adds	r3, r7, #6
 80006d4:	881b      	ldrh	r3, [r3, #0]
 80006d6:	210a      	movs	r1, #10
 80006d8:	0018      	movs	r0, r3
 80006da:	f7ff fd9b 	bl	8000214 <__aeabi_uidivmod>
 80006de:	000b      	movs	r3, r1
 80006e0:	b29b      	uxth	r3, r3
 80006e2:	001a      	movs	r2, r3
 80006e4:	4b07      	ldr	r3, [pc, #28]	; (8000704 <sct_value+0x98>)
 80006e6:	3214      	adds	r2, #20
 80006e8:	0092      	lsls	r2, r2, #2
 80006ea:	58d3      	ldr	r3, [r2, r3]
 80006ec:	68fa      	ldr	r2, [r7, #12]
 80006ee:	4313      	orrs	r3, r2
 80006f0:	60fb      	str	r3, [r7, #12]

	sct_led(reg);
 80006f2:	68fb      	ldr	r3, [r7, #12]
 80006f4:	0018      	movs	r0, r3
 80006f6:	f7ff ff65 	bl	80005c4 <sct_led>
}
 80006fa:	46c0      	nop			; (mov r8, r8)
 80006fc:	46bd      	mov	sp, r7
 80006fe:	b004      	add	sp, #16
 8000700:	bd80      	pop	{r7, pc}
 8000702:	46c0      	nop			; (mov r8, r8)
 8000704:	08002688 	.word	0x08002688

08000708 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b082      	sub	sp, #8
 800070c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800070e:	4b0f      	ldr	r3, [pc, #60]	; (800074c <HAL_MspInit+0x44>)
 8000710:	699a      	ldr	r2, [r3, #24]
 8000712:	4b0e      	ldr	r3, [pc, #56]	; (800074c <HAL_MspInit+0x44>)
 8000714:	2101      	movs	r1, #1
 8000716:	430a      	orrs	r2, r1
 8000718:	619a      	str	r2, [r3, #24]
 800071a:	4b0c      	ldr	r3, [pc, #48]	; (800074c <HAL_MspInit+0x44>)
 800071c:	699b      	ldr	r3, [r3, #24]
 800071e:	2201      	movs	r2, #1
 8000720:	4013      	ands	r3, r2
 8000722:	607b      	str	r3, [r7, #4]
 8000724:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000726:	4b09      	ldr	r3, [pc, #36]	; (800074c <HAL_MspInit+0x44>)
 8000728:	69da      	ldr	r2, [r3, #28]
 800072a:	4b08      	ldr	r3, [pc, #32]	; (800074c <HAL_MspInit+0x44>)
 800072c:	2180      	movs	r1, #128	; 0x80
 800072e:	0549      	lsls	r1, r1, #21
 8000730:	430a      	orrs	r2, r1
 8000732:	61da      	str	r2, [r3, #28]
 8000734:	4b05      	ldr	r3, [pc, #20]	; (800074c <HAL_MspInit+0x44>)
 8000736:	69da      	ldr	r2, [r3, #28]
 8000738:	2380      	movs	r3, #128	; 0x80
 800073a:	055b      	lsls	r3, r3, #21
 800073c:	4013      	ands	r3, r2
 800073e:	603b      	str	r3, [r7, #0]
 8000740:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000742:	46c0      	nop			; (mov r8, r8)
 8000744:	46bd      	mov	sp, r7
 8000746:	b002      	add	sp, #8
 8000748:	bd80      	pop	{r7, pc}
 800074a:	46c0      	nop			; (mov r8, r8)
 800074c:	40021000 	.word	0x40021000

08000750 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b08a      	sub	sp, #40	; 0x28
 8000754:	af00      	add	r7, sp, #0
 8000756:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000758:	2314      	movs	r3, #20
 800075a:	18fb      	adds	r3, r7, r3
 800075c:	0018      	movs	r0, r3
 800075e:	2314      	movs	r3, #20
 8000760:	001a      	movs	r2, r3
 8000762:	2100      	movs	r1, #0
 8000764:	f001 fb6c 	bl	8001e40 <memset>
  if(hadc->Instance==ADC1)
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	4a19      	ldr	r2, [pc, #100]	; (80007d4 <HAL_ADC_MspInit+0x84>)
 800076e:	4293      	cmp	r3, r2
 8000770:	d12c      	bne.n	80007cc <HAL_ADC_MspInit+0x7c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000772:	4b19      	ldr	r3, [pc, #100]	; (80007d8 <HAL_ADC_MspInit+0x88>)
 8000774:	699a      	ldr	r2, [r3, #24]
 8000776:	4b18      	ldr	r3, [pc, #96]	; (80007d8 <HAL_ADC_MspInit+0x88>)
 8000778:	2180      	movs	r1, #128	; 0x80
 800077a:	0089      	lsls	r1, r1, #2
 800077c:	430a      	orrs	r2, r1
 800077e:	619a      	str	r2, [r3, #24]
 8000780:	4b15      	ldr	r3, [pc, #84]	; (80007d8 <HAL_ADC_MspInit+0x88>)
 8000782:	699a      	ldr	r2, [r3, #24]
 8000784:	2380      	movs	r3, #128	; 0x80
 8000786:	009b      	lsls	r3, r3, #2
 8000788:	4013      	ands	r3, r2
 800078a:	613b      	str	r3, [r7, #16]
 800078c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800078e:	4b12      	ldr	r3, [pc, #72]	; (80007d8 <HAL_ADC_MspInit+0x88>)
 8000790:	695a      	ldr	r2, [r3, #20]
 8000792:	4b11      	ldr	r3, [pc, #68]	; (80007d8 <HAL_ADC_MspInit+0x88>)
 8000794:	2180      	movs	r1, #128	; 0x80
 8000796:	0289      	lsls	r1, r1, #10
 8000798:	430a      	orrs	r2, r1
 800079a:	615a      	str	r2, [r3, #20]
 800079c:	4b0e      	ldr	r3, [pc, #56]	; (80007d8 <HAL_ADC_MspInit+0x88>)
 800079e:	695a      	ldr	r2, [r3, #20]
 80007a0:	2380      	movs	r3, #128	; 0x80
 80007a2:	029b      	lsls	r3, r3, #10
 80007a4:	4013      	ands	r3, r2
 80007a6:	60fb      	str	r3, [r7, #12]
 80007a8:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PA1     ------> ADC_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80007aa:	2114      	movs	r1, #20
 80007ac:	187b      	adds	r3, r7, r1
 80007ae:	2202      	movs	r2, #2
 80007b0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80007b2:	187b      	adds	r3, r7, r1
 80007b4:	2203      	movs	r2, #3
 80007b6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b8:	187b      	adds	r3, r7, r1
 80007ba:	2200      	movs	r2, #0
 80007bc:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007be:	187a      	adds	r2, r7, r1
 80007c0:	2390      	movs	r3, #144	; 0x90
 80007c2:	05db      	lsls	r3, r3, #23
 80007c4:	0011      	movs	r1, r2
 80007c6:	0018      	movs	r0, r3
 80007c8:	f000 fd3a 	bl	8001240 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80007cc:	46c0      	nop			; (mov r8, r8)
 80007ce:	46bd      	mov	sp, r7
 80007d0:	b00a      	add	sp, #40	; 0x28
 80007d2:	bd80      	pop	{r7, pc}
 80007d4:	40012400 	.word	0x40012400
 80007d8:	40021000 	.word	0x40021000

080007dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80007e0:	46c0      	nop			; (mov r8, r8)
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bd80      	pop	{r7, pc}

080007e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007e6:	b580      	push	{r7, lr}
 80007e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007ea:	e7fe      	b.n	80007ea <HardFault_Handler+0x4>

080007ec <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80007f0:	46c0      	nop			; (mov r8, r8)
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bd80      	pop	{r7, pc}

080007f6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007f6:	b580      	push	{r7, lr}
 80007f8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007fa:	46c0      	nop			; (mov r8, r8)
 80007fc:	46bd      	mov	sp, r7
 80007fe:	bd80      	pop	{r7, pc}

08000800 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000804:	f000 f87a 	bl	80008fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000808:	46c0      	nop			; (mov r8, r8)
 800080a:	46bd      	mov	sp, r7
 800080c:	bd80      	pop	{r7, pc}

0800080e <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800080e:	b580      	push	{r7, lr}
 8000810:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000812:	46c0      	nop			; (mov r8, r8)
 8000814:	46bd      	mov	sp, r7
 8000816:	bd80      	pop	{r7, pc}

08000818 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000818:	480d      	ldr	r0, [pc, #52]	; (8000850 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800081a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800081c:	480d      	ldr	r0, [pc, #52]	; (8000854 <LoopForever+0x6>)
  ldr r1, =_edata
 800081e:	490e      	ldr	r1, [pc, #56]	; (8000858 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000820:	4a0e      	ldr	r2, [pc, #56]	; (800085c <LoopForever+0xe>)
  movs r3, #0
 8000822:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000824:	e002      	b.n	800082c <LoopCopyDataInit>

08000826 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000826:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000828:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800082a:	3304      	adds	r3, #4

0800082c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800082c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800082e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000830:	d3f9      	bcc.n	8000826 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000832:	4a0b      	ldr	r2, [pc, #44]	; (8000860 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000834:	4c0b      	ldr	r4, [pc, #44]	; (8000864 <LoopForever+0x16>)
  movs r3, #0
 8000836:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000838:	e001      	b.n	800083e <LoopFillZerobss>

0800083a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800083a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800083c:	3204      	adds	r2, #4

0800083e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800083e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000840:	d3fb      	bcc.n	800083a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000842:	f7ff ffe4 	bl	800080e <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000846:	f001 fad7 	bl	8001df8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800084a:	f7ff fd47 	bl	80002dc <main>

0800084e <LoopForever>:

LoopForever:
    b LoopForever
 800084e:	e7fe      	b.n	800084e <LoopForever>
  ldr   r0, =_estack
 8000850:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000854:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000858:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800085c:	08002718 	.word	0x08002718
  ldr r2, =_sbss
 8000860:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000864:	2000006c 	.word	0x2000006c

08000868 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000868:	e7fe      	b.n	8000868 <ADC1_IRQHandler>
	...

0800086c <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000870:	4b07      	ldr	r3, [pc, #28]	; (8000890 <HAL_Init+0x24>)
 8000872:	681a      	ldr	r2, [r3, #0]
 8000874:	4b06      	ldr	r3, [pc, #24]	; (8000890 <HAL_Init+0x24>)
 8000876:	2110      	movs	r1, #16
 8000878:	430a      	orrs	r2, r1
 800087a:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 800087c:	2000      	movs	r0, #0
 800087e:	f000 f809 	bl	8000894 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000882:	f7ff ff41 	bl	8000708 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000886:	2300      	movs	r3, #0
}
 8000888:	0018      	movs	r0, r3
 800088a:	46bd      	mov	sp, r7
 800088c:	bd80      	pop	{r7, pc}
 800088e:	46c0      	nop			; (mov r8, r8)
 8000890:	40022000 	.word	0x40022000

08000894 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000894:	b590      	push	{r4, r7, lr}
 8000896:	b083      	sub	sp, #12
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800089c:	4b14      	ldr	r3, [pc, #80]	; (80008f0 <HAL_InitTick+0x5c>)
 800089e:	681c      	ldr	r4, [r3, #0]
 80008a0:	4b14      	ldr	r3, [pc, #80]	; (80008f4 <HAL_InitTick+0x60>)
 80008a2:	781b      	ldrb	r3, [r3, #0]
 80008a4:	0019      	movs	r1, r3
 80008a6:	23fa      	movs	r3, #250	; 0xfa
 80008a8:	0098      	lsls	r0, r3, #2
 80008aa:	f7ff fc2d 	bl	8000108 <__udivsi3>
 80008ae:	0003      	movs	r3, r0
 80008b0:	0019      	movs	r1, r3
 80008b2:	0020      	movs	r0, r4
 80008b4:	f7ff fc28 	bl	8000108 <__udivsi3>
 80008b8:	0003      	movs	r3, r0
 80008ba:	0018      	movs	r0, r3
 80008bc:	f000 fcb3 	bl	8001226 <HAL_SYSTICK_Config>
 80008c0:	1e03      	subs	r3, r0, #0
 80008c2:	d001      	beq.n	80008c8 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80008c4:	2301      	movs	r3, #1
 80008c6:	e00f      	b.n	80008e8 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	2b03      	cmp	r3, #3
 80008cc:	d80b      	bhi.n	80008e6 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008ce:	6879      	ldr	r1, [r7, #4]
 80008d0:	2301      	movs	r3, #1
 80008d2:	425b      	negs	r3, r3
 80008d4:	2200      	movs	r2, #0
 80008d6:	0018      	movs	r0, r3
 80008d8:	f000 fc90 	bl	80011fc <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80008dc:	4b06      	ldr	r3, [pc, #24]	; (80008f8 <HAL_InitTick+0x64>)
 80008de:	687a      	ldr	r2, [r7, #4]
 80008e0:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 80008e2:	2300      	movs	r3, #0
 80008e4:	e000      	b.n	80008e8 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80008e6:	2301      	movs	r3, #1
}
 80008e8:	0018      	movs	r0, r3
 80008ea:	46bd      	mov	sp, r7
 80008ec:	b003      	add	sp, #12
 80008ee:	bd90      	pop	{r4, r7, pc}
 80008f0:	20000000 	.word	0x20000000
 80008f4:	20000008 	.word	0x20000008
 80008f8:	20000004 	.word	0x20000004

080008fc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000900:	4b05      	ldr	r3, [pc, #20]	; (8000918 <HAL_IncTick+0x1c>)
 8000902:	781b      	ldrb	r3, [r3, #0]
 8000904:	001a      	movs	r2, r3
 8000906:	4b05      	ldr	r3, [pc, #20]	; (800091c <HAL_IncTick+0x20>)
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	18d2      	adds	r2, r2, r3
 800090c:	4b03      	ldr	r3, [pc, #12]	; (800091c <HAL_IncTick+0x20>)
 800090e:	601a      	str	r2, [r3, #0]
}
 8000910:	46c0      	nop			; (mov r8, r8)
 8000912:	46bd      	mov	sp, r7
 8000914:	bd80      	pop	{r7, pc}
 8000916:	46c0      	nop			; (mov r8, r8)
 8000918:	20000008 	.word	0x20000008
 800091c:	20000068 	.word	0x20000068

08000920 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	af00      	add	r7, sp, #0
  return uwTick;
 8000924:	4b02      	ldr	r3, [pc, #8]	; (8000930 <HAL_GetTick+0x10>)
 8000926:	681b      	ldr	r3, [r3, #0]
}
 8000928:	0018      	movs	r0, r3
 800092a:	46bd      	mov	sp, r7
 800092c:	bd80      	pop	{r7, pc}
 800092e:	46c0      	nop			; (mov r8, r8)
 8000930:	20000068 	.word	0x20000068

08000934 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b084      	sub	sp, #16
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800093c:	f7ff fff0 	bl	8000920 <HAL_GetTick>
 8000940:	0003      	movs	r3, r0
 8000942:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000948:	68fb      	ldr	r3, [r7, #12]
 800094a:	3301      	adds	r3, #1
 800094c:	d005      	beq.n	800095a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800094e:	4b09      	ldr	r3, [pc, #36]	; (8000974 <HAL_Delay+0x40>)
 8000950:	781b      	ldrb	r3, [r3, #0]
 8000952:	001a      	movs	r2, r3
 8000954:	68fb      	ldr	r3, [r7, #12]
 8000956:	189b      	adds	r3, r3, r2
 8000958:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800095a:	46c0      	nop			; (mov r8, r8)
 800095c:	f7ff ffe0 	bl	8000920 <HAL_GetTick>
 8000960:	0002      	movs	r2, r0
 8000962:	68bb      	ldr	r3, [r7, #8]
 8000964:	1ad3      	subs	r3, r2, r3
 8000966:	68fa      	ldr	r2, [r7, #12]
 8000968:	429a      	cmp	r2, r3
 800096a:	d8f7      	bhi.n	800095c <HAL_Delay+0x28>
  {
  }
}
 800096c:	46c0      	nop			; (mov r8, r8)
 800096e:	46bd      	mov	sp, r7
 8000970:	b004      	add	sp, #16
 8000972:	bd80      	pop	{r7, pc}
 8000974:	20000008 	.word	0x20000008

08000978 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b084      	sub	sp, #16
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000980:	230f      	movs	r3, #15
 8000982:	18fb      	adds	r3, r7, r3
 8000984:	2200      	movs	r2, #0
 8000986:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 8000988:	2300      	movs	r3, #0
 800098a:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	2b00      	cmp	r3, #0
 8000990:	d101      	bne.n	8000996 <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8000992:	2301      	movs	r3, #1
 8000994:	e125      	b.n	8000be2 <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800099a:	2b00      	cmp	r3, #0
 800099c:	d10a      	bne.n	80009b4 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	2200      	movs	r2, #0
 80009a2:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	2234      	movs	r2, #52	; 0x34
 80009a8:	2100      	movs	r1, #0
 80009aa:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	0018      	movs	r0, r3
 80009b0:	f7ff fece 	bl	8000750 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80009b8:	2210      	movs	r2, #16
 80009ba:	4013      	ands	r3, r2
 80009bc:	d000      	beq.n	80009c0 <HAL_ADC_Init+0x48>
 80009be:	e103      	b.n	8000bc8 <HAL_ADC_Init+0x250>
 80009c0:	230f      	movs	r3, #15
 80009c2:	18fb      	adds	r3, r7, r3
 80009c4:	781b      	ldrb	r3, [r3, #0]
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d000      	beq.n	80009cc <HAL_ADC_Init+0x54>
 80009ca:	e0fd      	b.n	8000bc8 <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	689b      	ldr	r3, [r3, #8]
 80009d2:	2204      	movs	r2, #4
 80009d4:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 80009d6:	d000      	beq.n	80009da <HAL_ADC_Init+0x62>
 80009d8:	e0f6      	b.n	8000bc8 <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80009de:	4a83      	ldr	r2, [pc, #524]	; (8000bec <HAL_ADC_Init+0x274>)
 80009e0:	4013      	ands	r3, r2
 80009e2:	2202      	movs	r2, #2
 80009e4:	431a      	orrs	r2, r3
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	689b      	ldr	r3, [r3, #8]
 80009f0:	2203      	movs	r2, #3
 80009f2:	4013      	ands	r3, r2
 80009f4:	2b01      	cmp	r3, #1
 80009f6:	d112      	bne.n	8000a1e <HAL_ADC_Init+0xa6>
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	2201      	movs	r2, #1
 8000a00:	4013      	ands	r3, r2
 8000a02:	2b01      	cmp	r3, #1
 8000a04:	d009      	beq.n	8000a1a <HAL_ADC_Init+0xa2>
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	68da      	ldr	r2, [r3, #12]
 8000a0c:	2380      	movs	r3, #128	; 0x80
 8000a0e:	021b      	lsls	r3, r3, #8
 8000a10:	401a      	ands	r2, r3
 8000a12:	2380      	movs	r3, #128	; 0x80
 8000a14:	021b      	lsls	r3, r3, #8
 8000a16:	429a      	cmp	r2, r3
 8000a18:	d101      	bne.n	8000a1e <HAL_ADC_Init+0xa6>
 8000a1a:	2301      	movs	r3, #1
 8000a1c:	e000      	b.n	8000a20 <HAL_ADC_Init+0xa8>
 8000a1e:	2300      	movs	r3, #0
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d116      	bne.n	8000a52 <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	68db      	ldr	r3, [r3, #12]
 8000a2a:	2218      	movs	r2, #24
 8000a2c:	4393      	bics	r3, r2
 8000a2e:	0019      	movs	r1, r3
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	689a      	ldr	r2, [r3, #8]
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	430a      	orrs	r2, r1
 8000a3a:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	691b      	ldr	r3, [r3, #16]
 8000a42:	009b      	lsls	r3, r3, #2
 8000a44:	0899      	lsrs	r1, r3, #2
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	685a      	ldr	r2, [r3, #4]
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	430a      	orrs	r2, r1
 8000a50:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	68da      	ldr	r2, [r3, #12]
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	4964      	ldr	r1, [pc, #400]	; (8000bf0 <HAL_ADC_Init+0x278>)
 8000a5e:	400a      	ands	r2, r1
 8000a60:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	7e1b      	ldrb	r3, [r3, #24]
 8000a66:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	7e5b      	ldrb	r3, [r3, #25]
 8000a6c:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000a6e:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	7e9b      	ldrb	r3, [r3, #26]
 8000a74:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8000a76:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a7c:	2b01      	cmp	r3, #1
 8000a7e:	d002      	beq.n	8000a86 <HAL_ADC_Init+0x10e>
 8000a80:	2380      	movs	r3, #128	; 0x80
 8000a82:	015b      	lsls	r3, r3, #5
 8000a84:	e000      	b.n	8000a88 <HAL_ADC_Init+0x110>
 8000a86:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000a88:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8000a8e:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	691b      	ldr	r3, [r3, #16]
 8000a94:	2b02      	cmp	r3, #2
 8000a96:	d101      	bne.n	8000a9c <HAL_ADC_Init+0x124>
 8000a98:	2304      	movs	r3, #4
 8000a9a:	e000      	b.n	8000a9e <HAL_ADC_Init+0x126>
 8000a9c:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 8000a9e:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	2124      	movs	r1, #36	; 0x24
 8000aa4:	5c5b      	ldrb	r3, [r3, r1]
 8000aa6:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8000aa8:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000aaa:	68ba      	ldr	r2, [r7, #8]
 8000aac:	4313      	orrs	r3, r2
 8000aae:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	7edb      	ldrb	r3, [r3, #27]
 8000ab4:	2b01      	cmp	r3, #1
 8000ab6:	d115      	bne.n	8000ae4 <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	7e9b      	ldrb	r3, [r3, #26]
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d105      	bne.n	8000acc <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8000ac0:	68bb      	ldr	r3, [r7, #8]
 8000ac2:	2280      	movs	r2, #128	; 0x80
 8000ac4:	0252      	lsls	r2, r2, #9
 8000ac6:	4313      	orrs	r3, r2
 8000ac8:	60bb      	str	r3, [r7, #8]
 8000aca:	e00b      	b.n	8000ae4 <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000ad0:	2220      	movs	r2, #32
 8000ad2:	431a      	orrs	r2, r3
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000adc:	2201      	movs	r2, #1
 8000ade:	431a      	orrs	r2, r3
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	69da      	ldr	r2, [r3, #28]
 8000ae8:	23c2      	movs	r3, #194	; 0xc2
 8000aea:	33ff      	adds	r3, #255	; 0xff
 8000aec:	429a      	cmp	r2, r3
 8000aee:	d007      	beq.n	8000b00 <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8000af8:	4313      	orrs	r3, r2
 8000afa:	68ba      	ldr	r2, [r7, #8]
 8000afc:	4313      	orrs	r3, r2
 8000afe:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	68d9      	ldr	r1, [r3, #12]
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	68ba      	ldr	r2, [r7, #8]
 8000b0c:	430a      	orrs	r2, r1
 8000b0e:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000b14:	2380      	movs	r3, #128	; 0x80
 8000b16:	055b      	lsls	r3, r3, #21
 8000b18:	429a      	cmp	r2, r3
 8000b1a:	d01b      	beq.n	8000b54 <HAL_ADC_Init+0x1dc>
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b20:	2b01      	cmp	r3, #1
 8000b22:	d017      	beq.n	8000b54 <HAL_ADC_Init+0x1dc>
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b28:	2b02      	cmp	r3, #2
 8000b2a:	d013      	beq.n	8000b54 <HAL_ADC_Init+0x1dc>
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b30:	2b03      	cmp	r3, #3
 8000b32:	d00f      	beq.n	8000b54 <HAL_ADC_Init+0x1dc>
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b38:	2b04      	cmp	r3, #4
 8000b3a:	d00b      	beq.n	8000b54 <HAL_ADC_Init+0x1dc>
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b40:	2b05      	cmp	r3, #5
 8000b42:	d007      	beq.n	8000b54 <HAL_ADC_Init+0x1dc>
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b48:	2b06      	cmp	r3, #6
 8000b4a:	d003      	beq.n	8000b54 <HAL_ADC_Init+0x1dc>
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b50:	2b07      	cmp	r3, #7
 8000b52:	d112      	bne.n	8000b7a <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	695a      	ldr	r2, [r3, #20]
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	2107      	movs	r1, #7
 8000b60:	438a      	bics	r2, r1
 8000b62:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	6959      	ldr	r1, [r3, #20]
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b6e:	2207      	movs	r2, #7
 8000b70:	401a      	ands	r2, r3
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	430a      	orrs	r2, r1
 8000b78:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	68db      	ldr	r3, [r3, #12]
 8000b80:	4a1c      	ldr	r2, [pc, #112]	; (8000bf4 <HAL_ADC_Init+0x27c>)
 8000b82:	4013      	ands	r3, r2
 8000b84:	68ba      	ldr	r2, [r7, #8]
 8000b86:	429a      	cmp	r2, r3
 8000b88:	d10b      	bne.n	8000ba2 <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000b94:	2203      	movs	r2, #3
 8000b96:	4393      	bics	r3, r2
 8000b98:	2201      	movs	r2, #1
 8000b9a:	431a      	orrs	r2, r3
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8000ba0:	e01c      	b.n	8000bdc <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000ba6:	2212      	movs	r2, #18
 8000ba8:	4393      	bics	r3, r2
 8000baa:	2210      	movs	r2, #16
 8000bac:	431a      	orrs	r2, r3
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000bb6:	2201      	movs	r2, #1
 8000bb8:	431a      	orrs	r2, r3
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 8000bbe:	230f      	movs	r3, #15
 8000bc0:	18fb      	adds	r3, r7, r3
 8000bc2:	2201      	movs	r2, #1
 8000bc4:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8000bc6:	e009      	b.n	8000bdc <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000bcc:	2210      	movs	r2, #16
 8000bce:	431a      	orrs	r2, r3
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 8000bd4:	230f      	movs	r3, #15
 8000bd6:	18fb      	adds	r3, r7, r3
 8000bd8:	2201      	movs	r2, #1
 8000bda:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000bdc:	230f      	movs	r3, #15
 8000bde:	18fb      	adds	r3, r7, r3
 8000be0:	781b      	ldrb	r3, [r3, #0]
}
 8000be2:	0018      	movs	r0, r3
 8000be4:	46bd      	mov	sp, r7
 8000be6:	b004      	add	sp, #16
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	46c0      	nop			; (mov r8, r8)
 8000bec:	fffffefd 	.word	0xfffffefd
 8000bf0:	fffe0219 	.word	0xfffe0219
 8000bf4:	833fffe7 	.word	0x833fffe7

08000bf8 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000bf8:	b590      	push	{r4, r7, lr}
 8000bfa:	b085      	sub	sp, #20
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000c00:	230f      	movs	r3, #15
 8000c02:	18fb      	adds	r3, r7, r3
 8000c04:	2200      	movs	r2, #0
 8000c06:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	689b      	ldr	r3, [r3, #8]
 8000c0e:	2204      	movs	r2, #4
 8000c10:	4013      	ands	r3, r2
 8000c12:	d138      	bne.n	8000c86 <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	2234      	movs	r2, #52	; 0x34
 8000c18:	5c9b      	ldrb	r3, [r3, r2]
 8000c1a:	2b01      	cmp	r3, #1
 8000c1c:	d101      	bne.n	8000c22 <HAL_ADC_Start+0x2a>
 8000c1e:	2302      	movs	r3, #2
 8000c20:	e038      	b.n	8000c94 <HAL_ADC_Start+0x9c>
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	2234      	movs	r2, #52	; 0x34
 8000c26:	2101      	movs	r1, #1
 8000c28:	5499      	strb	r1, [r3, r2]
      
    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	7e5b      	ldrb	r3, [r3, #25]
 8000c2e:	2b01      	cmp	r3, #1
 8000c30:	d007      	beq.n	8000c42 <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8000c32:	230f      	movs	r3, #15
 8000c34:	18fc      	adds	r4, r7, r3
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	0018      	movs	r0, r3
 8000c3a:	f000 f933 	bl	8000ea4 <ADC_Enable>
 8000c3e:	0003      	movs	r3, r0
 8000c40:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8000c42:	230f      	movs	r3, #15
 8000c44:	18fb      	adds	r3, r7, r3
 8000c46:	781b      	ldrb	r3, [r3, #0]
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d120      	bne.n	8000c8e <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000c50:	4a12      	ldr	r2, [pc, #72]	; (8000c9c <HAL_ADC_Start+0xa4>)
 8000c52:	4013      	ands	r3, r2
 8000c54:	2280      	movs	r2, #128	; 0x80
 8000c56:	0052      	lsls	r2, r2, #1
 8000c58:	431a      	orrs	r2, r3
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	2200      	movs	r2, #0
 8000c62:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	2234      	movs	r2, #52	; 0x34
 8000c68:	2100      	movs	r1, #0
 8000c6a:	5499      	strb	r1, [r3, r2]
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	221c      	movs	r2, #28
 8000c72:	601a      	str	r2, [r3, #0]
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	689a      	ldr	r2, [r3, #8]
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	2104      	movs	r1, #4
 8000c80:	430a      	orrs	r2, r1
 8000c82:	609a      	str	r2, [r3, #8]
 8000c84:	e003      	b.n	8000c8e <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8000c86:	230f      	movs	r3, #15
 8000c88:	18fb      	adds	r3, r7, r3
 8000c8a:	2202      	movs	r2, #2
 8000c8c:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000c8e:	230f      	movs	r3, #15
 8000c90:	18fb      	adds	r3, r7, r3
 8000c92:	781b      	ldrb	r3, [r3, #0]
}
 8000c94:	0018      	movs	r0, r3
 8000c96:	46bd      	mov	sp, r7
 8000c98:	b005      	add	sp, #20
 8000c9a:	bd90      	pop	{r4, r7, pc}
 8000c9c:	fffff0fe 	.word	0xfffff0fe

08000ca0 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b082      	sub	sp, #8
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8000cae:	0018      	movs	r0, r3
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	b002      	add	sp, #8
 8000cb4:	bd80      	pop	{r7, pc}
	...

08000cb8 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b084      	sub	sp, #16
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
 8000cc0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000cc2:	230f      	movs	r3, #15
 8000cc4:	18fb      	adds	r3, r7, r3
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000cd2:	2380      	movs	r3, #128	; 0x80
 8000cd4:	055b      	lsls	r3, r3, #21
 8000cd6:	429a      	cmp	r2, r3
 8000cd8:	d011      	beq.n	8000cfe <HAL_ADC_ConfigChannel+0x46>
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cde:	2b01      	cmp	r3, #1
 8000ce0:	d00d      	beq.n	8000cfe <HAL_ADC_ConfigChannel+0x46>
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ce6:	2b02      	cmp	r3, #2
 8000ce8:	d009      	beq.n	8000cfe <HAL_ADC_ConfigChannel+0x46>
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cee:	2b03      	cmp	r3, #3
 8000cf0:	d005      	beq.n	8000cfe <HAL_ADC_ConfigChannel+0x46>
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cf6:	2b04      	cmp	r3, #4
 8000cf8:	d001      	beq.n	8000cfe <HAL_ADC_ConfigChannel+0x46>
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	2234      	movs	r2, #52	; 0x34
 8000d02:	5c9b      	ldrb	r3, [r3, r2]
 8000d04:	2b01      	cmp	r3, #1
 8000d06:	d101      	bne.n	8000d0c <HAL_ADC_ConfigChannel+0x54>
 8000d08:	2302      	movs	r3, #2
 8000d0a:	e0bb      	b.n	8000e84 <HAL_ADC_ConfigChannel+0x1cc>
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	2234      	movs	r2, #52	; 0x34
 8000d10:	2101      	movs	r1, #1
 8000d12:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	689b      	ldr	r3, [r3, #8]
 8000d1a:	2204      	movs	r2, #4
 8000d1c:	4013      	ands	r3, r2
 8000d1e:	d000      	beq.n	8000d22 <HAL_ADC_ConfigChannel+0x6a>
 8000d20:	e09f      	b.n	8000e62 <HAL_ADC_ConfigChannel+0x1aa>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 8000d22:	683b      	ldr	r3, [r7, #0]
 8000d24:	685b      	ldr	r3, [r3, #4]
 8000d26:	4a59      	ldr	r2, [pc, #356]	; (8000e8c <HAL_ADC_ConfigChannel+0x1d4>)
 8000d28:	4293      	cmp	r3, r2
 8000d2a:	d100      	bne.n	8000d2e <HAL_ADC_ConfigChannel+0x76>
 8000d2c:	e077      	b.n	8000e1e <HAL_ADC_ConfigChannel+0x166>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8000d34:	683b      	ldr	r3, [r7, #0]
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	2201      	movs	r2, #1
 8000d3a:	409a      	lsls	r2, r3
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	430a      	orrs	r2, r1
 8000d42:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000d48:	2380      	movs	r3, #128	; 0x80
 8000d4a:	055b      	lsls	r3, r3, #21
 8000d4c:	429a      	cmp	r2, r3
 8000d4e:	d037      	beq.n	8000dc0 <HAL_ADC_ConfigChannel+0x108>
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d54:	2b01      	cmp	r3, #1
 8000d56:	d033      	beq.n	8000dc0 <HAL_ADC_ConfigChannel+0x108>
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d5c:	2b02      	cmp	r3, #2
 8000d5e:	d02f      	beq.n	8000dc0 <HAL_ADC_ConfigChannel+0x108>
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d64:	2b03      	cmp	r3, #3
 8000d66:	d02b      	beq.n	8000dc0 <HAL_ADC_ConfigChannel+0x108>
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d6c:	2b04      	cmp	r3, #4
 8000d6e:	d027      	beq.n	8000dc0 <HAL_ADC_ConfigChannel+0x108>
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d74:	2b05      	cmp	r3, #5
 8000d76:	d023      	beq.n	8000dc0 <HAL_ADC_ConfigChannel+0x108>
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d7c:	2b06      	cmp	r3, #6
 8000d7e:	d01f      	beq.n	8000dc0 <HAL_ADC_ConfigChannel+0x108>
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d84:	2b07      	cmp	r3, #7
 8000d86:	d01b      	beq.n	8000dc0 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of reoccurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8000d88:	683b      	ldr	r3, [r7, #0]
 8000d8a:	689a      	ldr	r2, [r3, #8]
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	695b      	ldr	r3, [r3, #20]
 8000d92:	2107      	movs	r1, #7
 8000d94:	400b      	ands	r3, r1
 8000d96:	429a      	cmp	r2, r3
 8000d98:	d012      	beq.n	8000dc0 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	695a      	ldr	r2, [r3, #20]
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	2107      	movs	r1, #7
 8000da6:	438a      	bics	r2, r1
 8000da8:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	6959      	ldr	r1, [r3, #20]
 8000db0:	683b      	ldr	r3, [r7, #0]
 8000db2:	689b      	ldr	r3, [r3, #8]
 8000db4:	2207      	movs	r2, #7
 8000db6:	401a      	ands	r2, r3
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	430a      	orrs	r2, r1
 8000dbe:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8000dc0:	683b      	ldr	r3, [r7, #0]
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	2b10      	cmp	r3, #16
 8000dc6:	d003      	beq.n	8000dd0 <HAL_ADC_ConfigChannel+0x118>
 8000dc8:	683b      	ldr	r3, [r7, #0]
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	2b11      	cmp	r3, #17
 8000dce:	d152      	bne.n	8000e76 <HAL_ADC_ConfigChannel+0x1be>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8000dd0:	4b2f      	ldr	r3, [pc, #188]	; (8000e90 <HAL_ADC_ConfigChannel+0x1d8>)
 8000dd2:	6819      	ldr	r1, [r3, #0]
 8000dd4:	683b      	ldr	r3, [r7, #0]
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	2b10      	cmp	r3, #16
 8000dda:	d102      	bne.n	8000de2 <HAL_ADC_ConfigChannel+0x12a>
 8000ddc:	2380      	movs	r3, #128	; 0x80
 8000dde:	041b      	lsls	r3, r3, #16
 8000de0:	e001      	b.n	8000de6 <HAL_ADC_ConfigChannel+0x12e>
 8000de2:	2380      	movs	r3, #128	; 0x80
 8000de4:	03db      	lsls	r3, r3, #15
 8000de6:	4a2a      	ldr	r2, [pc, #168]	; (8000e90 <HAL_ADC_ConfigChannel+0x1d8>)
 8000de8:	430b      	orrs	r3, r1
 8000dea:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000dec:	683b      	ldr	r3, [r7, #0]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	2b10      	cmp	r3, #16
 8000df2:	d140      	bne.n	8000e76 <HAL_ADC_ConfigChannel+0x1be>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000df4:	4b27      	ldr	r3, [pc, #156]	; (8000e94 <HAL_ADC_ConfigChannel+0x1dc>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	4927      	ldr	r1, [pc, #156]	; (8000e98 <HAL_ADC_ConfigChannel+0x1e0>)
 8000dfa:	0018      	movs	r0, r3
 8000dfc:	f7ff f984 	bl	8000108 <__udivsi3>
 8000e00:	0003      	movs	r3, r0
 8000e02:	001a      	movs	r2, r3
 8000e04:	0013      	movs	r3, r2
 8000e06:	009b      	lsls	r3, r3, #2
 8000e08:	189b      	adds	r3, r3, r2
 8000e0a:	005b      	lsls	r3, r3, #1
 8000e0c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000e0e:	e002      	b.n	8000e16 <HAL_ADC_ConfigChannel+0x15e>
          {
            wait_loop_index--;
 8000e10:	68bb      	ldr	r3, [r7, #8]
 8000e12:	3b01      	subs	r3, #1
 8000e14:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000e16:	68bb      	ldr	r3, [r7, #8]
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d1f9      	bne.n	8000e10 <HAL_ADC_ConfigChannel+0x158>
 8000e1c:	e02b      	b.n	8000e76 <HAL_ADC_ConfigChannel+0x1be>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000e24:	683b      	ldr	r3, [r7, #0]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	2101      	movs	r1, #1
 8000e2a:	4099      	lsls	r1, r3
 8000e2c:	000b      	movs	r3, r1
 8000e2e:	43d9      	mvns	r1, r3
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	400a      	ands	r2, r1
 8000e36:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8000e38:	683b      	ldr	r3, [r7, #0]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	2b10      	cmp	r3, #16
 8000e3e:	d003      	beq.n	8000e48 <HAL_ADC_ConfigChannel+0x190>
 8000e40:	683b      	ldr	r3, [r7, #0]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	2b11      	cmp	r3, #17
 8000e46:	d116      	bne.n	8000e76 <HAL_ADC_ConfigChannel+0x1be>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8000e48:	4b11      	ldr	r3, [pc, #68]	; (8000e90 <HAL_ADC_ConfigChannel+0x1d8>)
 8000e4a:	6819      	ldr	r1, [r3, #0]
 8000e4c:	683b      	ldr	r3, [r7, #0]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	2b10      	cmp	r3, #16
 8000e52:	d101      	bne.n	8000e58 <HAL_ADC_ConfigChannel+0x1a0>
 8000e54:	4a11      	ldr	r2, [pc, #68]	; (8000e9c <HAL_ADC_ConfigChannel+0x1e4>)
 8000e56:	e000      	b.n	8000e5a <HAL_ADC_ConfigChannel+0x1a2>
 8000e58:	4a11      	ldr	r2, [pc, #68]	; (8000ea0 <HAL_ADC_ConfigChannel+0x1e8>)
 8000e5a:	4b0d      	ldr	r3, [pc, #52]	; (8000e90 <HAL_ADC_ConfigChannel+0x1d8>)
 8000e5c:	400a      	ands	r2, r1
 8000e5e:	601a      	str	r2, [r3, #0]
 8000e60:	e009      	b.n	8000e76 <HAL_ADC_ConfigChannel+0x1be>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000e66:	2220      	movs	r2, #32
 8000e68:	431a      	orrs	r2, r3
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 8000e6e:	230f      	movs	r3, #15
 8000e70:	18fb      	adds	r3, r7, r3
 8000e72:	2201      	movs	r2, #1
 8000e74:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	2234      	movs	r2, #52	; 0x34
 8000e7a:	2100      	movs	r1, #0
 8000e7c:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8000e7e:	230f      	movs	r3, #15
 8000e80:	18fb      	adds	r3, r7, r3
 8000e82:	781b      	ldrb	r3, [r3, #0]
}
 8000e84:	0018      	movs	r0, r3
 8000e86:	46bd      	mov	sp, r7
 8000e88:	b004      	add	sp, #16
 8000e8a:	bd80      	pop	{r7, pc}
 8000e8c:	00001001 	.word	0x00001001
 8000e90:	40012708 	.word	0x40012708
 8000e94:	20000000 	.word	0x20000000
 8000e98:	000f4240 	.word	0x000f4240
 8000e9c:	ff7fffff 	.word	0xff7fffff
 8000ea0:	ffbfffff 	.word	0xffbfffff

08000ea4 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b084      	sub	sp, #16
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000eac:	2300      	movs	r3, #0
 8000eae:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	689b      	ldr	r3, [r3, #8]
 8000eba:	2203      	movs	r2, #3
 8000ebc:	4013      	ands	r3, r2
 8000ebe:	2b01      	cmp	r3, #1
 8000ec0:	d112      	bne.n	8000ee8 <ADC_Enable+0x44>
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	2201      	movs	r2, #1
 8000eca:	4013      	ands	r3, r2
 8000ecc:	2b01      	cmp	r3, #1
 8000ece:	d009      	beq.n	8000ee4 <ADC_Enable+0x40>
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	68da      	ldr	r2, [r3, #12]
 8000ed6:	2380      	movs	r3, #128	; 0x80
 8000ed8:	021b      	lsls	r3, r3, #8
 8000eda:	401a      	ands	r2, r3
 8000edc:	2380      	movs	r3, #128	; 0x80
 8000ede:	021b      	lsls	r3, r3, #8
 8000ee0:	429a      	cmp	r2, r3
 8000ee2:	d101      	bne.n	8000ee8 <ADC_Enable+0x44>
 8000ee4:	2301      	movs	r3, #1
 8000ee6:	e000      	b.n	8000eea <ADC_Enable+0x46>
 8000ee8:	2300      	movs	r3, #0
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d14b      	bne.n	8000f86 <ADC_Enable+0xe2>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	689b      	ldr	r3, [r3, #8]
 8000ef4:	4a26      	ldr	r2, [pc, #152]	; (8000f90 <ADC_Enable+0xec>)
 8000ef6:	4013      	ands	r3, r2
 8000ef8:	d00d      	beq.n	8000f16 <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000efe:	2210      	movs	r2, #16
 8000f00:	431a      	orrs	r2, r3
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	639a      	str	r2, [r3, #56]	; 0x38
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f0a:	2201      	movs	r2, #1
 8000f0c:	431a      	orrs	r2, r3
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	63da      	str	r2, [r3, #60]	; 0x3c
      
      return HAL_ERROR;
 8000f12:	2301      	movs	r3, #1
 8000f14:	e038      	b.n	8000f88 <ADC_Enable+0xe4>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	689a      	ldr	r2, [r3, #8]
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	2101      	movs	r1, #1
 8000f22:	430a      	orrs	r2, r1
 8000f24:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000f26:	4b1b      	ldr	r3, [pc, #108]	; (8000f94 <ADC_Enable+0xf0>)
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	491b      	ldr	r1, [pc, #108]	; (8000f98 <ADC_Enable+0xf4>)
 8000f2c:	0018      	movs	r0, r3
 8000f2e:	f7ff f8eb 	bl	8000108 <__udivsi3>
 8000f32:	0003      	movs	r3, r0
 8000f34:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8000f36:	e002      	b.n	8000f3e <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 8000f38:	68bb      	ldr	r3, [r7, #8]
 8000f3a:	3b01      	subs	r3, #1
 8000f3c:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8000f3e:	68bb      	ldr	r3, [r7, #8]
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d1f9      	bne.n	8000f38 <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 8000f44:	f7ff fcec 	bl	8000920 <HAL_GetTick>
 8000f48:	0003      	movs	r3, r0
 8000f4a:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8000f4c:	e014      	b.n	8000f78 <ADC_Enable+0xd4>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8000f4e:	f7ff fce7 	bl	8000920 <HAL_GetTick>
 8000f52:	0002      	movs	r2, r0
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	1ad3      	subs	r3, r2, r3
 8000f58:	2b02      	cmp	r3, #2
 8000f5a:	d90d      	bls.n	8000f78 <ADC_Enable+0xd4>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f60:	2210      	movs	r2, #16
 8000f62:	431a      	orrs	r2, r3
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	639a      	str	r2, [r3, #56]	; 0x38
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f6c:	2201      	movs	r2, #1
 8000f6e:	431a      	orrs	r2, r3
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	63da      	str	r2, [r3, #60]	; 0x3c
      
        return HAL_ERROR;
 8000f74:	2301      	movs	r3, #1
 8000f76:	e007      	b.n	8000f88 <ADC_Enable+0xe4>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	2201      	movs	r2, #1
 8000f80:	4013      	ands	r3, r2
 8000f82:	2b01      	cmp	r3, #1
 8000f84:	d1e3      	bne.n	8000f4e <ADC_Enable+0xaa>
    }   
    
  }
   
  /* Return HAL status */
  return HAL_OK;
 8000f86:	2300      	movs	r3, #0
}
 8000f88:	0018      	movs	r0, r3
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	b004      	add	sp, #16
 8000f8e:	bd80      	pop	{r7, pc}
 8000f90:	80000017 	.word	0x80000017
 8000f94:	20000000 	.word	0x20000000
 8000f98:	000f4240 	.word	0x000f4240

08000f9c <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b086      	sub	sp, #24
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000fa4:	2317      	movs	r3, #23
 8000fa6:	18fb      	adds	r3, r7, r3
 8000fa8:	2200      	movs	r2, #0
 8000faa:	701a      	strb	r2, [r3, #0]
  uint32_t tickstart = 0U;
 8000fac:	2300      	movs	r3, #0
 8000fae:	613b      	str	r3, [r7, #16]
  uint32_t backup_setting_adc_dma_transfer = 0; /* Note: Variable not declared as volatile because register read is already declared as volatile */
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	2234      	movs	r2, #52	; 0x34
 8000fb8:	5c9b      	ldrb	r3, [r3, r2]
 8000fba:	2b01      	cmp	r3, #1
 8000fbc:	d101      	bne.n	8000fc2 <HAL_ADCEx_Calibration_Start+0x26>
 8000fbe:	2302      	movs	r3, #2
 8000fc0:	e084      	b.n	80010cc <HAL_ADCEx_Calibration_Start+0x130>
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	2234      	movs	r2, #52	; 0x34
 8000fc6:	2101      	movs	r1, #1
 8000fc8:	5499      	strb	r1, [r3, r2]
  
  /* Calibration prerequisite: ADC must be disabled. */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	689b      	ldr	r3, [r3, #8]
 8000fd0:	2203      	movs	r2, #3
 8000fd2:	4013      	ands	r3, r2
 8000fd4:	2b01      	cmp	r3, #1
 8000fd6:	d112      	bne.n	8000ffe <HAL_ADCEx_Calibration_Start+0x62>
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	2201      	movs	r2, #1
 8000fe0:	4013      	ands	r3, r2
 8000fe2:	2b01      	cmp	r3, #1
 8000fe4:	d009      	beq.n	8000ffa <HAL_ADCEx_Calibration_Start+0x5e>
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	68da      	ldr	r2, [r3, #12]
 8000fec:	2380      	movs	r3, #128	; 0x80
 8000fee:	021b      	lsls	r3, r3, #8
 8000ff0:	401a      	ands	r2, r3
 8000ff2:	2380      	movs	r3, #128	; 0x80
 8000ff4:	021b      	lsls	r3, r3, #8
 8000ff6:	429a      	cmp	r2, r3
 8000ff8:	d101      	bne.n	8000ffe <HAL_ADCEx_Calibration_Start+0x62>
 8000ffa:	2301      	movs	r3, #1
 8000ffc:	e000      	b.n	8001000 <HAL_ADCEx_Calibration_Start+0x64>
 8000ffe:	2300      	movs	r3, #0
 8001000:	2b00      	cmp	r3, #0
 8001002:	d152      	bne.n	80010aa <HAL_ADCEx_Calibration_Start+0x10e>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State, 
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001008:	4a32      	ldr	r2, [pc, #200]	; (80010d4 <HAL_ADCEx_Calibration_Start+0x138>)
 800100a:	4013      	ands	r3, r2
 800100c:	2202      	movs	r2, #2
 800100e:	431a      	orrs	r2, r3
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	639a      	str	r2, [r3, #56]	; 0x38
    /* Note: Specificity of this STM32 serie: Calibration factor is           */
    /*       available in data register and also transfered by DMA.           */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	68db      	ldr	r3, [r3, #12]
 800101a:	2203      	movs	r2, #3
 800101c:	4013      	ands	r3, r2
 800101e:	60fb      	str	r3, [r7, #12]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	68da      	ldr	r2, [r3, #12]
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	2103      	movs	r1, #3
 800102c:	438a      	bics	r2, r1
 800102e:	60da      	str	r2, [r3, #12]

    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	689a      	ldr	r2, [r3, #8]
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	2180      	movs	r1, #128	; 0x80
 800103c:	0609      	lsls	r1, r1, #24
 800103e:	430a      	orrs	r2, r1
 8001040:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();  
 8001042:	f7ff fc6d 	bl	8000920 <HAL_GetTick>
 8001046:	0003      	movs	r3, r0
 8001048:	613b      	str	r3, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 800104a:	e014      	b.n	8001076 <HAL_ADCEx_Calibration_Start+0xda>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 800104c:	f7ff fc68 	bl	8000920 <HAL_GetTick>
 8001050:	0002      	movs	r2, r0
 8001052:	693b      	ldr	r3, [r7, #16]
 8001054:	1ad3      	subs	r3, r2, r3
 8001056:	2b02      	cmp	r3, #2
 8001058:	d90d      	bls.n	8001076 <HAL_ADCEx_Calibration_Start+0xda>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800105e:	2212      	movs	r2, #18
 8001060:	4393      	bics	r3, r2
 8001062:	2210      	movs	r2, #16
 8001064:	431a      	orrs	r2, r3
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	639a      	str	r2, [r3, #56]	; 0x38
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	2234      	movs	r2, #52	; 0x34
 800106e:	2100      	movs	r1, #0
 8001070:	5499      	strb	r1, [r3, r2]
        
        return HAL_ERROR;
 8001072:	2301      	movs	r3, #1
 8001074:	e02a      	b.n	80010cc <HAL_ADCEx_Calibration_Start+0x130>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	689b      	ldr	r3, [r3, #8]
 800107c:	0fdb      	lsrs	r3, r3, #31
 800107e:	07da      	lsls	r2, r3, #31
 8001080:	2380      	movs	r3, #128	; 0x80
 8001082:	061b      	lsls	r3, r3, #24
 8001084:	429a      	cmp	r2, r3
 8001086:	d0e1      	beq.n	800104c <HAL_ADCEx_Calibration_Start+0xb0>
      }
    }
    
    /* Restore ADC DMA transfer request after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	68d9      	ldr	r1, [r3, #12]
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	68fa      	ldr	r2, [r7, #12]
 8001094:	430a      	orrs	r2, r1
 8001096:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800109c:	2203      	movs	r2, #3
 800109e:	4393      	bics	r3, r2
 80010a0:	2201      	movs	r2, #1
 80010a2:	431a      	orrs	r2, r3
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	639a      	str	r2, [r3, #56]	; 0x38
 80010a8:	e009      	b.n	80010be <HAL_ADCEx_Calibration_Start+0x122>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80010ae:	2220      	movs	r2, #32
 80010b0:	431a      	orrs	r2, r3
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 80010b6:	2317      	movs	r3, #23
 80010b8:	18fb      	adds	r3, r7, r3
 80010ba:	2201      	movs	r2, #1
 80010bc:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	2234      	movs	r2, #52	; 0x34
 80010c2:	2100      	movs	r1, #0
 80010c4:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 80010c6:	2317      	movs	r3, #23
 80010c8:	18fb      	adds	r3, r7, r3
 80010ca:	781b      	ldrb	r3, [r3, #0]
}
 80010cc:	0018      	movs	r0, r3
 80010ce:	46bd      	mov	sp, r7
 80010d0:	b006      	add	sp, #24
 80010d2:	bd80      	pop	{r7, pc}
 80010d4:	fffffefd 	.word	0xfffffefd

080010d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010d8:	b590      	push	{r4, r7, lr}
 80010da:	b083      	sub	sp, #12
 80010dc:	af00      	add	r7, sp, #0
 80010de:	0002      	movs	r2, r0
 80010e0:	6039      	str	r1, [r7, #0]
 80010e2:	1dfb      	adds	r3, r7, #7
 80010e4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80010e6:	1dfb      	adds	r3, r7, #7
 80010e8:	781b      	ldrb	r3, [r3, #0]
 80010ea:	2b7f      	cmp	r3, #127	; 0x7f
 80010ec:	d828      	bhi.n	8001140 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80010ee:	4a2f      	ldr	r2, [pc, #188]	; (80011ac <__NVIC_SetPriority+0xd4>)
 80010f0:	1dfb      	adds	r3, r7, #7
 80010f2:	781b      	ldrb	r3, [r3, #0]
 80010f4:	b25b      	sxtb	r3, r3
 80010f6:	089b      	lsrs	r3, r3, #2
 80010f8:	33c0      	adds	r3, #192	; 0xc0
 80010fa:	009b      	lsls	r3, r3, #2
 80010fc:	589b      	ldr	r3, [r3, r2]
 80010fe:	1dfa      	adds	r2, r7, #7
 8001100:	7812      	ldrb	r2, [r2, #0]
 8001102:	0011      	movs	r1, r2
 8001104:	2203      	movs	r2, #3
 8001106:	400a      	ands	r2, r1
 8001108:	00d2      	lsls	r2, r2, #3
 800110a:	21ff      	movs	r1, #255	; 0xff
 800110c:	4091      	lsls	r1, r2
 800110e:	000a      	movs	r2, r1
 8001110:	43d2      	mvns	r2, r2
 8001112:	401a      	ands	r2, r3
 8001114:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001116:	683b      	ldr	r3, [r7, #0]
 8001118:	019b      	lsls	r3, r3, #6
 800111a:	22ff      	movs	r2, #255	; 0xff
 800111c:	401a      	ands	r2, r3
 800111e:	1dfb      	adds	r3, r7, #7
 8001120:	781b      	ldrb	r3, [r3, #0]
 8001122:	0018      	movs	r0, r3
 8001124:	2303      	movs	r3, #3
 8001126:	4003      	ands	r3, r0
 8001128:	00db      	lsls	r3, r3, #3
 800112a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800112c:	481f      	ldr	r0, [pc, #124]	; (80011ac <__NVIC_SetPriority+0xd4>)
 800112e:	1dfb      	adds	r3, r7, #7
 8001130:	781b      	ldrb	r3, [r3, #0]
 8001132:	b25b      	sxtb	r3, r3
 8001134:	089b      	lsrs	r3, r3, #2
 8001136:	430a      	orrs	r2, r1
 8001138:	33c0      	adds	r3, #192	; 0xc0
 800113a:	009b      	lsls	r3, r3, #2
 800113c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800113e:	e031      	b.n	80011a4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001140:	4a1b      	ldr	r2, [pc, #108]	; (80011b0 <__NVIC_SetPriority+0xd8>)
 8001142:	1dfb      	adds	r3, r7, #7
 8001144:	781b      	ldrb	r3, [r3, #0]
 8001146:	0019      	movs	r1, r3
 8001148:	230f      	movs	r3, #15
 800114a:	400b      	ands	r3, r1
 800114c:	3b08      	subs	r3, #8
 800114e:	089b      	lsrs	r3, r3, #2
 8001150:	3306      	adds	r3, #6
 8001152:	009b      	lsls	r3, r3, #2
 8001154:	18d3      	adds	r3, r2, r3
 8001156:	3304      	adds	r3, #4
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	1dfa      	adds	r2, r7, #7
 800115c:	7812      	ldrb	r2, [r2, #0]
 800115e:	0011      	movs	r1, r2
 8001160:	2203      	movs	r2, #3
 8001162:	400a      	ands	r2, r1
 8001164:	00d2      	lsls	r2, r2, #3
 8001166:	21ff      	movs	r1, #255	; 0xff
 8001168:	4091      	lsls	r1, r2
 800116a:	000a      	movs	r2, r1
 800116c:	43d2      	mvns	r2, r2
 800116e:	401a      	ands	r2, r3
 8001170:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001172:	683b      	ldr	r3, [r7, #0]
 8001174:	019b      	lsls	r3, r3, #6
 8001176:	22ff      	movs	r2, #255	; 0xff
 8001178:	401a      	ands	r2, r3
 800117a:	1dfb      	adds	r3, r7, #7
 800117c:	781b      	ldrb	r3, [r3, #0]
 800117e:	0018      	movs	r0, r3
 8001180:	2303      	movs	r3, #3
 8001182:	4003      	ands	r3, r0
 8001184:	00db      	lsls	r3, r3, #3
 8001186:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001188:	4809      	ldr	r0, [pc, #36]	; (80011b0 <__NVIC_SetPriority+0xd8>)
 800118a:	1dfb      	adds	r3, r7, #7
 800118c:	781b      	ldrb	r3, [r3, #0]
 800118e:	001c      	movs	r4, r3
 8001190:	230f      	movs	r3, #15
 8001192:	4023      	ands	r3, r4
 8001194:	3b08      	subs	r3, #8
 8001196:	089b      	lsrs	r3, r3, #2
 8001198:	430a      	orrs	r2, r1
 800119a:	3306      	adds	r3, #6
 800119c:	009b      	lsls	r3, r3, #2
 800119e:	18c3      	adds	r3, r0, r3
 80011a0:	3304      	adds	r3, #4
 80011a2:	601a      	str	r2, [r3, #0]
}
 80011a4:	46c0      	nop			; (mov r8, r8)
 80011a6:	46bd      	mov	sp, r7
 80011a8:	b003      	add	sp, #12
 80011aa:	bd90      	pop	{r4, r7, pc}
 80011ac:	e000e100 	.word	0xe000e100
 80011b0:	e000ed00 	.word	0xe000ed00

080011b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b082      	sub	sp, #8
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	3b01      	subs	r3, #1
 80011c0:	4a0c      	ldr	r2, [pc, #48]	; (80011f4 <SysTick_Config+0x40>)
 80011c2:	4293      	cmp	r3, r2
 80011c4:	d901      	bls.n	80011ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011c6:	2301      	movs	r3, #1
 80011c8:	e010      	b.n	80011ec <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011ca:	4b0b      	ldr	r3, [pc, #44]	; (80011f8 <SysTick_Config+0x44>)
 80011cc:	687a      	ldr	r2, [r7, #4]
 80011ce:	3a01      	subs	r2, #1
 80011d0:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011d2:	2301      	movs	r3, #1
 80011d4:	425b      	negs	r3, r3
 80011d6:	2103      	movs	r1, #3
 80011d8:	0018      	movs	r0, r3
 80011da:	f7ff ff7d 	bl	80010d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011de:	4b06      	ldr	r3, [pc, #24]	; (80011f8 <SysTick_Config+0x44>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011e4:	4b04      	ldr	r3, [pc, #16]	; (80011f8 <SysTick_Config+0x44>)
 80011e6:	2207      	movs	r2, #7
 80011e8:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011ea:	2300      	movs	r3, #0
}
 80011ec:	0018      	movs	r0, r3
 80011ee:	46bd      	mov	sp, r7
 80011f0:	b002      	add	sp, #8
 80011f2:	bd80      	pop	{r7, pc}
 80011f4:	00ffffff 	.word	0x00ffffff
 80011f8:	e000e010 	.word	0xe000e010

080011fc <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b084      	sub	sp, #16
 8001200:	af00      	add	r7, sp, #0
 8001202:	60b9      	str	r1, [r7, #8]
 8001204:	607a      	str	r2, [r7, #4]
 8001206:	210f      	movs	r1, #15
 8001208:	187b      	adds	r3, r7, r1
 800120a:	1c02      	adds	r2, r0, #0
 800120c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800120e:	68ba      	ldr	r2, [r7, #8]
 8001210:	187b      	adds	r3, r7, r1
 8001212:	781b      	ldrb	r3, [r3, #0]
 8001214:	b25b      	sxtb	r3, r3
 8001216:	0011      	movs	r1, r2
 8001218:	0018      	movs	r0, r3
 800121a:	f7ff ff5d 	bl	80010d8 <__NVIC_SetPriority>
}
 800121e:	46c0      	nop			; (mov r8, r8)
 8001220:	46bd      	mov	sp, r7
 8001222:	b004      	add	sp, #16
 8001224:	bd80      	pop	{r7, pc}

08001226 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001226:	b580      	push	{r7, lr}
 8001228:	b082      	sub	sp, #8
 800122a:	af00      	add	r7, sp, #0
 800122c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	0018      	movs	r0, r3
 8001232:	f7ff ffbf 	bl	80011b4 <SysTick_Config>
 8001236:	0003      	movs	r3, r0
}
 8001238:	0018      	movs	r0, r3
 800123a:	46bd      	mov	sp, r7
 800123c:	b002      	add	sp, #8
 800123e:	bd80      	pop	{r7, pc}

08001240 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8001240:	b580      	push	{r7, lr}
 8001242:	b086      	sub	sp, #24
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
 8001248:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800124a:	2300      	movs	r3, #0
 800124c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800124e:	e14f      	b.n	80014f0 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001250:	683b      	ldr	r3, [r7, #0]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	2101      	movs	r1, #1
 8001256:	697a      	ldr	r2, [r7, #20]
 8001258:	4091      	lsls	r1, r2
 800125a:	000a      	movs	r2, r1
 800125c:	4013      	ands	r3, r2
 800125e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	2b00      	cmp	r3, #0
 8001264:	d100      	bne.n	8001268 <HAL_GPIO_Init+0x28>
 8001266:	e140      	b.n	80014ea <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	685b      	ldr	r3, [r3, #4]
 800126c:	2b01      	cmp	r3, #1
 800126e:	d00b      	beq.n	8001288 <HAL_GPIO_Init+0x48>
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	685b      	ldr	r3, [r3, #4]
 8001274:	2b02      	cmp	r3, #2
 8001276:	d007      	beq.n	8001288 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800127c:	2b11      	cmp	r3, #17
 800127e:	d003      	beq.n	8001288 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	685b      	ldr	r3, [r3, #4]
 8001284:	2b12      	cmp	r3, #18
 8001286:	d130      	bne.n	80012ea <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	689b      	ldr	r3, [r3, #8]
 800128c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800128e:	697b      	ldr	r3, [r7, #20]
 8001290:	005b      	lsls	r3, r3, #1
 8001292:	2203      	movs	r2, #3
 8001294:	409a      	lsls	r2, r3
 8001296:	0013      	movs	r3, r2
 8001298:	43da      	mvns	r2, r3
 800129a:	693b      	ldr	r3, [r7, #16]
 800129c:	4013      	ands	r3, r2
 800129e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	68da      	ldr	r2, [r3, #12]
 80012a4:	697b      	ldr	r3, [r7, #20]
 80012a6:	005b      	lsls	r3, r3, #1
 80012a8:	409a      	lsls	r2, r3
 80012aa:	0013      	movs	r3, r2
 80012ac:	693a      	ldr	r2, [r7, #16]
 80012ae:	4313      	orrs	r3, r2
 80012b0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	693a      	ldr	r2, [r7, #16]
 80012b6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	685b      	ldr	r3, [r3, #4]
 80012bc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80012be:	2201      	movs	r2, #1
 80012c0:	697b      	ldr	r3, [r7, #20]
 80012c2:	409a      	lsls	r2, r3
 80012c4:	0013      	movs	r3, r2
 80012c6:	43da      	mvns	r2, r3
 80012c8:	693b      	ldr	r3, [r7, #16]
 80012ca:	4013      	ands	r3, r2
 80012cc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80012ce:	683b      	ldr	r3, [r7, #0]
 80012d0:	685b      	ldr	r3, [r3, #4]
 80012d2:	091b      	lsrs	r3, r3, #4
 80012d4:	2201      	movs	r2, #1
 80012d6:	401a      	ands	r2, r3
 80012d8:	697b      	ldr	r3, [r7, #20]
 80012da:	409a      	lsls	r2, r3
 80012dc:	0013      	movs	r3, r2
 80012de:	693a      	ldr	r2, [r7, #16]
 80012e0:	4313      	orrs	r3, r2
 80012e2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	693a      	ldr	r2, [r7, #16]
 80012e8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	68db      	ldr	r3, [r3, #12]
 80012ee:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80012f0:	697b      	ldr	r3, [r7, #20]
 80012f2:	005b      	lsls	r3, r3, #1
 80012f4:	2203      	movs	r2, #3
 80012f6:	409a      	lsls	r2, r3
 80012f8:	0013      	movs	r3, r2
 80012fa:	43da      	mvns	r2, r3
 80012fc:	693b      	ldr	r3, [r7, #16]
 80012fe:	4013      	ands	r3, r2
 8001300:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001302:	683b      	ldr	r3, [r7, #0]
 8001304:	689a      	ldr	r2, [r3, #8]
 8001306:	697b      	ldr	r3, [r7, #20]
 8001308:	005b      	lsls	r3, r3, #1
 800130a:	409a      	lsls	r2, r3
 800130c:	0013      	movs	r3, r2
 800130e:	693a      	ldr	r2, [r7, #16]
 8001310:	4313      	orrs	r3, r2
 8001312:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	693a      	ldr	r2, [r7, #16]
 8001318:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800131a:	683b      	ldr	r3, [r7, #0]
 800131c:	685b      	ldr	r3, [r3, #4]
 800131e:	2b02      	cmp	r3, #2
 8001320:	d003      	beq.n	800132a <HAL_GPIO_Init+0xea>
 8001322:	683b      	ldr	r3, [r7, #0]
 8001324:	685b      	ldr	r3, [r3, #4]
 8001326:	2b12      	cmp	r3, #18
 8001328:	d123      	bne.n	8001372 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800132a:	697b      	ldr	r3, [r7, #20]
 800132c:	08da      	lsrs	r2, r3, #3
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	3208      	adds	r2, #8
 8001332:	0092      	lsls	r2, r2, #2
 8001334:	58d3      	ldr	r3, [r2, r3]
 8001336:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001338:	697b      	ldr	r3, [r7, #20]
 800133a:	2207      	movs	r2, #7
 800133c:	4013      	ands	r3, r2
 800133e:	009b      	lsls	r3, r3, #2
 8001340:	220f      	movs	r2, #15
 8001342:	409a      	lsls	r2, r3
 8001344:	0013      	movs	r3, r2
 8001346:	43da      	mvns	r2, r3
 8001348:	693b      	ldr	r3, [r7, #16]
 800134a:	4013      	ands	r3, r2
 800134c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800134e:	683b      	ldr	r3, [r7, #0]
 8001350:	691a      	ldr	r2, [r3, #16]
 8001352:	697b      	ldr	r3, [r7, #20]
 8001354:	2107      	movs	r1, #7
 8001356:	400b      	ands	r3, r1
 8001358:	009b      	lsls	r3, r3, #2
 800135a:	409a      	lsls	r2, r3
 800135c:	0013      	movs	r3, r2
 800135e:	693a      	ldr	r2, [r7, #16]
 8001360:	4313      	orrs	r3, r2
 8001362:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001364:	697b      	ldr	r3, [r7, #20]
 8001366:	08da      	lsrs	r2, r3, #3
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	3208      	adds	r2, #8
 800136c:	0092      	lsls	r2, r2, #2
 800136e:	6939      	ldr	r1, [r7, #16]
 8001370:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001378:	697b      	ldr	r3, [r7, #20]
 800137a:	005b      	lsls	r3, r3, #1
 800137c:	2203      	movs	r2, #3
 800137e:	409a      	lsls	r2, r3
 8001380:	0013      	movs	r3, r2
 8001382:	43da      	mvns	r2, r3
 8001384:	693b      	ldr	r3, [r7, #16]
 8001386:	4013      	ands	r3, r2
 8001388:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	685b      	ldr	r3, [r3, #4]
 800138e:	2203      	movs	r2, #3
 8001390:	401a      	ands	r2, r3
 8001392:	697b      	ldr	r3, [r7, #20]
 8001394:	005b      	lsls	r3, r3, #1
 8001396:	409a      	lsls	r2, r3
 8001398:	0013      	movs	r3, r2
 800139a:	693a      	ldr	r2, [r7, #16]
 800139c:	4313      	orrs	r3, r2
 800139e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	693a      	ldr	r2, [r7, #16]
 80013a4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80013a6:	683b      	ldr	r3, [r7, #0]
 80013a8:	685a      	ldr	r2, [r3, #4]
 80013aa:	2380      	movs	r3, #128	; 0x80
 80013ac:	055b      	lsls	r3, r3, #21
 80013ae:	4013      	ands	r3, r2
 80013b0:	d100      	bne.n	80013b4 <HAL_GPIO_Init+0x174>
 80013b2:	e09a      	b.n	80014ea <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013b4:	4b54      	ldr	r3, [pc, #336]	; (8001508 <HAL_GPIO_Init+0x2c8>)
 80013b6:	699a      	ldr	r2, [r3, #24]
 80013b8:	4b53      	ldr	r3, [pc, #332]	; (8001508 <HAL_GPIO_Init+0x2c8>)
 80013ba:	2101      	movs	r1, #1
 80013bc:	430a      	orrs	r2, r1
 80013be:	619a      	str	r2, [r3, #24]
 80013c0:	4b51      	ldr	r3, [pc, #324]	; (8001508 <HAL_GPIO_Init+0x2c8>)
 80013c2:	699b      	ldr	r3, [r3, #24]
 80013c4:	2201      	movs	r2, #1
 80013c6:	4013      	ands	r3, r2
 80013c8:	60bb      	str	r3, [r7, #8]
 80013ca:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80013cc:	4a4f      	ldr	r2, [pc, #316]	; (800150c <HAL_GPIO_Init+0x2cc>)
 80013ce:	697b      	ldr	r3, [r7, #20]
 80013d0:	089b      	lsrs	r3, r3, #2
 80013d2:	3302      	adds	r3, #2
 80013d4:	009b      	lsls	r3, r3, #2
 80013d6:	589b      	ldr	r3, [r3, r2]
 80013d8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80013da:	697b      	ldr	r3, [r7, #20]
 80013dc:	2203      	movs	r2, #3
 80013de:	4013      	ands	r3, r2
 80013e0:	009b      	lsls	r3, r3, #2
 80013e2:	220f      	movs	r2, #15
 80013e4:	409a      	lsls	r2, r3
 80013e6:	0013      	movs	r3, r2
 80013e8:	43da      	mvns	r2, r3
 80013ea:	693b      	ldr	r3, [r7, #16]
 80013ec:	4013      	ands	r3, r2
 80013ee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80013f0:	687a      	ldr	r2, [r7, #4]
 80013f2:	2390      	movs	r3, #144	; 0x90
 80013f4:	05db      	lsls	r3, r3, #23
 80013f6:	429a      	cmp	r2, r3
 80013f8:	d013      	beq.n	8001422 <HAL_GPIO_Init+0x1e2>
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	4a44      	ldr	r2, [pc, #272]	; (8001510 <HAL_GPIO_Init+0x2d0>)
 80013fe:	4293      	cmp	r3, r2
 8001400:	d00d      	beq.n	800141e <HAL_GPIO_Init+0x1de>
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	4a43      	ldr	r2, [pc, #268]	; (8001514 <HAL_GPIO_Init+0x2d4>)
 8001406:	4293      	cmp	r3, r2
 8001408:	d007      	beq.n	800141a <HAL_GPIO_Init+0x1da>
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	4a42      	ldr	r2, [pc, #264]	; (8001518 <HAL_GPIO_Init+0x2d8>)
 800140e:	4293      	cmp	r3, r2
 8001410:	d101      	bne.n	8001416 <HAL_GPIO_Init+0x1d6>
 8001412:	2303      	movs	r3, #3
 8001414:	e006      	b.n	8001424 <HAL_GPIO_Init+0x1e4>
 8001416:	2305      	movs	r3, #5
 8001418:	e004      	b.n	8001424 <HAL_GPIO_Init+0x1e4>
 800141a:	2302      	movs	r3, #2
 800141c:	e002      	b.n	8001424 <HAL_GPIO_Init+0x1e4>
 800141e:	2301      	movs	r3, #1
 8001420:	e000      	b.n	8001424 <HAL_GPIO_Init+0x1e4>
 8001422:	2300      	movs	r3, #0
 8001424:	697a      	ldr	r2, [r7, #20]
 8001426:	2103      	movs	r1, #3
 8001428:	400a      	ands	r2, r1
 800142a:	0092      	lsls	r2, r2, #2
 800142c:	4093      	lsls	r3, r2
 800142e:	693a      	ldr	r2, [r7, #16]
 8001430:	4313      	orrs	r3, r2
 8001432:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001434:	4935      	ldr	r1, [pc, #212]	; (800150c <HAL_GPIO_Init+0x2cc>)
 8001436:	697b      	ldr	r3, [r7, #20]
 8001438:	089b      	lsrs	r3, r3, #2
 800143a:	3302      	adds	r3, #2
 800143c:	009b      	lsls	r3, r3, #2
 800143e:	693a      	ldr	r2, [r7, #16]
 8001440:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001442:	4b36      	ldr	r3, [pc, #216]	; (800151c <HAL_GPIO_Init+0x2dc>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	43da      	mvns	r2, r3
 800144c:	693b      	ldr	r3, [r7, #16]
 800144e:	4013      	ands	r3, r2
 8001450:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001452:	683b      	ldr	r3, [r7, #0]
 8001454:	685a      	ldr	r2, [r3, #4]
 8001456:	2380      	movs	r3, #128	; 0x80
 8001458:	025b      	lsls	r3, r3, #9
 800145a:	4013      	ands	r3, r2
 800145c:	d003      	beq.n	8001466 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 800145e:	693a      	ldr	r2, [r7, #16]
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	4313      	orrs	r3, r2
 8001464:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001466:	4b2d      	ldr	r3, [pc, #180]	; (800151c <HAL_GPIO_Init+0x2dc>)
 8001468:	693a      	ldr	r2, [r7, #16]
 800146a:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 800146c:	4b2b      	ldr	r3, [pc, #172]	; (800151c <HAL_GPIO_Init+0x2dc>)
 800146e:	685b      	ldr	r3, [r3, #4]
 8001470:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	43da      	mvns	r2, r3
 8001476:	693b      	ldr	r3, [r7, #16]
 8001478:	4013      	ands	r3, r2
 800147a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	685a      	ldr	r2, [r3, #4]
 8001480:	2380      	movs	r3, #128	; 0x80
 8001482:	029b      	lsls	r3, r3, #10
 8001484:	4013      	ands	r3, r2
 8001486:	d003      	beq.n	8001490 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8001488:	693a      	ldr	r2, [r7, #16]
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	4313      	orrs	r3, r2
 800148e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001490:	4b22      	ldr	r3, [pc, #136]	; (800151c <HAL_GPIO_Init+0x2dc>)
 8001492:	693a      	ldr	r2, [r7, #16]
 8001494:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001496:	4b21      	ldr	r3, [pc, #132]	; (800151c <HAL_GPIO_Init+0x2dc>)
 8001498:	689b      	ldr	r3, [r3, #8]
 800149a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	43da      	mvns	r2, r3
 80014a0:	693b      	ldr	r3, [r7, #16]
 80014a2:	4013      	ands	r3, r2
 80014a4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80014a6:	683b      	ldr	r3, [r7, #0]
 80014a8:	685a      	ldr	r2, [r3, #4]
 80014aa:	2380      	movs	r3, #128	; 0x80
 80014ac:	035b      	lsls	r3, r3, #13
 80014ae:	4013      	ands	r3, r2
 80014b0:	d003      	beq.n	80014ba <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 80014b2:	693a      	ldr	r2, [r7, #16]
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	4313      	orrs	r3, r2
 80014b8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80014ba:	4b18      	ldr	r3, [pc, #96]	; (800151c <HAL_GPIO_Init+0x2dc>)
 80014bc:	693a      	ldr	r2, [r7, #16]
 80014be:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80014c0:	4b16      	ldr	r3, [pc, #88]	; (800151c <HAL_GPIO_Init+0x2dc>)
 80014c2:	68db      	ldr	r3, [r3, #12]
 80014c4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	43da      	mvns	r2, r3
 80014ca:	693b      	ldr	r3, [r7, #16]
 80014cc:	4013      	ands	r3, r2
 80014ce:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80014d0:	683b      	ldr	r3, [r7, #0]
 80014d2:	685a      	ldr	r2, [r3, #4]
 80014d4:	2380      	movs	r3, #128	; 0x80
 80014d6:	039b      	lsls	r3, r3, #14
 80014d8:	4013      	ands	r3, r2
 80014da:	d003      	beq.n	80014e4 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 80014dc:	693a      	ldr	r2, [r7, #16]
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	4313      	orrs	r3, r2
 80014e2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80014e4:	4b0d      	ldr	r3, [pc, #52]	; (800151c <HAL_GPIO_Init+0x2dc>)
 80014e6:	693a      	ldr	r2, [r7, #16]
 80014e8:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 80014ea:	697b      	ldr	r3, [r7, #20]
 80014ec:	3301      	adds	r3, #1
 80014ee:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014f0:	683b      	ldr	r3, [r7, #0]
 80014f2:	681a      	ldr	r2, [r3, #0]
 80014f4:	697b      	ldr	r3, [r7, #20]
 80014f6:	40da      	lsrs	r2, r3
 80014f8:	1e13      	subs	r3, r2, #0
 80014fa:	d000      	beq.n	80014fe <HAL_GPIO_Init+0x2be>
 80014fc:	e6a8      	b.n	8001250 <HAL_GPIO_Init+0x10>
  } 
}
 80014fe:	46c0      	nop			; (mov r8, r8)
 8001500:	46bd      	mov	sp, r7
 8001502:	b006      	add	sp, #24
 8001504:	bd80      	pop	{r7, pc}
 8001506:	46c0      	nop			; (mov r8, r8)
 8001508:	40021000 	.word	0x40021000
 800150c:	40010000 	.word	0x40010000
 8001510:	48000400 	.word	0x48000400
 8001514:	48000800 	.word	0x48000800
 8001518:	48000c00 	.word	0x48000c00
 800151c:	40010400 	.word	0x40010400

08001520 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b082      	sub	sp, #8
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
 8001528:	0008      	movs	r0, r1
 800152a:	0011      	movs	r1, r2
 800152c:	1cbb      	adds	r3, r7, #2
 800152e:	1c02      	adds	r2, r0, #0
 8001530:	801a      	strh	r2, [r3, #0]
 8001532:	1c7b      	adds	r3, r7, #1
 8001534:	1c0a      	adds	r2, r1, #0
 8001536:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001538:	1c7b      	adds	r3, r7, #1
 800153a:	781b      	ldrb	r3, [r3, #0]
 800153c:	2b00      	cmp	r3, #0
 800153e:	d004      	beq.n	800154a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001540:	1cbb      	adds	r3, r7, #2
 8001542:	881a      	ldrh	r2, [r3, #0]
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001548:	e003      	b.n	8001552 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800154a:	1cbb      	adds	r3, r7, #2
 800154c:	881a      	ldrh	r2, [r3, #0]
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001552:	46c0      	nop			; (mov r8, r8)
 8001554:	46bd      	mov	sp, r7
 8001556:	b002      	add	sp, #8
 8001558:	bd80      	pop	{r7, pc}
	...

0800155c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b088      	sub	sp, #32
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	2b00      	cmp	r3, #0
 8001568:	d101      	bne.n	800156e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800156a:	2301      	movs	r3, #1
 800156c:	e303      	b.n	8001b76 <HAL_RCC_OscConfig+0x61a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	2201      	movs	r2, #1
 8001574:	4013      	ands	r3, r2
 8001576:	d100      	bne.n	800157a <HAL_RCC_OscConfig+0x1e>
 8001578:	e08d      	b.n	8001696 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800157a:	4bc4      	ldr	r3, [pc, #784]	; (800188c <HAL_RCC_OscConfig+0x330>)
 800157c:	685b      	ldr	r3, [r3, #4]
 800157e:	220c      	movs	r2, #12
 8001580:	4013      	ands	r3, r2
 8001582:	2b04      	cmp	r3, #4
 8001584:	d00e      	beq.n	80015a4 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001586:	4bc1      	ldr	r3, [pc, #772]	; (800188c <HAL_RCC_OscConfig+0x330>)
 8001588:	685b      	ldr	r3, [r3, #4]
 800158a:	220c      	movs	r2, #12
 800158c:	4013      	ands	r3, r2
 800158e:	2b08      	cmp	r3, #8
 8001590:	d116      	bne.n	80015c0 <HAL_RCC_OscConfig+0x64>
 8001592:	4bbe      	ldr	r3, [pc, #760]	; (800188c <HAL_RCC_OscConfig+0x330>)
 8001594:	685a      	ldr	r2, [r3, #4]
 8001596:	2380      	movs	r3, #128	; 0x80
 8001598:	025b      	lsls	r3, r3, #9
 800159a:	401a      	ands	r2, r3
 800159c:	2380      	movs	r3, #128	; 0x80
 800159e:	025b      	lsls	r3, r3, #9
 80015a0:	429a      	cmp	r2, r3
 80015a2:	d10d      	bne.n	80015c0 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015a4:	4bb9      	ldr	r3, [pc, #740]	; (800188c <HAL_RCC_OscConfig+0x330>)
 80015a6:	681a      	ldr	r2, [r3, #0]
 80015a8:	2380      	movs	r3, #128	; 0x80
 80015aa:	029b      	lsls	r3, r3, #10
 80015ac:	4013      	ands	r3, r2
 80015ae:	d100      	bne.n	80015b2 <HAL_RCC_OscConfig+0x56>
 80015b0:	e070      	b.n	8001694 <HAL_RCC_OscConfig+0x138>
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	685b      	ldr	r3, [r3, #4]
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d000      	beq.n	80015bc <HAL_RCC_OscConfig+0x60>
 80015ba:	e06b      	b.n	8001694 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 80015bc:	2301      	movs	r3, #1
 80015be:	e2da      	b.n	8001b76 <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	685b      	ldr	r3, [r3, #4]
 80015c4:	2b01      	cmp	r3, #1
 80015c6:	d107      	bne.n	80015d8 <HAL_RCC_OscConfig+0x7c>
 80015c8:	4bb0      	ldr	r3, [pc, #704]	; (800188c <HAL_RCC_OscConfig+0x330>)
 80015ca:	681a      	ldr	r2, [r3, #0]
 80015cc:	4baf      	ldr	r3, [pc, #700]	; (800188c <HAL_RCC_OscConfig+0x330>)
 80015ce:	2180      	movs	r1, #128	; 0x80
 80015d0:	0249      	lsls	r1, r1, #9
 80015d2:	430a      	orrs	r2, r1
 80015d4:	601a      	str	r2, [r3, #0]
 80015d6:	e02f      	b.n	8001638 <HAL_RCC_OscConfig+0xdc>
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	685b      	ldr	r3, [r3, #4]
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d10c      	bne.n	80015fa <HAL_RCC_OscConfig+0x9e>
 80015e0:	4baa      	ldr	r3, [pc, #680]	; (800188c <HAL_RCC_OscConfig+0x330>)
 80015e2:	681a      	ldr	r2, [r3, #0]
 80015e4:	4ba9      	ldr	r3, [pc, #676]	; (800188c <HAL_RCC_OscConfig+0x330>)
 80015e6:	49aa      	ldr	r1, [pc, #680]	; (8001890 <HAL_RCC_OscConfig+0x334>)
 80015e8:	400a      	ands	r2, r1
 80015ea:	601a      	str	r2, [r3, #0]
 80015ec:	4ba7      	ldr	r3, [pc, #668]	; (800188c <HAL_RCC_OscConfig+0x330>)
 80015ee:	681a      	ldr	r2, [r3, #0]
 80015f0:	4ba6      	ldr	r3, [pc, #664]	; (800188c <HAL_RCC_OscConfig+0x330>)
 80015f2:	49a8      	ldr	r1, [pc, #672]	; (8001894 <HAL_RCC_OscConfig+0x338>)
 80015f4:	400a      	ands	r2, r1
 80015f6:	601a      	str	r2, [r3, #0]
 80015f8:	e01e      	b.n	8001638 <HAL_RCC_OscConfig+0xdc>
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	685b      	ldr	r3, [r3, #4]
 80015fe:	2b05      	cmp	r3, #5
 8001600:	d10e      	bne.n	8001620 <HAL_RCC_OscConfig+0xc4>
 8001602:	4ba2      	ldr	r3, [pc, #648]	; (800188c <HAL_RCC_OscConfig+0x330>)
 8001604:	681a      	ldr	r2, [r3, #0]
 8001606:	4ba1      	ldr	r3, [pc, #644]	; (800188c <HAL_RCC_OscConfig+0x330>)
 8001608:	2180      	movs	r1, #128	; 0x80
 800160a:	02c9      	lsls	r1, r1, #11
 800160c:	430a      	orrs	r2, r1
 800160e:	601a      	str	r2, [r3, #0]
 8001610:	4b9e      	ldr	r3, [pc, #632]	; (800188c <HAL_RCC_OscConfig+0x330>)
 8001612:	681a      	ldr	r2, [r3, #0]
 8001614:	4b9d      	ldr	r3, [pc, #628]	; (800188c <HAL_RCC_OscConfig+0x330>)
 8001616:	2180      	movs	r1, #128	; 0x80
 8001618:	0249      	lsls	r1, r1, #9
 800161a:	430a      	orrs	r2, r1
 800161c:	601a      	str	r2, [r3, #0]
 800161e:	e00b      	b.n	8001638 <HAL_RCC_OscConfig+0xdc>
 8001620:	4b9a      	ldr	r3, [pc, #616]	; (800188c <HAL_RCC_OscConfig+0x330>)
 8001622:	681a      	ldr	r2, [r3, #0]
 8001624:	4b99      	ldr	r3, [pc, #612]	; (800188c <HAL_RCC_OscConfig+0x330>)
 8001626:	499a      	ldr	r1, [pc, #616]	; (8001890 <HAL_RCC_OscConfig+0x334>)
 8001628:	400a      	ands	r2, r1
 800162a:	601a      	str	r2, [r3, #0]
 800162c:	4b97      	ldr	r3, [pc, #604]	; (800188c <HAL_RCC_OscConfig+0x330>)
 800162e:	681a      	ldr	r2, [r3, #0]
 8001630:	4b96      	ldr	r3, [pc, #600]	; (800188c <HAL_RCC_OscConfig+0x330>)
 8001632:	4998      	ldr	r1, [pc, #608]	; (8001894 <HAL_RCC_OscConfig+0x338>)
 8001634:	400a      	ands	r2, r1
 8001636:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	685b      	ldr	r3, [r3, #4]
 800163c:	2b00      	cmp	r3, #0
 800163e:	d014      	beq.n	800166a <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001640:	f7ff f96e 	bl	8000920 <HAL_GetTick>
 8001644:	0003      	movs	r3, r0
 8001646:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001648:	e008      	b.n	800165c <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800164a:	f7ff f969 	bl	8000920 <HAL_GetTick>
 800164e:	0002      	movs	r2, r0
 8001650:	69bb      	ldr	r3, [r7, #24]
 8001652:	1ad3      	subs	r3, r2, r3
 8001654:	2b64      	cmp	r3, #100	; 0x64
 8001656:	d901      	bls.n	800165c <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8001658:	2303      	movs	r3, #3
 800165a:	e28c      	b.n	8001b76 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800165c:	4b8b      	ldr	r3, [pc, #556]	; (800188c <HAL_RCC_OscConfig+0x330>)
 800165e:	681a      	ldr	r2, [r3, #0]
 8001660:	2380      	movs	r3, #128	; 0x80
 8001662:	029b      	lsls	r3, r3, #10
 8001664:	4013      	ands	r3, r2
 8001666:	d0f0      	beq.n	800164a <HAL_RCC_OscConfig+0xee>
 8001668:	e015      	b.n	8001696 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800166a:	f7ff f959 	bl	8000920 <HAL_GetTick>
 800166e:	0003      	movs	r3, r0
 8001670:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001672:	e008      	b.n	8001686 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001674:	f7ff f954 	bl	8000920 <HAL_GetTick>
 8001678:	0002      	movs	r2, r0
 800167a:	69bb      	ldr	r3, [r7, #24]
 800167c:	1ad3      	subs	r3, r2, r3
 800167e:	2b64      	cmp	r3, #100	; 0x64
 8001680:	d901      	bls.n	8001686 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8001682:	2303      	movs	r3, #3
 8001684:	e277      	b.n	8001b76 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001686:	4b81      	ldr	r3, [pc, #516]	; (800188c <HAL_RCC_OscConfig+0x330>)
 8001688:	681a      	ldr	r2, [r3, #0]
 800168a:	2380      	movs	r3, #128	; 0x80
 800168c:	029b      	lsls	r3, r3, #10
 800168e:	4013      	ands	r3, r2
 8001690:	d1f0      	bne.n	8001674 <HAL_RCC_OscConfig+0x118>
 8001692:	e000      	b.n	8001696 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001694:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	2202      	movs	r2, #2
 800169c:	4013      	ands	r3, r2
 800169e:	d100      	bne.n	80016a2 <HAL_RCC_OscConfig+0x146>
 80016a0:	e069      	b.n	8001776 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80016a2:	4b7a      	ldr	r3, [pc, #488]	; (800188c <HAL_RCC_OscConfig+0x330>)
 80016a4:	685b      	ldr	r3, [r3, #4]
 80016a6:	220c      	movs	r2, #12
 80016a8:	4013      	ands	r3, r2
 80016aa:	d00b      	beq.n	80016c4 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80016ac:	4b77      	ldr	r3, [pc, #476]	; (800188c <HAL_RCC_OscConfig+0x330>)
 80016ae:	685b      	ldr	r3, [r3, #4]
 80016b0:	220c      	movs	r2, #12
 80016b2:	4013      	ands	r3, r2
 80016b4:	2b08      	cmp	r3, #8
 80016b6:	d11c      	bne.n	80016f2 <HAL_RCC_OscConfig+0x196>
 80016b8:	4b74      	ldr	r3, [pc, #464]	; (800188c <HAL_RCC_OscConfig+0x330>)
 80016ba:	685a      	ldr	r2, [r3, #4]
 80016bc:	2380      	movs	r3, #128	; 0x80
 80016be:	025b      	lsls	r3, r3, #9
 80016c0:	4013      	ands	r3, r2
 80016c2:	d116      	bne.n	80016f2 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016c4:	4b71      	ldr	r3, [pc, #452]	; (800188c <HAL_RCC_OscConfig+0x330>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	2202      	movs	r2, #2
 80016ca:	4013      	ands	r3, r2
 80016cc:	d005      	beq.n	80016da <HAL_RCC_OscConfig+0x17e>
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	68db      	ldr	r3, [r3, #12]
 80016d2:	2b01      	cmp	r3, #1
 80016d4:	d001      	beq.n	80016da <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80016d6:	2301      	movs	r3, #1
 80016d8:	e24d      	b.n	8001b76 <HAL_RCC_OscConfig+0x61a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016da:	4b6c      	ldr	r3, [pc, #432]	; (800188c <HAL_RCC_OscConfig+0x330>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	22f8      	movs	r2, #248	; 0xf8
 80016e0:	4393      	bics	r3, r2
 80016e2:	0019      	movs	r1, r3
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	691b      	ldr	r3, [r3, #16]
 80016e8:	00da      	lsls	r2, r3, #3
 80016ea:	4b68      	ldr	r3, [pc, #416]	; (800188c <HAL_RCC_OscConfig+0x330>)
 80016ec:	430a      	orrs	r2, r1
 80016ee:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016f0:	e041      	b.n	8001776 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	68db      	ldr	r3, [r3, #12]
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d024      	beq.n	8001744 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80016fa:	4b64      	ldr	r3, [pc, #400]	; (800188c <HAL_RCC_OscConfig+0x330>)
 80016fc:	681a      	ldr	r2, [r3, #0]
 80016fe:	4b63      	ldr	r3, [pc, #396]	; (800188c <HAL_RCC_OscConfig+0x330>)
 8001700:	2101      	movs	r1, #1
 8001702:	430a      	orrs	r2, r1
 8001704:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001706:	f7ff f90b 	bl	8000920 <HAL_GetTick>
 800170a:	0003      	movs	r3, r0
 800170c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800170e:	e008      	b.n	8001722 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001710:	f7ff f906 	bl	8000920 <HAL_GetTick>
 8001714:	0002      	movs	r2, r0
 8001716:	69bb      	ldr	r3, [r7, #24]
 8001718:	1ad3      	subs	r3, r2, r3
 800171a:	2b02      	cmp	r3, #2
 800171c:	d901      	bls.n	8001722 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 800171e:	2303      	movs	r3, #3
 8001720:	e229      	b.n	8001b76 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001722:	4b5a      	ldr	r3, [pc, #360]	; (800188c <HAL_RCC_OscConfig+0x330>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	2202      	movs	r2, #2
 8001728:	4013      	ands	r3, r2
 800172a:	d0f1      	beq.n	8001710 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800172c:	4b57      	ldr	r3, [pc, #348]	; (800188c <HAL_RCC_OscConfig+0x330>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	22f8      	movs	r2, #248	; 0xf8
 8001732:	4393      	bics	r3, r2
 8001734:	0019      	movs	r1, r3
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	691b      	ldr	r3, [r3, #16]
 800173a:	00da      	lsls	r2, r3, #3
 800173c:	4b53      	ldr	r3, [pc, #332]	; (800188c <HAL_RCC_OscConfig+0x330>)
 800173e:	430a      	orrs	r2, r1
 8001740:	601a      	str	r2, [r3, #0]
 8001742:	e018      	b.n	8001776 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001744:	4b51      	ldr	r3, [pc, #324]	; (800188c <HAL_RCC_OscConfig+0x330>)
 8001746:	681a      	ldr	r2, [r3, #0]
 8001748:	4b50      	ldr	r3, [pc, #320]	; (800188c <HAL_RCC_OscConfig+0x330>)
 800174a:	2101      	movs	r1, #1
 800174c:	438a      	bics	r2, r1
 800174e:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001750:	f7ff f8e6 	bl	8000920 <HAL_GetTick>
 8001754:	0003      	movs	r3, r0
 8001756:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001758:	e008      	b.n	800176c <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800175a:	f7ff f8e1 	bl	8000920 <HAL_GetTick>
 800175e:	0002      	movs	r2, r0
 8001760:	69bb      	ldr	r3, [r7, #24]
 8001762:	1ad3      	subs	r3, r2, r3
 8001764:	2b02      	cmp	r3, #2
 8001766:	d901      	bls.n	800176c <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8001768:	2303      	movs	r3, #3
 800176a:	e204      	b.n	8001b76 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800176c:	4b47      	ldr	r3, [pc, #284]	; (800188c <HAL_RCC_OscConfig+0x330>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	2202      	movs	r2, #2
 8001772:	4013      	ands	r3, r2
 8001774:	d1f1      	bne.n	800175a <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	2208      	movs	r2, #8
 800177c:	4013      	ands	r3, r2
 800177e:	d036      	beq.n	80017ee <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	69db      	ldr	r3, [r3, #28]
 8001784:	2b00      	cmp	r3, #0
 8001786:	d019      	beq.n	80017bc <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001788:	4b40      	ldr	r3, [pc, #256]	; (800188c <HAL_RCC_OscConfig+0x330>)
 800178a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800178c:	4b3f      	ldr	r3, [pc, #252]	; (800188c <HAL_RCC_OscConfig+0x330>)
 800178e:	2101      	movs	r1, #1
 8001790:	430a      	orrs	r2, r1
 8001792:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001794:	f7ff f8c4 	bl	8000920 <HAL_GetTick>
 8001798:	0003      	movs	r3, r0
 800179a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800179c:	e008      	b.n	80017b0 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800179e:	f7ff f8bf 	bl	8000920 <HAL_GetTick>
 80017a2:	0002      	movs	r2, r0
 80017a4:	69bb      	ldr	r3, [r7, #24]
 80017a6:	1ad3      	subs	r3, r2, r3
 80017a8:	2b02      	cmp	r3, #2
 80017aa:	d901      	bls.n	80017b0 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 80017ac:	2303      	movs	r3, #3
 80017ae:	e1e2      	b.n	8001b76 <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017b0:	4b36      	ldr	r3, [pc, #216]	; (800188c <HAL_RCC_OscConfig+0x330>)
 80017b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017b4:	2202      	movs	r2, #2
 80017b6:	4013      	ands	r3, r2
 80017b8:	d0f1      	beq.n	800179e <HAL_RCC_OscConfig+0x242>
 80017ba:	e018      	b.n	80017ee <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80017bc:	4b33      	ldr	r3, [pc, #204]	; (800188c <HAL_RCC_OscConfig+0x330>)
 80017be:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80017c0:	4b32      	ldr	r3, [pc, #200]	; (800188c <HAL_RCC_OscConfig+0x330>)
 80017c2:	2101      	movs	r1, #1
 80017c4:	438a      	bics	r2, r1
 80017c6:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017c8:	f7ff f8aa 	bl	8000920 <HAL_GetTick>
 80017cc:	0003      	movs	r3, r0
 80017ce:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017d0:	e008      	b.n	80017e4 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80017d2:	f7ff f8a5 	bl	8000920 <HAL_GetTick>
 80017d6:	0002      	movs	r2, r0
 80017d8:	69bb      	ldr	r3, [r7, #24]
 80017da:	1ad3      	subs	r3, r2, r3
 80017dc:	2b02      	cmp	r3, #2
 80017de:	d901      	bls.n	80017e4 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 80017e0:	2303      	movs	r3, #3
 80017e2:	e1c8      	b.n	8001b76 <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017e4:	4b29      	ldr	r3, [pc, #164]	; (800188c <HAL_RCC_OscConfig+0x330>)
 80017e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017e8:	2202      	movs	r2, #2
 80017ea:	4013      	ands	r3, r2
 80017ec:	d1f1      	bne.n	80017d2 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	2204      	movs	r2, #4
 80017f4:	4013      	ands	r3, r2
 80017f6:	d100      	bne.n	80017fa <HAL_RCC_OscConfig+0x29e>
 80017f8:	e0b6      	b.n	8001968 <HAL_RCC_OscConfig+0x40c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80017fa:	231f      	movs	r3, #31
 80017fc:	18fb      	adds	r3, r7, r3
 80017fe:	2200      	movs	r2, #0
 8001800:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001802:	4b22      	ldr	r3, [pc, #136]	; (800188c <HAL_RCC_OscConfig+0x330>)
 8001804:	69da      	ldr	r2, [r3, #28]
 8001806:	2380      	movs	r3, #128	; 0x80
 8001808:	055b      	lsls	r3, r3, #21
 800180a:	4013      	ands	r3, r2
 800180c:	d111      	bne.n	8001832 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800180e:	4b1f      	ldr	r3, [pc, #124]	; (800188c <HAL_RCC_OscConfig+0x330>)
 8001810:	69da      	ldr	r2, [r3, #28]
 8001812:	4b1e      	ldr	r3, [pc, #120]	; (800188c <HAL_RCC_OscConfig+0x330>)
 8001814:	2180      	movs	r1, #128	; 0x80
 8001816:	0549      	lsls	r1, r1, #21
 8001818:	430a      	orrs	r2, r1
 800181a:	61da      	str	r2, [r3, #28]
 800181c:	4b1b      	ldr	r3, [pc, #108]	; (800188c <HAL_RCC_OscConfig+0x330>)
 800181e:	69da      	ldr	r2, [r3, #28]
 8001820:	2380      	movs	r3, #128	; 0x80
 8001822:	055b      	lsls	r3, r3, #21
 8001824:	4013      	ands	r3, r2
 8001826:	60fb      	str	r3, [r7, #12]
 8001828:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800182a:	231f      	movs	r3, #31
 800182c:	18fb      	adds	r3, r7, r3
 800182e:	2201      	movs	r2, #1
 8001830:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001832:	4b19      	ldr	r3, [pc, #100]	; (8001898 <HAL_RCC_OscConfig+0x33c>)
 8001834:	681a      	ldr	r2, [r3, #0]
 8001836:	2380      	movs	r3, #128	; 0x80
 8001838:	005b      	lsls	r3, r3, #1
 800183a:	4013      	ands	r3, r2
 800183c:	d11a      	bne.n	8001874 <HAL_RCC_OscConfig+0x318>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800183e:	4b16      	ldr	r3, [pc, #88]	; (8001898 <HAL_RCC_OscConfig+0x33c>)
 8001840:	681a      	ldr	r2, [r3, #0]
 8001842:	4b15      	ldr	r3, [pc, #84]	; (8001898 <HAL_RCC_OscConfig+0x33c>)
 8001844:	2180      	movs	r1, #128	; 0x80
 8001846:	0049      	lsls	r1, r1, #1
 8001848:	430a      	orrs	r2, r1
 800184a:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800184c:	f7ff f868 	bl	8000920 <HAL_GetTick>
 8001850:	0003      	movs	r3, r0
 8001852:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001854:	e008      	b.n	8001868 <HAL_RCC_OscConfig+0x30c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001856:	f7ff f863 	bl	8000920 <HAL_GetTick>
 800185a:	0002      	movs	r2, r0
 800185c:	69bb      	ldr	r3, [r7, #24]
 800185e:	1ad3      	subs	r3, r2, r3
 8001860:	2b64      	cmp	r3, #100	; 0x64
 8001862:	d901      	bls.n	8001868 <HAL_RCC_OscConfig+0x30c>
        {
          return HAL_TIMEOUT;
 8001864:	2303      	movs	r3, #3
 8001866:	e186      	b.n	8001b76 <HAL_RCC_OscConfig+0x61a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001868:	4b0b      	ldr	r3, [pc, #44]	; (8001898 <HAL_RCC_OscConfig+0x33c>)
 800186a:	681a      	ldr	r2, [r3, #0]
 800186c:	2380      	movs	r3, #128	; 0x80
 800186e:	005b      	lsls	r3, r3, #1
 8001870:	4013      	ands	r3, r2
 8001872:	d0f0      	beq.n	8001856 <HAL_RCC_OscConfig+0x2fa>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	689b      	ldr	r3, [r3, #8]
 8001878:	2b01      	cmp	r3, #1
 800187a:	d10f      	bne.n	800189c <HAL_RCC_OscConfig+0x340>
 800187c:	4b03      	ldr	r3, [pc, #12]	; (800188c <HAL_RCC_OscConfig+0x330>)
 800187e:	6a1a      	ldr	r2, [r3, #32]
 8001880:	4b02      	ldr	r3, [pc, #8]	; (800188c <HAL_RCC_OscConfig+0x330>)
 8001882:	2101      	movs	r1, #1
 8001884:	430a      	orrs	r2, r1
 8001886:	621a      	str	r2, [r3, #32]
 8001888:	e036      	b.n	80018f8 <HAL_RCC_OscConfig+0x39c>
 800188a:	46c0      	nop			; (mov r8, r8)
 800188c:	40021000 	.word	0x40021000
 8001890:	fffeffff 	.word	0xfffeffff
 8001894:	fffbffff 	.word	0xfffbffff
 8001898:	40007000 	.word	0x40007000
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	689b      	ldr	r3, [r3, #8]
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d10c      	bne.n	80018be <HAL_RCC_OscConfig+0x362>
 80018a4:	4bb6      	ldr	r3, [pc, #728]	; (8001b80 <HAL_RCC_OscConfig+0x624>)
 80018a6:	6a1a      	ldr	r2, [r3, #32]
 80018a8:	4bb5      	ldr	r3, [pc, #724]	; (8001b80 <HAL_RCC_OscConfig+0x624>)
 80018aa:	2101      	movs	r1, #1
 80018ac:	438a      	bics	r2, r1
 80018ae:	621a      	str	r2, [r3, #32]
 80018b0:	4bb3      	ldr	r3, [pc, #716]	; (8001b80 <HAL_RCC_OscConfig+0x624>)
 80018b2:	6a1a      	ldr	r2, [r3, #32]
 80018b4:	4bb2      	ldr	r3, [pc, #712]	; (8001b80 <HAL_RCC_OscConfig+0x624>)
 80018b6:	2104      	movs	r1, #4
 80018b8:	438a      	bics	r2, r1
 80018ba:	621a      	str	r2, [r3, #32]
 80018bc:	e01c      	b.n	80018f8 <HAL_RCC_OscConfig+0x39c>
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	689b      	ldr	r3, [r3, #8]
 80018c2:	2b05      	cmp	r3, #5
 80018c4:	d10c      	bne.n	80018e0 <HAL_RCC_OscConfig+0x384>
 80018c6:	4bae      	ldr	r3, [pc, #696]	; (8001b80 <HAL_RCC_OscConfig+0x624>)
 80018c8:	6a1a      	ldr	r2, [r3, #32]
 80018ca:	4bad      	ldr	r3, [pc, #692]	; (8001b80 <HAL_RCC_OscConfig+0x624>)
 80018cc:	2104      	movs	r1, #4
 80018ce:	430a      	orrs	r2, r1
 80018d0:	621a      	str	r2, [r3, #32]
 80018d2:	4bab      	ldr	r3, [pc, #684]	; (8001b80 <HAL_RCC_OscConfig+0x624>)
 80018d4:	6a1a      	ldr	r2, [r3, #32]
 80018d6:	4baa      	ldr	r3, [pc, #680]	; (8001b80 <HAL_RCC_OscConfig+0x624>)
 80018d8:	2101      	movs	r1, #1
 80018da:	430a      	orrs	r2, r1
 80018dc:	621a      	str	r2, [r3, #32]
 80018de:	e00b      	b.n	80018f8 <HAL_RCC_OscConfig+0x39c>
 80018e0:	4ba7      	ldr	r3, [pc, #668]	; (8001b80 <HAL_RCC_OscConfig+0x624>)
 80018e2:	6a1a      	ldr	r2, [r3, #32]
 80018e4:	4ba6      	ldr	r3, [pc, #664]	; (8001b80 <HAL_RCC_OscConfig+0x624>)
 80018e6:	2101      	movs	r1, #1
 80018e8:	438a      	bics	r2, r1
 80018ea:	621a      	str	r2, [r3, #32]
 80018ec:	4ba4      	ldr	r3, [pc, #656]	; (8001b80 <HAL_RCC_OscConfig+0x624>)
 80018ee:	6a1a      	ldr	r2, [r3, #32]
 80018f0:	4ba3      	ldr	r3, [pc, #652]	; (8001b80 <HAL_RCC_OscConfig+0x624>)
 80018f2:	2104      	movs	r1, #4
 80018f4:	438a      	bics	r2, r1
 80018f6:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	689b      	ldr	r3, [r3, #8]
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d014      	beq.n	800192a <HAL_RCC_OscConfig+0x3ce>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001900:	f7ff f80e 	bl	8000920 <HAL_GetTick>
 8001904:	0003      	movs	r3, r0
 8001906:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001908:	e009      	b.n	800191e <HAL_RCC_OscConfig+0x3c2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800190a:	f7ff f809 	bl	8000920 <HAL_GetTick>
 800190e:	0002      	movs	r2, r0
 8001910:	69bb      	ldr	r3, [r7, #24]
 8001912:	1ad3      	subs	r3, r2, r3
 8001914:	4a9b      	ldr	r2, [pc, #620]	; (8001b84 <HAL_RCC_OscConfig+0x628>)
 8001916:	4293      	cmp	r3, r2
 8001918:	d901      	bls.n	800191e <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 800191a:	2303      	movs	r3, #3
 800191c:	e12b      	b.n	8001b76 <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800191e:	4b98      	ldr	r3, [pc, #608]	; (8001b80 <HAL_RCC_OscConfig+0x624>)
 8001920:	6a1b      	ldr	r3, [r3, #32]
 8001922:	2202      	movs	r2, #2
 8001924:	4013      	ands	r3, r2
 8001926:	d0f0      	beq.n	800190a <HAL_RCC_OscConfig+0x3ae>
 8001928:	e013      	b.n	8001952 <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800192a:	f7fe fff9 	bl	8000920 <HAL_GetTick>
 800192e:	0003      	movs	r3, r0
 8001930:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001932:	e009      	b.n	8001948 <HAL_RCC_OscConfig+0x3ec>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001934:	f7fe fff4 	bl	8000920 <HAL_GetTick>
 8001938:	0002      	movs	r2, r0
 800193a:	69bb      	ldr	r3, [r7, #24]
 800193c:	1ad3      	subs	r3, r2, r3
 800193e:	4a91      	ldr	r2, [pc, #580]	; (8001b84 <HAL_RCC_OscConfig+0x628>)
 8001940:	4293      	cmp	r3, r2
 8001942:	d901      	bls.n	8001948 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8001944:	2303      	movs	r3, #3
 8001946:	e116      	b.n	8001b76 <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001948:	4b8d      	ldr	r3, [pc, #564]	; (8001b80 <HAL_RCC_OscConfig+0x624>)
 800194a:	6a1b      	ldr	r3, [r3, #32]
 800194c:	2202      	movs	r2, #2
 800194e:	4013      	ands	r3, r2
 8001950:	d1f0      	bne.n	8001934 <HAL_RCC_OscConfig+0x3d8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001952:	231f      	movs	r3, #31
 8001954:	18fb      	adds	r3, r7, r3
 8001956:	781b      	ldrb	r3, [r3, #0]
 8001958:	2b01      	cmp	r3, #1
 800195a:	d105      	bne.n	8001968 <HAL_RCC_OscConfig+0x40c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800195c:	4b88      	ldr	r3, [pc, #544]	; (8001b80 <HAL_RCC_OscConfig+0x624>)
 800195e:	69da      	ldr	r2, [r3, #28]
 8001960:	4b87      	ldr	r3, [pc, #540]	; (8001b80 <HAL_RCC_OscConfig+0x624>)
 8001962:	4989      	ldr	r1, [pc, #548]	; (8001b88 <HAL_RCC_OscConfig+0x62c>)
 8001964:	400a      	ands	r2, r1
 8001966:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	2210      	movs	r2, #16
 800196e:	4013      	ands	r3, r2
 8001970:	d063      	beq.n	8001a3a <HAL_RCC_OscConfig+0x4de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	695b      	ldr	r3, [r3, #20]
 8001976:	2b01      	cmp	r3, #1
 8001978:	d12a      	bne.n	80019d0 <HAL_RCC_OscConfig+0x474>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800197a:	4b81      	ldr	r3, [pc, #516]	; (8001b80 <HAL_RCC_OscConfig+0x624>)
 800197c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800197e:	4b80      	ldr	r3, [pc, #512]	; (8001b80 <HAL_RCC_OscConfig+0x624>)
 8001980:	2104      	movs	r1, #4
 8001982:	430a      	orrs	r2, r1
 8001984:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8001986:	4b7e      	ldr	r3, [pc, #504]	; (8001b80 <HAL_RCC_OscConfig+0x624>)
 8001988:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800198a:	4b7d      	ldr	r3, [pc, #500]	; (8001b80 <HAL_RCC_OscConfig+0x624>)
 800198c:	2101      	movs	r1, #1
 800198e:	430a      	orrs	r2, r1
 8001990:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001992:	f7fe ffc5 	bl	8000920 <HAL_GetTick>
 8001996:	0003      	movs	r3, r0
 8001998:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800199a:	e008      	b.n	80019ae <HAL_RCC_OscConfig+0x452>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800199c:	f7fe ffc0 	bl	8000920 <HAL_GetTick>
 80019a0:	0002      	movs	r2, r0
 80019a2:	69bb      	ldr	r3, [r7, #24]
 80019a4:	1ad3      	subs	r3, r2, r3
 80019a6:	2b02      	cmp	r3, #2
 80019a8:	d901      	bls.n	80019ae <HAL_RCC_OscConfig+0x452>
        {
          return HAL_TIMEOUT;
 80019aa:	2303      	movs	r3, #3
 80019ac:	e0e3      	b.n	8001b76 <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80019ae:	4b74      	ldr	r3, [pc, #464]	; (8001b80 <HAL_RCC_OscConfig+0x624>)
 80019b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019b2:	2202      	movs	r2, #2
 80019b4:	4013      	ands	r3, r2
 80019b6:	d0f1      	beq.n	800199c <HAL_RCC_OscConfig+0x440>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80019b8:	4b71      	ldr	r3, [pc, #452]	; (8001b80 <HAL_RCC_OscConfig+0x624>)
 80019ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019bc:	22f8      	movs	r2, #248	; 0xf8
 80019be:	4393      	bics	r3, r2
 80019c0:	0019      	movs	r1, r3
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	699b      	ldr	r3, [r3, #24]
 80019c6:	00da      	lsls	r2, r3, #3
 80019c8:	4b6d      	ldr	r3, [pc, #436]	; (8001b80 <HAL_RCC_OscConfig+0x624>)
 80019ca:	430a      	orrs	r2, r1
 80019cc:	635a      	str	r2, [r3, #52]	; 0x34
 80019ce:	e034      	b.n	8001a3a <HAL_RCC_OscConfig+0x4de>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	695b      	ldr	r3, [r3, #20]
 80019d4:	3305      	adds	r3, #5
 80019d6:	d111      	bne.n	80019fc <HAL_RCC_OscConfig+0x4a0>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80019d8:	4b69      	ldr	r3, [pc, #420]	; (8001b80 <HAL_RCC_OscConfig+0x624>)
 80019da:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80019dc:	4b68      	ldr	r3, [pc, #416]	; (8001b80 <HAL_RCC_OscConfig+0x624>)
 80019de:	2104      	movs	r1, #4
 80019e0:	438a      	bics	r2, r1
 80019e2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80019e4:	4b66      	ldr	r3, [pc, #408]	; (8001b80 <HAL_RCC_OscConfig+0x624>)
 80019e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019e8:	22f8      	movs	r2, #248	; 0xf8
 80019ea:	4393      	bics	r3, r2
 80019ec:	0019      	movs	r1, r3
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	699b      	ldr	r3, [r3, #24]
 80019f2:	00da      	lsls	r2, r3, #3
 80019f4:	4b62      	ldr	r3, [pc, #392]	; (8001b80 <HAL_RCC_OscConfig+0x624>)
 80019f6:	430a      	orrs	r2, r1
 80019f8:	635a      	str	r2, [r3, #52]	; 0x34
 80019fa:	e01e      	b.n	8001a3a <HAL_RCC_OscConfig+0x4de>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80019fc:	4b60      	ldr	r3, [pc, #384]	; (8001b80 <HAL_RCC_OscConfig+0x624>)
 80019fe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001a00:	4b5f      	ldr	r3, [pc, #380]	; (8001b80 <HAL_RCC_OscConfig+0x624>)
 8001a02:	2104      	movs	r1, #4
 8001a04:	430a      	orrs	r2, r1
 8001a06:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001a08:	4b5d      	ldr	r3, [pc, #372]	; (8001b80 <HAL_RCC_OscConfig+0x624>)
 8001a0a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001a0c:	4b5c      	ldr	r3, [pc, #368]	; (8001b80 <HAL_RCC_OscConfig+0x624>)
 8001a0e:	2101      	movs	r1, #1
 8001a10:	438a      	bics	r2, r1
 8001a12:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a14:	f7fe ff84 	bl	8000920 <HAL_GetTick>
 8001a18:	0003      	movs	r3, r0
 8001a1a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001a1c:	e008      	b.n	8001a30 <HAL_RCC_OscConfig+0x4d4>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001a1e:	f7fe ff7f 	bl	8000920 <HAL_GetTick>
 8001a22:	0002      	movs	r2, r0
 8001a24:	69bb      	ldr	r3, [r7, #24]
 8001a26:	1ad3      	subs	r3, r2, r3
 8001a28:	2b02      	cmp	r3, #2
 8001a2a:	d901      	bls.n	8001a30 <HAL_RCC_OscConfig+0x4d4>
        {
          return HAL_TIMEOUT;
 8001a2c:	2303      	movs	r3, #3
 8001a2e:	e0a2      	b.n	8001b76 <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001a30:	4b53      	ldr	r3, [pc, #332]	; (8001b80 <HAL_RCC_OscConfig+0x624>)
 8001a32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a34:	2202      	movs	r2, #2
 8001a36:	4013      	ands	r3, r2
 8001a38:	d1f1      	bne.n	8001a1e <HAL_RCC_OscConfig+0x4c2>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	6a1b      	ldr	r3, [r3, #32]
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d100      	bne.n	8001a44 <HAL_RCC_OscConfig+0x4e8>
 8001a42:	e097      	b.n	8001b74 <HAL_RCC_OscConfig+0x618>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a44:	4b4e      	ldr	r3, [pc, #312]	; (8001b80 <HAL_RCC_OscConfig+0x624>)
 8001a46:	685b      	ldr	r3, [r3, #4]
 8001a48:	220c      	movs	r2, #12
 8001a4a:	4013      	ands	r3, r2
 8001a4c:	2b08      	cmp	r3, #8
 8001a4e:	d100      	bne.n	8001a52 <HAL_RCC_OscConfig+0x4f6>
 8001a50:	e06b      	b.n	8001b2a <HAL_RCC_OscConfig+0x5ce>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	6a1b      	ldr	r3, [r3, #32]
 8001a56:	2b02      	cmp	r3, #2
 8001a58:	d14c      	bne.n	8001af4 <HAL_RCC_OscConfig+0x598>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a5a:	4b49      	ldr	r3, [pc, #292]	; (8001b80 <HAL_RCC_OscConfig+0x624>)
 8001a5c:	681a      	ldr	r2, [r3, #0]
 8001a5e:	4b48      	ldr	r3, [pc, #288]	; (8001b80 <HAL_RCC_OscConfig+0x624>)
 8001a60:	494a      	ldr	r1, [pc, #296]	; (8001b8c <HAL_RCC_OscConfig+0x630>)
 8001a62:	400a      	ands	r2, r1
 8001a64:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a66:	f7fe ff5b 	bl	8000920 <HAL_GetTick>
 8001a6a:	0003      	movs	r3, r0
 8001a6c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a6e:	e008      	b.n	8001a82 <HAL_RCC_OscConfig+0x526>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a70:	f7fe ff56 	bl	8000920 <HAL_GetTick>
 8001a74:	0002      	movs	r2, r0
 8001a76:	69bb      	ldr	r3, [r7, #24]
 8001a78:	1ad3      	subs	r3, r2, r3
 8001a7a:	2b02      	cmp	r3, #2
 8001a7c:	d901      	bls.n	8001a82 <HAL_RCC_OscConfig+0x526>
          {
            return HAL_TIMEOUT;
 8001a7e:	2303      	movs	r3, #3
 8001a80:	e079      	b.n	8001b76 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a82:	4b3f      	ldr	r3, [pc, #252]	; (8001b80 <HAL_RCC_OscConfig+0x624>)
 8001a84:	681a      	ldr	r2, [r3, #0]
 8001a86:	2380      	movs	r3, #128	; 0x80
 8001a88:	049b      	lsls	r3, r3, #18
 8001a8a:	4013      	ands	r3, r2
 8001a8c:	d1f0      	bne.n	8001a70 <HAL_RCC_OscConfig+0x514>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a8e:	4b3c      	ldr	r3, [pc, #240]	; (8001b80 <HAL_RCC_OscConfig+0x624>)
 8001a90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a92:	220f      	movs	r2, #15
 8001a94:	4393      	bics	r3, r2
 8001a96:	0019      	movs	r1, r3
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a9c:	4b38      	ldr	r3, [pc, #224]	; (8001b80 <HAL_RCC_OscConfig+0x624>)
 8001a9e:	430a      	orrs	r2, r1
 8001aa0:	62da      	str	r2, [r3, #44]	; 0x2c
 8001aa2:	4b37      	ldr	r3, [pc, #220]	; (8001b80 <HAL_RCC_OscConfig+0x624>)
 8001aa4:	685b      	ldr	r3, [r3, #4]
 8001aa6:	4a3a      	ldr	r2, [pc, #232]	; (8001b90 <HAL_RCC_OscConfig+0x634>)
 8001aa8:	4013      	ands	r3, r2
 8001aaa:	0019      	movs	r1, r3
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ab4:	431a      	orrs	r2, r3
 8001ab6:	4b32      	ldr	r3, [pc, #200]	; (8001b80 <HAL_RCC_OscConfig+0x624>)
 8001ab8:	430a      	orrs	r2, r1
 8001aba:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001abc:	4b30      	ldr	r3, [pc, #192]	; (8001b80 <HAL_RCC_OscConfig+0x624>)
 8001abe:	681a      	ldr	r2, [r3, #0]
 8001ac0:	4b2f      	ldr	r3, [pc, #188]	; (8001b80 <HAL_RCC_OscConfig+0x624>)
 8001ac2:	2180      	movs	r1, #128	; 0x80
 8001ac4:	0449      	lsls	r1, r1, #17
 8001ac6:	430a      	orrs	r2, r1
 8001ac8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001aca:	f7fe ff29 	bl	8000920 <HAL_GetTick>
 8001ace:	0003      	movs	r3, r0
 8001ad0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ad2:	e008      	b.n	8001ae6 <HAL_RCC_OscConfig+0x58a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ad4:	f7fe ff24 	bl	8000920 <HAL_GetTick>
 8001ad8:	0002      	movs	r2, r0
 8001ada:	69bb      	ldr	r3, [r7, #24]
 8001adc:	1ad3      	subs	r3, r2, r3
 8001ade:	2b02      	cmp	r3, #2
 8001ae0:	d901      	bls.n	8001ae6 <HAL_RCC_OscConfig+0x58a>
          {
            return HAL_TIMEOUT;
 8001ae2:	2303      	movs	r3, #3
 8001ae4:	e047      	b.n	8001b76 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ae6:	4b26      	ldr	r3, [pc, #152]	; (8001b80 <HAL_RCC_OscConfig+0x624>)
 8001ae8:	681a      	ldr	r2, [r3, #0]
 8001aea:	2380      	movs	r3, #128	; 0x80
 8001aec:	049b      	lsls	r3, r3, #18
 8001aee:	4013      	ands	r3, r2
 8001af0:	d0f0      	beq.n	8001ad4 <HAL_RCC_OscConfig+0x578>
 8001af2:	e03f      	b.n	8001b74 <HAL_RCC_OscConfig+0x618>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001af4:	4b22      	ldr	r3, [pc, #136]	; (8001b80 <HAL_RCC_OscConfig+0x624>)
 8001af6:	681a      	ldr	r2, [r3, #0]
 8001af8:	4b21      	ldr	r3, [pc, #132]	; (8001b80 <HAL_RCC_OscConfig+0x624>)
 8001afa:	4924      	ldr	r1, [pc, #144]	; (8001b8c <HAL_RCC_OscConfig+0x630>)
 8001afc:	400a      	ands	r2, r1
 8001afe:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b00:	f7fe ff0e 	bl	8000920 <HAL_GetTick>
 8001b04:	0003      	movs	r3, r0
 8001b06:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b08:	e008      	b.n	8001b1c <HAL_RCC_OscConfig+0x5c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b0a:	f7fe ff09 	bl	8000920 <HAL_GetTick>
 8001b0e:	0002      	movs	r2, r0
 8001b10:	69bb      	ldr	r3, [r7, #24]
 8001b12:	1ad3      	subs	r3, r2, r3
 8001b14:	2b02      	cmp	r3, #2
 8001b16:	d901      	bls.n	8001b1c <HAL_RCC_OscConfig+0x5c0>
          {
            return HAL_TIMEOUT;
 8001b18:	2303      	movs	r3, #3
 8001b1a:	e02c      	b.n	8001b76 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b1c:	4b18      	ldr	r3, [pc, #96]	; (8001b80 <HAL_RCC_OscConfig+0x624>)
 8001b1e:	681a      	ldr	r2, [r3, #0]
 8001b20:	2380      	movs	r3, #128	; 0x80
 8001b22:	049b      	lsls	r3, r3, #18
 8001b24:	4013      	ands	r3, r2
 8001b26:	d1f0      	bne.n	8001b0a <HAL_RCC_OscConfig+0x5ae>
 8001b28:	e024      	b.n	8001b74 <HAL_RCC_OscConfig+0x618>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	6a1b      	ldr	r3, [r3, #32]
 8001b2e:	2b01      	cmp	r3, #1
 8001b30:	d101      	bne.n	8001b36 <HAL_RCC_OscConfig+0x5da>
      {
        return HAL_ERROR;
 8001b32:	2301      	movs	r3, #1
 8001b34:	e01f      	b.n	8001b76 <HAL_RCC_OscConfig+0x61a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001b36:	4b12      	ldr	r3, [pc, #72]	; (8001b80 <HAL_RCC_OscConfig+0x624>)
 8001b38:	685b      	ldr	r3, [r3, #4]
 8001b3a:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8001b3c:	4b10      	ldr	r3, [pc, #64]	; (8001b80 <HAL_RCC_OscConfig+0x624>)
 8001b3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b40:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b42:	697a      	ldr	r2, [r7, #20]
 8001b44:	2380      	movs	r3, #128	; 0x80
 8001b46:	025b      	lsls	r3, r3, #9
 8001b48:	401a      	ands	r2, r3
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b4e:	429a      	cmp	r2, r3
 8001b50:	d10e      	bne.n	8001b70 <HAL_RCC_OscConfig+0x614>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001b52:	693b      	ldr	r3, [r7, #16]
 8001b54:	220f      	movs	r2, #15
 8001b56:	401a      	ands	r2, r3
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b5c:	429a      	cmp	r2, r3
 8001b5e:	d107      	bne.n	8001b70 <HAL_RCC_OscConfig+0x614>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001b60:	697a      	ldr	r2, [r7, #20]
 8001b62:	23f0      	movs	r3, #240	; 0xf0
 8001b64:	039b      	lsls	r3, r3, #14
 8001b66:	401a      	ands	r2, r3
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001b6c:	429a      	cmp	r2, r3
 8001b6e:	d001      	beq.n	8001b74 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_ERROR;
 8001b70:	2301      	movs	r3, #1
 8001b72:	e000      	b.n	8001b76 <HAL_RCC_OscConfig+0x61a>
        }
      }
    }
  }

  return HAL_OK;
 8001b74:	2300      	movs	r3, #0
}
 8001b76:	0018      	movs	r0, r3
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	b008      	add	sp, #32
 8001b7c:	bd80      	pop	{r7, pc}
 8001b7e:	46c0      	nop			; (mov r8, r8)
 8001b80:	40021000 	.word	0x40021000
 8001b84:	00001388 	.word	0x00001388
 8001b88:	efffffff 	.word	0xefffffff
 8001b8c:	feffffff 	.word	0xfeffffff
 8001b90:	ffc2ffff 	.word	0xffc2ffff

08001b94 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b084      	sub	sp, #16
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
 8001b9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d101      	bne.n	8001ba8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ba4:	2301      	movs	r3, #1
 8001ba6:	e0b3      	b.n	8001d10 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001ba8:	4b5b      	ldr	r3, [pc, #364]	; (8001d18 <HAL_RCC_ClockConfig+0x184>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	2201      	movs	r2, #1
 8001bae:	4013      	ands	r3, r2
 8001bb0:	683a      	ldr	r2, [r7, #0]
 8001bb2:	429a      	cmp	r2, r3
 8001bb4:	d911      	bls.n	8001bda <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bb6:	4b58      	ldr	r3, [pc, #352]	; (8001d18 <HAL_RCC_ClockConfig+0x184>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	2201      	movs	r2, #1
 8001bbc:	4393      	bics	r3, r2
 8001bbe:	0019      	movs	r1, r3
 8001bc0:	4b55      	ldr	r3, [pc, #340]	; (8001d18 <HAL_RCC_ClockConfig+0x184>)
 8001bc2:	683a      	ldr	r2, [r7, #0]
 8001bc4:	430a      	orrs	r2, r1
 8001bc6:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bc8:	4b53      	ldr	r3, [pc, #332]	; (8001d18 <HAL_RCC_ClockConfig+0x184>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	2201      	movs	r2, #1
 8001bce:	4013      	ands	r3, r2
 8001bd0:	683a      	ldr	r2, [r7, #0]
 8001bd2:	429a      	cmp	r2, r3
 8001bd4:	d001      	beq.n	8001bda <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	e09a      	b.n	8001d10 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	2202      	movs	r2, #2
 8001be0:	4013      	ands	r3, r2
 8001be2:	d015      	beq.n	8001c10 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	2204      	movs	r2, #4
 8001bea:	4013      	ands	r3, r2
 8001bec:	d006      	beq.n	8001bfc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001bee:	4b4b      	ldr	r3, [pc, #300]	; (8001d1c <HAL_RCC_ClockConfig+0x188>)
 8001bf0:	685a      	ldr	r2, [r3, #4]
 8001bf2:	4b4a      	ldr	r3, [pc, #296]	; (8001d1c <HAL_RCC_ClockConfig+0x188>)
 8001bf4:	21e0      	movs	r1, #224	; 0xe0
 8001bf6:	00c9      	lsls	r1, r1, #3
 8001bf8:	430a      	orrs	r2, r1
 8001bfa:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001bfc:	4b47      	ldr	r3, [pc, #284]	; (8001d1c <HAL_RCC_ClockConfig+0x188>)
 8001bfe:	685b      	ldr	r3, [r3, #4]
 8001c00:	22f0      	movs	r2, #240	; 0xf0
 8001c02:	4393      	bics	r3, r2
 8001c04:	0019      	movs	r1, r3
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	689a      	ldr	r2, [r3, #8]
 8001c0a:	4b44      	ldr	r3, [pc, #272]	; (8001d1c <HAL_RCC_ClockConfig+0x188>)
 8001c0c:	430a      	orrs	r2, r1
 8001c0e:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	2201      	movs	r2, #1
 8001c16:	4013      	ands	r3, r2
 8001c18:	d040      	beq.n	8001c9c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	685b      	ldr	r3, [r3, #4]
 8001c1e:	2b01      	cmp	r3, #1
 8001c20:	d107      	bne.n	8001c32 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c22:	4b3e      	ldr	r3, [pc, #248]	; (8001d1c <HAL_RCC_ClockConfig+0x188>)
 8001c24:	681a      	ldr	r2, [r3, #0]
 8001c26:	2380      	movs	r3, #128	; 0x80
 8001c28:	029b      	lsls	r3, r3, #10
 8001c2a:	4013      	ands	r3, r2
 8001c2c:	d114      	bne.n	8001c58 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001c2e:	2301      	movs	r3, #1
 8001c30:	e06e      	b.n	8001d10 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	685b      	ldr	r3, [r3, #4]
 8001c36:	2b02      	cmp	r3, #2
 8001c38:	d107      	bne.n	8001c4a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c3a:	4b38      	ldr	r3, [pc, #224]	; (8001d1c <HAL_RCC_ClockConfig+0x188>)
 8001c3c:	681a      	ldr	r2, [r3, #0]
 8001c3e:	2380      	movs	r3, #128	; 0x80
 8001c40:	049b      	lsls	r3, r3, #18
 8001c42:	4013      	ands	r3, r2
 8001c44:	d108      	bne.n	8001c58 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001c46:	2301      	movs	r3, #1
 8001c48:	e062      	b.n	8001d10 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c4a:	4b34      	ldr	r3, [pc, #208]	; (8001d1c <HAL_RCC_ClockConfig+0x188>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	2202      	movs	r2, #2
 8001c50:	4013      	ands	r3, r2
 8001c52:	d101      	bne.n	8001c58 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001c54:	2301      	movs	r3, #1
 8001c56:	e05b      	b.n	8001d10 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c58:	4b30      	ldr	r3, [pc, #192]	; (8001d1c <HAL_RCC_ClockConfig+0x188>)
 8001c5a:	685b      	ldr	r3, [r3, #4]
 8001c5c:	2203      	movs	r2, #3
 8001c5e:	4393      	bics	r3, r2
 8001c60:	0019      	movs	r1, r3
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	685a      	ldr	r2, [r3, #4]
 8001c66:	4b2d      	ldr	r3, [pc, #180]	; (8001d1c <HAL_RCC_ClockConfig+0x188>)
 8001c68:	430a      	orrs	r2, r1
 8001c6a:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001c6c:	f7fe fe58 	bl	8000920 <HAL_GetTick>
 8001c70:	0003      	movs	r3, r0
 8001c72:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c74:	e009      	b.n	8001c8a <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c76:	f7fe fe53 	bl	8000920 <HAL_GetTick>
 8001c7a:	0002      	movs	r2, r0
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	1ad3      	subs	r3, r2, r3
 8001c80:	4a27      	ldr	r2, [pc, #156]	; (8001d20 <HAL_RCC_ClockConfig+0x18c>)
 8001c82:	4293      	cmp	r3, r2
 8001c84:	d901      	bls.n	8001c8a <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8001c86:	2303      	movs	r3, #3
 8001c88:	e042      	b.n	8001d10 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c8a:	4b24      	ldr	r3, [pc, #144]	; (8001d1c <HAL_RCC_ClockConfig+0x188>)
 8001c8c:	685b      	ldr	r3, [r3, #4]
 8001c8e:	220c      	movs	r2, #12
 8001c90:	401a      	ands	r2, r3
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	685b      	ldr	r3, [r3, #4]
 8001c96:	009b      	lsls	r3, r3, #2
 8001c98:	429a      	cmp	r2, r3
 8001c9a:	d1ec      	bne.n	8001c76 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001c9c:	4b1e      	ldr	r3, [pc, #120]	; (8001d18 <HAL_RCC_ClockConfig+0x184>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	2201      	movs	r2, #1
 8001ca2:	4013      	ands	r3, r2
 8001ca4:	683a      	ldr	r2, [r7, #0]
 8001ca6:	429a      	cmp	r2, r3
 8001ca8:	d211      	bcs.n	8001cce <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001caa:	4b1b      	ldr	r3, [pc, #108]	; (8001d18 <HAL_RCC_ClockConfig+0x184>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	2201      	movs	r2, #1
 8001cb0:	4393      	bics	r3, r2
 8001cb2:	0019      	movs	r1, r3
 8001cb4:	4b18      	ldr	r3, [pc, #96]	; (8001d18 <HAL_RCC_ClockConfig+0x184>)
 8001cb6:	683a      	ldr	r2, [r7, #0]
 8001cb8:	430a      	orrs	r2, r1
 8001cba:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cbc:	4b16      	ldr	r3, [pc, #88]	; (8001d18 <HAL_RCC_ClockConfig+0x184>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	2201      	movs	r2, #1
 8001cc2:	4013      	ands	r3, r2
 8001cc4:	683a      	ldr	r2, [r7, #0]
 8001cc6:	429a      	cmp	r2, r3
 8001cc8:	d001      	beq.n	8001cce <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8001cca:	2301      	movs	r3, #1
 8001ccc:	e020      	b.n	8001d10 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	2204      	movs	r2, #4
 8001cd4:	4013      	ands	r3, r2
 8001cd6:	d009      	beq.n	8001cec <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001cd8:	4b10      	ldr	r3, [pc, #64]	; (8001d1c <HAL_RCC_ClockConfig+0x188>)
 8001cda:	685b      	ldr	r3, [r3, #4]
 8001cdc:	4a11      	ldr	r2, [pc, #68]	; (8001d24 <HAL_RCC_ClockConfig+0x190>)
 8001cde:	4013      	ands	r3, r2
 8001ce0:	0019      	movs	r1, r3
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	68da      	ldr	r2, [r3, #12]
 8001ce6:	4b0d      	ldr	r3, [pc, #52]	; (8001d1c <HAL_RCC_ClockConfig+0x188>)
 8001ce8:	430a      	orrs	r2, r1
 8001cea:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001cec:	f000 f820 	bl	8001d30 <HAL_RCC_GetSysClockFreq>
 8001cf0:	0001      	movs	r1, r0
 8001cf2:	4b0a      	ldr	r3, [pc, #40]	; (8001d1c <HAL_RCC_ClockConfig+0x188>)
 8001cf4:	685b      	ldr	r3, [r3, #4]
 8001cf6:	091b      	lsrs	r3, r3, #4
 8001cf8:	220f      	movs	r2, #15
 8001cfa:	4013      	ands	r3, r2
 8001cfc:	4a0a      	ldr	r2, [pc, #40]	; (8001d28 <HAL_RCC_ClockConfig+0x194>)
 8001cfe:	5cd3      	ldrb	r3, [r2, r3]
 8001d00:	000a      	movs	r2, r1
 8001d02:	40da      	lsrs	r2, r3
 8001d04:	4b09      	ldr	r3, [pc, #36]	; (8001d2c <HAL_RCC_ClockConfig+0x198>)
 8001d06:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001d08:	2000      	movs	r0, #0
 8001d0a:	f7fe fdc3 	bl	8000894 <HAL_InitTick>
  
  return HAL_OK;
 8001d0e:	2300      	movs	r3, #0
}
 8001d10:	0018      	movs	r0, r3
 8001d12:	46bd      	mov	sp, r7
 8001d14:	b004      	add	sp, #16
 8001d16:	bd80      	pop	{r7, pc}
 8001d18:	40022000 	.word	0x40022000
 8001d1c:	40021000 	.word	0x40021000
 8001d20:	00001388 	.word	0x00001388
 8001d24:	fffff8ff 	.word	0xfffff8ff
 8001d28:	08002700 	.word	0x08002700
 8001d2c:	20000000 	.word	0x20000000

08001d30 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d30:	b590      	push	{r4, r7, lr}
 8001d32:	b08f      	sub	sp, #60	; 0x3c
 8001d34:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8001d36:	2314      	movs	r3, #20
 8001d38:	18fb      	adds	r3, r7, r3
 8001d3a:	4a2b      	ldr	r2, [pc, #172]	; (8001de8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001d3c:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001d3e:	c313      	stmia	r3!, {r0, r1, r4}
 8001d40:	6812      	ldr	r2, [r2, #0]
 8001d42:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8001d44:	1d3b      	adds	r3, r7, #4
 8001d46:	4a29      	ldr	r2, [pc, #164]	; (8001dec <HAL_RCC_GetSysClockFreq+0xbc>)
 8001d48:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001d4a:	c313      	stmia	r3!, {r0, r1, r4}
 8001d4c:	6812      	ldr	r2, [r2, #0]
 8001d4e:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001d50:	2300      	movs	r3, #0
 8001d52:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001d54:	2300      	movs	r3, #0
 8001d56:	62bb      	str	r3, [r7, #40]	; 0x28
 8001d58:	2300      	movs	r3, #0
 8001d5a:	637b      	str	r3, [r7, #52]	; 0x34
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8001d60:	2300      	movs	r3, #0
 8001d62:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8001d64:	4b22      	ldr	r3, [pc, #136]	; (8001df0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001d66:	685b      	ldr	r3, [r3, #4]
 8001d68:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001d6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d6c:	220c      	movs	r2, #12
 8001d6e:	4013      	ands	r3, r2
 8001d70:	2b04      	cmp	r3, #4
 8001d72:	d002      	beq.n	8001d7a <HAL_RCC_GetSysClockFreq+0x4a>
 8001d74:	2b08      	cmp	r3, #8
 8001d76:	d003      	beq.n	8001d80 <HAL_RCC_GetSysClockFreq+0x50>
 8001d78:	e02d      	b.n	8001dd6 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001d7a:	4b1e      	ldr	r3, [pc, #120]	; (8001df4 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001d7c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001d7e:	e02d      	b.n	8001ddc <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001d80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d82:	0c9b      	lsrs	r3, r3, #18
 8001d84:	220f      	movs	r2, #15
 8001d86:	4013      	ands	r3, r2
 8001d88:	2214      	movs	r2, #20
 8001d8a:	18ba      	adds	r2, r7, r2
 8001d8c:	5cd3      	ldrb	r3, [r2, r3]
 8001d8e:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001d90:	4b17      	ldr	r3, [pc, #92]	; (8001df0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001d92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d94:	220f      	movs	r2, #15
 8001d96:	4013      	ands	r3, r2
 8001d98:	1d3a      	adds	r2, r7, #4
 8001d9a:	5cd3      	ldrb	r3, [r2, r3]
 8001d9c:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001d9e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001da0:	2380      	movs	r3, #128	; 0x80
 8001da2:	025b      	lsls	r3, r3, #9
 8001da4:	4013      	ands	r3, r2
 8001da6:	d009      	beq.n	8001dbc <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001da8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001daa:	4812      	ldr	r0, [pc, #72]	; (8001df4 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001dac:	f7fe f9ac 	bl	8000108 <__udivsi3>
 8001db0:	0003      	movs	r3, r0
 8001db2:	001a      	movs	r2, r3
 8001db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001db6:	4353      	muls	r3, r2
 8001db8:	637b      	str	r3, [r7, #52]	; 0x34
 8001dba:	e009      	b.n	8001dd0 <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8001dbc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001dbe:	000a      	movs	r2, r1
 8001dc0:	0152      	lsls	r2, r2, #5
 8001dc2:	1a52      	subs	r2, r2, r1
 8001dc4:	0193      	lsls	r3, r2, #6
 8001dc6:	1a9b      	subs	r3, r3, r2
 8001dc8:	00db      	lsls	r3, r3, #3
 8001dca:	185b      	adds	r3, r3, r1
 8001dcc:	021b      	lsls	r3, r3, #8
 8001dce:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 8001dd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001dd2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001dd4:	e002      	b.n	8001ddc <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001dd6:	4b07      	ldr	r3, [pc, #28]	; (8001df4 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001dd8:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001dda:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001ddc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001dde:	0018      	movs	r0, r3
 8001de0:	46bd      	mov	sp, r7
 8001de2:	b00f      	add	sp, #60	; 0x3c
 8001de4:	bd90      	pop	{r4, r7, pc}
 8001de6:	46c0      	nop			; (mov r8, r8)
 8001de8:	08001e68 	.word	0x08001e68
 8001dec:	08001e78 	.word	0x08001e78
 8001df0:	40021000 	.word	0x40021000
 8001df4:	007a1200 	.word	0x007a1200

08001df8 <__libc_init_array>:
 8001df8:	b570      	push	{r4, r5, r6, lr}
 8001dfa:	2600      	movs	r6, #0
 8001dfc:	4d0c      	ldr	r5, [pc, #48]	; (8001e30 <__libc_init_array+0x38>)
 8001dfe:	4c0d      	ldr	r4, [pc, #52]	; (8001e34 <__libc_init_array+0x3c>)
 8001e00:	1b64      	subs	r4, r4, r5
 8001e02:	10a4      	asrs	r4, r4, #2
 8001e04:	42a6      	cmp	r6, r4
 8001e06:	d109      	bne.n	8001e1c <__libc_init_array+0x24>
 8001e08:	2600      	movs	r6, #0
 8001e0a:	f000 f821 	bl	8001e50 <_init>
 8001e0e:	4d0a      	ldr	r5, [pc, #40]	; (8001e38 <__libc_init_array+0x40>)
 8001e10:	4c0a      	ldr	r4, [pc, #40]	; (8001e3c <__libc_init_array+0x44>)
 8001e12:	1b64      	subs	r4, r4, r5
 8001e14:	10a4      	asrs	r4, r4, #2
 8001e16:	42a6      	cmp	r6, r4
 8001e18:	d105      	bne.n	8001e26 <__libc_init_array+0x2e>
 8001e1a:	bd70      	pop	{r4, r5, r6, pc}
 8001e1c:	00b3      	lsls	r3, r6, #2
 8001e1e:	58eb      	ldr	r3, [r5, r3]
 8001e20:	4798      	blx	r3
 8001e22:	3601      	adds	r6, #1
 8001e24:	e7ee      	b.n	8001e04 <__libc_init_array+0xc>
 8001e26:	00b3      	lsls	r3, r6, #2
 8001e28:	58eb      	ldr	r3, [r5, r3]
 8001e2a:	4798      	blx	r3
 8001e2c:	3601      	adds	r6, #1
 8001e2e:	e7f2      	b.n	8001e16 <__libc_init_array+0x1e>
 8001e30:	08002710 	.word	0x08002710
 8001e34:	08002710 	.word	0x08002710
 8001e38:	08002710 	.word	0x08002710
 8001e3c:	08002714 	.word	0x08002714

08001e40 <memset>:
 8001e40:	0003      	movs	r3, r0
 8001e42:	1812      	adds	r2, r2, r0
 8001e44:	4293      	cmp	r3, r2
 8001e46:	d100      	bne.n	8001e4a <memset+0xa>
 8001e48:	4770      	bx	lr
 8001e4a:	7019      	strb	r1, [r3, #0]
 8001e4c:	3301      	adds	r3, #1
 8001e4e:	e7f9      	b.n	8001e44 <memset+0x4>

08001e50 <_init>:
 8001e50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e52:	46c0      	nop			; (mov r8, r8)
 8001e54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001e56:	bc08      	pop	{r3}
 8001e58:	469e      	mov	lr, r3
 8001e5a:	4770      	bx	lr

08001e5c <_fini>:
 8001e5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e5e:	46c0      	nop			; (mov r8, r8)
 8001e60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001e62:	bc08      	pop	{r3}
 8001e64:	469e      	mov	lr, r3
 8001e66:	4770      	bx	lr
