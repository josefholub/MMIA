
cv10.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000143bc  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000030e4  0801456c  0801456c  0002456c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08017650  08017650  00030084  2**0
                  CONTENTS
  4 .ARM          00000008  08017650  08017650  00027650  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08017658  08017658  00030084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08017658  08017658  00027658  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801765c  0801765c  0002765c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  08017660  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000eeac  20000084  080176e4  00030084  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2000ef30  080176e4  0003ef30  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030084  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003b93b  00000000  00000000  000300b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00006ec8  00000000  00000000  0006b9ef  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001f48  00000000  00000000  000728b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001dd0  00000000  00000000  00074800  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00032d44  00000000  00000000  000765d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00026a13  00000000  00000000  000a9314  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000fe15b  00000000  00000000  000cfd27  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001cde82  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008648  00000000  00000000  001cdf00  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000084 	.word	0x20000084
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08014554 	.word	0x08014554

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000088 	.word	0x20000088
 80001ec:	08014554 	.word	0x08014554

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b972 	b.w	800058c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	4688      	mov	r8, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14b      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4615      	mov	r5, r2
 80002d2:	d967      	bls.n	80003a4 <__udivmoddi4+0xe4>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0720 	rsb	r7, r2, #32
 80002de:	fa01 f302 	lsl.w	r3, r1, r2
 80002e2:	fa20 f707 	lsr.w	r7, r0, r7
 80002e6:	4095      	lsls	r5, r2
 80002e8:	ea47 0803 	orr.w	r8, r7, r3
 80002ec:	4094      	lsls	r4, r2
 80002ee:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f2:	0c23      	lsrs	r3, r4, #16
 80002f4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002f8:	fa1f fc85 	uxth.w	ip, r5
 80002fc:	fb0e 8817 	mls	r8, lr, r7, r8
 8000300:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000304:	fb07 f10c 	mul.w	r1, r7, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x60>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000312:	f080 811b 	bcs.w	800054c <__udivmoddi4+0x28c>
 8000316:	4299      	cmp	r1, r3
 8000318:	f240 8118 	bls.w	800054c <__udivmoddi4+0x28c>
 800031c:	3f02      	subs	r7, #2
 800031e:	442b      	add	r3, r5
 8000320:	1a5b      	subs	r3, r3, r1
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb3 f0fe 	udiv	r0, r3, lr
 8000328:	fb0e 3310 	mls	r3, lr, r0, r3
 800032c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000330:	fb00 fc0c 	mul.w	ip, r0, ip
 8000334:	45a4      	cmp	ip, r4
 8000336:	d909      	bls.n	800034c <__udivmoddi4+0x8c>
 8000338:	192c      	adds	r4, r5, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295
 800033e:	f080 8107 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000342:	45a4      	cmp	ip, r4
 8000344:	f240 8104 	bls.w	8000550 <__udivmoddi4+0x290>
 8000348:	3802      	subs	r0, #2
 800034a:	442c      	add	r4, r5
 800034c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000350:	eba4 040c 	sub.w	r4, r4, ip
 8000354:	2700      	movs	r7, #0
 8000356:	b11e      	cbz	r6, 8000360 <__udivmoddi4+0xa0>
 8000358:	40d4      	lsrs	r4, r2
 800035a:	2300      	movs	r3, #0
 800035c:	e9c6 4300 	strd	r4, r3, [r6]
 8000360:	4639      	mov	r1, r7
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d909      	bls.n	800037e <__udivmoddi4+0xbe>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80eb 	beq.w	8000546 <__udivmoddi4+0x286>
 8000370:	2700      	movs	r7, #0
 8000372:	e9c6 0100 	strd	r0, r1, [r6]
 8000376:	4638      	mov	r0, r7
 8000378:	4639      	mov	r1, r7
 800037a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037e:	fab3 f783 	clz	r7, r3
 8000382:	2f00      	cmp	r7, #0
 8000384:	d147      	bne.n	8000416 <__udivmoddi4+0x156>
 8000386:	428b      	cmp	r3, r1
 8000388:	d302      	bcc.n	8000390 <__udivmoddi4+0xd0>
 800038a:	4282      	cmp	r2, r0
 800038c:	f200 80fa 	bhi.w	8000584 <__udivmoddi4+0x2c4>
 8000390:	1a84      	subs	r4, r0, r2
 8000392:	eb61 0303 	sbc.w	r3, r1, r3
 8000396:	2001      	movs	r0, #1
 8000398:	4698      	mov	r8, r3
 800039a:	2e00      	cmp	r6, #0
 800039c:	d0e0      	beq.n	8000360 <__udivmoddi4+0xa0>
 800039e:	e9c6 4800 	strd	r4, r8, [r6]
 80003a2:	e7dd      	b.n	8000360 <__udivmoddi4+0xa0>
 80003a4:	b902      	cbnz	r2, 80003a8 <__udivmoddi4+0xe8>
 80003a6:	deff      	udf	#255	; 0xff
 80003a8:	fab2 f282 	clz	r2, r2
 80003ac:	2a00      	cmp	r2, #0
 80003ae:	f040 808f 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b2:	1b49      	subs	r1, r1, r5
 80003b4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003b8:	fa1f f885 	uxth.w	r8, r5
 80003bc:	2701      	movs	r7, #1
 80003be:	fbb1 fcfe 	udiv	ip, r1, lr
 80003c2:	0c23      	lsrs	r3, r4, #16
 80003c4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003cc:	fb08 f10c 	mul.w	r1, r8, ip
 80003d0:	4299      	cmp	r1, r3
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d4:	18eb      	adds	r3, r5, r3
 80003d6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4299      	cmp	r1, r3
 80003de:	f200 80cd 	bhi.w	800057c <__udivmoddi4+0x2bc>
 80003e2:	4684      	mov	ip, r0
 80003e4:	1a59      	subs	r1, r3, r1
 80003e6:	b2a3      	uxth	r3, r4
 80003e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003ec:	fb0e 1410 	mls	r4, lr, r0, r1
 80003f0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003f4:	fb08 f800 	mul.w	r8, r8, r0
 80003f8:	45a0      	cmp	r8, r4
 80003fa:	d907      	bls.n	800040c <__udivmoddi4+0x14c>
 80003fc:	192c      	adds	r4, r5, r4
 80003fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x14a>
 8000404:	45a0      	cmp	r8, r4
 8000406:	f200 80b6 	bhi.w	8000576 <__udivmoddi4+0x2b6>
 800040a:	4618      	mov	r0, r3
 800040c:	eba4 0408 	sub.w	r4, r4, r8
 8000410:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000414:	e79f      	b.n	8000356 <__udivmoddi4+0x96>
 8000416:	f1c7 0c20 	rsb	ip, r7, #32
 800041a:	40bb      	lsls	r3, r7
 800041c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000420:	ea4e 0e03 	orr.w	lr, lr, r3
 8000424:	fa01 f407 	lsl.w	r4, r1, r7
 8000428:	fa20 f50c 	lsr.w	r5, r0, ip
 800042c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000430:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000434:	4325      	orrs	r5, r4
 8000436:	fbb3 f9f8 	udiv	r9, r3, r8
 800043a:	0c2c      	lsrs	r4, r5, #16
 800043c:	fb08 3319 	mls	r3, r8, r9, r3
 8000440:	fa1f fa8e 	uxth.w	sl, lr
 8000444:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000448:	fb09 f40a 	mul.w	r4, r9, sl
 800044c:	429c      	cmp	r4, r3
 800044e:	fa02 f207 	lsl.w	r2, r2, r7
 8000452:	fa00 f107 	lsl.w	r1, r0, r7
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1e 0303 	adds.w	r3, lr, r3
 800045c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000460:	f080 8087 	bcs.w	8000572 <__udivmoddi4+0x2b2>
 8000464:	429c      	cmp	r4, r3
 8000466:	f240 8084 	bls.w	8000572 <__udivmoddi4+0x2b2>
 800046a:	f1a9 0902 	sub.w	r9, r9, #2
 800046e:	4473      	add	r3, lr
 8000470:	1b1b      	subs	r3, r3, r4
 8000472:	b2ad      	uxth	r5, r5
 8000474:	fbb3 f0f8 	udiv	r0, r3, r8
 8000478:	fb08 3310 	mls	r3, r8, r0, r3
 800047c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000480:	fb00 fa0a 	mul.w	sl, r0, sl
 8000484:	45a2      	cmp	sl, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1e 0404 	adds.w	r4, lr, r4
 800048c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000490:	d26b      	bcs.n	800056a <__udivmoddi4+0x2aa>
 8000492:	45a2      	cmp	sl, r4
 8000494:	d969      	bls.n	800056a <__udivmoddi4+0x2aa>
 8000496:	3802      	subs	r0, #2
 8000498:	4474      	add	r4, lr
 800049a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800049e:	fba0 8902 	umull	r8, r9, r0, r2
 80004a2:	eba4 040a 	sub.w	r4, r4, sl
 80004a6:	454c      	cmp	r4, r9
 80004a8:	46c2      	mov	sl, r8
 80004aa:	464b      	mov	r3, r9
 80004ac:	d354      	bcc.n	8000558 <__udivmoddi4+0x298>
 80004ae:	d051      	beq.n	8000554 <__udivmoddi4+0x294>
 80004b0:	2e00      	cmp	r6, #0
 80004b2:	d069      	beq.n	8000588 <__udivmoddi4+0x2c8>
 80004b4:	ebb1 050a 	subs.w	r5, r1, sl
 80004b8:	eb64 0403 	sbc.w	r4, r4, r3
 80004bc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004c0:	40fd      	lsrs	r5, r7
 80004c2:	40fc      	lsrs	r4, r7
 80004c4:	ea4c 0505 	orr.w	r5, ip, r5
 80004c8:	e9c6 5400 	strd	r5, r4, [r6]
 80004cc:	2700      	movs	r7, #0
 80004ce:	e747      	b.n	8000360 <__udivmoddi4+0xa0>
 80004d0:	f1c2 0320 	rsb	r3, r2, #32
 80004d4:	fa20 f703 	lsr.w	r7, r0, r3
 80004d8:	4095      	lsls	r5, r2
 80004da:	fa01 f002 	lsl.w	r0, r1, r2
 80004de:	fa21 f303 	lsr.w	r3, r1, r3
 80004e2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004e6:	4338      	orrs	r0, r7
 80004e8:	0c01      	lsrs	r1, r0, #16
 80004ea:	fbb3 f7fe 	udiv	r7, r3, lr
 80004ee:	fa1f f885 	uxth.w	r8, r5
 80004f2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fa:	fb07 f308 	mul.w	r3, r7, r8
 80004fe:	428b      	cmp	r3, r1
 8000500:	fa04 f402 	lsl.w	r4, r4, r2
 8000504:	d907      	bls.n	8000516 <__udivmoddi4+0x256>
 8000506:	1869      	adds	r1, r5, r1
 8000508:	f107 3cff 	add.w	ip, r7, #4294967295
 800050c:	d22f      	bcs.n	800056e <__udivmoddi4+0x2ae>
 800050e:	428b      	cmp	r3, r1
 8000510:	d92d      	bls.n	800056e <__udivmoddi4+0x2ae>
 8000512:	3f02      	subs	r7, #2
 8000514:	4429      	add	r1, r5
 8000516:	1acb      	subs	r3, r1, r3
 8000518:	b281      	uxth	r1, r0
 800051a:	fbb3 f0fe 	udiv	r0, r3, lr
 800051e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000522:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000526:	fb00 f308 	mul.w	r3, r0, r8
 800052a:	428b      	cmp	r3, r1
 800052c:	d907      	bls.n	800053e <__udivmoddi4+0x27e>
 800052e:	1869      	adds	r1, r5, r1
 8000530:	f100 3cff 	add.w	ip, r0, #4294967295
 8000534:	d217      	bcs.n	8000566 <__udivmoddi4+0x2a6>
 8000536:	428b      	cmp	r3, r1
 8000538:	d915      	bls.n	8000566 <__udivmoddi4+0x2a6>
 800053a:	3802      	subs	r0, #2
 800053c:	4429      	add	r1, r5
 800053e:	1ac9      	subs	r1, r1, r3
 8000540:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000544:	e73b      	b.n	80003be <__udivmoddi4+0xfe>
 8000546:	4637      	mov	r7, r6
 8000548:	4630      	mov	r0, r6
 800054a:	e709      	b.n	8000360 <__udivmoddi4+0xa0>
 800054c:	4607      	mov	r7, r0
 800054e:	e6e7      	b.n	8000320 <__udivmoddi4+0x60>
 8000550:	4618      	mov	r0, r3
 8000552:	e6fb      	b.n	800034c <__udivmoddi4+0x8c>
 8000554:	4541      	cmp	r1, r8
 8000556:	d2ab      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 8000558:	ebb8 0a02 	subs.w	sl, r8, r2
 800055c:	eb69 020e 	sbc.w	r2, r9, lr
 8000560:	3801      	subs	r0, #1
 8000562:	4613      	mov	r3, r2
 8000564:	e7a4      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000566:	4660      	mov	r0, ip
 8000568:	e7e9      	b.n	800053e <__udivmoddi4+0x27e>
 800056a:	4618      	mov	r0, r3
 800056c:	e795      	b.n	800049a <__udivmoddi4+0x1da>
 800056e:	4667      	mov	r7, ip
 8000570:	e7d1      	b.n	8000516 <__udivmoddi4+0x256>
 8000572:	4681      	mov	r9, r0
 8000574:	e77c      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000576:	3802      	subs	r0, #2
 8000578:	442c      	add	r4, r5
 800057a:	e747      	b.n	800040c <__udivmoddi4+0x14c>
 800057c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000580:	442b      	add	r3, r5
 8000582:	e72f      	b.n	80003e4 <__udivmoddi4+0x124>
 8000584:	4638      	mov	r0, r7
 8000586:	e708      	b.n	800039a <__udivmoddi4+0xda>
 8000588:	4637      	mov	r7, r6
 800058a:	e6e9      	b.n	8000360 <__udivmoddi4+0xa0>

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000590:	b480      	push	{r7}
 8000592:	b085      	sub	sp, #20
 8000594:	af00      	add	r7, sp, #0
 8000596:	60f8      	str	r0, [r7, #12]
 8000598:	60b9      	str	r1, [r7, #8]
 800059a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800059c:	68fb      	ldr	r3, [r7, #12]
 800059e:	4a07      	ldr	r2, [pc, #28]	; (80005bc <vApplicationGetIdleTaskMemory+0x2c>)
 80005a0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005a2:	68bb      	ldr	r3, [r7, #8]
 80005a4:	4a06      	ldr	r2, [pc, #24]	; (80005c0 <vApplicationGetIdleTaskMemory+0x30>)
 80005a6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	2280      	movs	r2, #128	; 0x80
 80005ac:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005ae:	bf00      	nop
 80005b0:	3714      	adds	r7, #20
 80005b2:	46bd      	mov	sp, r7
 80005b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop
 80005bc:	200000a0 	.word	0x200000a0
 80005c0:	200000f4 	.word	0x200000f4

080005c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005c4:	b5b0      	push	{r4, r5, r7, lr}
 80005c6:	b088      	sub	sp, #32
 80005c8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005ca:	f000 fb7f 	bl	8000ccc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005ce:	f000 f81d 	bl	800060c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005d2:	f000 f8af 	bl	8000734 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80005d6:	f000 f883 	bl	80006e0 <MX_USART3_UART_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 1024);
 80005da:	4b0a      	ldr	r3, [pc, #40]	; (8000604 <main+0x40>)
 80005dc:	1d3c      	adds	r4, r7, #4
 80005de:	461d      	mov	r5, r3
 80005e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005e4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005e8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80005ec:	1d3b      	adds	r3, r7, #4
 80005ee:	2100      	movs	r1, #0
 80005f0:	4618      	mov	r0, r3
 80005f2:	f003 ff98 	bl	8004526 <osThreadCreate>
 80005f6:	4602      	mov	r2, r0
 80005f8:	4b03      	ldr	r3, [pc, #12]	; (8000608 <main+0x44>)
 80005fa:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80005fc:	f003 ff7c 	bl	80044f8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000600:	e7fe      	b.n	8000600 <main+0x3c>
 8000602:	bf00      	nop
 8000604:	08014578 	.word	0x08014578
 8000608:	200085f0 	.word	0x200085f0

0800060c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b094      	sub	sp, #80	; 0x50
 8000610:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000612:	f107 0320 	add.w	r3, r7, #32
 8000616:	2230      	movs	r2, #48	; 0x30
 8000618:	2100      	movs	r1, #0
 800061a:	4618      	mov	r0, r3
 800061c:	f013 f872 	bl	8013704 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000620:	f107 030c 	add.w	r3, r7, #12
 8000624:	2200      	movs	r2, #0
 8000626:	601a      	str	r2, [r3, #0]
 8000628:	605a      	str	r2, [r3, #4]
 800062a:	609a      	str	r2, [r3, #8]
 800062c:	60da      	str	r2, [r3, #12]
 800062e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000630:	2300      	movs	r3, #0
 8000632:	60bb      	str	r3, [r7, #8]
 8000634:	4b28      	ldr	r3, [pc, #160]	; (80006d8 <SystemClock_Config+0xcc>)
 8000636:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000638:	4a27      	ldr	r2, [pc, #156]	; (80006d8 <SystemClock_Config+0xcc>)
 800063a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800063e:	6413      	str	r3, [r2, #64]	; 0x40
 8000640:	4b25      	ldr	r3, [pc, #148]	; (80006d8 <SystemClock_Config+0xcc>)
 8000642:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000644:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000648:	60bb      	str	r3, [r7, #8]
 800064a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800064c:	2300      	movs	r3, #0
 800064e:	607b      	str	r3, [r7, #4]
 8000650:	4b22      	ldr	r3, [pc, #136]	; (80006dc <SystemClock_Config+0xd0>)
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	4a21      	ldr	r2, [pc, #132]	; (80006dc <SystemClock_Config+0xd0>)
 8000656:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800065a:	6013      	str	r3, [r2, #0]
 800065c:	4b1f      	ldr	r3, [pc, #124]	; (80006dc <SystemClock_Config+0xd0>)
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000664:	607b      	str	r3, [r7, #4]
 8000666:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000668:	2301      	movs	r3, #1
 800066a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800066c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000670:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000672:	2302      	movs	r3, #2
 8000674:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000676:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800067a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800067c:	2304      	movs	r3, #4
 800067e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000680:	23a8      	movs	r3, #168	; 0xa8
 8000682:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000684:	2302      	movs	r3, #2
 8000686:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000688:	2307      	movs	r3, #7
 800068a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800068c:	f107 0320 	add.w	r3, r7, #32
 8000690:	4618      	mov	r0, r3
 8000692:	f001 ffcb 	bl	800262c <HAL_RCC_OscConfig>
 8000696:	4603      	mov	r3, r0
 8000698:	2b00      	cmp	r3, #0
 800069a:	d001      	beq.n	80006a0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800069c:	f000 f934 	bl	8000908 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006a0:	230f      	movs	r3, #15
 80006a2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006a4:	2302      	movs	r3, #2
 80006a6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006a8:	2300      	movs	r3, #0
 80006aa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006ac:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006b0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006b6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006b8:	f107 030c 	add.w	r3, r7, #12
 80006bc:	2105      	movs	r1, #5
 80006be:	4618      	mov	r0, r3
 80006c0:	f002 fa24 	bl	8002b0c <HAL_RCC_ClockConfig>
 80006c4:	4603      	mov	r3, r0
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d001      	beq.n	80006ce <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80006ca:	f000 f91d 	bl	8000908 <Error_Handler>
  }
}
 80006ce:	bf00      	nop
 80006d0:	3750      	adds	r7, #80	; 0x50
 80006d2:	46bd      	mov	sp, r7
 80006d4:	bd80      	pop	{r7, pc}
 80006d6:	bf00      	nop
 80006d8:	40023800 	.word	0x40023800
 80006dc:	40007000 	.word	0x40007000

080006e0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80006e4:	4b11      	ldr	r3, [pc, #68]	; (800072c <MX_USART3_UART_Init+0x4c>)
 80006e6:	4a12      	ldr	r2, [pc, #72]	; (8000730 <MX_USART3_UART_Init+0x50>)
 80006e8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80006ea:	4b10      	ldr	r3, [pc, #64]	; (800072c <MX_USART3_UART_Init+0x4c>)
 80006ec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006f0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80006f2:	4b0e      	ldr	r3, [pc, #56]	; (800072c <MX_USART3_UART_Init+0x4c>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80006f8:	4b0c      	ldr	r3, [pc, #48]	; (800072c <MX_USART3_UART_Init+0x4c>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80006fe:	4b0b      	ldr	r3, [pc, #44]	; (800072c <MX_USART3_UART_Init+0x4c>)
 8000700:	2200      	movs	r2, #0
 8000702:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000704:	4b09      	ldr	r3, [pc, #36]	; (800072c <MX_USART3_UART_Init+0x4c>)
 8000706:	220c      	movs	r2, #12
 8000708:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800070a:	4b08      	ldr	r3, [pc, #32]	; (800072c <MX_USART3_UART_Init+0x4c>)
 800070c:	2200      	movs	r2, #0
 800070e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000710:	4b06      	ldr	r3, [pc, #24]	; (800072c <MX_USART3_UART_Init+0x4c>)
 8000712:	2200      	movs	r2, #0
 8000714:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000716:	4805      	ldr	r0, [pc, #20]	; (800072c <MX_USART3_UART_Init+0x4c>)
 8000718:	f002 fe5a 	bl	80033d0 <HAL_UART_Init>
 800071c:	4603      	mov	r3, r0
 800071e:	2b00      	cmp	r3, #0
 8000720:	d001      	beq.n	8000726 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000722:	f000 f8f1 	bl	8000908 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000726:	bf00      	nop
 8000728:	bd80      	pop	{r7, pc}
 800072a:	bf00      	nop
 800072c:	200085f4 	.word	0x200085f4
 8000730:	40004800 	.word	0x40004800

08000734 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b08c      	sub	sp, #48	; 0x30
 8000738:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800073a:	f107 031c 	add.w	r3, r7, #28
 800073e:	2200      	movs	r2, #0
 8000740:	601a      	str	r2, [r3, #0]
 8000742:	605a      	str	r2, [r3, #4]
 8000744:	609a      	str	r2, [r3, #8]
 8000746:	60da      	str	r2, [r3, #12]
 8000748:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800074a:	2300      	movs	r3, #0
 800074c:	61bb      	str	r3, [r7, #24]
 800074e:	4b5a      	ldr	r3, [pc, #360]	; (80008b8 <MX_GPIO_Init+0x184>)
 8000750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000752:	4a59      	ldr	r2, [pc, #356]	; (80008b8 <MX_GPIO_Init+0x184>)
 8000754:	f043 0304 	orr.w	r3, r3, #4
 8000758:	6313      	str	r3, [r2, #48]	; 0x30
 800075a:	4b57      	ldr	r3, [pc, #348]	; (80008b8 <MX_GPIO_Init+0x184>)
 800075c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075e:	f003 0304 	and.w	r3, r3, #4
 8000762:	61bb      	str	r3, [r7, #24]
 8000764:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000766:	2300      	movs	r3, #0
 8000768:	617b      	str	r3, [r7, #20]
 800076a:	4b53      	ldr	r3, [pc, #332]	; (80008b8 <MX_GPIO_Init+0x184>)
 800076c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076e:	4a52      	ldr	r2, [pc, #328]	; (80008b8 <MX_GPIO_Init+0x184>)
 8000770:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000774:	6313      	str	r3, [r2, #48]	; 0x30
 8000776:	4b50      	ldr	r3, [pc, #320]	; (80008b8 <MX_GPIO_Init+0x184>)
 8000778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800077e:	617b      	str	r3, [r7, #20]
 8000780:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000782:	2300      	movs	r3, #0
 8000784:	613b      	str	r3, [r7, #16]
 8000786:	4b4c      	ldr	r3, [pc, #304]	; (80008b8 <MX_GPIO_Init+0x184>)
 8000788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078a:	4a4b      	ldr	r2, [pc, #300]	; (80008b8 <MX_GPIO_Init+0x184>)
 800078c:	f043 0301 	orr.w	r3, r3, #1
 8000790:	6313      	str	r3, [r2, #48]	; 0x30
 8000792:	4b49      	ldr	r3, [pc, #292]	; (80008b8 <MX_GPIO_Init+0x184>)
 8000794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000796:	f003 0301 	and.w	r3, r3, #1
 800079a:	613b      	str	r3, [r7, #16]
 800079c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800079e:	2300      	movs	r3, #0
 80007a0:	60fb      	str	r3, [r7, #12]
 80007a2:	4b45      	ldr	r3, [pc, #276]	; (80008b8 <MX_GPIO_Init+0x184>)
 80007a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a6:	4a44      	ldr	r2, [pc, #272]	; (80008b8 <MX_GPIO_Init+0x184>)
 80007a8:	f043 0302 	orr.w	r3, r3, #2
 80007ac:	6313      	str	r3, [r2, #48]	; 0x30
 80007ae:	4b42      	ldr	r3, [pc, #264]	; (80008b8 <MX_GPIO_Init+0x184>)
 80007b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b2:	f003 0302 	and.w	r3, r3, #2
 80007b6:	60fb      	str	r3, [r7, #12]
 80007b8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007ba:	2300      	movs	r3, #0
 80007bc:	60bb      	str	r3, [r7, #8]
 80007be:	4b3e      	ldr	r3, [pc, #248]	; (80008b8 <MX_GPIO_Init+0x184>)
 80007c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c2:	4a3d      	ldr	r2, [pc, #244]	; (80008b8 <MX_GPIO_Init+0x184>)
 80007c4:	f043 0308 	orr.w	r3, r3, #8
 80007c8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ca:	4b3b      	ldr	r3, [pc, #236]	; (80008b8 <MX_GPIO_Init+0x184>)
 80007cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ce:	f003 0308 	and.w	r3, r3, #8
 80007d2:	60bb      	str	r3, [r7, #8]
 80007d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80007d6:	2300      	movs	r3, #0
 80007d8:	607b      	str	r3, [r7, #4]
 80007da:	4b37      	ldr	r3, [pc, #220]	; (80008b8 <MX_GPIO_Init+0x184>)
 80007dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007de:	4a36      	ldr	r2, [pc, #216]	; (80008b8 <MX_GPIO_Init+0x184>)
 80007e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80007e4:	6313      	str	r3, [r2, #48]	; 0x30
 80007e6:	4b34      	ldr	r3, [pc, #208]	; (80008b8 <MX_GPIO_Init+0x184>)
 80007e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80007ee:	607b      	str	r3, [r7, #4]
 80007f0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80007f2:	2200      	movs	r2, #0
 80007f4:	f244 0181 	movw	r1, #16513	; 0x4081
 80007f8:	4830      	ldr	r0, [pc, #192]	; (80008bc <MX_GPIO_Init+0x188>)
 80007fa:	f001 fefd 	bl	80025f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80007fe:	2200      	movs	r2, #0
 8000800:	2140      	movs	r1, #64	; 0x40
 8000802:	482f      	ldr	r0, [pc, #188]	; (80008c0 <MX_GPIO_Init+0x18c>)
 8000804:	f001 fef8 	bl	80025f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000808:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800080c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800080e:	4b2d      	ldr	r3, [pc, #180]	; (80008c4 <MX_GPIO_Init+0x190>)
 8000810:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000812:	2300      	movs	r3, #0
 8000814:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000816:	f107 031c 	add.w	r3, r7, #28
 800081a:	4619      	mov	r1, r3
 800081c:	482a      	ldr	r0, [pc, #168]	; (80008c8 <MX_GPIO_Init+0x194>)
 800081e:	f001 fd41 	bl	80022a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000822:	f244 0381 	movw	r3, #16513	; 0x4081
 8000826:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000828:	2301      	movs	r3, #1
 800082a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800082c:	2300      	movs	r3, #0
 800082e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000830:	2300      	movs	r3, #0
 8000832:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000834:	f107 031c 	add.w	r3, r7, #28
 8000838:	4619      	mov	r1, r3
 800083a:	4820      	ldr	r0, [pc, #128]	; (80008bc <MX_GPIO_Init+0x188>)
 800083c:	f001 fd32 	bl	80022a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000840:	2340      	movs	r3, #64	; 0x40
 8000842:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000844:	2301      	movs	r3, #1
 8000846:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000848:	2300      	movs	r3, #0
 800084a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800084c:	2300      	movs	r3, #0
 800084e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000850:	f107 031c 	add.w	r3, r7, #28
 8000854:	4619      	mov	r1, r3
 8000856:	481a      	ldr	r0, [pc, #104]	; (80008c0 <MX_GPIO_Init+0x18c>)
 8000858:	f001 fd24 	bl	80022a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800085c:	2380      	movs	r3, #128	; 0x80
 800085e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000860:	2300      	movs	r3, #0
 8000862:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000864:	2300      	movs	r3, #0
 8000866:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000868:	f107 031c 	add.w	r3, r7, #28
 800086c:	4619      	mov	r1, r3
 800086e:	4814      	ldr	r0, [pc, #80]	; (80008c0 <MX_GPIO_Init+0x18c>)
 8000870:	f001 fd18 	bl	80022a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000874:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000878:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800087a:	2302      	movs	r3, #2
 800087c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087e:	2300      	movs	r3, #0
 8000880:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000882:	2303      	movs	r3, #3
 8000884:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000886:	230a      	movs	r3, #10
 8000888:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800088a:	f107 031c 	add.w	r3, r7, #28
 800088e:	4619      	mov	r1, r3
 8000890:	480e      	ldr	r0, [pc, #56]	; (80008cc <MX_GPIO_Init+0x198>)
 8000892:	f001 fd07 	bl	80022a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000896:	f44f 7300 	mov.w	r3, #512	; 0x200
 800089a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800089c:	2300      	movs	r3, #0
 800089e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a0:	2300      	movs	r3, #0
 80008a2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80008a4:	f107 031c 	add.w	r3, r7, #28
 80008a8:	4619      	mov	r1, r3
 80008aa:	4808      	ldr	r0, [pc, #32]	; (80008cc <MX_GPIO_Init+0x198>)
 80008ac:	f001 fcfa 	bl	80022a4 <HAL_GPIO_Init>

}
 80008b0:	bf00      	nop
 80008b2:	3730      	adds	r7, #48	; 0x30
 80008b4:	46bd      	mov	sp, r7
 80008b6:	bd80      	pop	{r7, pc}
 80008b8:	40023800 	.word	0x40023800
 80008bc:	40020400 	.word	0x40020400
 80008c0:	40021800 	.word	0x40021800
 80008c4:	10110000 	.word	0x10110000
 80008c8:	40020800 	.word	0x40020800
 80008cc:	40020000 	.word	0x40020000

080008d0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b082      	sub	sp, #8
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 80008d8:	f003 f944 	bl	8003b64 <MX_LWIP_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80008dc:	2001      	movs	r0, #1
 80008de:	f003 fe6e 	bl	80045be <osDelay>
 80008e2:	e7fb      	b.n	80008dc <StartDefaultTask+0xc>

080008e4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b082      	sub	sp, #8
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM14) {
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	4a04      	ldr	r2, [pc, #16]	; (8000904 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80008f2:	4293      	cmp	r3, r2
 80008f4:	d101      	bne.n	80008fa <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80008f6:	f000 fa0b 	bl	8000d10 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80008fa:	bf00      	nop
 80008fc:	3708      	adds	r7, #8
 80008fe:	46bd      	mov	sp, r7
 8000900:	bd80      	pop	{r7, pc}
 8000902:	bf00      	nop
 8000904:	40002000 	.word	0x40002000

08000908 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000908:	b480      	push	{r7}
 800090a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800090c:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800090e:	e7fe      	b.n	800090e <Error_Handler+0x6>

08000910 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b082      	sub	sp, #8
 8000914:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000916:	2300      	movs	r3, #0
 8000918:	607b      	str	r3, [r7, #4]
 800091a:	4b12      	ldr	r3, [pc, #72]	; (8000964 <HAL_MspInit+0x54>)
 800091c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800091e:	4a11      	ldr	r2, [pc, #68]	; (8000964 <HAL_MspInit+0x54>)
 8000920:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000924:	6453      	str	r3, [r2, #68]	; 0x44
 8000926:	4b0f      	ldr	r3, [pc, #60]	; (8000964 <HAL_MspInit+0x54>)
 8000928:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800092a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800092e:	607b      	str	r3, [r7, #4]
 8000930:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000932:	2300      	movs	r3, #0
 8000934:	603b      	str	r3, [r7, #0]
 8000936:	4b0b      	ldr	r3, [pc, #44]	; (8000964 <HAL_MspInit+0x54>)
 8000938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800093a:	4a0a      	ldr	r2, [pc, #40]	; (8000964 <HAL_MspInit+0x54>)
 800093c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000940:	6413      	str	r3, [r2, #64]	; 0x40
 8000942:	4b08      	ldr	r3, [pc, #32]	; (8000964 <HAL_MspInit+0x54>)
 8000944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000946:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800094a:	603b      	str	r3, [r7, #0]
 800094c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800094e:	2200      	movs	r2, #0
 8000950:	210f      	movs	r1, #15
 8000952:	f06f 0001 	mvn.w	r0, #1
 8000956:	f000 fad5 	bl	8000f04 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800095a:	bf00      	nop
 800095c:	3708      	adds	r7, #8
 800095e:	46bd      	mov	sp, r7
 8000960:	bd80      	pop	{r7, pc}
 8000962:	bf00      	nop
 8000964:	40023800 	.word	0x40023800

08000968 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b08a      	sub	sp, #40	; 0x28
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000970:	f107 0314 	add.w	r3, r7, #20
 8000974:	2200      	movs	r2, #0
 8000976:	601a      	str	r2, [r3, #0]
 8000978:	605a      	str	r2, [r3, #4]
 800097a:	609a      	str	r2, [r3, #8]
 800097c:	60da      	str	r2, [r3, #12]
 800097e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	4a19      	ldr	r2, [pc, #100]	; (80009ec <HAL_UART_MspInit+0x84>)
 8000986:	4293      	cmp	r3, r2
 8000988:	d12c      	bne.n	80009e4 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800098a:	2300      	movs	r3, #0
 800098c:	613b      	str	r3, [r7, #16]
 800098e:	4b18      	ldr	r3, [pc, #96]	; (80009f0 <HAL_UART_MspInit+0x88>)
 8000990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000992:	4a17      	ldr	r2, [pc, #92]	; (80009f0 <HAL_UART_MspInit+0x88>)
 8000994:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000998:	6413      	str	r3, [r2, #64]	; 0x40
 800099a:	4b15      	ldr	r3, [pc, #84]	; (80009f0 <HAL_UART_MspInit+0x88>)
 800099c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800099e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80009a2:	613b      	str	r3, [r7, #16]
 80009a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80009a6:	2300      	movs	r3, #0
 80009a8:	60fb      	str	r3, [r7, #12]
 80009aa:	4b11      	ldr	r3, [pc, #68]	; (80009f0 <HAL_UART_MspInit+0x88>)
 80009ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ae:	4a10      	ldr	r2, [pc, #64]	; (80009f0 <HAL_UART_MspInit+0x88>)
 80009b0:	f043 0308 	orr.w	r3, r3, #8
 80009b4:	6313      	str	r3, [r2, #48]	; 0x30
 80009b6:	4b0e      	ldr	r3, [pc, #56]	; (80009f0 <HAL_UART_MspInit+0x88>)
 80009b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ba:	f003 0308 	and.w	r3, r3, #8
 80009be:	60fb      	str	r3, [r7, #12]
 80009c0:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80009c2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80009c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009c8:	2302      	movs	r3, #2
 80009ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009cc:	2300      	movs	r3, #0
 80009ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009d0:	2303      	movs	r3, #3
 80009d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80009d4:	2307      	movs	r3, #7
 80009d6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009d8:	f107 0314 	add.w	r3, r7, #20
 80009dc:	4619      	mov	r1, r3
 80009de:	4805      	ldr	r0, [pc, #20]	; (80009f4 <HAL_UART_MspInit+0x8c>)
 80009e0:	f001 fc60 	bl	80022a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80009e4:	bf00      	nop
 80009e6:	3728      	adds	r7, #40	; 0x28
 80009e8:	46bd      	mov	sp, r7
 80009ea:	bd80      	pop	{r7, pc}
 80009ec:	40004800 	.word	0x40004800
 80009f0:	40023800 	.word	0x40023800
 80009f4:	40020c00 	.word	0x40020c00

080009f8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b08c      	sub	sp, #48	; 0x30
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000a00:	2300      	movs	r3, #0
 8000a02:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000a04:	2300      	movs	r3, #0
 8000a06:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM14 IRQ priority */
  HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, TickPriority ,0);
 8000a08:	2200      	movs	r2, #0
 8000a0a:	6879      	ldr	r1, [r7, #4]
 8000a0c:	202d      	movs	r0, #45	; 0x2d
 8000a0e:	f000 fa79 	bl	8000f04 <HAL_NVIC_SetPriority>

  /* Enable the TIM14 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8000a12:	202d      	movs	r0, #45	; 0x2d
 8000a14:	f000 fa92 	bl	8000f3c <HAL_NVIC_EnableIRQ>
  /* Enable TIM14 clock */
  __HAL_RCC_TIM14_CLK_ENABLE();
 8000a18:	2300      	movs	r3, #0
 8000a1a:	60fb      	str	r3, [r7, #12]
 8000a1c:	4b1f      	ldr	r3, [pc, #124]	; (8000a9c <HAL_InitTick+0xa4>)
 8000a1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a20:	4a1e      	ldr	r2, [pc, #120]	; (8000a9c <HAL_InitTick+0xa4>)
 8000a22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a26:	6413      	str	r3, [r2, #64]	; 0x40
 8000a28:	4b1c      	ldr	r3, [pc, #112]	; (8000a9c <HAL_InitTick+0xa4>)
 8000a2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000a30:	60fb      	str	r3, [r7, #12]
 8000a32:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000a34:	f107 0210 	add.w	r2, r7, #16
 8000a38:	f107 0314 	add.w	r3, r7, #20
 8000a3c:	4611      	mov	r1, r2
 8000a3e:	4618      	mov	r0, r3
 8000a40:	f002 fa56 	bl	8002ef0 <HAL_RCC_GetClockConfig>

  /* Compute TIM14 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000a44:	f002 fa2c 	bl	8002ea0 <HAL_RCC_GetPCLK1Freq>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	005b      	lsls	r3, r3, #1
 8000a4c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM14 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000a4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a50:	4a13      	ldr	r2, [pc, #76]	; (8000aa0 <HAL_InitTick+0xa8>)
 8000a52:	fba2 2303 	umull	r2, r3, r2, r3
 8000a56:	0c9b      	lsrs	r3, r3, #18
 8000a58:	3b01      	subs	r3, #1
 8000a5a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM14 */
  htim14.Instance = TIM14;
 8000a5c:	4b11      	ldr	r3, [pc, #68]	; (8000aa4 <HAL_InitTick+0xac>)
 8000a5e:	4a12      	ldr	r2, [pc, #72]	; (8000aa8 <HAL_InitTick+0xb0>)
 8000a60:	601a      	str	r2, [r3, #0]
  + Period = [(TIM14CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim14.Init.Period = (1000000U / 1000U) - 1U;
 8000a62:	4b10      	ldr	r3, [pc, #64]	; (8000aa4 <HAL_InitTick+0xac>)
 8000a64:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000a68:	60da      	str	r2, [r3, #12]
  htim14.Init.Prescaler = uwPrescalerValue;
 8000a6a:	4a0e      	ldr	r2, [pc, #56]	; (8000aa4 <HAL_InitTick+0xac>)
 8000a6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a6e:	6053      	str	r3, [r2, #4]
  htim14.Init.ClockDivision = 0;
 8000a70:	4b0c      	ldr	r3, [pc, #48]	; (8000aa4 <HAL_InitTick+0xac>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	611a      	str	r2, [r3, #16]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a76:	4b0b      	ldr	r3, [pc, #44]	; (8000aa4 <HAL_InitTick+0xac>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim14) == HAL_OK)
 8000a7c:	4809      	ldr	r0, [pc, #36]	; (8000aa4 <HAL_InitTick+0xac>)
 8000a7e:	f002 fa69 	bl	8002f54 <HAL_TIM_Base_Init>
 8000a82:	4603      	mov	r3, r0
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d104      	bne.n	8000a92 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim14);
 8000a88:	4806      	ldr	r0, [pc, #24]	; (8000aa4 <HAL_InitTick+0xac>)
 8000a8a:	f002 fa98 	bl	8002fbe <HAL_TIM_Base_Start_IT>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	e000      	b.n	8000a94 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8000a92:	2301      	movs	r3, #1
}
 8000a94:	4618      	mov	r0, r3
 8000a96:	3730      	adds	r7, #48	; 0x30
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	bd80      	pop	{r7, pc}
 8000a9c:	40023800 	.word	0x40023800
 8000aa0:	431bde83 	.word	0x431bde83
 8000aa4:	20008634 	.word	0x20008634
 8000aa8:	40002000 	.word	0x40002000

08000aac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000aac:	b480      	push	{r7}
 8000aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ab0:	e7fe      	b.n	8000ab0 <NMI_Handler+0x4>

08000ab2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ab2:	b480      	push	{r7}
 8000ab4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ab6:	e7fe      	b.n	8000ab6 <HardFault_Handler+0x4>

08000ab8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000abc:	e7fe      	b.n	8000abc <MemManage_Handler+0x4>

08000abe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000abe:	b480      	push	{r7}
 8000ac0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ac2:	e7fe      	b.n	8000ac2 <BusFault_Handler+0x4>

08000ac4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ac8:	e7fe      	b.n	8000ac8 <UsageFault_Handler+0x4>

08000aca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000aca:	b480      	push	{r7}
 8000acc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ace:	bf00      	nop
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad6:	4770      	bx	lr

08000ad8 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8000adc:	4802      	ldr	r0, [pc, #8]	; (8000ae8 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8000ade:	f002 fa92 	bl	8003006 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8000ae2:	bf00      	nop
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	bf00      	nop
 8000ae8:	20008634 	.word	0x20008634

08000aec <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8000af0:	4802      	ldr	r0, [pc, #8]	; (8000afc <ETH_IRQHandler+0x10>)
 8000af2:	f000 fe17 	bl	8001724 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8000af6:	bf00      	nop
 8000af8:	bd80      	pop	{r7, pc}
 8000afa:	bf00      	nop
 8000afc:	20009f94 	.word	0x20009f94

08000b00 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b086      	sub	sp, #24
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	60f8      	str	r0, [r7, #12]
 8000b08:	60b9      	str	r1, [r7, #8]
 8000b0a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	617b      	str	r3, [r7, #20]
 8000b10:	e00a      	b.n	8000b28 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000b12:	f3af 8000 	nop.w
 8000b16:	4601      	mov	r1, r0
 8000b18:	68bb      	ldr	r3, [r7, #8]
 8000b1a:	1c5a      	adds	r2, r3, #1
 8000b1c:	60ba      	str	r2, [r7, #8]
 8000b1e:	b2ca      	uxtb	r2, r1
 8000b20:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b22:	697b      	ldr	r3, [r7, #20]
 8000b24:	3301      	adds	r3, #1
 8000b26:	617b      	str	r3, [r7, #20]
 8000b28:	697a      	ldr	r2, [r7, #20]
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	429a      	cmp	r2, r3
 8000b2e:	dbf0      	blt.n	8000b12 <_read+0x12>
	}

return len;
 8000b30:	687b      	ldr	r3, [r7, #4]
}
 8000b32:	4618      	mov	r0, r3
 8000b34:	3718      	adds	r7, #24
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bd80      	pop	{r7, pc}

08000b3a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000b3a:	b580      	push	{r7, lr}
 8000b3c:	b086      	sub	sp, #24
 8000b3e:	af00      	add	r7, sp, #0
 8000b40:	60f8      	str	r0, [r7, #12]
 8000b42:	60b9      	str	r1, [r7, #8]
 8000b44:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b46:	2300      	movs	r3, #0
 8000b48:	617b      	str	r3, [r7, #20]
 8000b4a:	e009      	b.n	8000b60 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000b4c:	68bb      	ldr	r3, [r7, #8]
 8000b4e:	1c5a      	adds	r2, r3, #1
 8000b50:	60ba      	str	r2, [r7, #8]
 8000b52:	781b      	ldrb	r3, [r3, #0]
 8000b54:	4618      	mov	r0, r3
 8000b56:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b5a:	697b      	ldr	r3, [r7, #20]
 8000b5c:	3301      	adds	r3, #1
 8000b5e:	617b      	str	r3, [r7, #20]
 8000b60:	697a      	ldr	r2, [r7, #20]
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	429a      	cmp	r2, r3
 8000b66:	dbf1      	blt.n	8000b4c <_write+0x12>
	}
	return len;
 8000b68:	687b      	ldr	r3, [r7, #4]
}
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	3718      	adds	r7, #24
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bd80      	pop	{r7, pc}

08000b72 <_close>:

int _close(int file)
{
 8000b72:	b480      	push	{r7}
 8000b74:	b083      	sub	sp, #12
 8000b76:	af00      	add	r7, sp, #0
 8000b78:	6078      	str	r0, [r7, #4]
	return -1;
 8000b7a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b7e:	4618      	mov	r0, r3
 8000b80:	370c      	adds	r7, #12
 8000b82:	46bd      	mov	sp, r7
 8000b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b88:	4770      	bx	lr

08000b8a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000b8a:	b480      	push	{r7}
 8000b8c:	b083      	sub	sp, #12
 8000b8e:	af00      	add	r7, sp, #0
 8000b90:	6078      	str	r0, [r7, #4]
 8000b92:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000b94:	683b      	ldr	r3, [r7, #0]
 8000b96:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b9a:	605a      	str	r2, [r3, #4]
	return 0;
 8000b9c:	2300      	movs	r3, #0
}
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	370c      	adds	r7, #12
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba8:	4770      	bx	lr

08000baa <_isatty>:

int _isatty(int file)
{
 8000baa:	b480      	push	{r7}
 8000bac:	b083      	sub	sp, #12
 8000bae:	af00      	add	r7, sp, #0
 8000bb0:	6078      	str	r0, [r7, #4]
	return 1;
 8000bb2:	2301      	movs	r3, #1
}
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	370c      	adds	r7, #12
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbe:	4770      	bx	lr

08000bc0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	b085      	sub	sp, #20
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	60f8      	str	r0, [r7, #12]
 8000bc8:	60b9      	str	r1, [r7, #8]
 8000bca:	607a      	str	r2, [r7, #4]
	return 0;
 8000bcc:	2300      	movs	r3, #0
}
 8000bce:	4618      	mov	r0, r3
 8000bd0:	3714      	adds	r7, #20
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd8:	4770      	bx	lr
	...

08000bdc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	b087      	sub	sp, #28
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000be4:	4a14      	ldr	r2, [pc, #80]	; (8000c38 <_sbrk+0x5c>)
 8000be6:	4b15      	ldr	r3, [pc, #84]	; (8000c3c <_sbrk+0x60>)
 8000be8:	1ad3      	subs	r3, r2, r3
 8000bea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000bec:	697b      	ldr	r3, [r7, #20]
 8000bee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000bf0:	4b13      	ldr	r3, [pc, #76]	; (8000c40 <_sbrk+0x64>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d102      	bne.n	8000bfe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000bf8:	4b11      	ldr	r3, [pc, #68]	; (8000c40 <_sbrk+0x64>)
 8000bfa:	4a12      	ldr	r2, [pc, #72]	; (8000c44 <_sbrk+0x68>)
 8000bfc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000bfe:	4b10      	ldr	r3, [pc, #64]	; (8000c40 <_sbrk+0x64>)
 8000c00:	681a      	ldr	r2, [r3, #0]
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	4413      	add	r3, r2
 8000c06:	693a      	ldr	r2, [r7, #16]
 8000c08:	429a      	cmp	r2, r3
 8000c0a:	d205      	bcs.n	8000c18 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8000c0c:	4b0e      	ldr	r3, [pc, #56]	; (8000c48 <_sbrk+0x6c>)
 8000c0e:	220c      	movs	r2, #12
 8000c10:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c12:	f04f 33ff 	mov.w	r3, #4294967295
 8000c16:	e009      	b.n	8000c2c <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c18:	4b09      	ldr	r3, [pc, #36]	; (8000c40 <_sbrk+0x64>)
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c1e:	4b08      	ldr	r3, [pc, #32]	; (8000c40 <_sbrk+0x64>)
 8000c20:	681a      	ldr	r2, [r3, #0]
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	4413      	add	r3, r2
 8000c26:	4a06      	ldr	r2, [pc, #24]	; (8000c40 <_sbrk+0x64>)
 8000c28:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c2a:	68fb      	ldr	r3, [r7, #12]
}
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	371c      	adds	r7, #28
 8000c30:	46bd      	mov	sp, r7
 8000c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c36:	4770      	bx	lr
 8000c38:	20030000 	.word	0x20030000
 8000c3c:	00000400 	.word	0x00000400
 8000c40:	200002f4 	.word	0x200002f4
 8000c44:	2000ef30 	.word	0x2000ef30
 8000c48:	2000ef28 	.word	0x2000ef28

08000c4c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c50:	4b08      	ldr	r3, [pc, #32]	; (8000c74 <SystemInit+0x28>)
 8000c52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c56:	4a07      	ldr	r2, [pc, #28]	; (8000c74 <SystemInit+0x28>)
 8000c58:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c5c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000c60:	4b04      	ldr	r3, [pc, #16]	; (8000c74 <SystemInit+0x28>)
 8000c62:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000c66:	609a      	str	r2, [r3, #8]
#endif
}
 8000c68:	bf00      	nop
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c70:	4770      	bx	lr
 8000c72:	bf00      	nop
 8000c74:	e000ed00 	.word	0xe000ed00

08000c78 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000c78:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000cb0 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000c7c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000c7e:	e003      	b.n	8000c88 <LoopCopyDataInit>

08000c80 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000c80:	4b0c      	ldr	r3, [pc, #48]	; (8000cb4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000c82:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000c84:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000c86:	3104      	adds	r1, #4

08000c88 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000c88:	480b      	ldr	r0, [pc, #44]	; (8000cb8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000c8a:	4b0c      	ldr	r3, [pc, #48]	; (8000cbc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000c8c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000c8e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000c90:	d3f6      	bcc.n	8000c80 <CopyDataInit>
  ldr  r2, =_sbss
 8000c92:	4a0b      	ldr	r2, [pc, #44]	; (8000cc0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000c94:	e002      	b.n	8000c9c <LoopFillZerobss>

08000c96 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000c96:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000c98:	f842 3b04 	str.w	r3, [r2], #4

08000c9c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000c9c:	4b09      	ldr	r3, [pc, #36]	; (8000cc4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000c9e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000ca0:	d3f9      	bcc.n	8000c96 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000ca2:	f7ff ffd3 	bl	8000c4c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ca6:	f012 fcef 	bl	8013688 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000caa:	f7ff fc8b 	bl	80005c4 <main>
  bx  lr    
 8000cae:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000cb0:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8000cb4:	08017660 	.word	0x08017660
  ldr  r0, =_sdata
 8000cb8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000cbc:	20000084 	.word	0x20000084
  ldr  r2, =_sbss
 8000cc0:	20000084 	.word	0x20000084
  ldr  r3, = _ebss
 8000cc4:	2000ef30 	.word	0x2000ef30

08000cc8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000cc8:	e7fe      	b.n	8000cc8 <ADC_IRQHandler>
	...

08000ccc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000cd0:	4b0e      	ldr	r3, [pc, #56]	; (8000d0c <HAL_Init+0x40>)
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	4a0d      	ldr	r2, [pc, #52]	; (8000d0c <HAL_Init+0x40>)
 8000cd6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000cda:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000cdc:	4b0b      	ldr	r3, [pc, #44]	; (8000d0c <HAL_Init+0x40>)
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	4a0a      	ldr	r2, [pc, #40]	; (8000d0c <HAL_Init+0x40>)
 8000ce2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ce6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ce8:	4b08      	ldr	r3, [pc, #32]	; (8000d0c <HAL_Init+0x40>)
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	4a07      	ldr	r2, [pc, #28]	; (8000d0c <HAL_Init+0x40>)
 8000cee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000cf2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cf4:	2003      	movs	r0, #3
 8000cf6:	f000 f8fa 	bl	8000eee <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cfa:	2000      	movs	r0, #0
 8000cfc:	f7ff fe7c 	bl	80009f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d00:	f7ff fe06 	bl	8000910 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d04:	2300      	movs	r3, #0
}
 8000d06:	4618      	mov	r0, r3
 8000d08:	bd80      	pop	{r7, pc}
 8000d0a:	bf00      	nop
 8000d0c:	40023c00 	.word	0x40023c00

08000d10 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d10:	b480      	push	{r7}
 8000d12:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d14:	4b06      	ldr	r3, [pc, #24]	; (8000d30 <HAL_IncTick+0x20>)
 8000d16:	781b      	ldrb	r3, [r3, #0]
 8000d18:	461a      	mov	r2, r3
 8000d1a:	4b06      	ldr	r3, [pc, #24]	; (8000d34 <HAL_IncTick+0x24>)
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	4413      	add	r3, r2
 8000d20:	4a04      	ldr	r2, [pc, #16]	; (8000d34 <HAL_IncTick+0x24>)
 8000d22:	6013      	str	r3, [r2, #0]
}
 8000d24:	bf00      	nop
 8000d26:	46bd      	mov	sp, r7
 8000d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2c:	4770      	bx	lr
 8000d2e:	bf00      	nop
 8000d30:	20000008 	.word	0x20000008
 8000d34:	20008674 	.word	0x20008674

08000d38 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	af00      	add	r7, sp, #0
  return uwTick;
 8000d3c:	4b03      	ldr	r3, [pc, #12]	; (8000d4c <HAL_GetTick+0x14>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
}
 8000d40:	4618      	mov	r0, r3
 8000d42:	46bd      	mov	sp, r7
 8000d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d48:	4770      	bx	lr
 8000d4a:	bf00      	nop
 8000d4c:	20008674 	.word	0x20008674

08000d50 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b084      	sub	sp, #16
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d58:	f7ff ffee 	bl	8000d38 <HAL_GetTick>
 8000d5c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d62:	68fb      	ldr	r3, [r7, #12]
 8000d64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d68:	d005      	beq.n	8000d76 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d6a:	4b09      	ldr	r3, [pc, #36]	; (8000d90 <HAL_Delay+0x40>)
 8000d6c:	781b      	ldrb	r3, [r3, #0]
 8000d6e:	461a      	mov	r2, r3
 8000d70:	68fb      	ldr	r3, [r7, #12]
 8000d72:	4413      	add	r3, r2
 8000d74:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000d76:	bf00      	nop
 8000d78:	f7ff ffde 	bl	8000d38 <HAL_GetTick>
 8000d7c:	4602      	mov	r2, r0
 8000d7e:	68bb      	ldr	r3, [r7, #8]
 8000d80:	1ad3      	subs	r3, r2, r3
 8000d82:	68fa      	ldr	r2, [r7, #12]
 8000d84:	429a      	cmp	r2, r3
 8000d86:	d8f7      	bhi.n	8000d78 <HAL_Delay+0x28>
  {
  }
}
 8000d88:	bf00      	nop
 8000d8a:	3710      	adds	r7, #16
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	bd80      	pop	{r7, pc}
 8000d90:	20000008 	.word	0x20000008

08000d94 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d94:	b480      	push	{r7}
 8000d96:	b085      	sub	sp, #20
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	f003 0307 	and.w	r3, r3, #7
 8000da2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000da4:	4b0c      	ldr	r3, [pc, #48]	; (8000dd8 <__NVIC_SetPriorityGrouping+0x44>)
 8000da6:	68db      	ldr	r3, [r3, #12]
 8000da8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000daa:	68ba      	ldr	r2, [r7, #8]
 8000dac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000db0:	4013      	ands	r3, r2
 8000db2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000db4:	68fb      	ldr	r3, [r7, #12]
 8000db6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000db8:	68bb      	ldr	r3, [r7, #8]
 8000dba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000dbc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000dc0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000dc4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000dc6:	4a04      	ldr	r2, [pc, #16]	; (8000dd8 <__NVIC_SetPriorityGrouping+0x44>)
 8000dc8:	68bb      	ldr	r3, [r7, #8]
 8000dca:	60d3      	str	r3, [r2, #12]
}
 8000dcc:	bf00      	nop
 8000dce:	3714      	adds	r7, #20
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd6:	4770      	bx	lr
 8000dd8:	e000ed00 	.word	0xe000ed00

08000ddc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000de0:	4b04      	ldr	r3, [pc, #16]	; (8000df4 <__NVIC_GetPriorityGrouping+0x18>)
 8000de2:	68db      	ldr	r3, [r3, #12]
 8000de4:	0a1b      	lsrs	r3, r3, #8
 8000de6:	f003 0307 	and.w	r3, r3, #7
}
 8000dea:	4618      	mov	r0, r3
 8000dec:	46bd      	mov	sp, r7
 8000dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df2:	4770      	bx	lr
 8000df4:	e000ed00 	.word	0xe000ed00

08000df8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	b083      	sub	sp, #12
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	4603      	mov	r3, r0
 8000e00:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	db0b      	blt.n	8000e22 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e0a:	79fb      	ldrb	r3, [r7, #7]
 8000e0c:	f003 021f 	and.w	r2, r3, #31
 8000e10:	4907      	ldr	r1, [pc, #28]	; (8000e30 <__NVIC_EnableIRQ+0x38>)
 8000e12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e16:	095b      	lsrs	r3, r3, #5
 8000e18:	2001      	movs	r0, #1
 8000e1a:	fa00 f202 	lsl.w	r2, r0, r2
 8000e1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e22:	bf00      	nop
 8000e24:	370c      	adds	r7, #12
 8000e26:	46bd      	mov	sp, r7
 8000e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2c:	4770      	bx	lr
 8000e2e:	bf00      	nop
 8000e30:	e000e100 	.word	0xe000e100

08000e34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e34:	b480      	push	{r7}
 8000e36:	b083      	sub	sp, #12
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	6039      	str	r1, [r7, #0]
 8000e3e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	db0a      	blt.n	8000e5e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e48:	683b      	ldr	r3, [r7, #0]
 8000e4a:	b2da      	uxtb	r2, r3
 8000e4c:	490c      	ldr	r1, [pc, #48]	; (8000e80 <__NVIC_SetPriority+0x4c>)
 8000e4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e52:	0112      	lsls	r2, r2, #4
 8000e54:	b2d2      	uxtb	r2, r2
 8000e56:	440b      	add	r3, r1
 8000e58:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e5c:	e00a      	b.n	8000e74 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e5e:	683b      	ldr	r3, [r7, #0]
 8000e60:	b2da      	uxtb	r2, r3
 8000e62:	4908      	ldr	r1, [pc, #32]	; (8000e84 <__NVIC_SetPriority+0x50>)
 8000e64:	79fb      	ldrb	r3, [r7, #7]
 8000e66:	f003 030f 	and.w	r3, r3, #15
 8000e6a:	3b04      	subs	r3, #4
 8000e6c:	0112      	lsls	r2, r2, #4
 8000e6e:	b2d2      	uxtb	r2, r2
 8000e70:	440b      	add	r3, r1
 8000e72:	761a      	strb	r2, [r3, #24]
}
 8000e74:	bf00      	nop
 8000e76:	370c      	adds	r7, #12
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7e:	4770      	bx	lr
 8000e80:	e000e100 	.word	0xe000e100
 8000e84:	e000ed00 	.word	0xe000ed00

08000e88 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	b089      	sub	sp, #36	; 0x24
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	60f8      	str	r0, [r7, #12]
 8000e90:	60b9      	str	r1, [r7, #8]
 8000e92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e94:	68fb      	ldr	r3, [r7, #12]
 8000e96:	f003 0307 	and.w	r3, r3, #7
 8000e9a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e9c:	69fb      	ldr	r3, [r7, #28]
 8000e9e:	f1c3 0307 	rsb	r3, r3, #7
 8000ea2:	2b04      	cmp	r3, #4
 8000ea4:	bf28      	it	cs
 8000ea6:	2304      	movcs	r3, #4
 8000ea8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000eaa:	69fb      	ldr	r3, [r7, #28]
 8000eac:	3304      	adds	r3, #4
 8000eae:	2b06      	cmp	r3, #6
 8000eb0:	d902      	bls.n	8000eb8 <NVIC_EncodePriority+0x30>
 8000eb2:	69fb      	ldr	r3, [r7, #28]
 8000eb4:	3b03      	subs	r3, #3
 8000eb6:	e000      	b.n	8000eba <NVIC_EncodePriority+0x32>
 8000eb8:	2300      	movs	r3, #0
 8000eba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ebc:	f04f 32ff 	mov.w	r2, #4294967295
 8000ec0:	69bb      	ldr	r3, [r7, #24]
 8000ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec6:	43da      	mvns	r2, r3
 8000ec8:	68bb      	ldr	r3, [r7, #8]
 8000eca:	401a      	ands	r2, r3
 8000ecc:	697b      	ldr	r3, [r7, #20]
 8000ece:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ed0:	f04f 31ff 	mov.w	r1, #4294967295
 8000ed4:	697b      	ldr	r3, [r7, #20]
 8000ed6:	fa01 f303 	lsl.w	r3, r1, r3
 8000eda:	43d9      	mvns	r1, r3
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ee0:	4313      	orrs	r3, r2
         );
}
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	3724      	adds	r7, #36	; 0x24
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eec:	4770      	bx	lr

08000eee <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000eee:	b580      	push	{r7, lr}
 8000ef0:	b082      	sub	sp, #8
 8000ef2:	af00      	add	r7, sp, #0
 8000ef4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ef6:	6878      	ldr	r0, [r7, #4]
 8000ef8:	f7ff ff4c 	bl	8000d94 <__NVIC_SetPriorityGrouping>
}
 8000efc:	bf00      	nop
 8000efe:	3708      	adds	r7, #8
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bd80      	pop	{r7, pc}

08000f04 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b086      	sub	sp, #24
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	60b9      	str	r1, [r7, #8]
 8000f0e:	607a      	str	r2, [r7, #4]
 8000f10:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f12:	2300      	movs	r3, #0
 8000f14:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f16:	f7ff ff61 	bl	8000ddc <__NVIC_GetPriorityGrouping>
 8000f1a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f1c:	687a      	ldr	r2, [r7, #4]
 8000f1e:	68b9      	ldr	r1, [r7, #8]
 8000f20:	6978      	ldr	r0, [r7, #20]
 8000f22:	f7ff ffb1 	bl	8000e88 <NVIC_EncodePriority>
 8000f26:	4602      	mov	r2, r0
 8000f28:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f2c:	4611      	mov	r1, r2
 8000f2e:	4618      	mov	r0, r3
 8000f30:	f7ff ff80 	bl	8000e34 <__NVIC_SetPriority>
}
 8000f34:	bf00      	nop
 8000f36:	3718      	adds	r7, #24
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	bd80      	pop	{r7, pc}

08000f3c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b082      	sub	sp, #8
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	4603      	mov	r3, r0
 8000f44:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	f7ff ff54 	bl	8000df8 <__NVIC_EnableIRQ>
}
 8000f50:	bf00      	nop
 8000f52:	3708      	adds	r7, #8
 8000f54:	46bd      	mov	sp, r7
 8000f56:	bd80      	pop	{r7, pc}

08000f58 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b088      	sub	sp, #32
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U, phyreg = 0U;
 8000f60:	2300      	movs	r3, #0
 8000f62:	61fb      	str	r3, [r7, #28]
 8000f64:	2300      	movs	r3, #0
 8000f66:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000U;
 8000f68:	4baa      	ldr	r3, [pc, #680]	; (8001214 <HAL_ETH_Init+0x2bc>)
 8000f6a:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0U;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8000f70:	2300      	movs	r3, #0
 8000f72:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d101      	bne.n	8000f7e <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 8000f7a:	2301      	movs	r3, #1
 8000f7c:	e185      	b.n	800128a <HAL_ETH_Init+0x332>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000f84:	b2db      	uxtb	r3, r3
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d106      	bne.n	8000f98 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8000f92:	6878      	ldr	r0, [r7, #4]
 8000f94:	f002 fe56 	bl	8003c44 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f98:	2300      	movs	r3, #0
 8000f9a:	60bb      	str	r3, [r7, #8]
 8000f9c:	4b9e      	ldr	r3, [pc, #632]	; (8001218 <HAL_ETH_Init+0x2c0>)
 8000f9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fa0:	4a9d      	ldr	r2, [pc, #628]	; (8001218 <HAL_ETH_Init+0x2c0>)
 8000fa2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fa6:	6453      	str	r3, [r2, #68]	; 0x44
 8000fa8:	4b9b      	ldr	r3, [pc, #620]	; (8001218 <HAL_ETH_Init+0x2c0>)
 8000faa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fb0:	60bb      	str	r3, [r7, #8]
 8000fb2:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8000fb4:	4b99      	ldr	r3, [pc, #612]	; (800121c <HAL_ETH_Init+0x2c4>)
 8000fb6:	685b      	ldr	r3, [r3, #4]
 8000fb8:	4a98      	ldr	r2, [pc, #608]	; (800121c <HAL_ETH_Init+0x2c4>)
 8000fba:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8000fbe:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8000fc0:	4b96      	ldr	r3, [pc, #600]	; (800121c <HAL_ETH_Init+0x2c4>)
 8000fc2:	685a      	ldr	r2, [r3, #4]
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	6a1b      	ldr	r3, [r3, #32]
 8000fc8:	4994      	ldr	r1, [pc, #592]	; (800121c <HAL_ETH_Init+0x2c4>)
 8000fca:	4313      	orrs	r3, r2
 8000fcc:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000fd6:	681a      	ldr	r2, [r3, #0]
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	f042 0201 	orr.w	r2, r2, #1
 8000fe0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000fe4:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8000fe6:	f7ff fea7 	bl	8000d38 <HAL_GetTick>
 8000fea:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8000fec:	e011      	b.n	8001012 <HAL_ETH_Init+0xba>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 8000fee:	f7ff fea3 	bl	8000d38 <HAL_GetTick>
 8000ff2:	4602      	mov	r2, r0
 8000ff4:	697b      	ldr	r3, [r7, #20]
 8000ff6:	1ad3      	subs	r3, r2, r3
 8000ff8:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000ffc:	d909      	bls.n	8001012 <HAL_ETH_Init+0xba>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	2203      	movs	r2, #3
 8001002:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	2200      	movs	r2, #0
 800100a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
      return HAL_TIMEOUT;
 800100e:	2303      	movs	r3, #3
 8001010:	e13b      	b.n	800128a <HAL_ETH_Init+0x332>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	f003 0301 	and.w	r3, r3, #1
 8001020:	2b00      	cmp	r3, #0
 8001022:	d1e4      	bne.n	8000fee <HAL_ETH_Init+0x96>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = (heth->Instance)->MACMIIAR;
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	691b      	ldr	r3, [r3, #16]
 800102a:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 800102c:	69fb      	ldr	r3, [r7, #28]
 800102e:	f023 031c 	bic.w	r3, r3, #28
 8001032:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8001034:	f001 ff28 	bl	8002e88 <HAL_RCC_GetHCLKFreq>
 8001038:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 800103a:	69bb      	ldr	r3, [r7, #24]
 800103c:	4a78      	ldr	r2, [pc, #480]	; (8001220 <HAL_ETH_Init+0x2c8>)
 800103e:	4293      	cmp	r3, r2
 8001040:	d908      	bls.n	8001054 <HAL_ETH_Init+0xfc>
 8001042:	69bb      	ldr	r3, [r7, #24]
 8001044:	4a77      	ldr	r2, [pc, #476]	; (8001224 <HAL_ETH_Init+0x2cc>)
 8001046:	4293      	cmp	r3, r2
 8001048:	d804      	bhi.n	8001054 <HAL_ETH_Init+0xfc>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 800104a:	69fb      	ldr	r3, [r7, #28]
 800104c:	f043 0308 	orr.w	r3, r3, #8
 8001050:	61fb      	str	r3, [r7, #28]
 8001052:	e027      	b.n	80010a4 <HAL_ETH_Init+0x14c>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8001054:	69bb      	ldr	r3, [r7, #24]
 8001056:	4a73      	ldr	r2, [pc, #460]	; (8001224 <HAL_ETH_Init+0x2cc>)
 8001058:	4293      	cmp	r3, r2
 800105a:	d908      	bls.n	800106e <HAL_ETH_Init+0x116>
 800105c:	69bb      	ldr	r3, [r7, #24]
 800105e:	4a72      	ldr	r2, [pc, #456]	; (8001228 <HAL_ETH_Init+0x2d0>)
 8001060:	4293      	cmp	r3, r2
 8001062:	d804      	bhi.n	800106e <HAL_ETH_Init+0x116>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8001064:	69fb      	ldr	r3, [r7, #28]
 8001066:	f043 030c 	orr.w	r3, r3, #12
 800106a:	61fb      	str	r3, [r7, #28]
 800106c:	e01a      	b.n	80010a4 <HAL_ETH_Init+0x14c>
  }  
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 800106e:	69bb      	ldr	r3, [r7, #24]
 8001070:	4a6d      	ldr	r2, [pc, #436]	; (8001228 <HAL_ETH_Init+0x2d0>)
 8001072:	4293      	cmp	r3, r2
 8001074:	d903      	bls.n	800107e <HAL_ETH_Init+0x126>
 8001076:	69bb      	ldr	r3, [r7, #24]
 8001078:	4a6c      	ldr	r2, [pc, #432]	; (800122c <HAL_ETH_Init+0x2d4>)
 800107a:	4293      	cmp	r3, r2
 800107c:	d911      	bls.n	80010a2 <HAL_ETH_Init+0x14a>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 800107e:	69bb      	ldr	r3, [r7, #24]
 8001080:	4a6a      	ldr	r2, [pc, #424]	; (800122c <HAL_ETH_Init+0x2d4>)
 8001082:	4293      	cmp	r3, r2
 8001084:	d908      	bls.n	8001098 <HAL_ETH_Init+0x140>
 8001086:	69bb      	ldr	r3, [r7, #24]
 8001088:	4a69      	ldr	r2, [pc, #420]	; (8001230 <HAL_ETH_Init+0x2d8>)
 800108a:	4293      	cmp	r3, r2
 800108c:	d804      	bhi.n	8001098 <HAL_ETH_Init+0x140>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 800108e:	69fb      	ldr	r3, [r7, #28]
 8001090:	f043 0304 	orr.w	r3, r3, #4
 8001094:	61fb      	str	r3, [r7, #28]
 8001096:	e005      	b.n	80010a4 <HAL_ETH_Init+0x14c>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000)) */
  {
    /* CSR Clock Range between 150-183 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8001098:	69fb      	ldr	r3, [r7, #28]
 800109a:	f043 0310 	orr.w	r3, r3, #16
 800109e:	61fb      	str	r3, [r7, #28]
 80010a0:	e000      	b.n	80010a4 <HAL_ETH_Init+0x14c>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 80010a2:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	69fa      	ldr	r2, [r7, #28]
 80010aa:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 80010ac:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80010b0:	2100      	movs	r1, #0
 80010b2:	6878      	ldr	r0, [r7, #4]
 80010b4:	f000 fc19 	bl	80018ea <HAL_ETH_WritePHYRegister>
 80010b8:	4603      	mov	r3, r0
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d00b      	beq.n	80010d6 <HAL_ETH_Init+0x17e>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 80010be:	2301      	movs	r3, #1
 80010c0:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 80010c2:	6939      	ldr	r1, [r7, #16]
 80010c4:	6878      	ldr	r0, [r7, #4]
 80010c6:	f000 fdcf 	bl	8001c68 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	2201      	movs	r2, #1
 80010ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 80010d2:	2301      	movs	r3, #1
 80010d4:	e0d9      	b.n	800128a <HAL_ETH_Init+0x332>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 80010d6:	20ff      	movs	r0, #255	; 0xff
 80010d8:	f7ff fe3a 	bl	8000d50 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	685b      	ldr	r3, [r3, #4]
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	f000 80a7 	beq.w	8001234 <HAL_ETH_Init+0x2dc>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 80010e6:	f7ff fe27 	bl	8000d38 <HAL_GetTick>
 80010ea:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 80010ec:	f107 030c 	add.w	r3, r7, #12
 80010f0:	461a      	mov	r2, r3
 80010f2:	2101      	movs	r1, #1
 80010f4:	6878      	ldr	r0, [r7, #4]
 80010f6:	f000 fb90 	bl	800181a <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 80010fa:	f7ff fe1d 	bl	8000d38 <HAL_GetTick>
 80010fe:	4602      	mov	r2, r0
 8001100:	697b      	ldr	r3, [r7, #20]
 8001102:	1ad3      	subs	r3, r2, r3
 8001104:	f241 3288 	movw	r2, #5000	; 0x1388
 8001108:	4293      	cmp	r3, r2
 800110a:	d90f      	bls.n	800112c <HAL_ETH_Init+0x1d4>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 800110c:	2301      	movs	r3, #1
 800110e:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8001110:	6939      	ldr	r1, [r7, #16]
 8001112:	6878      	ldr	r0, [r7, #4]
 8001114:	f000 fda8 	bl	8001c68 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	2201      	movs	r2, #1
 800111c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	2200      	movs	r2, #0
 8001124:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8001128:	2303      	movs	r3, #3
 800112a:	e0ae      	b.n	800128a <HAL_ETH_Init+0x332>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	f003 0304 	and.w	r3, r3, #4
 8001132:	2b00      	cmp	r3, #0
 8001134:	d0da      	beq.n	80010ec <HAL_ETH_Init+0x194>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8001136:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800113a:	2100      	movs	r1, #0
 800113c:	6878      	ldr	r0, [r7, #4]
 800113e:	f000 fbd4 	bl	80018ea <HAL_ETH_WritePHYRegister>
 8001142:	4603      	mov	r3, r0
 8001144:	2b00      	cmp	r3, #0
 8001146:	d00b      	beq.n	8001160 <HAL_ETH_Init+0x208>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001148:	2301      	movs	r3, #1
 800114a:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 800114c:	6939      	ldr	r1, [r7, #16]
 800114e:	6878      	ldr	r0, [r7, #4]
 8001150:	f000 fd8a 	bl	8001c68 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	2201      	movs	r2, #1
 8001158:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 800115c:	2301      	movs	r3, #1
 800115e:	e094      	b.n	800128a <HAL_ETH_Init+0x332>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 8001160:	f7ff fdea 	bl	8000d38 <HAL_GetTick>
 8001164:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8001166:	f107 030c 	add.w	r3, r7, #12
 800116a:	461a      	mov	r2, r3
 800116c:	2101      	movs	r1, #1
 800116e:	6878      	ldr	r0, [r7, #4]
 8001170:	f000 fb53 	bl	800181a <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8001174:	f7ff fde0 	bl	8000d38 <HAL_GetTick>
 8001178:	4602      	mov	r2, r0
 800117a:	697b      	ldr	r3, [r7, #20]
 800117c:	1ad3      	subs	r3, r2, r3
 800117e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001182:	4293      	cmp	r3, r2
 8001184:	d90f      	bls.n	80011a6 <HAL_ETH_Init+0x24e>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8001186:	2301      	movs	r3, #1
 8001188:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 800118a:	6939      	ldr	r1, [r7, #16]
 800118c:	6878      	ldr	r0, [r7, #4]
 800118e:	f000 fd6b 	bl	8001c68 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	2201      	movs	r2, #1
 8001196:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	2200      	movs	r2, #0
 800119e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 80011a2:	2303      	movs	r3, #3
 80011a4:	e071      	b.n	800128a <HAL_ETH_Init+0x332>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	f003 0320 	and.w	r3, r3, #32
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d0da      	beq.n	8001166 <HAL_ETH_Init+0x20e>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 80011b0:	f107 030c 	add.w	r3, r7, #12
 80011b4:	461a      	mov	r2, r3
 80011b6:	211f      	movs	r1, #31
 80011b8:	6878      	ldr	r0, [r7, #4]
 80011ba:	f000 fb2e 	bl	800181a <HAL_ETH_ReadPHYRegister>
 80011be:	4603      	mov	r3, r0
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d00b      	beq.n	80011dc <HAL_ETH_Init+0x284>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80011c4:	2301      	movs	r3, #1
 80011c6:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80011c8:	6939      	ldr	r1, [r7, #16]
 80011ca:	6878      	ldr	r0, [r7, #4]
 80011cc:	f000 fd4c 	bl	8001c68 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	2201      	movs	r2, #1
 80011d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 80011d8:	2301      	movs	r3, #1
 80011da:	e056      	b.n	800128a <HAL_ETH_Init+0x332>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	f003 0310 	and.w	r3, r3, #16
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d004      	beq.n	80011f0 <HAL_ETH_Init+0x298>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80011ec:	60da      	str	r2, [r3, #12]
 80011ee:	e002      	b.n	80011f6 <HAL_ETH_Init+0x29e>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	2200      	movs	r2, #0
 80011f4:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	f003 0304 	and.w	r3, r3, #4
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d003      	beq.n	8001208 <HAL_ETH_Init+0x2b0>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	2200      	movs	r2, #0
 8001204:	609a      	str	r2, [r3, #8]
 8001206:	e037      	b.n	8001278 <HAL_ETH_Init+0x320>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800120e:	609a      	str	r2, [r3, #8]
 8001210:	e032      	b.n	8001278 <HAL_ETH_Init+0x320>
 8001212:	bf00      	nop
 8001214:	03938700 	.word	0x03938700
 8001218:	40023800 	.word	0x40023800
 800121c:	40013800 	.word	0x40013800
 8001220:	01312cff 	.word	0x01312cff
 8001224:	02160ebf 	.word	0x02160ebf
 8001228:	039386ff 	.word	0x039386ff
 800122c:	05f5e0ff 	.word	0x05f5e0ff
 8001230:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	68db      	ldr	r3, [r3, #12]
 8001238:	08db      	lsrs	r3, r3, #3
 800123a:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1U))) != HAL_OK)
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	689b      	ldr	r3, [r3, #8]
 8001240:	085b      	lsrs	r3, r3, #1
 8001242:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8001244:	4313      	orrs	r3, r2
 8001246:	b29b      	uxth	r3, r3
 8001248:	461a      	mov	r2, r3
 800124a:	2100      	movs	r1, #0
 800124c:	6878      	ldr	r0, [r7, #4]
 800124e:	f000 fb4c 	bl	80018ea <HAL_ETH_WritePHYRegister>
 8001252:	4603      	mov	r3, r0
 8001254:	2b00      	cmp	r3, #0
 8001256:	d00b      	beq.n	8001270 <HAL_ETH_Init+0x318>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001258:	2301      	movs	r3, #1
 800125a:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 800125c:	6939      	ldr	r1, [r7, #16]
 800125e:	6878      	ldr	r0, [r7, #4]
 8001260:	f000 fd02 	bl	8001c68 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	2201      	movs	r2, #1
 8001268:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 800126c:	2301      	movs	r3, #1
 800126e:	e00c      	b.n	800128a <HAL_ETH_Init+0x332>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 8001270:	f640 70ff 	movw	r0, #4095	; 0xfff
 8001274:	f7ff fd6c 	bl	8000d50 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 8001278:	6939      	ldr	r1, [r7, #16]
 800127a:	6878      	ldr	r0, [r7, #4]
 800127c:	f000 fcf4 	bl	8001c68 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	2201      	movs	r2, #1
 8001284:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8001288:	2300      	movs	r3, #0
}
 800128a:	4618      	mov	r0, r3
 800128c:	3720      	adds	r7, #32
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}
 8001292:	bf00      	nop

08001294 <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 8001294:	b480      	push	{r7}
 8001296:	b087      	sub	sp, #28
 8001298:	af00      	add	r7, sp, #0
 800129a:	60f8      	str	r0, [r7, #12]
 800129c:	60b9      	str	r1, [r7, #8]
 800129e:	607a      	str	r2, [r7, #4]
 80012a0:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 80012a2:	2300      	movs	r3, #0
 80012a4:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80012ac:	2b01      	cmp	r3, #1
 80012ae:	d101      	bne.n	80012b4 <HAL_ETH_DMATxDescListInit+0x20>
 80012b0:	2302      	movs	r3, #2
 80012b2:	e052      	b.n	800135a <HAL_ETH_DMATxDescListInit+0xc6>
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	2201      	movs	r2, #1
 80012b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	2202      	movs	r2, #2
 80012c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	68ba      	ldr	r2, [r7, #8]
 80012c8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0U; i < TxBuffCount; i++)
 80012ca:	2300      	movs	r3, #0
 80012cc:	617b      	str	r3, [r7, #20]
 80012ce:	e030      	b.n	8001332 <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the ith member of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 80012d0:	697b      	ldr	r3, [r7, #20]
 80012d2:	015b      	lsls	r3, r3, #5
 80012d4:	68ba      	ldr	r2, [r7, #8]
 80012d6:	4413      	add	r3, r2
 80012d8:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 80012da:	693b      	ldr	r3, [r7, #16]
 80012dc:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80012e0:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 80012e2:	697b      	ldr	r3, [r7, #20]
 80012e4:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80012e8:	fb02 f303 	mul.w	r3, r2, r3
 80012ec:	687a      	ldr	r2, [r7, #4]
 80012ee:	4413      	add	r3, r2
 80012f0:	461a      	mov	r2, r3
 80012f2:	693b      	ldr	r3, [r7, #16]
 80012f4:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	69db      	ldr	r3, [r3, #28]
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d105      	bne.n	800130a <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 80012fe:	693b      	ldr	r3, [r7, #16]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8001306:	693b      	ldr	r3, [r7, #16]
 8001308:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1U))
 800130a:	683b      	ldr	r3, [r7, #0]
 800130c:	3b01      	subs	r3, #1
 800130e:	697a      	ldr	r2, [r7, #20]
 8001310:	429a      	cmp	r2, r3
 8001312:	d208      	bcs.n	8001326 <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1U);
 8001314:	697b      	ldr	r3, [r7, #20]
 8001316:	3301      	adds	r3, #1
 8001318:	015b      	lsls	r3, r3, #5
 800131a:	68ba      	ldr	r2, [r7, #8]
 800131c:	4413      	add	r3, r2
 800131e:	461a      	mov	r2, r3
 8001320:	693b      	ldr	r3, [r7, #16]
 8001322:	60da      	str	r2, [r3, #12]
 8001324:	e002      	b.n	800132c <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 8001326:	68ba      	ldr	r2, [r7, #8]
 8001328:	693b      	ldr	r3, [r7, #16]
 800132a:	60da      	str	r2, [r3, #12]
  for(i=0U; i < TxBuffCount; i++)
 800132c:	697b      	ldr	r3, [r7, #20]
 800132e:	3301      	adds	r3, #1
 8001330:	617b      	str	r3, [r7, #20]
 8001332:	697a      	ldr	r2, [r7, #20]
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	429a      	cmp	r2, r3
 8001338:	d3ca      	bcc.n	80012d0 <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	68ba      	ldr	r2, [r7, #8]
 8001340:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001344:	3310      	adds	r3, #16
 8001346:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	2201      	movs	r2, #1
 800134c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	2200      	movs	r2, #0
 8001354:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001358:	2300      	movs	r3, #0
}
 800135a:	4618      	mov	r0, r3
 800135c:	371c      	adds	r7, #28
 800135e:	46bd      	mov	sp, r7
 8001360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001364:	4770      	bx	lr

08001366 <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 8001366:	b480      	push	{r7}
 8001368:	b087      	sub	sp, #28
 800136a:	af00      	add	r7, sp, #0
 800136c:	60f8      	str	r0, [r7, #12]
 800136e:	60b9      	str	r1, [r7, #8]
 8001370:	607a      	str	r2, [r7, #4]
 8001372:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 8001374:	2300      	movs	r3, #0
 8001376:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800137e:	2b01      	cmp	r3, #1
 8001380:	d101      	bne.n	8001386 <HAL_ETH_DMARxDescListInit+0x20>
 8001382:	2302      	movs	r3, #2
 8001384:	e056      	b.n	8001434 <HAL_ETH_DMARxDescListInit+0xce>
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	2201      	movs	r2, #1
 800138a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	2202      	movs	r2, #2
 8001392:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	68ba      	ldr	r2, [r7, #8]
 800139a:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0U; i < RxBuffCount; i++)
 800139c:	2300      	movs	r3, #0
 800139e:	617b      	str	r3, [r7, #20]
 80013a0:	e034      	b.n	800140c <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the ith member of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 80013a2:	697b      	ldr	r3, [r7, #20]
 80013a4:	015b      	lsls	r3, r3, #5
 80013a6:	68ba      	ldr	r2, [r7, #8]
 80013a8:	4413      	add	r3, r2
 80013aa:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 80013ac:	693b      	ldr	r3, [r7, #16]
 80013ae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80013b2:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 80013b4:	693b      	ldr	r3, [r7, #16]
 80013b6:	f244 52f4 	movw	r2, #17908	; 0x45f4
 80013ba:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 80013bc:	697b      	ldr	r3, [r7, #20]
 80013be:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80013c2:	fb02 f303 	mul.w	r3, r2, r3
 80013c6:	687a      	ldr	r2, [r7, #4]
 80013c8:	4413      	add	r3, r2
 80013ca:	461a      	mov	r2, r3
 80013cc:	693b      	ldr	r3, [r7, #16]
 80013ce:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	699b      	ldr	r3, [r3, #24]
 80013d4:	2b01      	cmp	r3, #1
 80013d6:	d105      	bne.n	80013e4 <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 80013d8:	693b      	ldr	r3, [r7, #16]
 80013da:	685b      	ldr	r3, [r3, #4]
 80013dc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80013e0:	693b      	ldr	r3, [r7, #16]
 80013e2:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1U))
 80013e4:	683b      	ldr	r3, [r7, #0]
 80013e6:	3b01      	subs	r3, #1
 80013e8:	697a      	ldr	r2, [r7, #20]
 80013ea:	429a      	cmp	r2, r3
 80013ec:	d208      	bcs.n	8001400 <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1U); 
 80013ee:	697b      	ldr	r3, [r7, #20]
 80013f0:	3301      	adds	r3, #1
 80013f2:	015b      	lsls	r3, r3, #5
 80013f4:	68ba      	ldr	r2, [r7, #8]
 80013f6:	4413      	add	r3, r2
 80013f8:	461a      	mov	r2, r3
 80013fa:	693b      	ldr	r3, [r7, #16]
 80013fc:	60da      	str	r2, [r3, #12]
 80013fe:	e002      	b.n	8001406 <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 8001400:	68ba      	ldr	r2, [r7, #8]
 8001402:	693b      	ldr	r3, [r7, #16]
 8001404:	60da      	str	r2, [r3, #12]
  for(i=0U; i < RxBuffCount; i++)
 8001406:	697b      	ldr	r3, [r7, #20]
 8001408:	3301      	adds	r3, #1
 800140a:	617b      	str	r3, [r7, #20]
 800140c:	697a      	ldr	r2, [r7, #20]
 800140e:	683b      	ldr	r3, [r7, #0]
 8001410:	429a      	cmp	r2, r3
 8001412:	d3c6      	bcc.n	80013a2 <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	68ba      	ldr	r2, [r7, #8]
 800141a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800141e:	330c      	adds	r3, #12
 8001420:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	2201      	movs	r2, #1
 8001426:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	2200      	movs	r2, #0
 800142e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001432:	2300      	movs	r3, #0
}
 8001434:	4618      	mov	r0, r3
 8001436:	371c      	adds	r7, #28
 8001438:	46bd      	mov	sp, r7
 800143a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143e:	4770      	bx	lr

08001440 <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 8001440:	b480      	push	{r7}
 8001442:	b087      	sub	sp, #28
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
 8001448:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0U, size = 0U, i = 0U;
 800144a:	2300      	movs	r3, #0
 800144c:	617b      	str	r3, [r7, #20]
 800144e:	2300      	movs	r3, #0
 8001450:	60fb      	str	r3, [r7, #12]
 8001452:	2300      	movs	r3, #0
 8001454:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800145c:	2b01      	cmp	r3, #1
 800145e:	d101      	bne.n	8001464 <HAL_ETH_TransmitFrame+0x24>
 8001460:	2302      	movs	r3, #2
 8001462:	e0cd      	b.n	8001600 <HAL_ETH_TransmitFrame+0x1c0>
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	2201      	movs	r2, #1
 8001468:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	2202      	movs	r2, #2
 8001470:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0U) 
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	2b00      	cmp	r3, #0
 8001478:	d109      	bne.n	800148e <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	2201      	movs	r2, #1
 800147e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	2200      	movs	r2, #0
 8001486:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 800148a:	2301      	movs	r3, #1
 800148c:	e0b8      	b.n	8001600 <HAL_ETH_TransmitFrame+0x1c0>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	2b00      	cmp	r3, #0
 8001496:	da09      	bge.n	80014ac <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	2212      	movs	r2, #18
 800149c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	2200      	movs	r2, #0
 80014a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 80014a8:	2301      	movs	r3, #1
 80014aa:	e0a9      	b.n	8001600 <HAL_ETH_TransmitFrame+0x1c0>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 80014ac:	683b      	ldr	r3, [r7, #0]
 80014ae:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80014b2:	4293      	cmp	r3, r2
 80014b4:	d915      	bls.n	80014e2 <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	4a54      	ldr	r2, [pc, #336]	; (800160c <HAL_ETH_TransmitFrame+0x1cc>)
 80014ba:	fba2 2303 	umull	r2, r3, r2, r3
 80014be:	0a9b      	lsrs	r3, r3, #10
 80014c0:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 80014c2:	683a      	ldr	r2, [r7, #0]
 80014c4:	4b51      	ldr	r3, [pc, #324]	; (800160c <HAL_ETH_TransmitFrame+0x1cc>)
 80014c6:	fba3 1302 	umull	r1, r3, r3, r2
 80014ca:	0a9b      	lsrs	r3, r3, #10
 80014cc:	f240 51f4 	movw	r1, #1524	; 0x5f4
 80014d0:	fb01 f303 	mul.w	r3, r1, r3
 80014d4:	1ad3      	subs	r3, r2, r3
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d005      	beq.n	80014e6 <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 80014da:	697b      	ldr	r3, [r7, #20]
 80014dc:	3301      	adds	r3, #1
 80014de:	617b      	str	r3, [r7, #20]
 80014e0:	e001      	b.n	80014e6 <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1U;
 80014e2:	2301      	movs	r3, #1
 80014e4:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1U)
 80014e6:	697b      	ldr	r3, [r7, #20]
 80014e8:	2b01      	cmp	r3, #1
 80014ea:	d11c      	bne.n	8001526 <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014f0:	681a      	ldr	r2, [r3, #0]
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014f6:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 80014fa:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001500:	683a      	ldr	r2, [r7, #0]
 8001502:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8001506:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800150c:	681a      	ldr	r2, [r3, #0]
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001512:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001516:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800151c:	68db      	ldr	r3, [r3, #12]
 800151e:	461a      	mov	r2, r3
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	62da      	str	r2, [r3, #44]	; 0x2c
 8001524:	e04b      	b.n	80015be <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0U; i< bufcount; i++)
 8001526:	2300      	movs	r3, #0
 8001528:	613b      	str	r3, [r7, #16]
 800152a:	e044      	b.n	80015b6 <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001530:	681a      	ldr	r2, [r3, #0]
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001536:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800153a:	601a      	str	r2, [r3, #0]
      
      if (i == 0U) 
 800153c:	693b      	ldr	r3, [r7, #16]
 800153e:	2b00      	cmp	r3, #0
 8001540:	d107      	bne.n	8001552 <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001546:	681a      	ldr	r2, [r3, #0]
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800154c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001550:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001556:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800155a:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1U))
 800155c:	697b      	ldr	r3, [r7, #20]
 800155e:	3b01      	subs	r3, #1
 8001560:	693a      	ldr	r2, [r7, #16]
 8001562:	429a      	cmp	r2, r3
 8001564:	d116      	bne.n	8001594 <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800156a:	681a      	ldr	r2, [r3, #0]
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001570:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8001574:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1U)*ETH_TX_BUF_SIZE;
 8001576:	697b      	ldr	r3, [r7, #20]
 8001578:	4a25      	ldr	r2, [pc, #148]	; (8001610 <HAL_ETH_TransmitFrame+0x1d0>)
 800157a:	fb02 f203 	mul.w	r2, r2, r3
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	4413      	add	r3, r2
 8001582:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8001586:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800158c:	68fa      	ldr	r2, [r7, #12]
 800158e:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8001592:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001598:	681a      	ldr	r2, [r3, #0]
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800159e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80015a2:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015a8:	68db      	ldr	r3, [r3, #12]
 80015aa:	461a      	mov	r2, r3
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0U; i< bufcount; i++)
 80015b0:	693b      	ldr	r3, [r7, #16]
 80015b2:	3301      	adds	r3, #1
 80015b4:	613b      	str	r3, [r7, #16]
 80015b6:	693a      	ldr	r2, [r7, #16]
 80015b8:	697b      	ldr	r3, [r7, #20]
 80015ba:	429a      	cmp	r2, r3
 80015bc:	d3b6      	bcc.n	800152c <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80015c6:	3314      	adds	r3, #20
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f003 0304 	and.w	r3, r3, #4
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d00d      	beq.n	80015ee <HAL_ETH_TransmitFrame+0x1ae>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80015da:	3314      	adds	r3, #20
 80015dc:	2204      	movs	r2, #4
 80015de:	601a      	str	r2, [r3, #0]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0U;
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80015e8:	3304      	adds	r3, #4
 80015ea:	2200      	movs	r2, #0
 80015ec:	601a      	str	r2, [r3, #0]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	2201      	movs	r2, #1
 80015f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	2200      	movs	r2, #0
 80015fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80015fe:	2300      	movs	r3, #0
}
 8001600:	4618      	mov	r0, r3
 8001602:	371c      	adds	r7, #28
 8001604:	46bd      	mov	sp, r7
 8001606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160a:	4770      	bx	lr
 800160c:	ac02b00b 	.word	0xac02b00b
 8001610:	fffffa0c 	.word	0xfffffa0c

08001614 <HAL_ETH_GetReceivedFrame_IT>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame_IT(ETH_HandleTypeDef *heth)
{
 8001614:	b480      	push	{r7}
 8001616:	b085      	sub	sp, #20
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
  uint32_t descriptorscancounter = 0U;
 800161c:	2300      	movs	r3, #0
 800161e:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001626:	2b01      	cmp	r3, #1
 8001628:	d101      	bne.n	800162e <HAL_ETH_GetReceivedFrame_IT+0x1a>
 800162a:	2302      	movs	r3, #2
 800162c:	e074      	b.n	8001718 <HAL_ETH_GetReceivedFrame_IT+0x104>
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	2201      	movs	r2, #1
 8001632:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set ETH HAL State to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	2202      	movs	r2, #2
 800163a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Scan descriptors owned by CPU */
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 800163e:	e05a      	b.n	80016f6 <HAL_ETH_GetReceivedFrame_IT+0xe2>
  {
    /* Just for security */
    descriptorscancounter++;
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	3301      	adds	r3, #1
 8001644:	60fb      	str	r3, [r7, #12]
    
    /* Check if first segment in frame */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)) */  
    if((heth->RxDesc->Status & (ETH_DMARXDESC_FS | ETH_DMARXDESC_LS)) == (uint32_t)ETH_DMARXDESC_FS)
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001650:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001654:	d10d      	bne.n	8001672 <HAL_ETH_GetReceivedFrame_IT+0x5e>
    { 
      heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	631a      	str	r2, [r3, #48]	; 0x30
      heth->RxFrameInfos.SegCount = 1U;   
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	2201      	movs	r2, #1
 8001662:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001668:	68db      	ldr	r3, [r3, #12]
 800166a:	461a      	mov	r2, r3
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	629a      	str	r2, [r3, #40]	; 0x28
 8001670:	e041      	b.n	80016f6 <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Check if intermediate segment */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)&& ((heth->RxDesc->Status & ETH_DMARXDESC_FS) == (uint32_t)RESET)) */
    else if ((heth->RxDesc->Status & (ETH_DMARXDESC_LS | ETH_DMARXDESC_FS)) == (uint32_t)RESET)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800167c:	2b00      	cmp	r3, #0
 800167e:	d10b      	bne.n	8001698 <HAL_ETH_GetReceivedFrame_IT+0x84>
    {
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001684:	1c5a      	adds	r2, r3, #1
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*)(heth->RxDesc->Buffer2NextDescAddr);
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800168e:	68db      	ldr	r3, [r3, #12]
 8001690:	461a      	mov	r2, r3
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	629a      	str	r2, [r3, #40]	; 0x28
 8001696:	e02e      	b.n	80016f6 <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Should be last segment */
    else
    { 
      /* Last segment */
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016a4:	1c5a      	adds	r2, r3, #1
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos.SegCount) == 1U)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016ae:	2b01      	cmp	r3, #1
 80016b0:	d103      	bne.n	80016ba <HAL_ETH_GetReceivedFrame_IT+0xa6>
      {
        heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	631a      	str	r2, [r3, #48]	; 0x30
      }
      
      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      heth->RxFrameInfos.length = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	0c1b      	lsrs	r3, r3, #16
 80016c2:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80016c6:	1f1a      	subs	r2, r3, #4
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Get the address of the buffer start address */ 
      heth->RxFrameInfos.buffer =((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016d0:	689a      	ldr	r2, [r3, #8]
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Point to next descriptor */      
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016da:	68db      	ldr	r3, [r3, #12]
 80016dc:	461a      	mov	r2, r3
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	2201      	movs	r2, #1
 80016e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	2200      	movs	r2, #0
 80016ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
      /* Return function status */
      return HAL_OK;
 80016f2:	2300      	movs	r3, #0
 80016f4:	e010      	b.n	8001718 <HAL_ETH_GetReceivedFrame_IT+0x104>
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	db02      	blt.n	8001706 <HAL_ETH_GetReceivedFrame_IT+0xf2>
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	2b03      	cmp	r3, #3
 8001704:	d99c      	bls.n	8001640 <HAL_ETH_GetReceivedFrame_IT+0x2c>
    }
  }

  /* Set HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	2201      	movs	r2, #1
 800170a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	2200      	movs	r2, #0
 8001712:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_ERROR;
 8001716:	2301      	movs	r3, #1
}
 8001718:	4618      	mov	r0, r3
 800171a:	3714      	adds	r7, #20
 800171c:	46bd      	mov	sp, r7
 800171e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001722:	4770      	bx	lr

08001724 <HAL_ETH_IRQHandler>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b082      	sub	sp, #8
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
  /* Frame received */
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001734:	3314      	adds	r3, #20
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800173c:	2b40      	cmp	r3, #64	; 0x40
 800173e:	d112      	bne.n	8001766 <HAL_ETH_IRQHandler+0x42>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 8001740:	6878      	ldr	r0, [r7, #4]
 8001742:	f002 fb4d 	bl	8003de0 <HAL_ETH_RxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

     /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800174e:	3314      	adds	r3, #20
 8001750:	2240      	movs	r2, #64	; 0x40
 8001752:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	2201      	movs	r2, #1
 8001758:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	2200      	movs	r2, #0
 8001760:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001764:	e01b      	b.n	800179e <HAL_ETH_IRQHandler+0x7a>

  }
  /* Frame transmitted */
  else if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_T)) 
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800176e:	3314      	adds	r3, #20
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f003 0301 	and.w	r3, r3, #1
 8001776:	2b01      	cmp	r3, #1
 8001778:	d111      	bne.n	800179e <HAL_ETH_IRQHandler+0x7a>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*  Call resgistered Transfer complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 800177a:	6878      	ldr	r0, [r7, #4]
 800177c:	f000 f839 	bl	80017f2 <HAL_ETH_TxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_T);
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001788:	3314      	adds	r3, #20
 800178a:	2201      	movs	r2, #1
 800178c:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	2201      	movs	r2, #1
 8001792:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	2200      	movs	r2, #0
 800179a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
  
  /* Clear the interrupt flags */
  __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_NIS);
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80017a6:	3314      	adds	r3, #20
 80017a8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80017ac:	601a      	str	r2, [r3, #0]
  
  /* ETH DMA Error */
  if(__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_AIS))
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80017b6:	3314      	adds	r3, #20
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80017be:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80017c2:	d112      	bne.n	80017ea <HAL_ETH_IRQHandler+0xc6>
  {
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    heth->DMAErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 80017c4:	6878      	ldr	r0, [r7, #4]
 80017c6:	f000 f81e 	bl	8001806 <HAL_ETH_ErrorCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the interrupt flags */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80017d2:	3314      	adds	r3, #20
 80017d4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80017d8:	601a      	str	r2, [r3, #0]
  
    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	2201      	movs	r2, #1
 80017de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	2200      	movs	r2, #0
 80017e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
}
 80017ea:	bf00      	nop
 80017ec:	3708      	adds	r7, #8
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bd80      	pop	{r7, pc}

080017f2 <HAL_ETH_TxCpltCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 80017f2:	b480      	push	{r7}
 80017f4:	b083      	sub	sp, #12
 80017f6:	af00      	add	r7, sp, #0
 80017f8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 80017fa:	bf00      	nop
 80017fc:	370c      	adds	r7, #12
 80017fe:	46bd      	mov	sp, r7
 8001800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001804:	4770      	bx	lr

08001806 <HAL_ETH_ErrorCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 8001806:	b480      	push	{r7}
 8001808:	b083      	sub	sp, #12
 800180a:	af00      	add	r7, sp, #0
 800180c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 800180e:	bf00      	nop
 8001810:	370c      	adds	r7, #12
 8001812:	46bd      	mov	sp, r7
 8001814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001818:	4770      	bx	lr

0800181a <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 800181a:	b580      	push	{r7, lr}
 800181c:	b086      	sub	sp, #24
 800181e:	af00      	add	r7, sp, #0
 8001820:	60f8      	str	r0, [r7, #12]
 8001822:	460b      	mov	r3, r1
 8001824:	607a      	str	r2, [r7, #4]
 8001826:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;     
 8001828:	2300      	movs	r3, #0
 800182a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 800182c:	2300      	movs	r3, #0
 800182e:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001836:	b2db      	uxtb	r3, r3
 8001838:	2b82      	cmp	r3, #130	; 0x82
 800183a:	d101      	bne.n	8001840 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 800183c:	2302      	movs	r3, #2
 800183e:	e050      	b.n	80018e2 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	2282      	movs	r2, #130	; 0x82
 8001844:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	691b      	ldr	r3, [r3, #16]
 800184e:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001850:	697b      	ldr	r3, [r7, #20]
 8001852:	f003 031c 	and.w	r3, r3, #28
 8001856:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	8a1b      	ldrh	r3, [r3, #16]
 800185c:	02db      	lsls	r3, r3, #11
 800185e:	b29b      	uxth	r3, r3
 8001860:	697a      	ldr	r2, [r7, #20]
 8001862:	4313      	orrs	r3, r2
 8001864:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8001866:	897b      	ldrh	r3, [r7, #10]
 8001868:	019b      	lsls	r3, r3, #6
 800186a:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 800186e:	697a      	ldr	r2, [r7, #20]
 8001870:	4313      	orrs	r3, r2
 8001872:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8001874:	697b      	ldr	r3, [r7, #20]
 8001876:	f023 0302 	bic.w	r3, r3, #2
 800187a:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 800187c:	697b      	ldr	r3, [r7, #20]
 800187e:	f043 0301 	orr.w	r3, r3, #1
 8001882:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	697a      	ldr	r2, [r7, #20]
 800188a:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 800188c:	f7ff fa54 	bl	8000d38 <HAL_GetTick>
 8001890:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001892:	e015      	b.n	80018c0 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8001894:	f7ff fa50 	bl	8000d38 <HAL_GetTick>
 8001898:	4602      	mov	r2, r0
 800189a:	693b      	ldr	r3, [r7, #16]
 800189c:	1ad3      	subs	r3, r2, r3
 800189e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018a2:	d309      	bcc.n	80018b8 <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	2201      	movs	r2, #1
 80018a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	2200      	movs	r2, #0
 80018b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 80018b4:	2303      	movs	r3, #3
 80018b6:	e014      	b.n	80018e2 <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	691b      	ldr	r3, [r3, #16]
 80018be:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80018c0:	697b      	ldr	r3, [r7, #20]
 80018c2:	f003 0301 	and.w	r3, r3, #1
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d1e4      	bne.n	8001894 <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	695b      	ldr	r3, [r3, #20]
 80018d0:	b29b      	uxth	r3, r3
 80018d2:	461a      	mov	r2, r3
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	2201      	movs	r2, #1
 80018dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 80018e0:	2300      	movs	r3, #0
}
 80018e2:	4618      	mov	r0, r3
 80018e4:	3718      	adds	r7, #24
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bd80      	pop	{r7, pc}

080018ea <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 80018ea:	b580      	push	{r7, lr}
 80018ec:	b086      	sub	sp, #24
 80018ee:	af00      	add	r7, sp, #0
 80018f0:	60f8      	str	r0, [r7, #12]
 80018f2:	460b      	mov	r3, r1
 80018f4:	607a      	str	r2, [r7, #4]
 80018f6:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;
 80018f8:	2300      	movs	r3, #0
 80018fa:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 80018fc:	2300      	movs	r3, #0
 80018fe:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001906:	b2db      	uxtb	r3, r3
 8001908:	2b42      	cmp	r3, #66	; 0x42
 800190a:	d101      	bne.n	8001910 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 800190c:	2302      	movs	r3, #2
 800190e:	e04e      	b.n	80019ae <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	2242      	movs	r2, #66	; 0x42
 8001914:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	691b      	ldr	r3, [r3, #16]
 800191e:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001920:	697b      	ldr	r3, [r7, #20]
 8001922:	f003 031c 	and.w	r3, r3, #28
 8001926:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress<<11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	8a1b      	ldrh	r3, [r3, #16]
 800192c:	02db      	lsls	r3, r3, #11
 800192e:	b29b      	uxth	r3, r3
 8001930:	697a      	ldr	r2, [r7, #20]
 8001932:	4313      	orrs	r3, r2
 8001934:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8001936:	897b      	ldrh	r3, [r7, #10]
 8001938:	019b      	lsls	r3, r3, #6
 800193a:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 800193e:	697a      	ldr	r2, [r7, #20]
 8001940:	4313      	orrs	r3, r2
 8001942:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8001944:	697b      	ldr	r3, [r7, #20]
 8001946:	f043 0302 	orr.w	r3, r3, #2
 800194a:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 800194c:	697b      	ldr	r3, [r7, #20]
 800194e:	f043 0301 	orr.w	r3, r3, #1
 8001952:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	b29a      	uxth	r2, r3
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	697a      	ldr	r2, [r7, #20]
 8001964:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001966:	f7ff f9e7 	bl	8000d38 <HAL_GetTick>
 800196a:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800196c:	e015      	b.n	800199a <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 800196e:	f7ff f9e3 	bl	8000d38 <HAL_GetTick>
 8001972:	4602      	mov	r2, r0
 8001974:	693b      	ldr	r3, [r7, #16]
 8001976:	1ad3      	subs	r3, r2, r3
 8001978:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800197c:	d309      	bcc.n	8001992 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	2201      	movs	r2, #1
 8001982:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	2200      	movs	r2, #0
 800198a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 800198e:	2303      	movs	r3, #3
 8001990:	e00d      	b.n	80019ae <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	691b      	ldr	r3, [r3, #16]
 8001998:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800199a:	697b      	ldr	r3, [r7, #20]
 800199c:	f003 0301 	and.w	r3, r3, #1
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d1e4      	bne.n	800196e <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	2201      	movs	r2, #1
 80019a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 80019ac:	2300      	movs	r3, #0
}
 80019ae:	4618      	mov	r0, r3
 80019b0:	3718      	adds	r7, #24
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd80      	pop	{r7, pc}

080019b6 <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 80019b6:	b580      	push	{r7, lr}
 80019b8:	b082      	sub	sp, #8
 80019ba:	af00      	add	r7, sp, #0
 80019bc:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80019c4:	2b01      	cmp	r3, #1
 80019c6:	d101      	bne.n	80019cc <HAL_ETH_Start+0x16>
 80019c8:	2302      	movs	r3, #2
 80019ca:	e01f      	b.n	8001a0c <HAL_ETH_Start+0x56>
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	2201      	movs	r2, #1
 80019d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	2202      	movs	r2, #2
 80019d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 80019dc:	6878      	ldr	r0, [r7, #4]
 80019de:	f000 fb45 	bl	800206c <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 80019e2:	6878      	ldr	r0, [r7, #4]
 80019e4:	f000 fb7c 	bl	80020e0 <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 80019e8:	6878      	ldr	r0, [r7, #4]
 80019ea:	f000 fc13 	bl	8002214 <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 80019ee:	6878      	ldr	r0, [r7, #4]
 80019f0:	f000 fbb0 	bl	8002154 <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 80019f4:	6878      	ldr	r0, [r7, #4]
 80019f6:	f000 fbdd 	bl	80021b4 <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	2201      	movs	r2, #1
 80019fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	2200      	movs	r2, #0
 8001a06:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001a0a:	2300      	movs	r3, #0
}
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	3708      	adds	r7, #8
 8001a10:	46bd      	mov	sp, r7
 8001a12:	bd80      	pop	{r7, pc}

08001a14 <HAL_ETH_Stop>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{  
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b082      	sub	sp, #8
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001a22:	2b01      	cmp	r3, #1
 8001a24:	d101      	bne.n	8001a2a <HAL_ETH_Stop+0x16>
 8001a26:	2302      	movs	r3, #2
 8001a28:	e01f      	b.n	8001a6a <HAL_ETH_Stop+0x56>
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	2201      	movs	r2, #1
 8001a2e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	2202      	movs	r2, #2
 8001a36:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Stop DMA transmission */
  ETH_DMATransmissionDisable(heth);
 8001a3a:	6878      	ldr	r0, [r7, #4]
 8001a3c:	f000 fba2 	bl	8002184 <ETH_DMATransmissionDisable>
  
  /* Stop DMA reception */
  ETH_DMAReceptionDisable(heth);
 8001a40:	6878      	ldr	r0, [r7, #4]
 8001a42:	f000 fbcf 	bl	80021e4 <ETH_DMAReceptionDisable>
  
  /* Disable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionDisable(heth);
 8001a46:	6878      	ldr	r0, [r7, #4]
 8001a48:	f000 fb67 	bl	800211a <ETH_MACReceptionDisable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8001a4c:	6878      	ldr	r0, [r7, #4]
 8001a4e:	f000 fbe1 	bl	8002214 <ETH_FlushTransmitFIFO>
  
  /* Disable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionDisable(heth);
 8001a52:	6878      	ldr	r0, [r7, #4]
 8001a54:	f000 fb27 	bl	80020a6 <ETH_MACTransmissionDisable>
  
  /* Set the ETH state*/
  heth->State = HAL_ETH_STATE_READY;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	2201      	movs	r2, #1
 8001a5c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	2200      	movs	r2, #0
 8001a64:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001a68:	2300      	movs	r3, #0
}
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	3708      	adds	r7, #8
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bd80      	pop	{r7, pc}
	...

08001a74 <HAL_ETH_ConfigMAC>:
  *         the configuration information for ETHERNET module
  * @param  macconf MAC Configuration structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ConfigMAC(ETH_HandleTypeDef *heth, ETH_MACInitTypeDef *macconf)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b084      	sub	sp, #16
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
 8001a7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0U;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001a88:	2b01      	cmp	r3, #1
 8001a8a:	d101      	bne.n	8001a90 <HAL_ETH_ConfigMAC+0x1c>
 8001a8c:	2302      	movs	r3, #2
 8001a8e:	e0e4      	b.n	8001c5a <HAL_ETH_ConfigMAC+0x1e6>
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	2201      	movs	r2, #1
 8001a94:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State= HAL_ETH_STATE_BUSY;
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	2202      	movs	r2, #2
 8001a9c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode)); 
  
  if (macconf != NULL)
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	f000 80b1 	beq.w	8001c0a <HAL_ETH_ConfigMAC+0x196>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));
    
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	60fb      	str	r3, [r7, #12]
    /* Clear WD, PCE, PS, TE and RE bits */
    tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001ab0:	68fa      	ldr	r2, [r7, #12]
 8001ab2:	4b6c      	ldr	r3, [pc, #432]	; (8001c64 <HAL_ETH_ConfigMAC+0x1f0>)
 8001ab4:	4013      	ands	r3, r2
 8001ab6:	60fb      	str	r3, [r7, #12]
    
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	681a      	ldr	r2, [r3, #0]
                         macconf->Jabber | 
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	685b      	ldr	r3, [r3, #4]
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 8001ac0:	431a      	orrs	r2, r3
                         macconf->InterFrameGap |
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	689b      	ldr	r3, [r3, #8]
                         macconf->Jabber | 
 8001ac6:	431a      	orrs	r2, r3
                         macconf->CarrierSense |
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	68db      	ldr	r3, [r3, #12]
                         macconf->InterFrameGap |
 8001acc:	431a      	orrs	r2, r3
                         (heth->Init).Speed | 
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	689b      	ldr	r3, [r3, #8]
                         macconf->CarrierSense |
 8001ad2:	431a      	orrs	r2, r3
                         macconf->ReceiveOwn |
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	691b      	ldr	r3, [r3, #16]
                         (heth->Init).Speed | 
 8001ad8:	431a      	orrs	r2, r3
                         macconf->LoopbackMode |
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	695b      	ldr	r3, [r3, #20]
                         macconf->ReceiveOwn |
 8001ade:	431a      	orrs	r2, r3
                         (heth->Init).DuplexMode | 
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	68db      	ldr	r3, [r3, #12]
                         macconf->LoopbackMode |
 8001ae4:	431a      	orrs	r2, r3
                         macconf->ChecksumOffload |    
 8001ae6:	683b      	ldr	r3, [r7, #0]
 8001ae8:	699b      	ldr	r3, [r3, #24]
                         (heth->Init).DuplexMode | 
 8001aea:	431a      	orrs	r2, r3
                         macconf->RetryTransmission | 
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	69db      	ldr	r3, [r3, #28]
                         macconf->ChecksumOffload |    
 8001af0:	431a      	orrs	r2, r3
                         macconf->AutomaticPadCRCStrip | 
 8001af2:	683b      	ldr	r3, [r7, #0]
 8001af4:	6a1b      	ldr	r3, [r3, #32]
                         macconf->RetryTransmission | 
 8001af6:	431a      	orrs	r2, r3
                         macconf->BackOffLimit | 
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                         macconf->AutomaticPadCRCStrip | 
 8001afc:	431a      	orrs	r2, r3
                         macconf->DeferralCheck);
 8001afe:	683b      	ldr	r3, [r7, #0]
 8001b00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                         macconf->BackOffLimit | 
 8001b02:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 8001b04:	68fa      	ldr	r2, [r7, #12]
 8001b06:	4313      	orrs	r3, r2
 8001b08:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	68fa      	ldr	r2, [r7, #12]
 8001b10:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001b1a:	2001      	movs	r0, #1
 8001b1c:	f7ff f918 	bl	8000d50 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1; 
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	68fa      	ldr	r2, [r7, #12]
 8001b26:	601a      	str	r2, [r3, #0]
    
    /*----------------------- ETHERNET MACFFR Configuration --------------------*/ 
    /* Write to ETHERNET MACFFR */  
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
                                          macconf->SourceAddrFilter |
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8001b30:	431a      	orrs	r2, r3
                                          macconf->PassControlFrames |
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                                          macconf->SourceAddrFilter |
 8001b36:	431a      	orrs	r2, r3
                                          macconf->BroadcastFramesReception | 
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                          macconf->PassControlFrames |
 8001b3c:	431a      	orrs	r2, r3
                                          macconf->DestinationAddrFilter |
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                                          macconf->BroadcastFramesReception | 
 8001b42:	431a      	orrs	r2, r3
                                          macconf->PromiscuousMode |
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                                          macconf->DestinationAddrFilter |
 8001b48:	431a      	orrs	r2, r3
                                          macconf->MulticastFramesFilter |
 8001b4a:	683b      	ldr	r3, [r7, #0]
 8001b4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                                          macconf->PromiscuousMode |
 8001b4e:	ea42 0103 	orr.w	r1, r2, r3
                                          macconf->UnicastFramesFilter);
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
                                          macconf->MulticastFramesFilter |
 8001b5a:	430a      	orrs	r2, r1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8001b5c:	605a      	str	r2, [r3, #4]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->MACFFR;
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	685b      	ldr	r3, [r3, #4]
 8001b64:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8001b66:	2001      	movs	r0, #1
 8001b68:	f7ff f8f2 	bl	8000d50 <HAL_Delay>
     (heth->Instance)->MACFFR = tmpreg1;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	68fa      	ldr	r2, [r7, #12]
 8001b72:	605a      	str	r2, [r3, #4]
     
     /*--------------- ETHERNET MACHTHR and MACHTLR Configuration ---------------*/
     /* Write to ETHERNET MACHTHR */
     (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	683a      	ldr	r2, [r7, #0]
 8001b7a:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001b7c:	609a      	str	r2, [r3, #8]
     
     /* Write to ETHERNET MACHTLR */
     (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	683a      	ldr	r2, [r7, #0]
 8001b84:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001b86:	60da      	str	r2, [r3, #12]
     /*----------------------- ETHERNET MACFCR Configuration --------------------*/
     
     /* Get the ETHERNET MACFCR value */  
     tmpreg1 = (heth->Instance)->MACFCR;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	699b      	ldr	r3, [r3, #24]
 8001b8e:	60fb      	str	r3, [r7, #12]
     /* Clear xx bits */
     tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001b90:	68fa      	ldr	r2, [r7, #12]
 8001b92:	f64f 7341 	movw	r3, #65345	; 0xff41
 8001b96:	4013      	ands	r3, r2
 8001b98:	60fb      	str	r3, [r7, #12]
     
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b9e:	041a      	lsls	r2, r3, #16
                          macconf->ZeroQuantaPause |
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 8001ba4:	431a      	orrs	r2, r3
                          macconf->PauseLowThreshold |
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                          macconf->ZeroQuantaPause |
 8001baa:	431a      	orrs	r2, r3
                          macconf->UnicastPauseFrameDetect | 
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                          macconf->PauseLowThreshold |
 8001bb0:	431a      	orrs	r2, r3
                          macconf->ReceiveFlowControl |
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
                          macconf->UnicastPauseFrameDetect | 
 8001bb6:	431a      	orrs	r2, r3
                          macconf->TransmitFlowControl); 
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                          macconf->ReceiveFlowControl |
 8001bbc:	4313      	orrs	r3, r2
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 8001bbe:	68fa      	ldr	r2, [r7, #12]
 8001bc0:	4313      	orrs	r3, r2
 8001bc2:	60fb      	str	r3, [r7, #12]
     
     /* Write to ETHERNET MACFCR */
     (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	68fa      	ldr	r2, [r7, #12]
 8001bca:	619a      	str	r2, [r3, #24]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->MACFCR;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	699b      	ldr	r3, [r3, #24]
 8001bd2:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8001bd4:	2001      	movs	r0, #1
 8001bd6:	f7ff f8bb 	bl	8000d50 <HAL_Delay>
     (heth->Instance)->MACFCR = tmpreg1;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	68fa      	ldr	r2, [r7, #12]
 8001be0:	619a      	str	r2, [r3, #24]
     
     /*----------------------- ETHERNET MACVLANTR Configuration -----------------*/
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
                                              macconf->VLANTagIdentifier);
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	430a      	orrs	r2, r1
 8001bf0:	61da      	str	r2, [r3, #28]
      
      /* Wait until the write operation will be taken into account :
      at least four TX_CLK/RX_CLK clock cycles */
      tmpreg1 = (heth->Instance)->MACVLANTR;
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	69db      	ldr	r3, [r3, #28]
 8001bf8:	60fb      	str	r3, [r7, #12]
      HAL_Delay(ETH_REG_WRITE_DELAY);
 8001bfa:	2001      	movs	r0, #1
 8001bfc:	f7ff f8a8 	bl	8000d50 <HAL_Delay>
      (heth->Instance)->MACVLANTR = tmpreg1;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	68fa      	ldr	r2, [r7, #12]
 8001c06:	61da      	str	r2, [r3, #28]
 8001c08:	e01e      	b.n	8001c48 <HAL_ETH_ConfigMAC+0x1d4>
  }
  else /* macconf == NULL : here we just configure Speed and Duplex mode */
  {
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	60fb      	str	r3, [r7, #12]
    
    /* Clear FES and DM bits */
    tmpreg1 &= ~(0x00004800U);
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8001c18:	60fb      	str	r3, [r7, #12]
    
    tmpreg1 |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	689a      	ldr	r2, [r3, #8]
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	68db      	ldr	r3, [r3, #12]
 8001c22:	4313      	orrs	r3, r2
 8001c24:	68fa      	ldr	r2, [r7, #12]
 8001c26:	4313      	orrs	r3, r2
 8001c28:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	68fa      	ldr	r2, [r7, #12]
 8001c30:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001c3a:	2001      	movs	r0, #1
 8001c3c:	f7ff f888 	bl	8000d50 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	68fa      	ldr	r2, [r7, #12]
 8001c46:	601a      	str	r2, [r3, #0]
  }
  
  /* Set the ETH state to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	2201      	movs	r2, #1
 8001c4c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	2200      	movs	r2, #0
 8001c54:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;  
 8001c58:	2300      	movs	r3, #0
}
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	3710      	adds	r7, #16
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bd80      	pop	{r7, pc}
 8001c62:	bf00      	nop
 8001c64:	ff20810f 	.word	0xff20810f

08001c68 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b0b0      	sub	sp, #192	; 0xc0
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
 8001c70:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg1 = 0U;
 8001c72:	2300      	movs	r3, #0
 8001c74:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d007      	beq.n	8001c8e <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001c84:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001c8c:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 8001c92:	2300      	movs	r3, #0
 8001c94:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 8001c96:	2300      	movs	r3, #0
 8001c98:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	69db      	ldr	r3, [r3, #28]
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d103      	bne.n	8001cb6 <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 8001cae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001cb2:	663b      	str	r3, [r7, #96]	; 0x60
 8001cb4:	e001      	b.n	8001cba <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 8001cba:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001cbe:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8001cd4:	2340      	movs	r3, #64	; 0x40
 8001cd6:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8001cd8:	2300      	movs	r3, #0
 8001cda:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 8001cea:	2300      	movs	r3, #0
 8001cec:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0U;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0U;
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0U;
 8001d02:	2300      	movs	r3, #0
 8001d04:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8001d08:	2380      	movs	r3, #128	; 0x80
 8001d0a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8001d14:	2300      	movs	r3, #0
 8001d16:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8001d20:	2300      	movs	r3, #0
 8001d22:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 8001d26:	2300      	movs	r3, #0
 8001d28:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0U;
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001d3c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001d40:	4bac      	ldr	r3, [pc, #688]	; (8001ff4 <ETH_MACDMAConfig+0x38c>)
 8001d42:	4013      	ands	r3, r2
 8001d44:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8001d48:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 8001d4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8001d4c:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 8001d4e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 8001d50:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 8001d52:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 8001d54:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 8001d5a:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 8001d5c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 8001d5e:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 8001d60:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 8001d62:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 8001d68:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 8001d6a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 8001d6c:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 8001d6e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 8001d70:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 8001d72:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 8001d74:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 8001d76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 8001d78:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 8001d7a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 8001d7c:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8001d7e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001d82:	4313      	orrs	r3, r2
 8001d84:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001d90:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001d9c:	2001      	movs	r0, #1
 8001d9e:	f7fe ffd7 	bl	8000d50 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1; 
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001daa:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001dac:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 8001dae:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001db0:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 8001db2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8001db4:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 8001db6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 8001dba:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 8001dbc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 8001dc0:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 8001dc2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 8001dc6:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8001dc8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 8001dcc:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8001dd0:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8001dd8:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001dda:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFFR;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	685b      	ldr	r3, [r3, #4]
 8001de2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8001de6:	2001      	movs	r0, #1
 8001de8:	f7fe ffb2 	bl	8000d50 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg1;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001df4:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001dfe:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8001e08:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg1 = (heth->Instance)->MACFCR;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	699b      	ldr	r3, [r3, #24]
 8001e10:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001e14:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001e18:	f64f 7341 	movw	r3, #65345	; 0xff41
 8001e1c:	4013      	ands	r3, r2
 8001e1e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8001e22:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001e26:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8001e28:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8001e2c:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 8001e2e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 8001e32:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 8001e34:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8001e38:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 8001e3a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 8001e3e:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 8001e40:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8001e44:	4313      	orrs	r3, r2
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8001e46:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001e4a:	4313      	orrs	r3, r2
 8001e4c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001e58:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFCR;
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	699b      	ldr	r3, [r3, #24]
 8001e60:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8001e64:	2001      	movs	r0, #1
 8001e66:	f7fe ff73 	bl	8000d50 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg1;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001e72:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8001e74:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 8001e78:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	430a      	orrs	r2, r1
 8001e82:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACVLANTR;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	69db      	ldr	r3, [r3, #28]
 8001e8a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001e8e:	2001      	movs	r0, #1
 8001e90:	f7fe ff5e 	bl	8000d50 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg1;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001e9c:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 8001ea2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001ea6:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 8001eac:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001eb0:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 8001ec2:	2304      	movs	r3, #4
 8001ec4:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 8001ec6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001eca:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8001ecc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001ed0:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001ed2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001ed6:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001ed8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001edc:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 8001ede:	2380      	movs	r3, #128	; 0x80
 8001ee0:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0U;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg1 = (heth->Instance)->DMAOMR;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ef2:	3318      	adds	r3, #24
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8001efa:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001efe:	4b3e      	ldr	r3, [pc, #248]	; (8001ff8 <ETH_MACDMAConfig+0x390>)
 8001f00:	4013      	ands	r3, r2
 8001f02:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8001f06:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 8001f08:	68fb      	ldr	r3, [r7, #12]
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8001f0a:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 8001f0c:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 8001f0e:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 8001f10:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 8001f12:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 8001f14:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 8001f16:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 8001f18:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 8001f1a:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 8001f1c:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 8001f1e:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 8001f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 8001f22:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 8001f24:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 8001f26:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8001f28:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001f2c:	4313      	orrs	r3, r2
 8001f2e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f3a:	3318      	adds	r3, #24
 8001f3c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001f40:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->DMAOMR;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f4a:	3318      	adds	r3, #24
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001f52:	2001      	movs	r0, #1
 8001f54:	f7fe fefc 	bl	8000d50 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg1;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f60:	3318      	adds	r3, #24
 8001f62:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001f66:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8001f68:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 8001f6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8001f6c:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8001f6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 8001f70:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 8001f72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8001f74:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 8001f76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 8001f78:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2U) |
 8001f7a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001f7c:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 8001f7e:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 8001f80:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2U) |
 8001f82:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001f8c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f90:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->DMABMR;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8001fa0:	2001      	movs	r0, #1
 8001fa2:	f7fe fed5 	bl	8000d50 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg1;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001fae:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001fb2:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	699b      	ldr	r3, [r3, #24]
 8001fb8:	2b01      	cmp	r3, #1
 8001fba:	d10f      	bne.n	8001fdc <ETH_MACDMAConfig+0x374>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001fc4:	331c      	adds	r3, #28
 8001fc6:	681a      	ldr	r2, [r3, #0]
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001fd0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001fd4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001fd8:	331c      	adds	r3, #28
 8001fda:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	695b      	ldr	r3, [r3, #20]
 8001fe0:	461a      	mov	r2, r3
 8001fe2:	2100      	movs	r1, #0
 8001fe4:	6878      	ldr	r0, [r7, #4]
 8001fe6:	f000 f809 	bl	8001ffc <ETH_MACAddressConfig>
}
 8001fea:	bf00      	nop
 8001fec:	37c0      	adds	r7, #192	; 0xc0
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bd80      	pop	{r7, pc}
 8001ff2:	bf00      	nop
 8001ff4:	ff20810f 	.word	0xff20810f
 8001ff8:	f8de3f23 	.word	0xf8de3f23

08001ffc <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	b087      	sub	sp, #28
 8002000:	af00      	add	r7, sp, #0
 8002002:	60f8      	str	r0, [r7, #12]
 8002004:	60b9      	str	r1, [r7, #8]
 8002006:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	3305      	adds	r3, #5
 800200c:	781b      	ldrb	r3, [r3, #0]
 800200e:	021b      	lsls	r3, r3, #8
 8002010:	687a      	ldr	r2, [r7, #4]
 8002012:	3204      	adds	r2, #4
 8002014:	7812      	ldrb	r2, [r2, #0]
 8002016:	4313      	orrs	r3, r2
 8002018:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 800201a:	68ba      	ldr	r2, [r7, #8]
 800201c:	4b11      	ldr	r3, [pc, #68]	; (8002064 <ETH_MACAddressConfig+0x68>)
 800201e:	4413      	add	r3, r2
 8002020:	461a      	mov	r2, r3
 8002022:	697b      	ldr	r3, [r7, #20]
 8002024:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	3303      	adds	r3, #3
 800202a:	781b      	ldrb	r3, [r3, #0]
 800202c:	061a      	lsls	r2, r3, #24
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	3302      	adds	r3, #2
 8002032:	781b      	ldrb	r3, [r3, #0]
 8002034:	041b      	lsls	r3, r3, #16
 8002036:	431a      	orrs	r2, r3
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	3301      	adds	r3, #1
 800203c:	781b      	ldrb	r3, [r3, #0]
 800203e:	021b      	lsls	r3, r3, #8
 8002040:	4313      	orrs	r3, r2
 8002042:	687a      	ldr	r2, [r7, #4]
 8002044:	7812      	ldrb	r2, [r2, #0]
 8002046:	4313      	orrs	r3, r2
 8002048:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 800204a:	68ba      	ldr	r2, [r7, #8]
 800204c:	4b06      	ldr	r3, [pc, #24]	; (8002068 <ETH_MACAddressConfig+0x6c>)
 800204e:	4413      	add	r3, r2
 8002050:	461a      	mov	r2, r3
 8002052:	697b      	ldr	r3, [r7, #20]
 8002054:	6013      	str	r3, [r2, #0]
}
 8002056:	bf00      	nop
 8002058:	371c      	adds	r7, #28
 800205a:	46bd      	mov	sp, r7
 800205c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002060:	4770      	bx	lr
 8002062:	bf00      	nop
 8002064:	40028040 	.word	0x40028040
 8002068:	40028044 	.word	0x40028044

0800206c <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 800206c:	b580      	push	{r7, lr}
 800206e:	b084      	sub	sp, #16
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8002074:	2300      	movs	r3, #0
 8002076:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	681a      	ldr	r2, [r3, #0]
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f042 0208 	orr.w	r2, r2, #8
 8002086:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8002090:	2001      	movs	r0, #1
 8002092:	f000 f8e9 	bl	8002268 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	68fa      	ldr	r2, [r7, #12]
 800209c:	601a      	str	r2, [r3, #0]
}
 800209e:	bf00      	nop
 80020a0:	3710      	adds	r7, #16
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bd80      	pop	{r7, pc}

080020a6 <ETH_MACTransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 80020a6:	b580      	push	{r7, lr}
 80020a8:	b084      	sub	sp, #16
 80020aa:	af00      	add	r7, sp, #0
 80020ac:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 80020ae:	2300      	movs	r3, #0
 80020b0:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC transmission */
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	681a      	ldr	r2, [r3, #0]
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f022 0208 	bic.w	r2, r2, #8
 80020c0:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 80020ca:	2001      	movs	r0, #1
 80020cc:	f000 f8cc 	bl	8002268 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	68fa      	ldr	r2, [r7, #12]
 80020d6:	601a      	str	r2, [r3, #0]
}
 80020d8:	bf00      	nop
 80020da:	3710      	adds	r7, #16
 80020dc:	46bd      	mov	sp, r7
 80020de:	bd80      	pop	{r7, pc}

080020e0 <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b084      	sub	sp, #16
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 80020e8:	2300      	movs	r3, #0
 80020ea:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	681a      	ldr	r2, [r3, #0]
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f042 0204 	orr.w	r2, r2, #4
 80020fa:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8002104:	2001      	movs	r0, #1
 8002106:	f000 f8af 	bl	8002268 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	68fa      	ldr	r2, [r7, #12]
 8002110:	601a      	str	r2, [r3, #0]
}
 8002112:	bf00      	nop
 8002114:	3710      	adds	r7, #16
 8002116:	46bd      	mov	sp, r7
 8002118:	bd80      	pop	{r7, pc}

0800211a <ETH_MACReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 800211a:	b580      	push	{r7, lr}
 800211c:	b084      	sub	sp, #16
 800211e:	af00      	add	r7, sp, #0
 8002120:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8002122:	2300      	movs	r3, #0
 8002124:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC reception */
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE; 
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	681a      	ldr	r2, [r3, #0]
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f022 0204 	bic.w	r2, r2, #4
 8002134:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 800213e:	2001      	movs	r0, #1
 8002140:	f000 f892 	bl	8002268 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	68fa      	ldr	r2, [r7, #12]
 800214a:	601a      	str	r2, [r3, #0]
}
 800214c:	bf00      	nop
 800214e:	3710      	adds	r7, #16
 8002150:	46bd      	mov	sp, r7
 8002152:	bd80      	pop	{r7, pc}

08002154 <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 8002154:	b480      	push	{r7}
 8002156:	b083      	sub	sp, #12
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002164:	3318      	adds	r3, #24
 8002166:	681a      	ldr	r2, [r3, #0]
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002170:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002174:	3318      	adds	r3, #24
 8002176:	601a      	str	r2, [r3, #0]
}
 8002178:	bf00      	nop
 800217a:	370c      	adds	r7, #12
 800217c:	46bd      	mov	sp, r7
 800217e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002182:	4770      	bx	lr

08002184 <ETH_DMATransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 8002184:	b480      	push	{r7}
 8002186:	b083      	sub	sp, #12
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
  /* Disable the DMA transmission */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002194:	3318      	adds	r3, #24
 8002196:	681a      	ldr	r2, [r3, #0]
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80021a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80021a4:	3318      	adds	r3, #24
 80021a6:	601a      	str	r2, [r3, #0]
}
 80021a8:	bf00      	nop
 80021aa:	370c      	adds	r7, #12
 80021ac:	46bd      	mov	sp, r7
 80021ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b2:	4770      	bx	lr

080021b4 <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 80021b4:	b480      	push	{r7}
 80021b6:	b083      	sub	sp, #12
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80021c4:	3318      	adds	r3, #24
 80021c6:	681a      	ldr	r2, [r3, #0]
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f042 0202 	orr.w	r2, r2, #2
 80021d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80021d4:	3318      	adds	r3, #24
 80021d6:	601a      	str	r2, [r3, #0]
}
 80021d8:	bf00      	nop
 80021da:	370c      	adds	r7, #12
 80021dc:	46bd      	mov	sp, r7
 80021de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e2:	4770      	bx	lr

080021e4 <ETH_DMAReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 80021e4:	b480      	push	{r7}
 80021e6:	b083      	sub	sp, #12
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
  /* Disable the DMA reception */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80021f4:	3318      	adds	r3, #24
 80021f6:	681a      	ldr	r2, [r3, #0]
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f022 0202 	bic.w	r2, r2, #2
 8002200:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002204:	3318      	adds	r3, #24
 8002206:	601a      	str	r2, [r3, #0]
}
 8002208:	bf00      	nop
 800220a:	370c      	adds	r7, #12
 800220c:	46bd      	mov	sp, r7
 800220e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002212:	4770      	bx	lr

08002214 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b084      	sub	sp, #16
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 800221c:	2300      	movs	r3, #0
 800221e:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002228:	3318      	adds	r3, #24
 800222a:	681a      	ldr	r2, [r3, #0]
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002234:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002238:	3318      	adds	r3, #24
 800223a:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002244:	3318      	adds	r3, #24
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 800224a:	2001      	movs	r0, #1
 800224c:	f000 f80c 	bl	8002268 <ETH_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	68fa      	ldr	r2, [r7, #12]
 8002256:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800225a:	3318      	adds	r3, #24
 800225c:	601a      	str	r2, [r3, #0]
}
 800225e:	bf00      	nop
 8002260:	3710      	adds	r7, #16
 8002262:	46bd      	mov	sp, r7
 8002264:	bd80      	pop	{r7, pc}
	...

08002268 <ETH_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay specifies the delay time length, in milliseconds.
  * @retval None
  */
static void ETH_Delay(uint32_t mdelay)
{
 8002268:	b480      	push	{r7}
 800226a:	b085      	sub	sp, #20
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002270:	4b0a      	ldr	r3, [pc, #40]	; (800229c <ETH_Delay+0x34>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	4a0a      	ldr	r2, [pc, #40]	; (80022a0 <ETH_Delay+0x38>)
 8002276:	fba2 2303 	umull	r2, r3, r2, r3
 800227a:	0a5b      	lsrs	r3, r3, #9
 800227c:	687a      	ldr	r2, [r7, #4]
 800227e:	fb02 f303 	mul.w	r3, r2, r3
 8002282:	60fb      	str	r3, [r7, #12]
  do 
  {
    __NOP();
 8002284:	bf00      	nop
  } 
  while (Delay --);
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	1e5a      	subs	r2, r3, #1
 800228a:	60fa      	str	r2, [r7, #12]
 800228c:	2b00      	cmp	r3, #0
 800228e:	d1f9      	bne.n	8002284 <ETH_Delay+0x1c>
}
 8002290:	bf00      	nop
 8002292:	3714      	adds	r7, #20
 8002294:	46bd      	mov	sp, r7
 8002296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229a:	4770      	bx	lr
 800229c:	20000000 	.word	0x20000000
 80022a0:	10624dd3 	.word	0x10624dd3

080022a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022a4:	b480      	push	{r7}
 80022a6:	b089      	sub	sp, #36	; 0x24
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
 80022ac:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80022ae:	2300      	movs	r3, #0
 80022b0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80022b2:	2300      	movs	r3, #0
 80022b4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80022b6:	2300      	movs	r3, #0
 80022b8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80022ba:	2300      	movs	r3, #0
 80022bc:	61fb      	str	r3, [r7, #28]
 80022be:	e177      	b.n	80025b0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80022c0:	2201      	movs	r2, #1
 80022c2:	69fb      	ldr	r3, [r7, #28]
 80022c4:	fa02 f303 	lsl.w	r3, r2, r3
 80022c8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	697a      	ldr	r2, [r7, #20]
 80022d0:	4013      	ands	r3, r2
 80022d2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80022d4:	693a      	ldr	r2, [r7, #16]
 80022d6:	697b      	ldr	r3, [r7, #20]
 80022d8:	429a      	cmp	r2, r3
 80022da:	f040 8166 	bne.w	80025aa <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	685b      	ldr	r3, [r3, #4]
 80022e2:	2b01      	cmp	r3, #1
 80022e4:	d00b      	beq.n	80022fe <HAL_GPIO_Init+0x5a>
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	685b      	ldr	r3, [r3, #4]
 80022ea:	2b02      	cmp	r3, #2
 80022ec:	d007      	beq.n	80022fe <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80022f2:	2b11      	cmp	r3, #17
 80022f4:	d003      	beq.n	80022fe <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	2b12      	cmp	r3, #18
 80022fc:	d130      	bne.n	8002360 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	689b      	ldr	r3, [r3, #8]
 8002302:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002304:	69fb      	ldr	r3, [r7, #28]
 8002306:	005b      	lsls	r3, r3, #1
 8002308:	2203      	movs	r2, #3
 800230a:	fa02 f303 	lsl.w	r3, r2, r3
 800230e:	43db      	mvns	r3, r3
 8002310:	69ba      	ldr	r2, [r7, #24]
 8002312:	4013      	ands	r3, r2
 8002314:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	68da      	ldr	r2, [r3, #12]
 800231a:	69fb      	ldr	r3, [r7, #28]
 800231c:	005b      	lsls	r3, r3, #1
 800231e:	fa02 f303 	lsl.w	r3, r2, r3
 8002322:	69ba      	ldr	r2, [r7, #24]
 8002324:	4313      	orrs	r3, r2
 8002326:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	69ba      	ldr	r2, [r7, #24]
 800232c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	685b      	ldr	r3, [r3, #4]
 8002332:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002334:	2201      	movs	r2, #1
 8002336:	69fb      	ldr	r3, [r7, #28]
 8002338:	fa02 f303 	lsl.w	r3, r2, r3
 800233c:	43db      	mvns	r3, r3
 800233e:	69ba      	ldr	r2, [r7, #24]
 8002340:	4013      	ands	r3, r2
 8002342:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	685b      	ldr	r3, [r3, #4]
 8002348:	091b      	lsrs	r3, r3, #4
 800234a:	f003 0201 	and.w	r2, r3, #1
 800234e:	69fb      	ldr	r3, [r7, #28]
 8002350:	fa02 f303 	lsl.w	r3, r2, r3
 8002354:	69ba      	ldr	r2, [r7, #24]
 8002356:	4313      	orrs	r3, r2
 8002358:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	69ba      	ldr	r2, [r7, #24]
 800235e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	68db      	ldr	r3, [r3, #12]
 8002364:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002366:	69fb      	ldr	r3, [r7, #28]
 8002368:	005b      	lsls	r3, r3, #1
 800236a:	2203      	movs	r2, #3
 800236c:	fa02 f303 	lsl.w	r3, r2, r3
 8002370:	43db      	mvns	r3, r3
 8002372:	69ba      	ldr	r2, [r7, #24]
 8002374:	4013      	ands	r3, r2
 8002376:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	689a      	ldr	r2, [r3, #8]
 800237c:	69fb      	ldr	r3, [r7, #28]
 800237e:	005b      	lsls	r3, r3, #1
 8002380:	fa02 f303 	lsl.w	r3, r2, r3
 8002384:	69ba      	ldr	r2, [r7, #24]
 8002386:	4313      	orrs	r3, r2
 8002388:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	69ba      	ldr	r2, [r7, #24]
 800238e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	685b      	ldr	r3, [r3, #4]
 8002394:	2b02      	cmp	r3, #2
 8002396:	d003      	beq.n	80023a0 <HAL_GPIO_Init+0xfc>
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	2b12      	cmp	r3, #18
 800239e:	d123      	bne.n	80023e8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80023a0:	69fb      	ldr	r3, [r7, #28]
 80023a2:	08da      	lsrs	r2, r3, #3
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	3208      	adds	r2, #8
 80023a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80023ae:	69fb      	ldr	r3, [r7, #28]
 80023b0:	f003 0307 	and.w	r3, r3, #7
 80023b4:	009b      	lsls	r3, r3, #2
 80023b6:	220f      	movs	r2, #15
 80023b8:	fa02 f303 	lsl.w	r3, r2, r3
 80023bc:	43db      	mvns	r3, r3
 80023be:	69ba      	ldr	r2, [r7, #24]
 80023c0:	4013      	ands	r3, r2
 80023c2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	691a      	ldr	r2, [r3, #16]
 80023c8:	69fb      	ldr	r3, [r7, #28]
 80023ca:	f003 0307 	and.w	r3, r3, #7
 80023ce:	009b      	lsls	r3, r3, #2
 80023d0:	fa02 f303 	lsl.w	r3, r2, r3
 80023d4:	69ba      	ldr	r2, [r7, #24]
 80023d6:	4313      	orrs	r3, r2
 80023d8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80023da:	69fb      	ldr	r3, [r7, #28]
 80023dc:	08da      	lsrs	r2, r3, #3
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	3208      	adds	r2, #8
 80023e2:	69b9      	ldr	r1, [r7, #24]
 80023e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80023ee:	69fb      	ldr	r3, [r7, #28]
 80023f0:	005b      	lsls	r3, r3, #1
 80023f2:	2203      	movs	r2, #3
 80023f4:	fa02 f303 	lsl.w	r3, r2, r3
 80023f8:	43db      	mvns	r3, r3
 80023fa:	69ba      	ldr	r2, [r7, #24]
 80023fc:	4013      	ands	r3, r2
 80023fe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	685b      	ldr	r3, [r3, #4]
 8002404:	f003 0203 	and.w	r2, r3, #3
 8002408:	69fb      	ldr	r3, [r7, #28]
 800240a:	005b      	lsls	r3, r3, #1
 800240c:	fa02 f303 	lsl.w	r3, r2, r3
 8002410:	69ba      	ldr	r2, [r7, #24]
 8002412:	4313      	orrs	r3, r2
 8002414:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	69ba      	ldr	r2, [r7, #24]
 800241a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	685b      	ldr	r3, [r3, #4]
 8002420:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002424:	2b00      	cmp	r3, #0
 8002426:	f000 80c0 	beq.w	80025aa <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800242a:	2300      	movs	r3, #0
 800242c:	60fb      	str	r3, [r7, #12]
 800242e:	4b65      	ldr	r3, [pc, #404]	; (80025c4 <HAL_GPIO_Init+0x320>)
 8002430:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002432:	4a64      	ldr	r2, [pc, #400]	; (80025c4 <HAL_GPIO_Init+0x320>)
 8002434:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002438:	6453      	str	r3, [r2, #68]	; 0x44
 800243a:	4b62      	ldr	r3, [pc, #392]	; (80025c4 <HAL_GPIO_Init+0x320>)
 800243c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800243e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002442:	60fb      	str	r3, [r7, #12]
 8002444:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002446:	4a60      	ldr	r2, [pc, #384]	; (80025c8 <HAL_GPIO_Init+0x324>)
 8002448:	69fb      	ldr	r3, [r7, #28]
 800244a:	089b      	lsrs	r3, r3, #2
 800244c:	3302      	adds	r3, #2
 800244e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002452:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002454:	69fb      	ldr	r3, [r7, #28]
 8002456:	f003 0303 	and.w	r3, r3, #3
 800245a:	009b      	lsls	r3, r3, #2
 800245c:	220f      	movs	r2, #15
 800245e:	fa02 f303 	lsl.w	r3, r2, r3
 8002462:	43db      	mvns	r3, r3
 8002464:	69ba      	ldr	r2, [r7, #24]
 8002466:	4013      	ands	r3, r2
 8002468:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	4a57      	ldr	r2, [pc, #348]	; (80025cc <HAL_GPIO_Init+0x328>)
 800246e:	4293      	cmp	r3, r2
 8002470:	d037      	beq.n	80024e2 <HAL_GPIO_Init+0x23e>
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	4a56      	ldr	r2, [pc, #344]	; (80025d0 <HAL_GPIO_Init+0x32c>)
 8002476:	4293      	cmp	r3, r2
 8002478:	d031      	beq.n	80024de <HAL_GPIO_Init+0x23a>
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	4a55      	ldr	r2, [pc, #340]	; (80025d4 <HAL_GPIO_Init+0x330>)
 800247e:	4293      	cmp	r3, r2
 8002480:	d02b      	beq.n	80024da <HAL_GPIO_Init+0x236>
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	4a54      	ldr	r2, [pc, #336]	; (80025d8 <HAL_GPIO_Init+0x334>)
 8002486:	4293      	cmp	r3, r2
 8002488:	d025      	beq.n	80024d6 <HAL_GPIO_Init+0x232>
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	4a53      	ldr	r2, [pc, #332]	; (80025dc <HAL_GPIO_Init+0x338>)
 800248e:	4293      	cmp	r3, r2
 8002490:	d01f      	beq.n	80024d2 <HAL_GPIO_Init+0x22e>
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	4a52      	ldr	r2, [pc, #328]	; (80025e0 <HAL_GPIO_Init+0x33c>)
 8002496:	4293      	cmp	r3, r2
 8002498:	d019      	beq.n	80024ce <HAL_GPIO_Init+0x22a>
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	4a51      	ldr	r2, [pc, #324]	; (80025e4 <HAL_GPIO_Init+0x340>)
 800249e:	4293      	cmp	r3, r2
 80024a0:	d013      	beq.n	80024ca <HAL_GPIO_Init+0x226>
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	4a50      	ldr	r2, [pc, #320]	; (80025e8 <HAL_GPIO_Init+0x344>)
 80024a6:	4293      	cmp	r3, r2
 80024a8:	d00d      	beq.n	80024c6 <HAL_GPIO_Init+0x222>
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	4a4f      	ldr	r2, [pc, #316]	; (80025ec <HAL_GPIO_Init+0x348>)
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d007      	beq.n	80024c2 <HAL_GPIO_Init+0x21e>
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	4a4e      	ldr	r2, [pc, #312]	; (80025f0 <HAL_GPIO_Init+0x34c>)
 80024b6:	4293      	cmp	r3, r2
 80024b8:	d101      	bne.n	80024be <HAL_GPIO_Init+0x21a>
 80024ba:	2309      	movs	r3, #9
 80024bc:	e012      	b.n	80024e4 <HAL_GPIO_Init+0x240>
 80024be:	230a      	movs	r3, #10
 80024c0:	e010      	b.n	80024e4 <HAL_GPIO_Init+0x240>
 80024c2:	2308      	movs	r3, #8
 80024c4:	e00e      	b.n	80024e4 <HAL_GPIO_Init+0x240>
 80024c6:	2307      	movs	r3, #7
 80024c8:	e00c      	b.n	80024e4 <HAL_GPIO_Init+0x240>
 80024ca:	2306      	movs	r3, #6
 80024cc:	e00a      	b.n	80024e4 <HAL_GPIO_Init+0x240>
 80024ce:	2305      	movs	r3, #5
 80024d0:	e008      	b.n	80024e4 <HAL_GPIO_Init+0x240>
 80024d2:	2304      	movs	r3, #4
 80024d4:	e006      	b.n	80024e4 <HAL_GPIO_Init+0x240>
 80024d6:	2303      	movs	r3, #3
 80024d8:	e004      	b.n	80024e4 <HAL_GPIO_Init+0x240>
 80024da:	2302      	movs	r3, #2
 80024dc:	e002      	b.n	80024e4 <HAL_GPIO_Init+0x240>
 80024de:	2301      	movs	r3, #1
 80024e0:	e000      	b.n	80024e4 <HAL_GPIO_Init+0x240>
 80024e2:	2300      	movs	r3, #0
 80024e4:	69fa      	ldr	r2, [r7, #28]
 80024e6:	f002 0203 	and.w	r2, r2, #3
 80024ea:	0092      	lsls	r2, r2, #2
 80024ec:	4093      	lsls	r3, r2
 80024ee:	69ba      	ldr	r2, [r7, #24]
 80024f0:	4313      	orrs	r3, r2
 80024f2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80024f4:	4934      	ldr	r1, [pc, #208]	; (80025c8 <HAL_GPIO_Init+0x324>)
 80024f6:	69fb      	ldr	r3, [r7, #28]
 80024f8:	089b      	lsrs	r3, r3, #2
 80024fa:	3302      	adds	r3, #2
 80024fc:	69ba      	ldr	r2, [r7, #24]
 80024fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002502:	4b3c      	ldr	r3, [pc, #240]	; (80025f4 <HAL_GPIO_Init+0x350>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002508:	693b      	ldr	r3, [r7, #16]
 800250a:	43db      	mvns	r3, r3
 800250c:	69ba      	ldr	r2, [r7, #24]
 800250e:	4013      	ands	r3, r2
 8002510:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	685b      	ldr	r3, [r3, #4]
 8002516:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800251a:	2b00      	cmp	r3, #0
 800251c:	d003      	beq.n	8002526 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800251e:	69ba      	ldr	r2, [r7, #24]
 8002520:	693b      	ldr	r3, [r7, #16]
 8002522:	4313      	orrs	r3, r2
 8002524:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002526:	4a33      	ldr	r2, [pc, #204]	; (80025f4 <HAL_GPIO_Init+0x350>)
 8002528:	69bb      	ldr	r3, [r7, #24]
 800252a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800252c:	4b31      	ldr	r3, [pc, #196]	; (80025f4 <HAL_GPIO_Init+0x350>)
 800252e:	685b      	ldr	r3, [r3, #4]
 8002530:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002532:	693b      	ldr	r3, [r7, #16]
 8002534:	43db      	mvns	r3, r3
 8002536:	69ba      	ldr	r2, [r7, #24]
 8002538:	4013      	ands	r3, r2
 800253a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	685b      	ldr	r3, [r3, #4]
 8002540:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002544:	2b00      	cmp	r3, #0
 8002546:	d003      	beq.n	8002550 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002548:	69ba      	ldr	r2, [r7, #24]
 800254a:	693b      	ldr	r3, [r7, #16]
 800254c:	4313      	orrs	r3, r2
 800254e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002550:	4a28      	ldr	r2, [pc, #160]	; (80025f4 <HAL_GPIO_Init+0x350>)
 8002552:	69bb      	ldr	r3, [r7, #24]
 8002554:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002556:	4b27      	ldr	r3, [pc, #156]	; (80025f4 <HAL_GPIO_Init+0x350>)
 8002558:	689b      	ldr	r3, [r3, #8]
 800255a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800255c:	693b      	ldr	r3, [r7, #16]
 800255e:	43db      	mvns	r3, r3
 8002560:	69ba      	ldr	r2, [r7, #24]
 8002562:	4013      	ands	r3, r2
 8002564:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	685b      	ldr	r3, [r3, #4]
 800256a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800256e:	2b00      	cmp	r3, #0
 8002570:	d003      	beq.n	800257a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002572:	69ba      	ldr	r2, [r7, #24]
 8002574:	693b      	ldr	r3, [r7, #16]
 8002576:	4313      	orrs	r3, r2
 8002578:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800257a:	4a1e      	ldr	r2, [pc, #120]	; (80025f4 <HAL_GPIO_Init+0x350>)
 800257c:	69bb      	ldr	r3, [r7, #24]
 800257e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002580:	4b1c      	ldr	r3, [pc, #112]	; (80025f4 <HAL_GPIO_Init+0x350>)
 8002582:	68db      	ldr	r3, [r3, #12]
 8002584:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002586:	693b      	ldr	r3, [r7, #16]
 8002588:	43db      	mvns	r3, r3
 800258a:	69ba      	ldr	r2, [r7, #24]
 800258c:	4013      	ands	r3, r2
 800258e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	685b      	ldr	r3, [r3, #4]
 8002594:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002598:	2b00      	cmp	r3, #0
 800259a:	d003      	beq.n	80025a4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800259c:	69ba      	ldr	r2, [r7, #24]
 800259e:	693b      	ldr	r3, [r7, #16]
 80025a0:	4313      	orrs	r3, r2
 80025a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80025a4:	4a13      	ldr	r2, [pc, #76]	; (80025f4 <HAL_GPIO_Init+0x350>)
 80025a6:	69bb      	ldr	r3, [r7, #24]
 80025a8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80025aa:	69fb      	ldr	r3, [r7, #28]
 80025ac:	3301      	adds	r3, #1
 80025ae:	61fb      	str	r3, [r7, #28]
 80025b0:	69fb      	ldr	r3, [r7, #28]
 80025b2:	2b0f      	cmp	r3, #15
 80025b4:	f67f ae84 	bls.w	80022c0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80025b8:	bf00      	nop
 80025ba:	3724      	adds	r7, #36	; 0x24
 80025bc:	46bd      	mov	sp, r7
 80025be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c2:	4770      	bx	lr
 80025c4:	40023800 	.word	0x40023800
 80025c8:	40013800 	.word	0x40013800
 80025cc:	40020000 	.word	0x40020000
 80025d0:	40020400 	.word	0x40020400
 80025d4:	40020800 	.word	0x40020800
 80025d8:	40020c00 	.word	0x40020c00
 80025dc:	40021000 	.word	0x40021000
 80025e0:	40021400 	.word	0x40021400
 80025e4:	40021800 	.word	0x40021800
 80025e8:	40021c00 	.word	0x40021c00
 80025ec:	40022000 	.word	0x40022000
 80025f0:	40022400 	.word	0x40022400
 80025f4:	40013c00 	.word	0x40013c00

080025f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80025f8:	b480      	push	{r7}
 80025fa:	b083      	sub	sp, #12
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
 8002600:	460b      	mov	r3, r1
 8002602:	807b      	strh	r3, [r7, #2]
 8002604:	4613      	mov	r3, r2
 8002606:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002608:	787b      	ldrb	r3, [r7, #1]
 800260a:	2b00      	cmp	r3, #0
 800260c:	d003      	beq.n	8002616 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800260e:	887a      	ldrh	r2, [r7, #2]
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002614:	e003      	b.n	800261e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002616:	887b      	ldrh	r3, [r7, #2]
 8002618:	041a      	lsls	r2, r3, #16
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	619a      	str	r2, [r3, #24]
}
 800261e:	bf00      	nop
 8002620:	370c      	adds	r7, #12
 8002622:	46bd      	mov	sp, r7
 8002624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002628:	4770      	bx	lr
	...

0800262c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b086      	sub	sp, #24
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2b00      	cmp	r3, #0
 8002638:	d101      	bne.n	800263e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800263a:	2301      	movs	r3, #1
 800263c:	e25b      	b.n	8002af6 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f003 0301 	and.w	r3, r3, #1
 8002646:	2b00      	cmp	r3, #0
 8002648:	d075      	beq.n	8002736 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800264a:	4ba3      	ldr	r3, [pc, #652]	; (80028d8 <HAL_RCC_OscConfig+0x2ac>)
 800264c:	689b      	ldr	r3, [r3, #8]
 800264e:	f003 030c 	and.w	r3, r3, #12
 8002652:	2b04      	cmp	r3, #4
 8002654:	d00c      	beq.n	8002670 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002656:	4ba0      	ldr	r3, [pc, #640]	; (80028d8 <HAL_RCC_OscConfig+0x2ac>)
 8002658:	689b      	ldr	r3, [r3, #8]
 800265a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800265e:	2b08      	cmp	r3, #8
 8002660:	d112      	bne.n	8002688 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002662:	4b9d      	ldr	r3, [pc, #628]	; (80028d8 <HAL_RCC_OscConfig+0x2ac>)
 8002664:	685b      	ldr	r3, [r3, #4]
 8002666:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800266a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800266e:	d10b      	bne.n	8002688 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002670:	4b99      	ldr	r3, [pc, #612]	; (80028d8 <HAL_RCC_OscConfig+0x2ac>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002678:	2b00      	cmp	r3, #0
 800267a:	d05b      	beq.n	8002734 <HAL_RCC_OscConfig+0x108>
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	2b00      	cmp	r3, #0
 8002682:	d157      	bne.n	8002734 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002684:	2301      	movs	r3, #1
 8002686:	e236      	b.n	8002af6 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	685b      	ldr	r3, [r3, #4]
 800268c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002690:	d106      	bne.n	80026a0 <HAL_RCC_OscConfig+0x74>
 8002692:	4b91      	ldr	r3, [pc, #580]	; (80028d8 <HAL_RCC_OscConfig+0x2ac>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	4a90      	ldr	r2, [pc, #576]	; (80028d8 <HAL_RCC_OscConfig+0x2ac>)
 8002698:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800269c:	6013      	str	r3, [r2, #0]
 800269e:	e01d      	b.n	80026dc <HAL_RCC_OscConfig+0xb0>
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	685b      	ldr	r3, [r3, #4]
 80026a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80026a8:	d10c      	bne.n	80026c4 <HAL_RCC_OscConfig+0x98>
 80026aa:	4b8b      	ldr	r3, [pc, #556]	; (80028d8 <HAL_RCC_OscConfig+0x2ac>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	4a8a      	ldr	r2, [pc, #552]	; (80028d8 <HAL_RCC_OscConfig+0x2ac>)
 80026b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80026b4:	6013      	str	r3, [r2, #0]
 80026b6:	4b88      	ldr	r3, [pc, #544]	; (80028d8 <HAL_RCC_OscConfig+0x2ac>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	4a87      	ldr	r2, [pc, #540]	; (80028d8 <HAL_RCC_OscConfig+0x2ac>)
 80026bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026c0:	6013      	str	r3, [r2, #0]
 80026c2:	e00b      	b.n	80026dc <HAL_RCC_OscConfig+0xb0>
 80026c4:	4b84      	ldr	r3, [pc, #528]	; (80028d8 <HAL_RCC_OscConfig+0x2ac>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	4a83      	ldr	r2, [pc, #524]	; (80028d8 <HAL_RCC_OscConfig+0x2ac>)
 80026ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026ce:	6013      	str	r3, [r2, #0]
 80026d0:	4b81      	ldr	r3, [pc, #516]	; (80028d8 <HAL_RCC_OscConfig+0x2ac>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	4a80      	ldr	r2, [pc, #512]	; (80028d8 <HAL_RCC_OscConfig+0x2ac>)
 80026d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80026da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d013      	beq.n	800270c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026e4:	f7fe fb28 	bl	8000d38 <HAL_GetTick>
 80026e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026ea:	e008      	b.n	80026fe <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80026ec:	f7fe fb24 	bl	8000d38 <HAL_GetTick>
 80026f0:	4602      	mov	r2, r0
 80026f2:	693b      	ldr	r3, [r7, #16]
 80026f4:	1ad3      	subs	r3, r2, r3
 80026f6:	2b64      	cmp	r3, #100	; 0x64
 80026f8:	d901      	bls.n	80026fe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80026fa:	2303      	movs	r3, #3
 80026fc:	e1fb      	b.n	8002af6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026fe:	4b76      	ldr	r3, [pc, #472]	; (80028d8 <HAL_RCC_OscConfig+0x2ac>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002706:	2b00      	cmp	r3, #0
 8002708:	d0f0      	beq.n	80026ec <HAL_RCC_OscConfig+0xc0>
 800270a:	e014      	b.n	8002736 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800270c:	f7fe fb14 	bl	8000d38 <HAL_GetTick>
 8002710:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002712:	e008      	b.n	8002726 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002714:	f7fe fb10 	bl	8000d38 <HAL_GetTick>
 8002718:	4602      	mov	r2, r0
 800271a:	693b      	ldr	r3, [r7, #16]
 800271c:	1ad3      	subs	r3, r2, r3
 800271e:	2b64      	cmp	r3, #100	; 0x64
 8002720:	d901      	bls.n	8002726 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002722:	2303      	movs	r3, #3
 8002724:	e1e7      	b.n	8002af6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002726:	4b6c      	ldr	r3, [pc, #432]	; (80028d8 <HAL_RCC_OscConfig+0x2ac>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800272e:	2b00      	cmp	r3, #0
 8002730:	d1f0      	bne.n	8002714 <HAL_RCC_OscConfig+0xe8>
 8002732:	e000      	b.n	8002736 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002734:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f003 0302 	and.w	r3, r3, #2
 800273e:	2b00      	cmp	r3, #0
 8002740:	d063      	beq.n	800280a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002742:	4b65      	ldr	r3, [pc, #404]	; (80028d8 <HAL_RCC_OscConfig+0x2ac>)
 8002744:	689b      	ldr	r3, [r3, #8]
 8002746:	f003 030c 	and.w	r3, r3, #12
 800274a:	2b00      	cmp	r3, #0
 800274c:	d00b      	beq.n	8002766 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800274e:	4b62      	ldr	r3, [pc, #392]	; (80028d8 <HAL_RCC_OscConfig+0x2ac>)
 8002750:	689b      	ldr	r3, [r3, #8]
 8002752:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002756:	2b08      	cmp	r3, #8
 8002758:	d11c      	bne.n	8002794 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800275a:	4b5f      	ldr	r3, [pc, #380]	; (80028d8 <HAL_RCC_OscConfig+0x2ac>)
 800275c:	685b      	ldr	r3, [r3, #4]
 800275e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002762:	2b00      	cmp	r3, #0
 8002764:	d116      	bne.n	8002794 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002766:	4b5c      	ldr	r3, [pc, #368]	; (80028d8 <HAL_RCC_OscConfig+0x2ac>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f003 0302 	and.w	r3, r3, #2
 800276e:	2b00      	cmp	r3, #0
 8002770:	d005      	beq.n	800277e <HAL_RCC_OscConfig+0x152>
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	68db      	ldr	r3, [r3, #12]
 8002776:	2b01      	cmp	r3, #1
 8002778:	d001      	beq.n	800277e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800277a:	2301      	movs	r3, #1
 800277c:	e1bb      	b.n	8002af6 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800277e:	4b56      	ldr	r3, [pc, #344]	; (80028d8 <HAL_RCC_OscConfig+0x2ac>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	691b      	ldr	r3, [r3, #16]
 800278a:	00db      	lsls	r3, r3, #3
 800278c:	4952      	ldr	r1, [pc, #328]	; (80028d8 <HAL_RCC_OscConfig+0x2ac>)
 800278e:	4313      	orrs	r3, r2
 8002790:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002792:	e03a      	b.n	800280a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	68db      	ldr	r3, [r3, #12]
 8002798:	2b00      	cmp	r3, #0
 800279a:	d020      	beq.n	80027de <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800279c:	4b4f      	ldr	r3, [pc, #316]	; (80028dc <HAL_RCC_OscConfig+0x2b0>)
 800279e:	2201      	movs	r2, #1
 80027a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027a2:	f7fe fac9 	bl	8000d38 <HAL_GetTick>
 80027a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027a8:	e008      	b.n	80027bc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80027aa:	f7fe fac5 	bl	8000d38 <HAL_GetTick>
 80027ae:	4602      	mov	r2, r0
 80027b0:	693b      	ldr	r3, [r7, #16]
 80027b2:	1ad3      	subs	r3, r2, r3
 80027b4:	2b02      	cmp	r3, #2
 80027b6:	d901      	bls.n	80027bc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80027b8:	2303      	movs	r3, #3
 80027ba:	e19c      	b.n	8002af6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027bc:	4b46      	ldr	r3, [pc, #280]	; (80028d8 <HAL_RCC_OscConfig+0x2ac>)
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f003 0302 	and.w	r3, r3, #2
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d0f0      	beq.n	80027aa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027c8:	4b43      	ldr	r3, [pc, #268]	; (80028d8 <HAL_RCC_OscConfig+0x2ac>)
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	691b      	ldr	r3, [r3, #16]
 80027d4:	00db      	lsls	r3, r3, #3
 80027d6:	4940      	ldr	r1, [pc, #256]	; (80028d8 <HAL_RCC_OscConfig+0x2ac>)
 80027d8:	4313      	orrs	r3, r2
 80027da:	600b      	str	r3, [r1, #0]
 80027dc:	e015      	b.n	800280a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80027de:	4b3f      	ldr	r3, [pc, #252]	; (80028dc <HAL_RCC_OscConfig+0x2b0>)
 80027e0:	2200      	movs	r2, #0
 80027e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027e4:	f7fe faa8 	bl	8000d38 <HAL_GetTick>
 80027e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027ea:	e008      	b.n	80027fe <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80027ec:	f7fe faa4 	bl	8000d38 <HAL_GetTick>
 80027f0:	4602      	mov	r2, r0
 80027f2:	693b      	ldr	r3, [r7, #16]
 80027f4:	1ad3      	subs	r3, r2, r3
 80027f6:	2b02      	cmp	r3, #2
 80027f8:	d901      	bls.n	80027fe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80027fa:	2303      	movs	r3, #3
 80027fc:	e17b      	b.n	8002af6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027fe:	4b36      	ldr	r3, [pc, #216]	; (80028d8 <HAL_RCC_OscConfig+0x2ac>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f003 0302 	and.w	r3, r3, #2
 8002806:	2b00      	cmp	r3, #0
 8002808:	d1f0      	bne.n	80027ec <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f003 0308 	and.w	r3, r3, #8
 8002812:	2b00      	cmp	r3, #0
 8002814:	d030      	beq.n	8002878 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	695b      	ldr	r3, [r3, #20]
 800281a:	2b00      	cmp	r3, #0
 800281c:	d016      	beq.n	800284c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800281e:	4b30      	ldr	r3, [pc, #192]	; (80028e0 <HAL_RCC_OscConfig+0x2b4>)
 8002820:	2201      	movs	r2, #1
 8002822:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002824:	f7fe fa88 	bl	8000d38 <HAL_GetTick>
 8002828:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800282a:	e008      	b.n	800283e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800282c:	f7fe fa84 	bl	8000d38 <HAL_GetTick>
 8002830:	4602      	mov	r2, r0
 8002832:	693b      	ldr	r3, [r7, #16]
 8002834:	1ad3      	subs	r3, r2, r3
 8002836:	2b02      	cmp	r3, #2
 8002838:	d901      	bls.n	800283e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800283a:	2303      	movs	r3, #3
 800283c:	e15b      	b.n	8002af6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800283e:	4b26      	ldr	r3, [pc, #152]	; (80028d8 <HAL_RCC_OscConfig+0x2ac>)
 8002840:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002842:	f003 0302 	and.w	r3, r3, #2
 8002846:	2b00      	cmp	r3, #0
 8002848:	d0f0      	beq.n	800282c <HAL_RCC_OscConfig+0x200>
 800284a:	e015      	b.n	8002878 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800284c:	4b24      	ldr	r3, [pc, #144]	; (80028e0 <HAL_RCC_OscConfig+0x2b4>)
 800284e:	2200      	movs	r2, #0
 8002850:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002852:	f7fe fa71 	bl	8000d38 <HAL_GetTick>
 8002856:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002858:	e008      	b.n	800286c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800285a:	f7fe fa6d 	bl	8000d38 <HAL_GetTick>
 800285e:	4602      	mov	r2, r0
 8002860:	693b      	ldr	r3, [r7, #16]
 8002862:	1ad3      	subs	r3, r2, r3
 8002864:	2b02      	cmp	r3, #2
 8002866:	d901      	bls.n	800286c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002868:	2303      	movs	r3, #3
 800286a:	e144      	b.n	8002af6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800286c:	4b1a      	ldr	r3, [pc, #104]	; (80028d8 <HAL_RCC_OscConfig+0x2ac>)
 800286e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002870:	f003 0302 	and.w	r3, r3, #2
 8002874:	2b00      	cmp	r3, #0
 8002876:	d1f0      	bne.n	800285a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f003 0304 	and.w	r3, r3, #4
 8002880:	2b00      	cmp	r3, #0
 8002882:	f000 80a0 	beq.w	80029c6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002886:	2300      	movs	r3, #0
 8002888:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800288a:	4b13      	ldr	r3, [pc, #76]	; (80028d8 <HAL_RCC_OscConfig+0x2ac>)
 800288c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800288e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002892:	2b00      	cmp	r3, #0
 8002894:	d10f      	bne.n	80028b6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002896:	2300      	movs	r3, #0
 8002898:	60bb      	str	r3, [r7, #8]
 800289a:	4b0f      	ldr	r3, [pc, #60]	; (80028d8 <HAL_RCC_OscConfig+0x2ac>)
 800289c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800289e:	4a0e      	ldr	r2, [pc, #56]	; (80028d8 <HAL_RCC_OscConfig+0x2ac>)
 80028a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028a4:	6413      	str	r3, [r2, #64]	; 0x40
 80028a6:	4b0c      	ldr	r3, [pc, #48]	; (80028d8 <HAL_RCC_OscConfig+0x2ac>)
 80028a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028ae:	60bb      	str	r3, [r7, #8]
 80028b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80028b2:	2301      	movs	r3, #1
 80028b4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028b6:	4b0b      	ldr	r3, [pc, #44]	; (80028e4 <HAL_RCC_OscConfig+0x2b8>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d121      	bne.n	8002906 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80028c2:	4b08      	ldr	r3, [pc, #32]	; (80028e4 <HAL_RCC_OscConfig+0x2b8>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	4a07      	ldr	r2, [pc, #28]	; (80028e4 <HAL_RCC_OscConfig+0x2b8>)
 80028c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80028ce:	f7fe fa33 	bl	8000d38 <HAL_GetTick>
 80028d2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028d4:	e011      	b.n	80028fa <HAL_RCC_OscConfig+0x2ce>
 80028d6:	bf00      	nop
 80028d8:	40023800 	.word	0x40023800
 80028dc:	42470000 	.word	0x42470000
 80028e0:	42470e80 	.word	0x42470e80
 80028e4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028e8:	f7fe fa26 	bl	8000d38 <HAL_GetTick>
 80028ec:	4602      	mov	r2, r0
 80028ee:	693b      	ldr	r3, [r7, #16]
 80028f0:	1ad3      	subs	r3, r2, r3
 80028f2:	2b02      	cmp	r3, #2
 80028f4:	d901      	bls.n	80028fa <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80028f6:	2303      	movs	r3, #3
 80028f8:	e0fd      	b.n	8002af6 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028fa:	4b81      	ldr	r3, [pc, #516]	; (8002b00 <HAL_RCC_OscConfig+0x4d4>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002902:	2b00      	cmp	r3, #0
 8002904:	d0f0      	beq.n	80028e8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	689b      	ldr	r3, [r3, #8]
 800290a:	2b01      	cmp	r3, #1
 800290c:	d106      	bne.n	800291c <HAL_RCC_OscConfig+0x2f0>
 800290e:	4b7d      	ldr	r3, [pc, #500]	; (8002b04 <HAL_RCC_OscConfig+0x4d8>)
 8002910:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002912:	4a7c      	ldr	r2, [pc, #496]	; (8002b04 <HAL_RCC_OscConfig+0x4d8>)
 8002914:	f043 0301 	orr.w	r3, r3, #1
 8002918:	6713      	str	r3, [r2, #112]	; 0x70
 800291a:	e01c      	b.n	8002956 <HAL_RCC_OscConfig+0x32a>
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	689b      	ldr	r3, [r3, #8]
 8002920:	2b05      	cmp	r3, #5
 8002922:	d10c      	bne.n	800293e <HAL_RCC_OscConfig+0x312>
 8002924:	4b77      	ldr	r3, [pc, #476]	; (8002b04 <HAL_RCC_OscConfig+0x4d8>)
 8002926:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002928:	4a76      	ldr	r2, [pc, #472]	; (8002b04 <HAL_RCC_OscConfig+0x4d8>)
 800292a:	f043 0304 	orr.w	r3, r3, #4
 800292e:	6713      	str	r3, [r2, #112]	; 0x70
 8002930:	4b74      	ldr	r3, [pc, #464]	; (8002b04 <HAL_RCC_OscConfig+0x4d8>)
 8002932:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002934:	4a73      	ldr	r2, [pc, #460]	; (8002b04 <HAL_RCC_OscConfig+0x4d8>)
 8002936:	f043 0301 	orr.w	r3, r3, #1
 800293a:	6713      	str	r3, [r2, #112]	; 0x70
 800293c:	e00b      	b.n	8002956 <HAL_RCC_OscConfig+0x32a>
 800293e:	4b71      	ldr	r3, [pc, #452]	; (8002b04 <HAL_RCC_OscConfig+0x4d8>)
 8002940:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002942:	4a70      	ldr	r2, [pc, #448]	; (8002b04 <HAL_RCC_OscConfig+0x4d8>)
 8002944:	f023 0301 	bic.w	r3, r3, #1
 8002948:	6713      	str	r3, [r2, #112]	; 0x70
 800294a:	4b6e      	ldr	r3, [pc, #440]	; (8002b04 <HAL_RCC_OscConfig+0x4d8>)
 800294c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800294e:	4a6d      	ldr	r2, [pc, #436]	; (8002b04 <HAL_RCC_OscConfig+0x4d8>)
 8002950:	f023 0304 	bic.w	r3, r3, #4
 8002954:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	689b      	ldr	r3, [r3, #8]
 800295a:	2b00      	cmp	r3, #0
 800295c:	d015      	beq.n	800298a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800295e:	f7fe f9eb 	bl	8000d38 <HAL_GetTick>
 8002962:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002964:	e00a      	b.n	800297c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002966:	f7fe f9e7 	bl	8000d38 <HAL_GetTick>
 800296a:	4602      	mov	r2, r0
 800296c:	693b      	ldr	r3, [r7, #16]
 800296e:	1ad3      	subs	r3, r2, r3
 8002970:	f241 3288 	movw	r2, #5000	; 0x1388
 8002974:	4293      	cmp	r3, r2
 8002976:	d901      	bls.n	800297c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002978:	2303      	movs	r3, #3
 800297a:	e0bc      	b.n	8002af6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800297c:	4b61      	ldr	r3, [pc, #388]	; (8002b04 <HAL_RCC_OscConfig+0x4d8>)
 800297e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002980:	f003 0302 	and.w	r3, r3, #2
 8002984:	2b00      	cmp	r3, #0
 8002986:	d0ee      	beq.n	8002966 <HAL_RCC_OscConfig+0x33a>
 8002988:	e014      	b.n	80029b4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800298a:	f7fe f9d5 	bl	8000d38 <HAL_GetTick>
 800298e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002990:	e00a      	b.n	80029a8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002992:	f7fe f9d1 	bl	8000d38 <HAL_GetTick>
 8002996:	4602      	mov	r2, r0
 8002998:	693b      	ldr	r3, [r7, #16]
 800299a:	1ad3      	subs	r3, r2, r3
 800299c:	f241 3288 	movw	r2, #5000	; 0x1388
 80029a0:	4293      	cmp	r3, r2
 80029a2:	d901      	bls.n	80029a8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80029a4:	2303      	movs	r3, #3
 80029a6:	e0a6      	b.n	8002af6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029a8:	4b56      	ldr	r3, [pc, #344]	; (8002b04 <HAL_RCC_OscConfig+0x4d8>)
 80029aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029ac:	f003 0302 	and.w	r3, r3, #2
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d1ee      	bne.n	8002992 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80029b4:	7dfb      	ldrb	r3, [r7, #23]
 80029b6:	2b01      	cmp	r3, #1
 80029b8:	d105      	bne.n	80029c6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029ba:	4b52      	ldr	r3, [pc, #328]	; (8002b04 <HAL_RCC_OscConfig+0x4d8>)
 80029bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029be:	4a51      	ldr	r2, [pc, #324]	; (8002b04 <HAL_RCC_OscConfig+0x4d8>)
 80029c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80029c4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	699b      	ldr	r3, [r3, #24]
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	f000 8092 	beq.w	8002af4 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80029d0:	4b4c      	ldr	r3, [pc, #304]	; (8002b04 <HAL_RCC_OscConfig+0x4d8>)
 80029d2:	689b      	ldr	r3, [r3, #8]
 80029d4:	f003 030c 	and.w	r3, r3, #12
 80029d8:	2b08      	cmp	r3, #8
 80029da:	d05c      	beq.n	8002a96 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	699b      	ldr	r3, [r3, #24]
 80029e0:	2b02      	cmp	r3, #2
 80029e2:	d141      	bne.n	8002a68 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029e4:	4b48      	ldr	r3, [pc, #288]	; (8002b08 <HAL_RCC_OscConfig+0x4dc>)
 80029e6:	2200      	movs	r2, #0
 80029e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029ea:	f7fe f9a5 	bl	8000d38 <HAL_GetTick>
 80029ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029f0:	e008      	b.n	8002a04 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029f2:	f7fe f9a1 	bl	8000d38 <HAL_GetTick>
 80029f6:	4602      	mov	r2, r0
 80029f8:	693b      	ldr	r3, [r7, #16]
 80029fa:	1ad3      	subs	r3, r2, r3
 80029fc:	2b02      	cmp	r3, #2
 80029fe:	d901      	bls.n	8002a04 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002a00:	2303      	movs	r3, #3
 8002a02:	e078      	b.n	8002af6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a04:	4b3f      	ldr	r3, [pc, #252]	; (8002b04 <HAL_RCC_OscConfig+0x4d8>)
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d1f0      	bne.n	80029f2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	69da      	ldr	r2, [r3, #28]
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6a1b      	ldr	r3, [r3, #32]
 8002a18:	431a      	orrs	r2, r3
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a1e:	019b      	lsls	r3, r3, #6
 8002a20:	431a      	orrs	r2, r3
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a26:	085b      	lsrs	r3, r3, #1
 8002a28:	3b01      	subs	r3, #1
 8002a2a:	041b      	lsls	r3, r3, #16
 8002a2c:	431a      	orrs	r2, r3
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a32:	061b      	lsls	r3, r3, #24
 8002a34:	4933      	ldr	r1, [pc, #204]	; (8002b04 <HAL_RCC_OscConfig+0x4d8>)
 8002a36:	4313      	orrs	r3, r2
 8002a38:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a3a:	4b33      	ldr	r3, [pc, #204]	; (8002b08 <HAL_RCC_OscConfig+0x4dc>)
 8002a3c:	2201      	movs	r2, #1
 8002a3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a40:	f7fe f97a 	bl	8000d38 <HAL_GetTick>
 8002a44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a46:	e008      	b.n	8002a5a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a48:	f7fe f976 	bl	8000d38 <HAL_GetTick>
 8002a4c:	4602      	mov	r2, r0
 8002a4e:	693b      	ldr	r3, [r7, #16]
 8002a50:	1ad3      	subs	r3, r2, r3
 8002a52:	2b02      	cmp	r3, #2
 8002a54:	d901      	bls.n	8002a5a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002a56:	2303      	movs	r3, #3
 8002a58:	e04d      	b.n	8002af6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a5a:	4b2a      	ldr	r3, [pc, #168]	; (8002b04 <HAL_RCC_OscConfig+0x4d8>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d0f0      	beq.n	8002a48 <HAL_RCC_OscConfig+0x41c>
 8002a66:	e045      	b.n	8002af4 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a68:	4b27      	ldr	r3, [pc, #156]	; (8002b08 <HAL_RCC_OscConfig+0x4dc>)
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a6e:	f7fe f963 	bl	8000d38 <HAL_GetTick>
 8002a72:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a74:	e008      	b.n	8002a88 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a76:	f7fe f95f 	bl	8000d38 <HAL_GetTick>
 8002a7a:	4602      	mov	r2, r0
 8002a7c:	693b      	ldr	r3, [r7, #16]
 8002a7e:	1ad3      	subs	r3, r2, r3
 8002a80:	2b02      	cmp	r3, #2
 8002a82:	d901      	bls.n	8002a88 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002a84:	2303      	movs	r3, #3
 8002a86:	e036      	b.n	8002af6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a88:	4b1e      	ldr	r3, [pc, #120]	; (8002b04 <HAL_RCC_OscConfig+0x4d8>)
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d1f0      	bne.n	8002a76 <HAL_RCC_OscConfig+0x44a>
 8002a94:	e02e      	b.n	8002af4 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	699b      	ldr	r3, [r3, #24]
 8002a9a:	2b01      	cmp	r3, #1
 8002a9c:	d101      	bne.n	8002aa2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	e029      	b.n	8002af6 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002aa2:	4b18      	ldr	r3, [pc, #96]	; (8002b04 <HAL_RCC_OscConfig+0x4d8>)
 8002aa4:	685b      	ldr	r3, [r3, #4]
 8002aa6:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	69db      	ldr	r3, [r3, #28]
 8002ab2:	429a      	cmp	r2, r3
 8002ab4:	d11c      	bne.n	8002af0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ac0:	429a      	cmp	r2, r3
 8002ac2:	d115      	bne.n	8002af0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002ac4:	68fa      	ldr	r2, [r7, #12]
 8002ac6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002aca:	4013      	ands	r3, r2
 8002acc:	687a      	ldr	r2, [r7, #4]
 8002ace:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002ad0:	4293      	cmp	r3, r2
 8002ad2:	d10d      	bne.n	8002af0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002ade:	429a      	cmp	r2, r3
 8002ae0:	d106      	bne.n	8002af0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002aec:	429a      	cmp	r2, r3
 8002aee:	d001      	beq.n	8002af4 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8002af0:	2301      	movs	r3, #1
 8002af2:	e000      	b.n	8002af6 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8002af4:	2300      	movs	r3, #0
}
 8002af6:	4618      	mov	r0, r3
 8002af8:	3718      	adds	r7, #24
 8002afa:	46bd      	mov	sp, r7
 8002afc:	bd80      	pop	{r7, pc}
 8002afe:	bf00      	nop
 8002b00:	40007000 	.word	0x40007000
 8002b04:	40023800 	.word	0x40023800
 8002b08:	42470060 	.word	0x42470060

08002b0c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b084      	sub	sp, #16
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
 8002b14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d101      	bne.n	8002b20 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b1c:	2301      	movs	r3, #1
 8002b1e:	e0cc      	b.n	8002cba <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002b20:	4b68      	ldr	r3, [pc, #416]	; (8002cc4 <HAL_RCC_ClockConfig+0x1b8>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f003 030f 	and.w	r3, r3, #15
 8002b28:	683a      	ldr	r2, [r7, #0]
 8002b2a:	429a      	cmp	r2, r3
 8002b2c:	d90c      	bls.n	8002b48 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b2e:	4b65      	ldr	r3, [pc, #404]	; (8002cc4 <HAL_RCC_ClockConfig+0x1b8>)
 8002b30:	683a      	ldr	r2, [r7, #0]
 8002b32:	b2d2      	uxtb	r2, r2
 8002b34:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b36:	4b63      	ldr	r3, [pc, #396]	; (8002cc4 <HAL_RCC_ClockConfig+0x1b8>)
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f003 030f 	and.w	r3, r3, #15
 8002b3e:	683a      	ldr	r2, [r7, #0]
 8002b40:	429a      	cmp	r2, r3
 8002b42:	d001      	beq.n	8002b48 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002b44:	2301      	movs	r3, #1
 8002b46:	e0b8      	b.n	8002cba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f003 0302 	and.w	r3, r3, #2
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d020      	beq.n	8002b96 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f003 0304 	and.w	r3, r3, #4
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d005      	beq.n	8002b6c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002b60:	4b59      	ldr	r3, [pc, #356]	; (8002cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8002b62:	689b      	ldr	r3, [r3, #8]
 8002b64:	4a58      	ldr	r2, [pc, #352]	; (8002cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8002b66:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002b6a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f003 0308 	and.w	r3, r3, #8
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d005      	beq.n	8002b84 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002b78:	4b53      	ldr	r3, [pc, #332]	; (8002cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8002b7a:	689b      	ldr	r3, [r3, #8]
 8002b7c:	4a52      	ldr	r2, [pc, #328]	; (8002cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8002b7e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002b82:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b84:	4b50      	ldr	r3, [pc, #320]	; (8002cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8002b86:	689b      	ldr	r3, [r3, #8]
 8002b88:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	689b      	ldr	r3, [r3, #8]
 8002b90:	494d      	ldr	r1, [pc, #308]	; (8002cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8002b92:	4313      	orrs	r3, r2
 8002b94:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f003 0301 	and.w	r3, r3, #1
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d044      	beq.n	8002c2c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	685b      	ldr	r3, [r3, #4]
 8002ba6:	2b01      	cmp	r3, #1
 8002ba8:	d107      	bne.n	8002bba <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002baa:	4b47      	ldr	r3, [pc, #284]	; (8002cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d119      	bne.n	8002bea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	e07f      	b.n	8002cba <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	685b      	ldr	r3, [r3, #4]
 8002bbe:	2b02      	cmp	r3, #2
 8002bc0:	d003      	beq.n	8002bca <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002bc6:	2b03      	cmp	r3, #3
 8002bc8:	d107      	bne.n	8002bda <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bca:	4b3f      	ldr	r3, [pc, #252]	; (8002cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d109      	bne.n	8002bea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	e06f      	b.n	8002cba <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bda:	4b3b      	ldr	r3, [pc, #236]	; (8002cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f003 0302 	and.w	r3, r3, #2
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d101      	bne.n	8002bea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002be6:	2301      	movs	r3, #1
 8002be8:	e067      	b.n	8002cba <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002bea:	4b37      	ldr	r3, [pc, #220]	; (8002cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8002bec:	689b      	ldr	r3, [r3, #8]
 8002bee:	f023 0203 	bic.w	r2, r3, #3
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	685b      	ldr	r3, [r3, #4]
 8002bf6:	4934      	ldr	r1, [pc, #208]	; (8002cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8002bf8:	4313      	orrs	r3, r2
 8002bfa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002bfc:	f7fe f89c 	bl	8000d38 <HAL_GetTick>
 8002c00:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c02:	e00a      	b.n	8002c1a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c04:	f7fe f898 	bl	8000d38 <HAL_GetTick>
 8002c08:	4602      	mov	r2, r0
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	1ad3      	subs	r3, r2, r3
 8002c0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c12:	4293      	cmp	r3, r2
 8002c14:	d901      	bls.n	8002c1a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002c16:	2303      	movs	r3, #3
 8002c18:	e04f      	b.n	8002cba <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c1a:	4b2b      	ldr	r3, [pc, #172]	; (8002cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8002c1c:	689b      	ldr	r3, [r3, #8]
 8002c1e:	f003 020c 	and.w	r2, r3, #12
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	685b      	ldr	r3, [r3, #4]
 8002c26:	009b      	lsls	r3, r3, #2
 8002c28:	429a      	cmp	r2, r3
 8002c2a:	d1eb      	bne.n	8002c04 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002c2c:	4b25      	ldr	r3, [pc, #148]	; (8002cc4 <HAL_RCC_ClockConfig+0x1b8>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f003 030f 	and.w	r3, r3, #15
 8002c34:	683a      	ldr	r2, [r7, #0]
 8002c36:	429a      	cmp	r2, r3
 8002c38:	d20c      	bcs.n	8002c54 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c3a:	4b22      	ldr	r3, [pc, #136]	; (8002cc4 <HAL_RCC_ClockConfig+0x1b8>)
 8002c3c:	683a      	ldr	r2, [r7, #0]
 8002c3e:	b2d2      	uxtb	r2, r2
 8002c40:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c42:	4b20      	ldr	r3, [pc, #128]	; (8002cc4 <HAL_RCC_ClockConfig+0x1b8>)
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f003 030f 	and.w	r3, r3, #15
 8002c4a:	683a      	ldr	r2, [r7, #0]
 8002c4c:	429a      	cmp	r2, r3
 8002c4e:	d001      	beq.n	8002c54 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002c50:	2301      	movs	r3, #1
 8002c52:	e032      	b.n	8002cba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f003 0304 	and.w	r3, r3, #4
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d008      	beq.n	8002c72 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c60:	4b19      	ldr	r3, [pc, #100]	; (8002cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8002c62:	689b      	ldr	r3, [r3, #8]
 8002c64:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	68db      	ldr	r3, [r3, #12]
 8002c6c:	4916      	ldr	r1, [pc, #88]	; (8002cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8002c6e:	4313      	orrs	r3, r2
 8002c70:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f003 0308 	and.w	r3, r3, #8
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d009      	beq.n	8002c92 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002c7e:	4b12      	ldr	r3, [pc, #72]	; (8002cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8002c80:	689b      	ldr	r3, [r3, #8]
 8002c82:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	691b      	ldr	r3, [r3, #16]
 8002c8a:	00db      	lsls	r3, r3, #3
 8002c8c:	490e      	ldr	r1, [pc, #56]	; (8002cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8002c8e:	4313      	orrs	r3, r2
 8002c90:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002c92:	f000 f821 	bl	8002cd8 <HAL_RCC_GetSysClockFreq>
 8002c96:	4601      	mov	r1, r0
 8002c98:	4b0b      	ldr	r3, [pc, #44]	; (8002cc8 <HAL_RCC_ClockConfig+0x1bc>)
 8002c9a:	689b      	ldr	r3, [r3, #8]
 8002c9c:	091b      	lsrs	r3, r3, #4
 8002c9e:	f003 030f 	and.w	r3, r3, #15
 8002ca2:	4a0a      	ldr	r2, [pc, #40]	; (8002ccc <HAL_RCC_ClockConfig+0x1c0>)
 8002ca4:	5cd3      	ldrb	r3, [r2, r3]
 8002ca6:	fa21 f303 	lsr.w	r3, r1, r3
 8002caa:	4a09      	ldr	r2, [pc, #36]	; (8002cd0 <HAL_RCC_ClockConfig+0x1c4>)
 8002cac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002cae:	4b09      	ldr	r3, [pc, #36]	; (8002cd4 <HAL_RCC_ClockConfig+0x1c8>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	f7fd fea0 	bl	80009f8 <HAL_InitTick>

  return HAL_OK;
 8002cb8:	2300      	movs	r3, #0
}
 8002cba:	4618      	mov	r0, r3
 8002cbc:	3710      	adds	r7, #16
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	bd80      	pop	{r7, pc}
 8002cc2:	bf00      	nop
 8002cc4:	40023c00 	.word	0x40023c00
 8002cc8:	40023800 	.word	0x40023800
 8002ccc:	08017460 	.word	0x08017460
 8002cd0:	20000000 	.word	0x20000000
 8002cd4:	20000004 	.word	0x20000004

08002cd8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002cd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002cda:	b085      	sub	sp, #20
 8002cdc:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002cde:	2300      	movs	r3, #0
 8002ce0:	607b      	str	r3, [r7, #4]
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	60fb      	str	r3, [r7, #12]
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002cea:	2300      	movs	r3, #0
 8002cec:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002cee:	4b63      	ldr	r3, [pc, #396]	; (8002e7c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002cf0:	689b      	ldr	r3, [r3, #8]
 8002cf2:	f003 030c 	and.w	r3, r3, #12
 8002cf6:	2b04      	cmp	r3, #4
 8002cf8:	d007      	beq.n	8002d0a <HAL_RCC_GetSysClockFreq+0x32>
 8002cfa:	2b08      	cmp	r3, #8
 8002cfc:	d008      	beq.n	8002d10 <HAL_RCC_GetSysClockFreq+0x38>
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	f040 80b4 	bne.w	8002e6c <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002d04:	4b5e      	ldr	r3, [pc, #376]	; (8002e80 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002d06:	60bb      	str	r3, [r7, #8]
       break;
 8002d08:	e0b3      	b.n	8002e72 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002d0a:	4b5e      	ldr	r3, [pc, #376]	; (8002e84 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8002d0c:	60bb      	str	r3, [r7, #8]
      break;
 8002d0e:	e0b0      	b.n	8002e72 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002d10:	4b5a      	ldr	r3, [pc, #360]	; (8002e7c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002d12:	685b      	ldr	r3, [r3, #4]
 8002d14:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002d18:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002d1a:	4b58      	ldr	r3, [pc, #352]	; (8002e7c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002d1c:	685b      	ldr	r3, [r3, #4]
 8002d1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d04a      	beq.n	8002dbc <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d26:	4b55      	ldr	r3, [pc, #340]	; (8002e7c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002d28:	685b      	ldr	r3, [r3, #4]
 8002d2a:	099b      	lsrs	r3, r3, #6
 8002d2c:	f04f 0400 	mov.w	r4, #0
 8002d30:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002d34:	f04f 0200 	mov.w	r2, #0
 8002d38:	ea03 0501 	and.w	r5, r3, r1
 8002d3c:	ea04 0602 	and.w	r6, r4, r2
 8002d40:	4629      	mov	r1, r5
 8002d42:	4632      	mov	r2, r6
 8002d44:	f04f 0300 	mov.w	r3, #0
 8002d48:	f04f 0400 	mov.w	r4, #0
 8002d4c:	0154      	lsls	r4, r2, #5
 8002d4e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002d52:	014b      	lsls	r3, r1, #5
 8002d54:	4619      	mov	r1, r3
 8002d56:	4622      	mov	r2, r4
 8002d58:	1b49      	subs	r1, r1, r5
 8002d5a:	eb62 0206 	sbc.w	r2, r2, r6
 8002d5e:	f04f 0300 	mov.w	r3, #0
 8002d62:	f04f 0400 	mov.w	r4, #0
 8002d66:	0194      	lsls	r4, r2, #6
 8002d68:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002d6c:	018b      	lsls	r3, r1, #6
 8002d6e:	1a5b      	subs	r3, r3, r1
 8002d70:	eb64 0402 	sbc.w	r4, r4, r2
 8002d74:	f04f 0100 	mov.w	r1, #0
 8002d78:	f04f 0200 	mov.w	r2, #0
 8002d7c:	00e2      	lsls	r2, r4, #3
 8002d7e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002d82:	00d9      	lsls	r1, r3, #3
 8002d84:	460b      	mov	r3, r1
 8002d86:	4614      	mov	r4, r2
 8002d88:	195b      	adds	r3, r3, r5
 8002d8a:	eb44 0406 	adc.w	r4, r4, r6
 8002d8e:	f04f 0100 	mov.w	r1, #0
 8002d92:	f04f 0200 	mov.w	r2, #0
 8002d96:	0262      	lsls	r2, r4, #9
 8002d98:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8002d9c:	0259      	lsls	r1, r3, #9
 8002d9e:	460b      	mov	r3, r1
 8002da0:	4614      	mov	r4, r2
 8002da2:	4618      	mov	r0, r3
 8002da4:	4621      	mov	r1, r4
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	f04f 0400 	mov.w	r4, #0
 8002dac:	461a      	mov	r2, r3
 8002dae:	4623      	mov	r3, r4
 8002db0:	f7fd fa6e 	bl	8000290 <__aeabi_uldivmod>
 8002db4:	4603      	mov	r3, r0
 8002db6:	460c      	mov	r4, r1
 8002db8:	60fb      	str	r3, [r7, #12]
 8002dba:	e049      	b.n	8002e50 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002dbc:	4b2f      	ldr	r3, [pc, #188]	; (8002e7c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002dbe:	685b      	ldr	r3, [r3, #4]
 8002dc0:	099b      	lsrs	r3, r3, #6
 8002dc2:	f04f 0400 	mov.w	r4, #0
 8002dc6:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002dca:	f04f 0200 	mov.w	r2, #0
 8002dce:	ea03 0501 	and.w	r5, r3, r1
 8002dd2:	ea04 0602 	and.w	r6, r4, r2
 8002dd6:	4629      	mov	r1, r5
 8002dd8:	4632      	mov	r2, r6
 8002dda:	f04f 0300 	mov.w	r3, #0
 8002dde:	f04f 0400 	mov.w	r4, #0
 8002de2:	0154      	lsls	r4, r2, #5
 8002de4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002de8:	014b      	lsls	r3, r1, #5
 8002dea:	4619      	mov	r1, r3
 8002dec:	4622      	mov	r2, r4
 8002dee:	1b49      	subs	r1, r1, r5
 8002df0:	eb62 0206 	sbc.w	r2, r2, r6
 8002df4:	f04f 0300 	mov.w	r3, #0
 8002df8:	f04f 0400 	mov.w	r4, #0
 8002dfc:	0194      	lsls	r4, r2, #6
 8002dfe:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002e02:	018b      	lsls	r3, r1, #6
 8002e04:	1a5b      	subs	r3, r3, r1
 8002e06:	eb64 0402 	sbc.w	r4, r4, r2
 8002e0a:	f04f 0100 	mov.w	r1, #0
 8002e0e:	f04f 0200 	mov.w	r2, #0
 8002e12:	00e2      	lsls	r2, r4, #3
 8002e14:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002e18:	00d9      	lsls	r1, r3, #3
 8002e1a:	460b      	mov	r3, r1
 8002e1c:	4614      	mov	r4, r2
 8002e1e:	195b      	adds	r3, r3, r5
 8002e20:	eb44 0406 	adc.w	r4, r4, r6
 8002e24:	f04f 0100 	mov.w	r1, #0
 8002e28:	f04f 0200 	mov.w	r2, #0
 8002e2c:	02a2      	lsls	r2, r4, #10
 8002e2e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002e32:	0299      	lsls	r1, r3, #10
 8002e34:	460b      	mov	r3, r1
 8002e36:	4614      	mov	r4, r2
 8002e38:	4618      	mov	r0, r3
 8002e3a:	4621      	mov	r1, r4
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	f04f 0400 	mov.w	r4, #0
 8002e42:	461a      	mov	r2, r3
 8002e44:	4623      	mov	r3, r4
 8002e46:	f7fd fa23 	bl	8000290 <__aeabi_uldivmod>
 8002e4a:	4603      	mov	r3, r0
 8002e4c:	460c      	mov	r4, r1
 8002e4e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002e50:	4b0a      	ldr	r3, [pc, #40]	; (8002e7c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002e52:	685b      	ldr	r3, [r3, #4]
 8002e54:	0c1b      	lsrs	r3, r3, #16
 8002e56:	f003 0303 	and.w	r3, r3, #3
 8002e5a:	3301      	adds	r3, #1
 8002e5c:	005b      	lsls	r3, r3, #1
 8002e5e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002e60:	68fa      	ldr	r2, [r7, #12]
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e68:	60bb      	str	r3, [r7, #8]
      break;
 8002e6a:	e002      	b.n	8002e72 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002e6c:	4b04      	ldr	r3, [pc, #16]	; (8002e80 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002e6e:	60bb      	str	r3, [r7, #8]
      break;
 8002e70:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002e72:	68bb      	ldr	r3, [r7, #8]
}
 8002e74:	4618      	mov	r0, r3
 8002e76:	3714      	adds	r7, #20
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002e7c:	40023800 	.word	0x40023800
 8002e80:	00f42400 	.word	0x00f42400
 8002e84:	007a1200 	.word	0x007a1200

08002e88 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e88:	b480      	push	{r7}
 8002e8a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e8c:	4b03      	ldr	r3, [pc, #12]	; (8002e9c <HAL_RCC_GetHCLKFreq+0x14>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
}
 8002e90:	4618      	mov	r0, r3
 8002e92:	46bd      	mov	sp, r7
 8002e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e98:	4770      	bx	lr
 8002e9a:	bf00      	nop
 8002e9c:	20000000 	.word	0x20000000

08002ea0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002ea4:	f7ff fff0 	bl	8002e88 <HAL_RCC_GetHCLKFreq>
 8002ea8:	4601      	mov	r1, r0
 8002eaa:	4b05      	ldr	r3, [pc, #20]	; (8002ec0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002eac:	689b      	ldr	r3, [r3, #8]
 8002eae:	0a9b      	lsrs	r3, r3, #10
 8002eb0:	f003 0307 	and.w	r3, r3, #7
 8002eb4:	4a03      	ldr	r2, [pc, #12]	; (8002ec4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002eb6:	5cd3      	ldrb	r3, [r2, r3]
 8002eb8:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	bd80      	pop	{r7, pc}
 8002ec0:	40023800 	.word	0x40023800
 8002ec4:	08017470 	.word	0x08017470

08002ec8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002ecc:	f7ff ffdc 	bl	8002e88 <HAL_RCC_GetHCLKFreq>
 8002ed0:	4601      	mov	r1, r0
 8002ed2:	4b05      	ldr	r3, [pc, #20]	; (8002ee8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002ed4:	689b      	ldr	r3, [r3, #8]
 8002ed6:	0b5b      	lsrs	r3, r3, #13
 8002ed8:	f003 0307 	and.w	r3, r3, #7
 8002edc:	4a03      	ldr	r2, [pc, #12]	; (8002eec <HAL_RCC_GetPCLK2Freq+0x24>)
 8002ede:	5cd3      	ldrb	r3, [r2, r3]
 8002ee0:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	bd80      	pop	{r7, pc}
 8002ee8:	40023800 	.word	0x40023800
 8002eec:	08017470 	.word	0x08017470

08002ef0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002ef0:	b480      	push	{r7}
 8002ef2:	b083      	sub	sp, #12
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
 8002ef8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	220f      	movs	r2, #15
 8002efe:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002f00:	4b12      	ldr	r3, [pc, #72]	; (8002f4c <HAL_RCC_GetClockConfig+0x5c>)
 8002f02:	689b      	ldr	r3, [r3, #8]
 8002f04:	f003 0203 	and.w	r2, r3, #3
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002f0c:	4b0f      	ldr	r3, [pc, #60]	; (8002f4c <HAL_RCC_GetClockConfig+0x5c>)
 8002f0e:	689b      	ldr	r3, [r3, #8]
 8002f10:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002f18:	4b0c      	ldr	r3, [pc, #48]	; (8002f4c <HAL_RCC_GetClockConfig+0x5c>)
 8002f1a:	689b      	ldr	r3, [r3, #8]
 8002f1c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002f24:	4b09      	ldr	r3, [pc, #36]	; (8002f4c <HAL_RCC_GetClockConfig+0x5c>)
 8002f26:	689b      	ldr	r3, [r3, #8]
 8002f28:	08db      	lsrs	r3, r3, #3
 8002f2a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002f32:	4b07      	ldr	r3, [pc, #28]	; (8002f50 <HAL_RCC_GetClockConfig+0x60>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f003 020f 	and.w	r2, r3, #15
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	601a      	str	r2, [r3, #0]
}
 8002f3e:	bf00      	nop
 8002f40:	370c      	adds	r7, #12
 8002f42:	46bd      	mov	sp, r7
 8002f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f48:	4770      	bx	lr
 8002f4a:	bf00      	nop
 8002f4c:	40023800 	.word	0x40023800
 8002f50:	40023c00 	.word	0x40023c00

08002f54 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b082      	sub	sp, #8
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d101      	bne.n	8002f66 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002f62:	2301      	movs	r3, #1
 8002f64:	e01d      	b.n	8002fa2 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f6c:	b2db      	uxtb	r3, r3
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d106      	bne.n	8002f80 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	2200      	movs	r2, #0
 8002f76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002f7a:	6878      	ldr	r0, [r7, #4]
 8002f7c:	f000 f815 	bl	8002faa <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2202      	movs	r2, #2
 8002f84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681a      	ldr	r2, [r3, #0]
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	3304      	adds	r3, #4
 8002f90:	4619      	mov	r1, r3
 8002f92:	4610      	mov	r0, r2
 8002f94:	f000 f968 	bl	8003268 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2201      	movs	r2, #1
 8002f9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002fa0:	2300      	movs	r3, #0
}
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	3708      	adds	r7, #8
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	bd80      	pop	{r7, pc}

08002faa <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002faa:	b480      	push	{r7}
 8002fac:	b083      	sub	sp, #12
 8002fae:	af00      	add	r7, sp, #0
 8002fb0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002fb2:	bf00      	nop
 8002fb4:	370c      	adds	r7, #12
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fbc:	4770      	bx	lr

08002fbe <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002fbe:	b480      	push	{r7}
 8002fc0:	b085      	sub	sp, #20
 8002fc2:	af00      	add	r7, sp, #0
 8002fc4:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	68da      	ldr	r2, [r3, #12]
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f042 0201 	orr.w	r2, r2, #1
 8002fd4:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	689b      	ldr	r3, [r3, #8]
 8002fdc:	f003 0307 	and.w	r3, r3, #7
 8002fe0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	2b06      	cmp	r3, #6
 8002fe6:	d007      	beq.n	8002ff8 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	681a      	ldr	r2, [r3, #0]
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f042 0201 	orr.w	r2, r2, #1
 8002ff6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002ff8:	2300      	movs	r3, #0
}
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	3714      	adds	r7, #20
 8002ffe:	46bd      	mov	sp, r7
 8003000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003004:	4770      	bx	lr

08003006 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003006:	b580      	push	{r7, lr}
 8003008:	b082      	sub	sp, #8
 800300a:	af00      	add	r7, sp, #0
 800300c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	691b      	ldr	r3, [r3, #16]
 8003014:	f003 0302 	and.w	r3, r3, #2
 8003018:	2b02      	cmp	r3, #2
 800301a:	d122      	bne.n	8003062 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	68db      	ldr	r3, [r3, #12]
 8003022:	f003 0302 	and.w	r3, r3, #2
 8003026:	2b02      	cmp	r3, #2
 8003028:	d11b      	bne.n	8003062 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f06f 0202 	mvn.w	r2, #2
 8003032:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2201      	movs	r2, #1
 8003038:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	699b      	ldr	r3, [r3, #24]
 8003040:	f003 0303 	and.w	r3, r3, #3
 8003044:	2b00      	cmp	r3, #0
 8003046:	d003      	beq.n	8003050 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003048:	6878      	ldr	r0, [r7, #4]
 800304a:	f000 f8ee 	bl	800322a <HAL_TIM_IC_CaptureCallback>
 800304e:	e005      	b.n	800305c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003050:	6878      	ldr	r0, [r7, #4]
 8003052:	f000 f8e0 	bl	8003216 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003056:	6878      	ldr	r0, [r7, #4]
 8003058:	f000 f8f1 	bl	800323e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2200      	movs	r2, #0
 8003060:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	691b      	ldr	r3, [r3, #16]
 8003068:	f003 0304 	and.w	r3, r3, #4
 800306c:	2b04      	cmp	r3, #4
 800306e:	d122      	bne.n	80030b6 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	68db      	ldr	r3, [r3, #12]
 8003076:	f003 0304 	and.w	r3, r3, #4
 800307a:	2b04      	cmp	r3, #4
 800307c:	d11b      	bne.n	80030b6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f06f 0204 	mvn.w	r2, #4
 8003086:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2202      	movs	r2, #2
 800308c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	699b      	ldr	r3, [r3, #24]
 8003094:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003098:	2b00      	cmp	r3, #0
 800309a:	d003      	beq.n	80030a4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800309c:	6878      	ldr	r0, [r7, #4]
 800309e:	f000 f8c4 	bl	800322a <HAL_TIM_IC_CaptureCallback>
 80030a2:	e005      	b.n	80030b0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80030a4:	6878      	ldr	r0, [r7, #4]
 80030a6:	f000 f8b6 	bl	8003216 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030aa:	6878      	ldr	r0, [r7, #4]
 80030ac:	f000 f8c7 	bl	800323e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2200      	movs	r2, #0
 80030b4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	691b      	ldr	r3, [r3, #16]
 80030bc:	f003 0308 	and.w	r3, r3, #8
 80030c0:	2b08      	cmp	r3, #8
 80030c2:	d122      	bne.n	800310a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	68db      	ldr	r3, [r3, #12]
 80030ca:	f003 0308 	and.w	r3, r3, #8
 80030ce:	2b08      	cmp	r3, #8
 80030d0:	d11b      	bne.n	800310a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f06f 0208 	mvn.w	r2, #8
 80030da:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2204      	movs	r2, #4
 80030e0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	69db      	ldr	r3, [r3, #28]
 80030e8:	f003 0303 	and.w	r3, r3, #3
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d003      	beq.n	80030f8 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80030f0:	6878      	ldr	r0, [r7, #4]
 80030f2:	f000 f89a 	bl	800322a <HAL_TIM_IC_CaptureCallback>
 80030f6:	e005      	b.n	8003104 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80030f8:	6878      	ldr	r0, [r7, #4]
 80030fa:	f000 f88c 	bl	8003216 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030fe:	6878      	ldr	r0, [r7, #4]
 8003100:	f000 f89d 	bl	800323e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2200      	movs	r2, #0
 8003108:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	691b      	ldr	r3, [r3, #16]
 8003110:	f003 0310 	and.w	r3, r3, #16
 8003114:	2b10      	cmp	r3, #16
 8003116:	d122      	bne.n	800315e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	68db      	ldr	r3, [r3, #12]
 800311e:	f003 0310 	and.w	r3, r3, #16
 8003122:	2b10      	cmp	r3, #16
 8003124:	d11b      	bne.n	800315e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f06f 0210 	mvn.w	r2, #16
 800312e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2208      	movs	r2, #8
 8003134:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	69db      	ldr	r3, [r3, #28]
 800313c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003140:	2b00      	cmp	r3, #0
 8003142:	d003      	beq.n	800314c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003144:	6878      	ldr	r0, [r7, #4]
 8003146:	f000 f870 	bl	800322a <HAL_TIM_IC_CaptureCallback>
 800314a:	e005      	b.n	8003158 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800314c:	6878      	ldr	r0, [r7, #4]
 800314e:	f000 f862 	bl	8003216 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003152:	6878      	ldr	r0, [r7, #4]
 8003154:	f000 f873 	bl	800323e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2200      	movs	r2, #0
 800315c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	691b      	ldr	r3, [r3, #16]
 8003164:	f003 0301 	and.w	r3, r3, #1
 8003168:	2b01      	cmp	r3, #1
 800316a:	d10e      	bne.n	800318a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	68db      	ldr	r3, [r3, #12]
 8003172:	f003 0301 	and.w	r3, r3, #1
 8003176:	2b01      	cmp	r3, #1
 8003178:	d107      	bne.n	800318a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f06f 0201 	mvn.w	r2, #1
 8003182:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003184:	6878      	ldr	r0, [r7, #4]
 8003186:	f7fd fbad 	bl	80008e4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	691b      	ldr	r3, [r3, #16]
 8003190:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003194:	2b80      	cmp	r3, #128	; 0x80
 8003196:	d10e      	bne.n	80031b6 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	68db      	ldr	r3, [r3, #12]
 800319e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031a2:	2b80      	cmp	r3, #128	; 0x80
 80031a4:	d107      	bne.n	80031b6 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80031ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80031b0:	6878      	ldr	r0, [r7, #4]
 80031b2:	f000 f903 	bl	80033bc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	691b      	ldr	r3, [r3, #16]
 80031bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031c0:	2b40      	cmp	r3, #64	; 0x40
 80031c2:	d10e      	bne.n	80031e2 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	68db      	ldr	r3, [r3, #12]
 80031ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031ce:	2b40      	cmp	r3, #64	; 0x40
 80031d0:	d107      	bne.n	80031e2 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80031da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80031dc:	6878      	ldr	r0, [r7, #4]
 80031de:	f000 f838 	bl	8003252 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	691b      	ldr	r3, [r3, #16]
 80031e8:	f003 0320 	and.w	r3, r3, #32
 80031ec:	2b20      	cmp	r3, #32
 80031ee:	d10e      	bne.n	800320e <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	68db      	ldr	r3, [r3, #12]
 80031f6:	f003 0320 	and.w	r3, r3, #32
 80031fa:	2b20      	cmp	r3, #32
 80031fc:	d107      	bne.n	800320e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f06f 0220 	mvn.w	r2, #32
 8003206:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003208:	6878      	ldr	r0, [r7, #4]
 800320a:	f000 f8cd 	bl	80033a8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800320e:	bf00      	nop
 8003210:	3708      	adds	r7, #8
 8003212:	46bd      	mov	sp, r7
 8003214:	bd80      	pop	{r7, pc}

08003216 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003216:	b480      	push	{r7}
 8003218:	b083      	sub	sp, #12
 800321a:	af00      	add	r7, sp, #0
 800321c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800321e:	bf00      	nop
 8003220:	370c      	adds	r7, #12
 8003222:	46bd      	mov	sp, r7
 8003224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003228:	4770      	bx	lr

0800322a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800322a:	b480      	push	{r7}
 800322c:	b083      	sub	sp, #12
 800322e:	af00      	add	r7, sp, #0
 8003230:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003232:	bf00      	nop
 8003234:	370c      	adds	r7, #12
 8003236:	46bd      	mov	sp, r7
 8003238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323c:	4770      	bx	lr

0800323e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800323e:	b480      	push	{r7}
 8003240:	b083      	sub	sp, #12
 8003242:	af00      	add	r7, sp, #0
 8003244:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003246:	bf00      	nop
 8003248:	370c      	adds	r7, #12
 800324a:	46bd      	mov	sp, r7
 800324c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003250:	4770      	bx	lr

08003252 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003252:	b480      	push	{r7}
 8003254:	b083      	sub	sp, #12
 8003256:	af00      	add	r7, sp, #0
 8003258:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800325a:	bf00      	nop
 800325c:	370c      	adds	r7, #12
 800325e:	46bd      	mov	sp, r7
 8003260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003264:	4770      	bx	lr
	...

08003268 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003268:	b480      	push	{r7}
 800326a:	b085      	sub	sp, #20
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
 8003270:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	4a40      	ldr	r2, [pc, #256]	; (800337c <TIM_Base_SetConfig+0x114>)
 800327c:	4293      	cmp	r3, r2
 800327e:	d013      	beq.n	80032a8 <TIM_Base_SetConfig+0x40>
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003286:	d00f      	beq.n	80032a8 <TIM_Base_SetConfig+0x40>
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	4a3d      	ldr	r2, [pc, #244]	; (8003380 <TIM_Base_SetConfig+0x118>)
 800328c:	4293      	cmp	r3, r2
 800328e:	d00b      	beq.n	80032a8 <TIM_Base_SetConfig+0x40>
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	4a3c      	ldr	r2, [pc, #240]	; (8003384 <TIM_Base_SetConfig+0x11c>)
 8003294:	4293      	cmp	r3, r2
 8003296:	d007      	beq.n	80032a8 <TIM_Base_SetConfig+0x40>
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	4a3b      	ldr	r2, [pc, #236]	; (8003388 <TIM_Base_SetConfig+0x120>)
 800329c:	4293      	cmp	r3, r2
 800329e:	d003      	beq.n	80032a8 <TIM_Base_SetConfig+0x40>
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	4a3a      	ldr	r2, [pc, #232]	; (800338c <TIM_Base_SetConfig+0x124>)
 80032a4:	4293      	cmp	r3, r2
 80032a6:	d108      	bne.n	80032ba <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032ae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	685b      	ldr	r3, [r3, #4]
 80032b4:	68fa      	ldr	r2, [r7, #12]
 80032b6:	4313      	orrs	r3, r2
 80032b8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	4a2f      	ldr	r2, [pc, #188]	; (800337c <TIM_Base_SetConfig+0x114>)
 80032be:	4293      	cmp	r3, r2
 80032c0:	d02b      	beq.n	800331a <TIM_Base_SetConfig+0xb2>
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032c8:	d027      	beq.n	800331a <TIM_Base_SetConfig+0xb2>
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	4a2c      	ldr	r2, [pc, #176]	; (8003380 <TIM_Base_SetConfig+0x118>)
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d023      	beq.n	800331a <TIM_Base_SetConfig+0xb2>
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	4a2b      	ldr	r2, [pc, #172]	; (8003384 <TIM_Base_SetConfig+0x11c>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d01f      	beq.n	800331a <TIM_Base_SetConfig+0xb2>
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	4a2a      	ldr	r2, [pc, #168]	; (8003388 <TIM_Base_SetConfig+0x120>)
 80032de:	4293      	cmp	r3, r2
 80032e0:	d01b      	beq.n	800331a <TIM_Base_SetConfig+0xb2>
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	4a29      	ldr	r2, [pc, #164]	; (800338c <TIM_Base_SetConfig+0x124>)
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d017      	beq.n	800331a <TIM_Base_SetConfig+0xb2>
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	4a28      	ldr	r2, [pc, #160]	; (8003390 <TIM_Base_SetConfig+0x128>)
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d013      	beq.n	800331a <TIM_Base_SetConfig+0xb2>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	4a27      	ldr	r2, [pc, #156]	; (8003394 <TIM_Base_SetConfig+0x12c>)
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d00f      	beq.n	800331a <TIM_Base_SetConfig+0xb2>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	4a26      	ldr	r2, [pc, #152]	; (8003398 <TIM_Base_SetConfig+0x130>)
 80032fe:	4293      	cmp	r3, r2
 8003300:	d00b      	beq.n	800331a <TIM_Base_SetConfig+0xb2>
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	4a25      	ldr	r2, [pc, #148]	; (800339c <TIM_Base_SetConfig+0x134>)
 8003306:	4293      	cmp	r3, r2
 8003308:	d007      	beq.n	800331a <TIM_Base_SetConfig+0xb2>
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	4a24      	ldr	r2, [pc, #144]	; (80033a0 <TIM_Base_SetConfig+0x138>)
 800330e:	4293      	cmp	r3, r2
 8003310:	d003      	beq.n	800331a <TIM_Base_SetConfig+0xb2>
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	4a23      	ldr	r2, [pc, #140]	; (80033a4 <TIM_Base_SetConfig+0x13c>)
 8003316:	4293      	cmp	r3, r2
 8003318:	d108      	bne.n	800332c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003320:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	68db      	ldr	r3, [r3, #12]
 8003326:	68fa      	ldr	r2, [r7, #12]
 8003328:	4313      	orrs	r3, r2
 800332a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003332:	683b      	ldr	r3, [r7, #0]
 8003334:	695b      	ldr	r3, [r3, #20]
 8003336:	4313      	orrs	r3, r2
 8003338:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	68fa      	ldr	r2, [r7, #12]
 800333e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	689a      	ldr	r2, [r3, #8]
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	681a      	ldr	r2, [r3, #0]
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	4a0a      	ldr	r2, [pc, #40]	; (800337c <TIM_Base_SetConfig+0x114>)
 8003354:	4293      	cmp	r3, r2
 8003356:	d003      	beq.n	8003360 <TIM_Base_SetConfig+0xf8>
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	4a0c      	ldr	r2, [pc, #48]	; (800338c <TIM_Base_SetConfig+0x124>)
 800335c:	4293      	cmp	r3, r2
 800335e:	d103      	bne.n	8003368 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	691a      	ldr	r2, [r3, #16]
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2201      	movs	r2, #1
 800336c:	615a      	str	r2, [r3, #20]
}
 800336e:	bf00      	nop
 8003370:	3714      	adds	r7, #20
 8003372:	46bd      	mov	sp, r7
 8003374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003378:	4770      	bx	lr
 800337a:	bf00      	nop
 800337c:	40010000 	.word	0x40010000
 8003380:	40000400 	.word	0x40000400
 8003384:	40000800 	.word	0x40000800
 8003388:	40000c00 	.word	0x40000c00
 800338c:	40010400 	.word	0x40010400
 8003390:	40014000 	.word	0x40014000
 8003394:	40014400 	.word	0x40014400
 8003398:	40014800 	.word	0x40014800
 800339c:	40001800 	.word	0x40001800
 80033a0:	40001c00 	.word	0x40001c00
 80033a4:	40002000 	.word	0x40002000

080033a8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80033a8:	b480      	push	{r7}
 80033aa:	b083      	sub	sp, #12
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80033b0:	bf00      	nop
 80033b2:	370c      	adds	r7, #12
 80033b4:	46bd      	mov	sp, r7
 80033b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ba:	4770      	bx	lr

080033bc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80033bc:	b480      	push	{r7}
 80033be:	b083      	sub	sp, #12
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80033c4:	bf00      	nop
 80033c6:	370c      	adds	r7, #12
 80033c8:	46bd      	mov	sp, r7
 80033ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ce:	4770      	bx	lr

080033d0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b082      	sub	sp, #8
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d101      	bne.n	80033e2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80033de:	2301      	movs	r3, #1
 80033e0:	e03f      	b.n	8003462 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80033e8:	b2db      	uxtb	r3, r3
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d106      	bne.n	80033fc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	2200      	movs	r2, #0
 80033f2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80033f6:	6878      	ldr	r0, [r7, #4]
 80033f8:	f7fd fab6 	bl	8000968 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2224      	movs	r2, #36	; 0x24
 8003400:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	68da      	ldr	r2, [r3, #12]
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003412:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003414:	6878      	ldr	r0, [r7, #4]
 8003416:	f000 f829 	bl	800346c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	691a      	ldr	r2, [r3, #16]
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003428:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	695a      	ldr	r2, [r3, #20]
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003438:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	68da      	ldr	r2, [r3, #12]
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003448:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	2200      	movs	r2, #0
 800344e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2220      	movs	r2, #32
 8003454:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2220      	movs	r2, #32
 800345c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003460:	2300      	movs	r3, #0
}
 8003462:	4618      	mov	r0, r3
 8003464:	3708      	adds	r7, #8
 8003466:	46bd      	mov	sp, r7
 8003468:	bd80      	pop	{r7, pc}
	...

0800346c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800346c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003470:	b085      	sub	sp, #20
 8003472:	af00      	add	r7, sp, #0
 8003474:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	691b      	ldr	r3, [r3, #16]
 800347c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	68da      	ldr	r2, [r3, #12]
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	430a      	orrs	r2, r1
 800348a:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	689a      	ldr	r2, [r3, #8]
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	691b      	ldr	r3, [r3, #16]
 8003494:	431a      	orrs	r2, r3
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	695b      	ldr	r3, [r3, #20]
 800349a:	431a      	orrs	r2, r3
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	69db      	ldr	r3, [r3, #28]
 80034a0:	4313      	orrs	r3, r2
 80034a2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	68db      	ldr	r3, [r3, #12]
 80034aa:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80034ae:	f023 030c 	bic.w	r3, r3, #12
 80034b2:	687a      	ldr	r2, [r7, #4]
 80034b4:	6812      	ldr	r2, [r2, #0]
 80034b6:	68f9      	ldr	r1, [r7, #12]
 80034b8:	430b      	orrs	r3, r1
 80034ba:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	695b      	ldr	r3, [r3, #20]
 80034c2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	699a      	ldr	r2, [r3, #24]
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	430a      	orrs	r2, r1
 80034d0:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	69db      	ldr	r3, [r3, #28]
 80034d6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80034da:	f040 818b 	bne.w	80037f4 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	4ac1      	ldr	r2, [pc, #772]	; (80037e8 <UART_SetConfig+0x37c>)
 80034e4:	4293      	cmp	r3, r2
 80034e6:	d005      	beq.n	80034f4 <UART_SetConfig+0x88>
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	4abf      	ldr	r2, [pc, #764]	; (80037ec <UART_SetConfig+0x380>)
 80034ee:	4293      	cmp	r3, r2
 80034f0:	f040 80bd 	bne.w	800366e <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80034f4:	f7ff fce8 	bl	8002ec8 <HAL_RCC_GetPCLK2Freq>
 80034f8:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80034fa:	68bb      	ldr	r3, [r7, #8]
 80034fc:	461d      	mov	r5, r3
 80034fe:	f04f 0600 	mov.w	r6, #0
 8003502:	46a8      	mov	r8, r5
 8003504:	46b1      	mov	r9, r6
 8003506:	eb18 0308 	adds.w	r3, r8, r8
 800350a:	eb49 0409 	adc.w	r4, r9, r9
 800350e:	4698      	mov	r8, r3
 8003510:	46a1      	mov	r9, r4
 8003512:	eb18 0805 	adds.w	r8, r8, r5
 8003516:	eb49 0906 	adc.w	r9, r9, r6
 800351a:	f04f 0100 	mov.w	r1, #0
 800351e:	f04f 0200 	mov.w	r2, #0
 8003522:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003526:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800352a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800352e:	4688      	mov	r8, r1
 8003530:	4691      	mov	r9, r2
 8003532:	eb18 0005 	adds.w	r0, r8, r5
 8003536:	eb49 0106 	adc.w	r1, r9, r6
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	685b      	ldr	r3, [r3, #4]
 800353e:	461d      	mov	r5, r3
 8003540:	f04f 0600 	mov.w	r6, #0
 8003544:	196b      	adds	r3, r5, r5
 8003546:	eb46 0406 	adc.w	r4, r6, r6
 800354a:	461a      	mov	r2, r3
 800354c:	4623      	mov	r3, r4
 800354e:	f7fc fe9f 	bl	8000290 <__aeabi_uldivmod>
 8003552:	4603      	mov	r3, r0
 8003554:	460c      	mov	r4, r1
 8003556:	461a      	mov	r2, r3
 8003558:	4ba5      	ldr	r3, [pc, #660]	; (80037f0 <UART_SetConfig+0x384>)
 800355a:	fba3 2302 	umull	r2, r3, r3, r2
 800355e:	095b      	lsrs	r3, r3, #5
 8003560:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003564:	68bb      	ldr	r3, [r7, #8]
 8003566:	461d      	mov	r5, r3
 8003568:	f04f 0600 	mov.w	r6, #0
 800356c:	46a9      	mov	r9, r5
 800356e:	46b2      	mov	sl, r6
 8003570:	eb19 0309 	adds.w	r3, r9, r9
 8003574:	eb4a 040a 	adc.w	r4, sl, sl
 8003578:	4699      	mov	r9, r3
 800357a:	46a2      	mov	sl, r4
 800357c:	eb19 0905 	adds.w	r9, r9, r5
 8003580:	eb4a 0a06 	adc.w	sl, sl, r6
 8003584:	f04f 0100 	mov.w	r1, #0
 8003588:	f04f 0200 	mov.w	r2, #0
 800358c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003590:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003594:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003598:	4689      	mov	r9, r1
 800359a:	4692      	mov	sl, r2
 800359c:	eb19 0005 	adds.w	r0, r9, r5
 80035a0:	eb4a 0106 	adc.w	r1, sl, r6
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	685b      	ldr	r3, [r3, #4]
 80035a8:	461d      	mov	r5, r3
 80035aa:	f04f 0600 	mov.w	r6, #0
 80035ae:	196b      	adds	r3, r5, r5
 80035b0:	eb46 0406 	adc.w	r4, r6, r6
 80035b4:	461a      	mov	r2, r3
 80035b6:	4623      	mov	r3, r4
 80035b8:	f7fc fe6a 	bl	8000290 <__aeabi_uldivmod>
 80035bc:	4603      	mov	r3, r0
 80035be:	460c      	mov	r4, r1
 80035c0:	461a      	mov	r2, r3
 80035c2:	4b8b      	ldr	r3, [pc, #556]	; (80037f0 <UART_SetConfig+0x384>)
 80035c4:	fba3 1302 	umull	r1, r3, r3, r2
 80035c8:	095b      	lsrs	r3, r3, #5
 80035ca:	2164      	movs	r1, #100	; 0x64
 80035cc:	fb01 f303 	mul.w	r3, r1, r3
 80035d0:	1ad3      	subs	r3, r2, r3
 80035d2:	00db      	lsls	r3, r3, #3
 80035d4:	3332      	adds	r3, #50	; 0x32
 80035d6:	4a86      	ldr	r2, [pc, #536]	; (80037f0 <UART_SetConfig+0x384>)
 80035d8:	fba2 2303 	umull	r2, r3, r2, r3
 80035dc:	095b      	lsrs	r3, r3, #5
 80035de:	005b      	lsls	r3, r3, #1
 80035e0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80035e4:	4498      	add	r8, r3
 80035e6:	68bb      	ldr	r3, [r7, #8]
 80035e8:	461d      	mov	r5, r3
 80035ea:	f04f 0600 	mov.w	r6, #0
 80035ee:	46a9      	mov	r9, r5
 80035f0:	46b2      	mov	sl, r6
 80035f2:	eb19 0309 	adds.w	r3, r9, r9
 80035f6:	eb4a 040a 	adc.w	r4, sl, sl
 80035fa:	4699      	mov	r9, r3
 80035fc:	46a2      	mov	sl, r4
 80035fe:	eb19 0905 	adds.w	r9, r9, r5
 8003602:	eb4a 0a06 	adc.w	sl, sl, r6
 8003606:	f04f 0100 	mov.w	r1, #0
 800360a:	f04f 0200 	mov.w	r2, #0
 800360e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003612:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003616:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800361a:	4689      	mov	r9, r1
 800361c:	4692      	mov	sl, r2
 800361e:	eb19 0005 	adds.w	r0, r9, r5
 8003622:	eb4a 0106 	adc.w	r1, sl, r6
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	685b      	ldr	r3, [r3, #4]
 800362a:	461d      	mov	r5, r3
 800362c:	f04f 0600 	mov.w	r6, #0
 8003630:	196b      	adds	r3, r5, r5
 8003632:	eb46 0406 	adc.w	r4, r6, r6
 8003636:	461a      	mov	r2, r3
 8003638:	4623      	mov	r3, r4
 800363a:	f7fc fe29 	bl	8000290 <__aeabi_uldivmod>
 800363e:	4603      	mov	r3, r0
 8003640:	460c      	mov	r4, r1
 8003642:	461a      	mov	r2, r3
 8003644:	4b6a      	ldr	r3, [pc, #424]	; (80037f0 <UART_SetConfig+0x384>)
 8003646:	fba3 1302 	umull	r1, r3, r3, r2
 800364a:	095b      	lsrs	r3, r3, #5
 800364c:	2164      	movs	r1, #100	; 0x64
 800364e:	fb01 f303 	mul.w	r3, r1, r3
 8003652:	1ad3      	subs	r3, r2, r3
 8003654:	00db      	lsls	r3, r3, #3
 8003656:	3332      	adds	r3, #50	; 0x32
 8003658:	4a65      	ldr	r2, [pc, #404]	; (80037f0 <UART_SetConfig+0x384>)
 800365a:	fba2 2303 	umull	r2, r3, r2, r3
 800365e:	095b      	lsrs	r3, r3, #5
 8003660:	f003 0207 	and.w	r2, r3, #7
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	4442      	add	r2, r8
 800366a:	609a      	str	r2, [r3, #8]
 800366c:	e26f      	b.n	8003b4e <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800366e:	f7ff fc17 	bl	8002ea0 <HAL_RCC_GetPCLK1Freq>
 8003672:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003674:	68bb      	ldr	r3, [r7, #8]
 8003676:	461d      	mov	r5, r3
 8003678:	f04f 0600 	mov.w	r6, #0
 800367c:	46a8      	mov	r8, r5
 800367e:	46b1      	mov	r9, r6
 8003680:	eb18 0308 	adds.w	r3, r8, r8
 8003684:	eb49 0409 	adc.w	r4, r9, r9
 8003688:	4698      	mov	r8, r3
 800368a:	46a1      	mov	r9, r4
 800368c:	eb18 0805 	adds.w	r8, r8, r5
 8003690:	eb49 0906 	adc.w	r9, r9, r6
 8003694:	f04f 0100 	mov.w	r1, #0
 8003698:	f04f 0200 	mov.w	r2, #0
 800369c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80036a0:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80036a4:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80036a8:	4688      	mov	r8, r1
 80036aa:	4691      	mov	r9, r2
 80036ac:	eb18 0005 	adds.w	r0, r8, r5
 80036b0:	eb49 0106 	adc.w	r1, r9, r6
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	685b      	ldr	r3, [r3, #4]
 80036b8:	461d      	mov	r5, r3
 80036ba:	f04f 0600 	mov.w	r6, #0
 80036be:	196b      	adds	r3, r5, r5
 80036c0:	eb46 0406 	adc.w	r4, r6, r6
 80036c4:	461a      	mov	r2, r3
 80036c6:	4623      	mov	r3, r4
 80036c8:	f7fc fde2 	bl	8000290 <__aeabi_uldivmod>
 80036cc:	4603      	mov	r3, r0
 80036ce:	460c      	mov	r4, r1
 80036d0:	461a      	mov	r2, r3
 80036d2:	4b47      	ldr	r3, [pc, #284]	; (80037f0 <UART_SetConfig+0x384>)
 80036d4:	fba3 2302 	umull	r2, r3, r3, r2
 80036d8:	095b      	lsrs	r3, r3, #5
 80036da:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80036de:	68bb      	ldr	r3, [r7, #8]
 80036e0:	461d      	mov	r5, r3
 80036e2:	f04f 0600 	mov.w	r6, #0
 80036e6:	46a9      	mov	r9, r5
 80036e8:	46b2      	mov	sl, r6
 80036ea:	eb19 0309 	adds.w	r3, r9, r9
 80036ee:	eb4a 040a 	adc.w	r4, sl, sl
 80036f2:	4699      	mov	r9, r3
 80036f4:	46a2      	mov	sl, r4
 80036f6:	eb19 0905 	adds.w	r9, r9, r5
 80036fa:	eb4a 0a06 	adc.w	sl, sl, r6
 80036fe:	f04f 0100 	mov.w	r1, #0
 8003702:	f04f 0200 	mov.w	r2, #0
 8003706:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800370a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800370e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003712:	4689      	mov	r9, r1
 8003714:	4692      	mov	sl, r2
 8003716:	eb19 0005 	adds.w	r0, r9, r5
 800371a:	eb4a 0106 	adc.w	r1, sl, r6
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	685b      	ldr	r3, [r3, #4]
 8003722:	461d      	mov	r5, r3
 8003724:	f04f 0600 	mov.w	r6, #0
 8003728:	196b      	adds	r3, r5, r5
 800372a:	eb46 0406 	adc.w	r4, r6, r6
 800372e:	461a      	mov	r2, r3
 8003730:	4623      	mov	r3, r4
 8003732:	f7fc fdad 	bl	8000290 <__aeabi_uldivmod>
 8003736:	4603      	mov	r3, r0
 8003738:	460c      	mov	r4, r1
 800373a:	461a      	mov	r2, r3
 800373c:	4b2c      	ldr	r3, [pc, #176]	; (80037f0 <UART_SetConfig+0x384>)
 800373e:	fba3 1302 	umull	r1, r3, r3, r2
 8003742:	095b      	lsrs	r3, r3, #5
 8003744:	2164      	movs	r1, #100	; 0x64
 8003746:	fb01 f303 	mul.w	r3, r1, r3
 800374a:	1ad3      	subs	r3, r2, r3
 800374c:	00db      	lsls	r3, r3, #3
 800374e:	3332      	adds	r3, #50	; 0x32
 8003750:	4a27      	ldr	r2, [pc, #156]	; (80037f0 <UART_SetConfig+0x384>)
 8003752:	fba2 2303 	umull	r2, r3, r2, r3
 8003756:	095b      	lsrs	r3, r3, #5
 8003758:	005b      	lsls	r3, r3, #1
 800375a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800375e:	4498      	add	r8, r3
 8003760:	68bb      	ldr	r3, [r7, #8]
 8003762:	461d      	mov	r5, r3
 8003764:	f04f 0600 	mov.w	r6, #0
 8003768:	46a9      	mov	r9, r5
 800376a:	46b2      	mov	sl, r6
 800376c:	eb19 0309 	adds.w	r3, r9, r9
 8003770:	eb4a 040a 	adc.w	r4, sl, sl
 8003774:	4699      	mov	r9, r3
 8003776:	46a2      	mov	sl, r4
 8003778:	eb19 0905 	adds.w	r9, r9, r5
 800377c:	eb4a 0a06 	adc.w	sl, sl, r6
 8003780:	f04f 0100 	mov.w	r1, #0
 8003784:	f04f 0200 	mov.w	r2, #0
 8003788:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800378c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003790:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003794:	4689      	mov	r9, r1
 8003796:	4692      	mov	sl, r2
 8003798:	eb19 0005 	adds.w	r0, r9, r5
 800379c:	eb4a 0106 	adc.w	r1, sl, r6
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	685b      	ldr	r3, [r3, #4]
 80037a4:	461d      	mov	r5, r3
 80037a6:	f04f 0600 	mov.w	r6, #0
 80037aa:	196b      	adds	r3, r5, r5
 80037ac:	eb46 0406 	adc.w	r4, r6, r6
 80037b0:	461a      	mov	r2, r3
 80037b2:	4623      	mov	r3, r4
 80037b4:	f7fc fd6c 	bl	8000290 <__aeabi_uldivmod>
 80037b8:	4603      	mov	r3, r0
 80037ba:	460c      	mov	r4, r1
 80037bc:	461a      	mov	r2, r3
 80037be:	4b0c      	ldr	r3, [pc, #48]	; (80037f0 <UART_SetConfig+0x384>)
 80037c0:	fba3 1302 	umull	r1, r3, r3, r2
 80037c4:	095b      	lsrs	r3, r3, #5
 80037c6:	2164      	movs	r1, #100	; 0x64
 80037c8:	fb01 f303 	mul.w	r3, r1, r3
 80037cc:	1ad3      	subs	r3, r2, r3
 80037ce:	00db      	lsls	r3, r3, #3
 80037d0:	3332      	adds	r3, #50	; 0x32
 80037d2:	4a07      	ldr	r2, [pc, #28]	; (80037f0 <UART_SetConfig+0x384>)
 80037d4:	fba2 2303 	umull	r2, r3, r2, r3
 80037d8:	095b      	lsrs	r3, r3, #5
 80037da:	f003 0207 	and.w	r2, r3, #7
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	4442      	add	r2, r8
 80037e4:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80037e6:	e1b2      	b.n	8003b4e <UART_SetConfig+0x6e2>
 80037e8:	40011000 	.word	0x40011000
 80037ec:	40011400 	.word	0x40011400
 80037f0:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	4ad7      	ldr	r2, [pc, #860]	; (8003b58 <UART_SetConfig+0x6ec>)
 80037fa:	4293      	cmp	r3, r2
 80037fc:	d005      	beq.n	800380a <UART_SetConfig+0x39e>
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	4ad6      	ldr	r2, [pc, #856]	; (8003b5c <UART_SetConfig+0x6f0>)
 8003804:	4293      	cmp	r3, r2
 8003806:	f040 80d1 	bne.w	80039ac <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800380a:	f7ff fb5d 	bl	8002ec8 <HAL_RCC_GetPCLK2Freq>
 800380e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003810:	68bb      	ldr	r3, [r7, #8]
 8003812:	469a      	mov	sl, r3
 8003814:	f04f 0b00 	mov.w	fp, #0
 8003818:	46d0      	mov	r8, sl
 800381a:	46d9      	mov	r9, fp
 800381c:	eb18 0308 	adds.w	r3, r8, r8
 8003820:	eb49 0409 	adc.w	r4, r9, r9
 8003824:	4698      	mov	r8, r3
 8003826:	46a1      	mov	r9, r4
 8003828:	eb18 080a 	adds.w	r8, r8, sl
 800382c:	eb49 090b 	adc.w	r9, r9, fp
 8003830:	f04f 0100 	mov.w	r1, #0
 8003834:	f04f 0200 	mov.w	r2, #0
 8003838:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800383c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003840:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003844:	4688      	mov	r8, r1
 8003846:	4691      	mov	r9, r2
 8003848:	eb1a 0508 	adds.w	r5, sl, r8
 800384c:	eb4b 0609 	adc.w	r6, fp, r9
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	685b      	ldr	r3, [r3, #4]
 8003854:	4619      	mov	r1, r3
 8003856:	f04f 0200 	mov.w	r2, #0
 800385a:	f04f 0300 	mov.w	r3, #0
 800385e:	f04f 0400 	mov.w	r4, #0
 8003862:	0094      	lsls	r4, r2, #2
 8003864:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003868:	008b      	lsls	r3, r1, #2
 800386a:	461a      	mov	r2, r3
 800386c:	4623      	mov	r3, r4
 800386e:	4628      	mov	r0, r5
 8003870:	4631      	mov	r1, r6
 8003872:	f7fc fd0d 	bl	8000290 <__aeabi_uldivmod>
 8003876:	4603      	mov	r3, r0
 8003878:	460c      	mov	r4, r1
 800387a:	461a      	mov	r2, r3
 800387c:	4bb8      	ldr	r3, [pc, #736]	; (8003b60 <UART_SetConfig+0x6f4>)
 800387e:	fba3 2302 	umull	r2, r3, r3, r2
 8003882:	095b      	lsrs	r3, r3, #5
 8003884:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003888:	68bb      	ldr	r3, [r7, #8]
 800388a:	469b      	mov	fp, r3
 800388c:	f04f 0c00 	mov.w	ip, #0
 8003890:	46d9      	mov	r9, fp
 8003892:	46e2      	mov	sl, ip
 8003894:	eb19 0309 	adds.w	r3, r9, r9
 8003898:	eb4a 040a 	adc.w	r4, sl, sl
 800389c:	4699      	mov	r9, r3
 800389e:	46a2      	mov	sl, r4
 80038a0:	eb19 090b 	adds.w	r9, r9, fp
 80038a4:	eb4a 0a0c 	adc.w	sl, sl, ip
 80038a8:	f04f 0100 	mov.w	r1, #0
 80038ac:	f04f 0200 	mov.w	r2, #0
 80038b0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80038b4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80038b8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80038bc:	4689      	mov	r9, r1
 80038be:	4692      	mov	sl, r2
 80038c0:	eb1b 0509 	adds.w	r5, fp, r9
 80038c4:	eb4c 060a 	adc.w	r6, ip, sl
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	685b      	ldr	r3, [r3, #4]
 80038cc:	4619      	mov	r1, r3
 80038ce:	f04f 0200 	mov.w	r2, #0
 80038d2:	f04f 0300 	mov.w	r3, #0
 80038d6:	f04f 0400 	mov.w	r4, #0
 80038da:	0094      	lsls	r4, r2, #2
 80038dc:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80038e0:	008b      	lsls	r3, r1, #2
 80038e2:	461a      	mov	r2, r3
 80038e4:	4623      	mov	r3, r4
 80038e6:	4628      	mov	r0, r5
 80038e8:	4631      	mov	r1, r6
 80038ea:	f7fc fcd1 	bl	8000290 <__aeabi_uldivmod>
 80038ee:	4603      	mov	r3, r0
 80038f0:	460c      	mov	r4, r1
 80038f2:	461a      	mov	r2, r3
 80038f4:	4b9a      	ldr	r3, [pc, #616]	; (8003b60 <UART_SetConfig+0x6f4>)
 80038f6:	fba3 1302 	umull	r1, r3, r3, r2
 80038fa:	095b      	lsrs	r3, r3, #5
 80038fc:	2164      	movs	r1, #100	; 0x64
 80038fe:	fb01 f303 	mul.w	r3, r1, r3
 8003902:	1ad3      	subs	r3, r2, r3
 8003904:	011b      	lsls	r3, r3, #4
 8003906:	3332      	adds	r3, #50	; 0x32
 8003908:	4a95      	ldr	r2, [pc, #596]	; (8003b60 <UART_SetConfig+0x6f4>)
 800390a:	fba2 2303 	umull	r2, r3, r2, r3
 800390e:	095b      	lsrs	r3, r3, #5
 8003910:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003914:	4498      	add	r8, r3
 8003916:	68bb      	ldr	r3, [r7, #8]
 8003918:	469b      	mov	fp, r3
 800391a:	f04f 0c00 	mov.w	ip, #0
 800391e:	46d9      	mov	r9, fp
 8003920:	46e2      	mov	sl, ip
 8003922:	eb19 0309 	adds.w	r3, r9, r9
 8003926:	eb4a 040a 	adc.w	r4, sl, sl
 800392a:	4699      	mov	r9, r3
 800392c:	46a2      	mov	sl, r4
 800392e:	eb19 090b 	adds.w	r9, r9, fp
 8003932:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003936:	f04f 0100 	mov.w	r1, #0
 800393a:	f04f 0200 	mov.w	r2, #0
 800393e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003942:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003946:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800394a:	4689      	mov	r9, r1
 800394c:	4692      	mov	sl, r2
 800394e:	eb1b 0509 	adds.w	r5, fp, r9
 8003952:	eb4c 060a 	adc.w	r6, ip, sl
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	685b      	ldr	r3, [r3, #4]
 800395a:	4619      	mov	r1, r3
 800395c:	f04f 0200 	mov.w	r2, #0
 8003960:	f04f 0300 	mov.w	r3, #0
 8003964:	f04f 0400 	mov.w	r4, #0
 8003968:	0094      	lsls	r4, r2, #2
 800396a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800396e:	008b      	lsls	r3, r1, #2
 8003970:	461a      	mov	r2, r3
 8003972:	4623      	mov	r3, r4
 8003974:	4628      	mov	r0, r5
 8003976:	4631      	mov	r1, r6
 8003978:	f7fc fc8a 	bl	8000290 <__aeabi_uldivmod>
 800397c:	4603      	mov	r3, r0
 800397e:	460c      	mov	r4, r1
 8003980:	461a      	mov	r2, r3
 8003982:	4b77      	ldr	r3, [pc, #476]	; (8003b60 <UART_SetConfig+0x6f4>)
 8003984:	fba3 1302 	umull	r1, r3, r3, r2
 8003988:	095b      	lsrs	r3, r3, #5
 800398a:	2164      	movs	r1, #100	; 0x64
 800398c:	fb01 f303 	mul.w	r3, r1, r3
 8003990:	1ad3      	subs	r3, r2, r3
 8003992:	011b      	lsls	r3, r3, #4
 8003994:	3332      	adds	r3, #50	; 0x32
 8003996:	4a72      	ldr	r2, [pc, #456]	; (8003b60 <UART_SetConfig+0x6f4>)
 8003998:	fba2 2303 	umull	r2, r3, r2, r3
 800399c:	095b      	lsrs	r3, r3, #5
 800399e:	f003 020f 	and.w	r2, r3, #15
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	4442      	add	r2, r8
 80039a8:	609a      	str	r2, [r3, #8]
 80039aa:	e0d0      	b.n	8003b4e <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 80039ac:	f7ff fa78 	bl	8002ea0 <HAL_RCC_GetPCLK1Freq>
 80039b0:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80039b2:	68bb      	ldr	r3, [r7, #8]
 80039b4:	469a      	mov	sl, r3
 80039b6:	f04f 0b00 	mov.w	fp, #0
 80039ba:	46d0      	mov	r8, sl
 80039bc:	46d9      	mov	r9, fp
 80039be:	eb18 0308 	adds.w	r3, r8, r8
 80039c2:	eb49 0409 	adc.w	r4, r9, r9
 80039c6:	4698      	mov	r8, r3
 80039c8:	46a1      	mov	r9, r4
 80039ca:	eb18 080a 	adds.w	r8, r8, sl
 80039ce:	eb49 090b 	adc.w	r9, r9, fp
 80039d2:	f04f 0100 	mov.w	r1, #0
 80039d6:	f04f 0200 	mov.w	r2, #0
 80039da:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80039de:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80039e2:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80039e6:	4688      	mov	r8, r1
 80039e8:	4691      	mov	r9, r2
 80039ea:	eb1a 0508 	adds.w	r5, sl, r8
 80039ee:	eb4b 0609 	adc.w	r6, fp, r9
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	685b      	ldr	r3, [r3, #4]
 80039f6:	4619      	mov	r1, r3
 80039f8:	f04f 0200 	mov.w	r2, #0
 80039fc:	f04f 0300 	mov.w	r3, #0
 8003a00:	f04f 0400 	mov.w	r4, #0
 8003a04:	0094      	lsls	r4, r2, #2
 8003a06:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003a0a:	008b      	lsls	r3, r1, #2
 8003a0c:	461a      	mov	r2, r3
 8003a0e:	4623      	mov	r3, r4
 8003a10:	4628      	mov	r0, r5
 8003a12:	4631      	mov	r1, r6
 8003a14:	f7fc fc3c 	bl	8000290 <__aeabi_uldivmod>
 8003a18:	4603      	mov	r3, r0
 8003a1a:	460c      	mov	r4, r1
 8003a1c:	461a      	mov	r2, r3
 8003a1e:	4b50      	ldr	r3, [pc, #320]	; (8003b60 <UART_SetConfig+0x6f4>)
 8003a20:	fba3 2302 	umull	r2, r3, r3, r2
 8003a24:	095b      	lsrs	r3, r3, #5
 8003a26:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003a2a:	68bb      	ldr	r3, [r7, #8]
 8003a2c:	469b      	mov	fp, r3
 8003a2e:	f04f 0c00 	mov.w	ip, #0
 8003a32:	46d9      	mov	r9, fp
 8003a34:	46e2      	mov	sl, ip
 8003a36:	eb19 0309 	adds.w	r3, r9, r9
 8003a3a:	eb4a 040a 	adc.w	r4, sl, sl
 8003a3e:	4699      	mov	r9, r3
 8003a40:	46a2      	mov	sl, r4
 8003a42:	eb19 090b 	adds.w	r9, r9, fp
 8003a46:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003a4a:	f04f 0100 	mov.w	r1, #0
 8003a4e:	f04f 0200 	mov.w	r2, #0
 8003a52:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003a56:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003a5a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003a5e:	4689      	mov	r9, r1
 8003a60:	4692      	mov	sl, r2
 8003a62:	eb1b 0509 	adds.w	r5, fp, r9
 8003a66:	eb4c 060a 	adc.w	r6, ip, sl
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	685b      	ldr	r3, [r3, #4]
 8003a6e:	4619      	mov	r1, r3
 8003a70:	f04f 0200 	mov.w	r2, #0
 8003a74:	f04f 0300 	mov.w	r3, #0
 8003a78:	f04f 0400 	mov.w	r4, #0
 8003a7c:	0094      	lsls	r4, r2, #2
 8003a7e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003a82:	008b      	lsls	r3, r1, #2
 8003a84:	461a      	mov	r2, r3
 8003a86:	4623      	mov	r3, r4
 8003a88:	4628      	mov	r0, r5
 8003a8a:	4631      	mov	r1, r6
 8003a8c:	f7fc fc00 	bl	8000290 <__aeabi_uldivmod>
 8003a90:	4603      	mov	r3, r0
 8003a92:	460c      	mov	r4, r1
 8003a94:	461a      	mov	r2, r3
 8003a96:	4b32      	ldr	r3, [pc, #200]	; (8003b60 <UART_SetConfig+0x6f4>)
 8003a98:	fba3 1302 	umull	r1, r3, r3, r2
 8003a9c:	095b      	lsrs	r3, r3, #5
 8003a9e:	2164      	movs	r1, #100	; 0x64
 8003aa0:	fb01 f303 	mul.w	r3, r1, r3
 8003aa4:	1ad3      	subs	r3, r2, r3
 8003aa6:	011b      	lsls	r3, r3, #4
 8003aa8:	3332      	adds	r3, #50	; 0x32
 8003aaa:	4a2d      	ldr	r2, [pc, #180]	; (8003b60 <UART_SetConfig+0x6f4>)
 8003aac:	fba2 2303 	umull	r2, r3, r2, r3
 8003ab0:	095b      	lsrs	r3, r3, #5
 8003ab2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003ab6:	4498      	add	r8, r3
 8003ab8:	68bb      	ldr	r3, [r7, #8]
 8003aba:	469b      	mov	fp, r3
 8003abc:	f04f 0c00 	mov.w	ip, #0
 8003ac0:	46d9      	mov	r9, fp
 8003ac2:	46e2      	mov	sl, ip
 8003ac4:	eb19 0309 	adds.w	r3, r9, r9
 8003ac8:	eb4a 040a 	adc.w	r4, sl, sl
 8003acc:	4699      	mov	r9, r3
 8003ace:	46a2      	mov	sl, r4
 8003ad0:	eb19 090b 	adds.w	r9, r9, fp
 8003ad4:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003ad8:	f04f 0100 	mov.w	r1, #0
 8003adc:	f04f 0200 	mov.w	r2, #0
 8003ae0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003ae4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003ae8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003aec:	4689      	mov	r9, r1
 8003aee:	4692      	mov	sl, r2
 8003af0:	eb1b 0509 	adds.w	r5, fp, r9
 8003af4:	eb4c 060a 	adc.w	r6, ip, sl
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	685b      	ldr	r3, [r3, #4]
 8003afc:	4619      	mov	r1, r3
 8003afe:	f04f 0200 	mov.w	r2, #0
 8003b02:	f04f 0300 	mov.w	r3, #0
 8003b06:	f04f 0400 	mov.w	r4, #0
 8003b0a:	0094      	lsls	r4, r2, #2
 8003b0c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003b10:	008b      	lsls	r3, r1, #2
 8003b12:	461a      	mov	r2, r3
 8003b14:	4623      	mov	r3, r4
 8003b16:	4628      	mov	r0, r5
 8003b18:	4631      	mov	r1, r6
 8003b1a:	f7fc fbb9 	bl	8000290 <__aeabi_uldivmod>
 8003b1e:	4603      	mov	r3, r0
 8003b20:	460c      	mov	r4, r1
 8003b22:	461a      	mov	r2, r3
 8003b24:	4b0e      	ldr	r3, [pc, #56]	; (8003b60 <UART_SetConfig+0x6f4>)
 8003b26:	fba3 1302 	umull	r1, r3, r3, r2
 8003b2a:	095b      	lsrs	r3, r3, #5
 8003b2c:	2164      	movs	r1, #100	; 0x64
 8003b2e:	fb01 f303 	mul.w	r3, r1, r3
 8003b32:	1ad3      	subs	r3, r2, r3
 8003b34:	011b      	lsls	r3, r3, #4
 8003b36:	3332      	adds	r3, #50	; 0x32
 8003b38:	4a09      	ldr	r2, [pc, #36]	; (8003b60 <UART_SetConfig+0x6f4>)
 8003b3a:	fba2 2303 	umull	r2, r3, r2, r3
 8003b3e:	095b      	lsrs	r3, r3, #5
 8003b40:	f003 020f 	and.w	r2, r3, #15
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	4442      	add	r2, r8
 8003b4a:	609a      	str	r2, [r3, #8]
}
 8003b4c:	e7ff      	b.n	8003b4e <UART_SetConfig+0x6e2>
 8003b4e:	bf00      	nop
 8003b50:	3714      	adds	r7, #20
 8003b52:	46bd      	mov	sp, r7
 8003b54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003b58:	40011000 	.word	0x40011000
 8003b5c:	40011400 	.word	0x40011400
 8003b60:	51eb851f 	.word	0x51eb851f

08003b64 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8003b64:	b5b0      	push	{r4, r5, r7, lr}
 8003b66:	b08e      	sub	sp, #56	; 0x38
 8003b68:	af04      	add	r7, sp, #16
  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 8003b6a:	2100      	movs	r1, #0
 8003b6c:	2000      	movs	r0, #0
 8003b6e:	f003 fcc1 	bl	80074f4 <tcpip_init>

  /* IP addresses initialization with DHCP (IPv4) */
  ipaddr.addr = 0;
 8003b72:	4b2a      	ldr	r3, [pc, #168]	; (8003c1c <MX_LWIP_Init+0xb8>)
 8003b74:	2200      	movs	r2, #0
 8003b76:	601a      	str	r2, [r3, #0]
  netmask.addr = 0;
 8003b78:	4b29      	ldr	r3, [pc, #164]	; (8003c20 <MX_LWIP_Init+0xbc>)
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	601a      	str	r2, [r3, #0]
  gw.addr = 0;
 8003b7e:	4b29      	ldr	r3, [pc, #164]	; (8003c24 <MX_LWIP_Init+0xc0>)
 8003b80:	2200      	movs	r2, #0
 8003b82:	601a      	str	r2, [r3, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8003b84:	4b28      	ldr	r3, [pc, #160]	; (8003c28 <MX_LWIP_Init+0xc4>)
 8003b86:	9302      	str	r3, [sp, #8]
 8003b88:	4b28      	ldr	r3, [pc, #160]	; (8003c2c <MX_LWIP_Init+0xc8>)
 8003b8a:	9301      	str	r3, [sp, #4]
 8003b8c:	2300      	movs	r3, #0
 8003b8e:	9300      	str	r3, [sp, #0]
 8003b90:	4b24      	ldr	r3, [pc, #144]	; (8003c24 <MX_LWIP_Init+0xc0>)
 8003b92:	4a23      	ldr	r2, [pc, #140]	; (8003c20 <MX_LWIP_Init+0xbc>)
 8003b94:	4921      	ldr	r1, [pc, #132]	; (8003c1c <MX_LWIP_Init+0xb8>)
 8003b96:	4826      	ldr	r0, [pc, #152]	; (8003c30 <MX_LWIP_Init+0xcc>)
 8003b98:	f004 fa30 	bl	8007ffc <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8003b9c:	4824      	ldr	r0, [pc, #144]	; (8003c30 <MX_LWIP_Init+0xcc>)
 8003b9e:	f004 fbe7 	bl	8008370 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8003ba2:	4b23      	ldr	r3, [pc, #140]	; (8003c30 <MX_LWIP_Init+0xcc>)
 8003ba4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8003ba8:	089b      	lsrs	r3, r3, #2
 8003baa:	f003 0301 	and.w	r3, r3, #1
 8003bae:	b2db      	uxtb	r3, r3
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d003      	beq.n	8003bbc <MX_LWIP_Init+0x58>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8003bb4:	481e      	ldr	r0, [pc, #120]	; (8003c30 <MX_LWIP_Init+0xcc>)
 8003bb6:	f004 fbeb 	bl	8008390 <netif_set_up>
 8003bba:	e002      	b.n	8003bc2 <MX_LWIP_Init+0x5e>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 8003bbc:	481c      	ldr	r0, [pc, #112]	; (8003c30 <MX_LWIP_Init+0xcc>)
 8003bbe:	f004 fc53 	bl	8008468 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 8003bc2:	491c      	ldr	r1, [pc, #112]	; (8003c34 <MX_LWIP_Init+0xd0>)
 8003bc4:	481a      	ldr	r0, [pc, #104]	; (8003c30 <MX_LWIP_Init+0xcc>)
 8003bc6:	f004 fce9 	bl	800859c <netif_set_link_callback>

  /* create a binary semaphore used for informing ethernetif of frame reception */
  osSemaphoreDef(Netif_SEM);
 8003bca:	2300      	movs	r3, #0
 8003bcc:	623b      	str	r3, [r7, #32]
 8003bce:	2300      	movs	r3, #0
 8003bd0:	627b      	str	r3, [r7, #36]	; 0x24
  Netif_LinkSemaphore = osSemaphoreCreate(osSemaphore(Netif_SEM) , 1 );
 8003bd2:	f107 0320 	add.w	r3, r7, #32
 8003bd6:	2101      	movs	r1, #1
 8003bd8:	4618      	mov	r0, r3
 8003bda:	f000 fda1 	bl	8004720 <osSemaphoreCreate>
 8003bde:	4602      	mov	r2, r0
 8003be0:	4b15      	ldr	r3, [pc, #84]	; (8003c38 <MX_LWIP_Init+0xd4>)
 8003be2:	601a      	str	r2, [r3, #0]

  link_arg.netif = &gnetif;
 8003be4:	4b15      	ldr	r3, [pc, #84]	; (8003c3c <MX_LWIP_Init+0xd8>)
 8003be6:	4a12      	ldr	r2, [pc, #72]	; (8003c30 <MX_LWIP_Init+0xcc>)
 8003be8:	601a      	str	r2, [r3, #0]
  link_arg.semaphore = Netif_LinkSemaphore;
 8003bea:	4b13      	ldr	r3, [pc, #76]	; (8003c38 <MX_LWIP_Init+0xd4>)
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	4a13      	ldr	r2, [pc, #76]	; (8003c3c <MX_LWIP_Init+0xd8>)
 8003bf0:	6053      	str	r3, [r2, #4]
  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(LinkThr, ethernetif_set_link, osPriorityBelowNormal, 0, configMINIMAL_STACK_SIZE * 2);
 8003bf2:	4b13      	ldr	r3, [pc, #76]	; (8003c40 <MX_LWIP_Init+0xdc>)
 8003bf4:	1d3c      	adds	r4, r7, #4
 8003bf6:	461d      	mov	r5, r3
 8003bf8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003bfa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003bfc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003c00:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(LinkThr), &link_arg);
 8003c04:	1d3b      	adds	r3, r7, #4
 8003c06:	490d      	ldr	r1, [pc, #52]	; (8003c3c <MX_LWIP_Init+0xd8>)
 8003c08:	4618      	mov	r0, r3
 8003c0a:	f000 fc8c 	bl	8004526 <osThreadCreate>
/* USER CODE END OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */

  /* Start DHCP negotiation for a network interface (IPv4) */
  dhcp_start(&gnetif);
 8003c0e:	4808      	ldr	r0, [pc, #32]	; (8003c30 <MX_LWIP_Init+0xcc>)
 8003c10:	f00b fe22 	bl	800f858 <dhcp_start>

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8003c14:	bf00      	nop
 8003c16:	3728      	adds	r7, #40	; 0x28
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	bdb0      	pop	{r4, r5, r7, pc}
 8003c1c:	200086b8 	.word	0x200086b8
 8003c20:	200086bc 	.word	0x200086bc
 8003c24:	200086c0 	.word	0x200086c0
 8003c28:	08007431 	.word	0x08007431
 8003c2c:	080042b5 	.word	0x080042b5
 8003c30:	20008680 	.word	0x20008680
 8003c34:	08004399 	.word	0x08004399
 8003c38:	200002f8 	.word	0x200002f8
 8003c3c:	20008678 	.word	0x20008678
 8003c40:	0801459c 	.word	0x0801459c

08003c44 <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b08e      	sub	sp, #56	; 0x38
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c4c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003c50:	2200      	movs	r2, #0
 8003c52:	601a      	str	r2, [r3, #0]
 8003c54:	605a      	str	r2, [r3, #4]
 8003c56:	609a      	str	r2, [r3, #8]
 8003c58:	60da      	str	r2, [r3, #12]
 8003c5a:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	4a59      	ldr	r2, [pc, #356]	; (8003dc8 <HAL_ETH_MspInit+0x184>)
 8003c62:	4293      	cmp	r3, r2
 8003c64:	f040 80ac 	bne.w	8003dc0 <HAL_ETH_MspInit+0x17c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8003c68:	2300      	movs	r3, #0
 8003c6a:	623b      	str	r3, [r7, #32]
 8003c6c:	4b57      	ldr	r3, [pc, #348]	; (8003dcc <HAL_ETH_MspInit+0x188>)
 8003c6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c70:	4a56      	ldr	r2, [pc, #344]	; (8003dcc <HAL_ETH_MspInit+0x188>)
 8003c72:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003c76:	6313      	str	r3, [r2, #48]	; 0x30
 8003c78:	4b54      	ldr	r3, [pc, #336]	; (8003dcc <HAL_ETH_MspInit+0x188>)
 8003c7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c80:	623b      	str	r3, [r7, #32]
 8003c82:	6a3b      	ldr	r3, [r7, #32]
 8003c84:	2300      	movs	r3, #0
 8003c86:	61fb      	str	r3, [r7, #28]
 8003c88:	4b50      	ldr	r3, [pc, #320]	; (8003dcc <HAL_ETH_MspInit+0x188>)
 8003c8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c8c:	4a4f      	ldr	r2, [pc, #316]	; (8003dcc <HAL_ETH_MspInit+0x188>)
 8003c8e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003c92:	6313      	str	r3, [r2, #48]	; 0x30
 8003c94:	4b4d      	ldr	r3, [pc, #308]	; (8003dcc <HAL_ETH_MspInit+0x188>)
 8003c96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c98:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003c9c:	61fb      	str	r3, [r7, #28]
 8003c9e:	69fb      	ldr	r3, [r7, #28]
 8003ca0:	2300      	movs	r3, #0
 8003ca2:	61bb      	str	r3, [r7, #24]
 8003ca4:	4b49      	ldr	r3, [pc, #292]	; (8003dcc <HAL_ETH_MspInit+0x188>)
 8003ca6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ca8:	4a48      	ldr	r2, [pc, #288]	; (8003dcc <HAL_ETH_MspInit+0x188>)
 8003caa:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003cae:	6313      	str	r3, [r2, #48]	; 0x30
 8003cb0:	4b46      	ldr	r3, [pc, #280]	; (8003dcc <HAL_ETH_MspInit+0x188>)
 8003cb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cb4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003cb8:	61bb      	str	r3, [r7, #24]
 8003cba:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003cbc:	2300      	movs	r3, #0
 8003cbe:	617b      	str	r3, [r7, #20]
 8003cc0:	4b42      	ldr	r3, [pc, #264]	; (8003dcc <HAL_ETH_MspInit+0x188>)
 8003cc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cc4:	4a41      	ldr	r2, [pc, #260]	; (8003dcc <HAL_ETH_MspInit+0x188>)
 8003cc6:	f043 0304 	orr.w	r3, r3, #4
 8003cca:	6313      	str	r3, [r2, #48]	; 0x30
 8003ccc:	4b3f      	ldr	r3, [pc, #252]	; (8003dcc <HAL_ETH_MspInit+0x188>)
 8003cce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cd0:	f003 0304 	and.w	r3, r3, #4
 8003cd4:	617b      	str	r3, [r7, #20]
 8003cd6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003cd8:	2300      	movs	r3, #0
 8003cda:	613b      	str	r3, [r7, #16]
 8003cdc:	4b3b      	ldr	r3, [pc, #236]	; (8003dcc <HAL_ETH_MspInit+0x188>)
 8003cde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ce0:	4a3a      	ldr	r2, [pc, #232]	; (8003dcc <HAL_ETH_MspInit+0x188>)
 8003ce2:	f043 0301 	orr.w	r3, r3, #1
 8003ce6:	6313      	str	r3, [r2, #48]	; 0x30
 8003ce8:	4b38      	ldr	r3, [pc, #224]	; (8003dcc <HAL_ETH_MspInit+0x188>)
 8003cea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cec:	f003 0301 	and.w	r3, r3, #1
 8003cf0:	613b      	str	r3, [r7, #16]
 8003cf2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003cf4:	2300      	movs	r3, #0
 8003cf6:	60fb      	str	r3, [r7, #12]
 8003cf8:	4b34      	ldr	r3, [pc, #208]	; (8003dcc <HAL_ETH_MspInit+0x188>)
 8003cfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cfc:	4a33      	ldr	r2, [pc, #204]	; (8003dcc <HAL_ETH_MspInit+0x188>)
 8003cfe:	f043 0302 	orr.w	r3, r3, #2
 8003d02:	6313      	str	r3, [r2, #48]	; 0x30
 8003d04:	4b31      	ldr	r3, [pc, #196]	; (8003dcc <HAL_ETH_MspInit+0x188>)
 8003d06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d08:	f003 0302 	and.w	r3, r3, #2
 8003d0c:	60fb      	str	r3, [r7, #12]
 8003d0e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8003d10:	2300      	movs	r3, #0
 8003d12:	60bb      	str	r3, [r7, #8]
 8003d14:	4b2d      	ldr	r3, [pc, #180]	; (8003dcc <HAL_ETH_MspInit+0x188>)
 8003d16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d18:	4a2c      	ldr	r2, [pc, #176]	; (8003dcc <HAL_ETH_MspInit+0x188>)
 8003d1a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003d1e:	6313      	str	r3, [r2, #48]	; 0x30
 8003d20:	4b2a      	ldr	r3, [pc, #168]	; (8003dcc <HAL_ETH_MspInit+0x188>)
 8003d22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d28:	60bb      	str	r3, [r7, #8]
 8003d2a:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8003d2c:	2332      	movs	r3, #50	; 0x32
 8003d2e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d30:	2302      	movs	r3, #2
 8003d32:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d34:	2300      	movs	r3, #0
 8003d36:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d38:	2303      	movs	r3, #3
 8003d3a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003d3c:	230b      	movs	r3, #11
 8003d3e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003d40:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003d44:	4619      	mov	r1, r3
 8003d46:	4822      	ldr	r0, [pc, #136]	; (8003dd0 <HAL_ETH_MspInit+0x18c>)
 8003d48:	f7fe faac 	bl	80022a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8003d4c:	2386      	movs	r3, #134	; 0x86
 8003d4e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d50:	2302      	movs	r3, #2
 8003d52:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d54:	2300      	movs	r3, #0
 8003d56:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d58:	2303      	movs	r3, #3
 8003d5a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003d5c:	230b      	movs	r3, #11
 8003d5e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d60:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003d64:	4619      	mov	r1, r3
 8003d66:	481b      	ldr	r0, [pc, #108]	; (8003dd4 <HAL_ETH_MspInit+0x190>)
 8003d68:	f7fe fa9c 	bl	80022a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8003d6c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003d70:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d72:	2302      	movs	r3, #2
 8003d74:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d76:	2300      	movs	r3, #0
 8003d78:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d7a:	2303      	movs	r3, #3
 8003d7c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003d7e:	230b      	movs	r3, #11
 8003d80:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8003d82:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003d86:	4619      	mov	r1, r3
 8003d88:	4813      	ldr	r0, [pc, #76]	; (8003dd8 <HAL_ETH_MspInit+0x194>)
 8003d8a:	f7fe fa8b 	bl	80022a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8003d8e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8003d92:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d94:	2302      	movs	r3, #2
 8003d96:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d98:	2300      	movs	r3, #0
 8003d9a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d9c:	2303      	movs	r3, #3
 8003d9e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003da0:	230b      	movs	r3, #11
 8003da2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003da4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003da8:	4619      	mov	r1, r3
 8003daa:	480c      	ldr	r0, [pc, #48]	; (8003ddc <HAL_ETH_MspInit+0x198>)
 8003dac:	f7fe fa7a 	bl	80022a4 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 8003db0:	2200      	movs	r2, #0
 8003db2:	2105      	movs	r1, #5
 8003db4:	203d      	movs	r0, #61	; 0x3d
 8003db6:	f7fd f8a5 	bl	8000f04 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8003dba:	203d      	movs	r0, #61	; 0x3d
 8003dbc:	f7fd f8be 	bl	8000f3c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8003dc0:	bf00      	nop
 8003dc2:	3738      	adds	r7, #56	; 0x38
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	bd80      	pop	{r7, pc}
 8003dc8:	40028000 	.word	0x40028000
 8003dcc:	40023800 	.word	0x40023800
 8003dd0:	40020800 	.word	0x40020800
 8003dd4:	40020000 	.word	0x40020000
 8003dd8:	40020400 	.word	0x40020400
 8003ddc:	40021800 	.word	0x40021800

08003de0 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  heth: ETH handle
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	b082      	sub	sp, #8
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(s_xSemaphore);
 8003de8:	4b04      	ldr	r3, [pc, #16]	; (8003dfc <HAL_ETH_RxCpltCallback+0x1c>)
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	4618      	mov	r0, r3
 8003dee:	f000 fd19 	bl	8004824 <osSemaphoreRelease>
}
 8003df2:	bf00      	nop
 8003df4:	3708      	adds	r7, #8
 8003df6:	46bd      	mov	sp, r7
 8003df8:	bd80      	pop	{r7, pc}
 8003dfa:	bf00      	nop
 8003dfc:	200002fc 	.word	0x200002fc

08003e00 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8003e00:	b5b0      	push	{r4, r5, r7, lr}
 8003e02:	b090      	sub	sp, #64	; 0x40
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 8003e08:	2300      	movs	r3, #0
 8003e0a:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_StatusTypeDef hal_eth_init_status;

/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8003e0c:	4b60      	ldr	r3, [pc, #384]	; (8003f90 <low_level_init+0x190>)
 8003e0e:	4a61      	ldr	r2, [pc, #388]	; (8003f94 <low_level_init+0x194>)
 8003e10:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 8003e12:	4b5f      	ldr	r3, [pc, #380]	; (8003f90 <low_level_init+0x190>)
 8003e14:	2201      	movs	r2, #1
 8003e16:	605a      	str	r2, [r3, #4]
  heth.Init.Speed = ETH_SPEED_100M;
 8003e18:	4b5d      	ldr	r3, [pc, #372]	; (8003f90 <low_level_init+0x190>)
 8003e1a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003e1e:	609a      	str	r2, [r3, #8]
  heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8003e20:	4b5b      	ldr	r3, [pc, #364]	; (8003f90 <low_level_init+0x190>)
 8003e22:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003e26:	60da      	str	r2, [r3, #12]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 8003e28:	4b59      	ldr	r3, [pc, #356]	; (8003f90 <low_level_init+0x190>)
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 8003e2e:	2300      	movs	r3, #0
 8003e30:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  MACAddr[1] = 0x80;
 8003e34:	2380      	movs	r3, #128	; 0x80
 8003e36:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  MACAddr[2] = 0xE1;
 8003e3a:	23e1      	movs	r3, #225	; 0xe1
 8003e3c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  MACAddr[3] = 0xFE;
 8003e40:	23fe      	movs	r3, #254	; 0xfe
 8003e42:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  MACAddr[4] = 0xEC;
 8003e46:	23ec      	movs	r3, #236	; 0xec
 8003e48:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  MACAddr[5] = 0x71;
 8003e4c:	2371      	movs	r3, #113	; 0x71
 8003e4e:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  heth.Init.MACAddr = &MACAddr[0];
 8003e52:	4a4f      	ldr	r2, [pc, #316]	; (8003f90 <low_level_init+0x190>)
 8003e54:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003e58:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXINTERRUPT_MODE;
 8003e5a:	4b4d      	ldr	r3, [pc, #308]	; (8003f90 <low_level_init+0x190>)
 8003e5c:	2201      	movs	r2, #1
 8003e5e:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 8003e60:	4b4b      	ldr	r3, [pc, #300]	; (8003f90 <low_level_init+0x190>)
 8003e62:	2200      	movs	r2, #0
 8003e64:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 8003e66:	4b4a      	ldr	r3, [pc, #296]	; (8003f90 <low_level_init+0x190>)
 8003e68:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8003e6c:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8003e6e:	4848      	ldr	r0, [pc, #288]	; (8003f90 <low_level_init+0x190>)
 8003e70:	f7fd f872 	bl	8000f58 <HAL_ETH_Init>
 8003e74:	4603      	mov	r3, r0
 8003e76:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

  if (hal_eth_init_status == HAL_OK)
 8003e7a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d108      	bne.n	8003e94 <low_level_init+0x94>
  {
    /* Set netif link flag */
    netif->flags |= NETIF_FLAG_LINK_UP;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8003e88:	f043 0304 	orr.w	r3, r3, #4
 8003e8c:	b2da      	uxtb	r2, r3
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 8003e94:	2304      	movs	r3, #4
 8003e96:	4a40      	ldr	r2, [pc, #256]	; (8003f98 <low_level_init+0x198>)
 8003e98:	4940      	ldr	r1, [pc, #256]	; (8003f9c <low_level_init+0x19c>)
 8003e9a:	483d      	ldr	r0, [pc, #244]	; (8003f90 <low_level_init+0x190>)
 8003e9c:	f7fd f9fa 	bl	8001294 <HAL_ETH_DMATxDescListInit>

  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 8003ea0:	2304      	movs	r3, #4
 8003ea2:	4a3f      	ldr	r2, [pc, #252]	; (8003fa0 <low_level_init+0x1a0>)
 8003ea4:	493f      	ldr	r1, [pc, #252]	; (8003fa4 <low_level_init+0x1a4>)
 8003ea6:	483a      	ldr	r0, [pc, #232]	; (8003f90 <low_level_init+0x190>)
 8003ea8:	f7fd fa5d 	bl	8001366 <HAL_ETH_DMARxDescListInit>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2206      	movs	r2, #6
 8003eb0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8003eb4:	4b36      	ldr	r3, [pc, #216]	; (8003f90 <low_level_init+0x190>)
 8003eb6:	695b      	ldr	r3, [r3, #20]
 8003eb8:	781a      	ldrb	r2, [r3, #0]
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8003ec0:	4b33      	ldr	r3, [pc, #204]	; (8003f90 <low_level_init+0x190>)
 8003ec2:	695b      	ldr	r3, [r3, #20]
 8003ec4:	785a      	ldrb	r2, [r3, #1]
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8003ecc:	4b30      	ldr	r3, [pc, #192]	; (8003f90 <low_level_init+0x190>)
 8003ece:	695b      	ldr	r3, [r3, #20]
 8003ed0:	789a      	ldrb	r2, [r3, #2]
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8003ed8:	4b2d      	ldr	r3, [pc, #180]	; (8003f90 <low_level_init+0x190>)
 8003eda:	695b      	ldr	r3, [r3, #20]
 8003edc:	78da      	ldrb	r2, [r3, #3]
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8003ee4:	4b2a      	ldr	r3, [pc, #168]	; (8003f90 <low_level_init+0x190>)
 8003ee6:	695b      	ldr	r3, [r3, #20]
 8003ee8:	791a      	ldrb	r2, [r3, #4]
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8003ef0:	4b27      	ldr	r3, [pc, #156]	; (8003f90 <low_level_init+0x190>)
 8003ef2:	695b      	ldr	r3, [r3, #20]
 8003ef4:	795a      	ldrb	r2, [r3, #5]
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

  /* maximum transfer unit */
  netif->mtu = 1500;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8003f02:	851a      	strh	r2, [r3, #40]	; 0x28

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8003f0a:	f043 030a 	orr.w	r3, r3, #10
 8003f0e:	b2da      	uxtb	r2, r3
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

/* create a binary semaphore used for informing ethernetif of frame reception */
  osSemaphoreDef(SEM);
 8003f16:	2300      	movs	r3, #0
 8003f18:	62bb      	str	r3, [r7, #40]	; 0x28
 8003f1a:	2300      	movs	r3, #0
 8003f1c:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_xSemaphore = osSemaphoreCreate(osSemaphore(SEM), 1);
 8003f1e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003f22:	2101      	movs	r1, #1
 8003f24:	4618      	mov	r0, r3
 8003f26:	f000 fbfb 	bl	8004720 <osSemaphoreCreate>
 8003f2a:	4602      	mov	r2, r0
 8003f2c:	4b1e      	ldr	r3, [pc, #120]	; (8003fa8 <low_level_init+0x1a8>)
 8003f2e:	601a      	str	r2, [r3, #0]

/* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 8003f30:	4b1e      	ldr	r3, [pc, #120]	; (8003fac <low_level_init+0x1ac>)
 8003f32:	f107 040c 	add.w	r4, r7, #12
 8003f36:	461d      	mov	r5, r3
 8003f38:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003f3a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003f3c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003f40:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthIf), netif);
 8003f44:	f107 030c 	add.w	r3, r7, #12
 8003f48:	6879      	ldr	r1, [r7, #4]
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	f000 faeb 	bl	8004526 <osThreadCreate>
/* USER CODE END OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 8003f50:	480f      	ldr	r0, [pc, #60]	; (8003f90 <low_level_init+0x190>)
 8003f52:	f7fd fd30 	bl	80019b6 <HAL_ETH_Start>
/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 8003f56:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003f5a:	461a      	mov	r2, r3
 8003f5c:	211d      	movs	r1, #29
 8003f5e:	480c      	ldr	r0, [pc, #48]	; (8003f90 <low_level_init+0x190>)
 8003f60:	f7fd fc5b 	bl	800181a <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 8003f64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f66:	f043 030b 	orr.w	r3, r3, #11
 8003f6a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Enable Interrupt on change of link status */
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 8003f6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f6e:	461a      	mov	r2, r3
 8003f70:	211d      	movs	r1, #29
 8003f72:	4807      	ldr	r0, [pc, #28]	; (8003f90 <low_level_init+0x190>)
 8003f74:	f7fd fcb9 	bl	80018ea <HAL_ETH_WritePHYRegister>

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 8003f78:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003f7c:	461a      	mov	r2, r3
 8003f7e:	211d      	movs	r1, #29
 8003f80:	4803      	ldr	r0, [pc, #12]	; (8003f90 <low_level_init+0x190>)
 8003f82:	f7fd fc4a 	bl	800181a <HAL_ETH_ReadPHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8003f86:	bf00      	nop
 8003f88:	3740      	adds	r7, #64	; 0x40
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	bdb0      	pop	{r4, r5, r7, pc}
 8003f8e:	bf00      	nop
 8003f90:	20009f94 	.word	0x20009f94
 8003f94:	40028000 	.word	0x40028000
 8003f98:	20009fdc 	.word	0x20009fdc
 8003f9c:	200086c4 	.word	0x200086c4
 8003fa0:	20008744 	.word	0x20008744
 8003fa4:	20009f14 	.word	0x20009f14
 8003fa8:	200002fc 	.word	0x200002fc
 8003fac:	080145c0 	.word	0x080145c0

08003fb0 <low_level_output>:
 *       to become availale since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	b08a      	sub	sp, #40	; 0x28
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
 8003fb8:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 8003fba:	4b4b      	ldr	r3, [pc, #300]	; (80040e8 <low_level_output+0x138>)
 8003fbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fbe:	689b      	ldr	r3, [r3, #8]
 8003fc0:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 8003fc2:	2300      	movs	r3, #0
 8003fc4:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 8003fc6:	2300      	movs	r3, #0
 8003fc8:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 8003fca:	2300      	movs	r3, #0
 8003fcc:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 8003fce:	2300      	movs	r3, #0
 8003fd0:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 8003fd2:	4b45      	ldr	r3, [pc, #276]	; (80040e8 <low_level_output+0x138>)
 8003fd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fd6:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 8003fd8:	2300      	movs	r3, #0
 8003fda:	613b      	str	r3, [r7, #16]

  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	623b      	str	r3, [r7, #32]
 8003fe0:	e05a      	b.n	8004098 <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8003fe2:	69bb      	ldr	r3, [r7, #24]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	da03      	bge.n	8003ff2 <low_level_output+0x42>
      {
        errval = ERR_USE;
 8003fea:	23f8      	movs	r3, #248	; 0xf8
 8003fec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 8003ff0:	e05c      	b.n	80040ac <low_level_output+0xfc>
      }

      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 8003ff2:	6a3b      	ldr	r3, [r7, #32]
 8003ff4:	895b      	ldrh	r3, [r3, #10]
 8003ff6:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 8003ff8:	2300      	movs	r3, #0
 8003ffa:	60bb      	str	r3, [r7, #8]

      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8003ffc:	e02f      	b.n	800405e <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 8003ffe:	69fa      	ldr	r2, [r7, #28]
 8004000:	693b      	ldr	r3, [r7, #16]
 8004002:	18d0      	adds	r0, r2, r3
 8004004:	6a3b      	ldr	r3, [r7, #32]
 8004006:	685a      	ldr	r2, [r3, #4]
 8004008:	68bb      	ldr	r3, [r7, #8]
 800400a:	18d1      	adds	r1, r2, r3
 800400c:	693b      	ldr	r3, [r7, #16]
 800400e:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 8004012:	3304      	adds	r3, #4
 8004014:	461a      	mov	r2, r3
 8004016:	f00f fb6a 	bl	80136ee <memcpy>

        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 800401a:	69bb      	ldr	r3, [r7, #24]
 800401c:	68db      	ldr	r3, [r3, #12]
 800401e:	61bb      	str	r3, [r7, #24]

        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8004020:	69bb      	ldr	r3, [r7, #24]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	2b00      	cmp	r3, #0
 8004026:	da03      	bge.n	8004030 <low_level_output+0x80>
        {
          errval = ERR_USE;
 8004028:	23f8      	movs	r3, #248	; 0xf8
 800402a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 800402e:	e03d      	b.n	80040ac <low_level_output+0xfc>
        }

        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 8004030:	69bb      	ldr	r3, [r7, #24]
 8004032:	689b      	ldr	r3, [r3, #8]
 8004034:	61fb      	str	r3, [r7, #28]

        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 8004036:	693a      	ldr	r2, [r7, #16]
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	4413      	add	r3, r2
 800403c:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8004040:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 8004042:	68ba      	ldr	r2, [r7, #8]
 8004044:	693b      	ldr	r3, [r7, #16]
 8004046:	1ad3      	subs	r3, r2, r3
 8004048:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800404c:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 800404e:	697a      	ldr	r2, [r7, #20]
 8004050:	693b      	ldr	r3, [r7, #16]
 8004052:	1ad3      	subs	r3, r2, r3
 8004054:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8004058:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 800405a:	2300      	movs	r3, #0
 800405c:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 800405e:	68fa      	ldr	r2, [r7, #12]
 8004060:	693b      	ldr	r3, [r7, #16]
 8004062:	4413      	add	r3, r2
 8004064:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8004068:	4293      	cmp	r3, r2
 800406a:	d8c8      	bhi.n	8003ffe <low_level_output+0x4e>
      }

      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 800406c:	69fa      	ldr	r2, [r7, #28]
 800406e:	693b      	ldr	r3, [r7, #16]
 8004070:	18d0      	adds	r0, r2, r3
 8004072:	6a3b      	ldr	r3, [r7, #32]
 8004074:	685a      	ldr	r2, [r3, #4]
 8004076:	68bb      	ldr	r3, [r7, #8]
 8004078:	4413      	add	r3, r2
 800407a:	68fa      	ldr	r2, [r7, #12]
 800407c:	4619      	mov	r1, r3
 800407e:	f00f fb36 	bl	80136ee <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8004082:	693a      	ldr	r2, [r7, #16]
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	4413      	add	r3, r2
 8004088:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 800408a:	697a      	ldr	r2, [r7, #20]
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	4413      	add	r3, r2
 8004090:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 8004092:	6a3b      	ldr	r3, [r7, #32]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	623b      	str	r3, [r7, #32]
 8004098:	6a3b      	ldr	r3, [r7, #32]
 800409a:	2b00      	cmp	r3, #0
 800409c:	d1a1      	bne.n	8003fe2 <low_level_output+0x32>
    }

  /* Prepare transmit descriptors to give to DMA */
  HAL_ETH_TransmitFrame(&heth, framelength);
 800409e:	6979      	ldr	r1, [r7, #20]
 80040a0:	4811      	ldr	r0, [pc, #68]	; (80040e8 <low_level_output+0x138>)
 80040a2:	f7fd f9cd 	bl	8001440 <HAL_ETH_TransmitFrame>

  errval = ERR_OK;
 80040a6:	2300      	movs	r3, #0
 80040a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

error:

  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 80040ac:	4b0e      	ldr	r3, [pc, #56]	; (80040e8 <low_level_output+0x138>)
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80040b4:	3314      	adds	r3, #20
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f003 0320 	and.w	r3, r3, #32
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d00d      	beq.n	80040dc <low_level_output+0x12c>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 80040c0:	4b09      	ldr	r3, [pc, #36]	; (80040e8 <low_level_output+0x138>)
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80040c8:	3314      	adds	r3, #20
 80040ca:	2220      	movs	r2, #32
 80040cc:	601a      	str	r2, [r3, #0]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 80040ce:	4b06      	ldr	r3, [pc, #24]	; (80040e8 <low_level_output+0x138>)
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80040d6:	3304      	adds	r3, #4
 80040d8:	2200      	movs	r2, #0
 80040da:	601a      	str	r2, [r3, #0]
  }
  return errval;
 80040dc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80040e0:	4618      	mov	r0, r3
 80040e2:	3728      	adds	r7, #40	; 0x28
 80040e4:	46bd      	mov	sp, r7
 80040e6:	bd80      	pop	{r7, pc}
 80040e8:	20009f94 	.word	0x20009f94

080040ec <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 80040ec:	b580      	push	{r7, lr}
 80040ee:	b08c      	sub	sp, #48	; 0x30
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 80040f4:	2300      	movs	r3, #0
 80040f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q = NULL;
 80040f8:	2300      	movs	r3, #0
 80040fa:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 80040fc:	2300      	movs	r3, #0
 80040fe:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 8004100:	2300      	movs	r3, #0
 8004102:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 8004104:	2300      	movs	r3, #0
 8004106:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 8004108:	2300      	movs	r3, #0
 800410a:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 800410c:	2300      	movs	r3, #0
 800410e:	613b      	str	r3, [r7, #16]

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame_IT(&heth) != HAL_OK)
 8004110:	484f      	ldr	r0, [pc, #316]	; (8004250 <low_level_input+0x164>)
 8004112:	f7fd fa7f 	bl	8001614 <HAL_ETH_GetReceivedFrame_IT>
 8004116:	4603      	mov	r3, r0
 8004118:	2b00      	cmp	r3, #0
 800411a:	d001      	beq.n	8004120 <low_level_input+0x34>

    return NULL;
 800411c:	2300      	movs	r3, #0
 800411e:	e092      	b.n	8004246 <low_level_input+0x15a>

  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 8004120:	4b4b      	ldr	r3, [pc, #300]	; (8004250 <low_level_input+0x164>)
 8004122:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004124:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 8004126:	4b4a      	ldr	r3, [pc, #296]	; (8004250 <low_level_input+0x164>)
 8004128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800412a:	627b      	str	r3, [r7, #36]	; 0x24

  if (len > 0)
 800412c:	89fb      	ldrh	r3, [r7, #14]
 800412e:	2b00      	cmp	r3, #0
 8004130:	d007      	beq.n	8004142 <low_level_input+0x56>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 8004132:	89fb      	ldrh	r3, [r7, #14]
 8004134:	f44f 72c1 	mov.w	r2, #386	; 0x182
 8004138:	4619      	mov	r1, r3
 800413a:	2000      	movs	r0, #0
 800413c:	f004 faf8 	bl	8008730 <pbuf_alloc>
 8004140:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  if (p != NULL)
 8004142:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004144:	2b00      	cmp	r3, #0
 8004146:	d04b      	beq.n	80041e0 <low_level_input+0xf4>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8004148:	4b41      	ldr	r3, [pc, #260]	; (8004250 <low_level_input+0x164>)
 800414a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800414c:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 800414e:	2300      	movs	r3, #0
 8004150:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8004152:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004154:	62bb      	str	r3, [r7, #40]	; 0x28
 8004156:	e040      	b.n	80041da <low_level_input+0xee>
    {
      byteslefttocopy = q->len;
 8004158:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800415a:	895b      	ldrh	r3, [r3, #10]
 800415c:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 800415e:	2300      	movs	r3, #0
 8004160:	61bb      	str	r3, [r7, #24]

      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8004162:	e021      	b.n	80041a8 <low_level_input+0xbc>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 8004164:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004166:	685a      	ldr	r2, [r3, #4]
 8004168:	69bb      	ldr	r3, [r7, #24]
 800416a:	18d0      	adds	r0, r2, r3
 800416c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800416e:	69fb      	ldr	r3, [r7, #28]
 8004170:	18d1      	adds	r1, r2, r3
 8004172:	69fb      	ldr	r3, [r7, #28]
 8004174:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 8004178:	3304      	adds	r3, #4
 800417a:	461a      	mov	r2, r3
 800417c:	f00f fab7 	bl	80136ee <memcpy>

        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8004180:	6a3b      	ldr	r3, [r7, #32]
 8004182:	68db      	ldr	r3, [r3, #12]
 8004184:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 8004186:	6a3b      	ldr	r3, [r7, #32]
 8004188:	689b      	ldr	r3, [r3, #8]
 800418a:	627b      	str	r3, [r7, #36]	; 0x24

        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 800418c:	69fa      	ldr	r2, [r7, #28]
 800418e:	697b      	ldr	r3, [r7, #20]
 8004190:	4413      	add	r3, r2
 8004192:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8004196:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 8004198:	69ba      	ldr	r2, [r7, #24]
 800419a:	69fb      	ldr	r3, [r7, #28]
 800419c:	1ad3      	subs	r3, r2, r3
 800419e:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 80041a2:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 80041a4:	2300      	movs	r3, #0
 80041a6:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 80041a8:	697a      	ldr	r2, [r7, #20]
 80041aa:	69fb      	ldr	r3, [r7, #28]
 80041ac:	4413      	add	r3, r2
 80041ae:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80041b2:	4293      	cmp	r3, r2
 80041b4:	d8d6      	bhi.n	8004164 <low_level_input+0x78>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 80041b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041b8:	685a      	ldr	r2, [r3, #4]
 80041ba:	69bb      	ldr	r3, [r7, #24]
 80041bc:	18d0      	adds	r0, r2, r3
 80041be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041c0:	69fb      	ldr	r3, [r7, #28]
 80041c2:	4413      	add	r3, r2
 80041c4:	697a      	ldr	r2, [r7, #20]
 80041c6:	4619      	mov	r1, r3
 80041c8:	f00f fa91 	bl	80136ee <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 80041cc:	69fa      	ldr	r2, [r7, #28]
 80041ce:	697b      	ldr	r3, [r7, #20]
 80041d0:	4413      	add	r3, r2
 80041d2:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 80041d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	62bb      	str	r3, [r7, #40]	; 0x28
 80041da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d1bb      	bne.n	8004158 <low_level_input+0x6c>
    }
  }

    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 80041e0:	4b1b      	ldr	r3, [pc, #108]	; (8004250 <low_level_input+0x164>)
 80041e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041e4:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 80041e6:	2300      	movs	r3, #0
 80041e8:	613b      	str	r3, [r7, #16]
 80041ea:	e00b      	b.n	8004204 <low_level_input+0x118>
    {
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 80041ec:	6a3b      	ldr	r3, [r7, #32]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80041f4:	6a3b      	ldr	r3, [r7, #32]
 80041f6:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 80041f8:	6a3b      	ldr	r3, [r7, #32]
 80041fa:	68db      	ldr	r3, [r3, #12]
 80041fc:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 80041fe:	693b      	ldr	r3, [r7, #16]
 8004200:	3301      	adds	r3, #1
 8004202:	613b      	str	r3, [r7, #16]
 8004204:	4b12      	ldr	r3, [pc, #72]	; (8004250 <low_level_input+0x164>)
 8004206:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004208:	693a      	ldr	r2, [r7, #16]
 800420a:	429a      	cmp	r2, r3
 800420c:	d3ee      	bcc.n	80041ec <low_level_input+0x100>
    }

    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;
 800420e:	4b10      	ldr	r3, [pc, #64]	; (8004250 <low_level_input+0x164>)
 8004210:	2200      	movs	r2, #0
 8004212:	639a      	str	r2, [r3, #56]	; 0x38

  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 8004214:	4b0e      	ldr	r3, [pc, #56]	; (8004250 <low_level_input+0x164>)
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800421c:	3314      	adds	r3, #20
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004224:	2b00      	cmp	r3, #0
 8004226:	d00d      	beq.n	8004244 <low_level_input+0x158>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 8004228:	4b09      	ldr	r3, [pc, #36]	; (8004250 <low_level_input+0x164>)
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004230:	3314      	adds	r3, #20
 8004232:	2280      	movs	r2, #128	; 0x80
 8004234:	601a      	str	r2, [r3, #0]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 8004236:	4b06      	ldr	r3, [pc, #24]	; (8004250 <low_level_input+0x164>)
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800423e:	3308      	adds	r3, #8
 8004240:	2200      	movs	r2, #0
 8004242:	601a      	str	r2, [r3, #0]
  }
  return p;
 8004244:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8004246:	4618      	mov	r0, r3
 8004248:	3730      	adds	r7, #48	; 0x30
 800424a:	46bd      	mov	sp, r7
 800424c:	bd80      	pop	{r7, pc}
 800424e:	bf00      	nop
 8004250:	20009f94 	.word	0x20009f94

08004254 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void const * argument)
{
 8004254:	b580      	push	{r7, lr}
 8004256:	b084      	sub	sp, #16
 8004258:	af00      	add	r7, sp, #0
 800425a:	6078      	str	r0, [r7, #4]
  struct pbuf *p;
  struct netif *netif = (struct netif *) argument;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	60fb      	str	r3, [r7, #12]

  for( ;; )
  {
    if (osSemaphoreWait(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8004260:	4b12      	ldr	r3, [pc, #72]	; (80042ac <ethernetif_input+0x58>)
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f04f 31ff 	mov.w	r1, #4294967295
 8004268:	4618      	mov	r0, r3
 800426a:	f000 fa8d 	bl	8004788 <osSemaphoreWait>
 800426e:	4603      	mov	r3, r0
 8004270:	2b00      	cmp	r3, #0
 8004272:	d1f5      	bne.n	8004260 <ethernetif_input+0xc>
    {
      do
      {
        LOCK_TCPIP_CORE();
 8004274:	480e      	ldr	r0, [pc, #56]	; (80042b0 <ethernetif_input+0x5c>)
 8004276:	f00f f9a7 	bl	80135c8 <sys_mutex_lock>
        p = low_level_input( netif );
 800427a:	68f8      	ldr	r0, [r7, #12]
 800427c:	f7ff ff36 	bl	80040ec <low_level_input>
 8004280:	60b8      	str	r0, [r7, #8]
        if   (p != NULL)
 8004282:	68bb      	ldr	r3, [r7, #8]
 8004284:	2b00      	cmp	r3, #0
 8004286:	d00a      	beq.n	800429e <ethernetif_input+0x4a>
        {
          if (netif->input( p, netif) != ERR_OK )
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	691b      	ldr	r3, [r3, #16]
 800428c:	68f9      	ldr	r1, [r7, #12]
 800428e:	68b8      	ldr	r0, [r7, #8]
 8004290:	4798      	blx	r3
 8004292:	4603      	mov	r3, r0
 8004294:	2b00      	cmp	r3, #0
 8004296:	d002      	beq.n	800429e <ethernetif_input+0x4a>
          {
            pbuf_free(p);
 8004298:	68b8      	ldr	r0, [r7, #8]
 800429a:	f004 fd29 	bl	8008cf0 <pbuf_free>
          }
        }
        UNLOCK_TCPIP_CORE();
 800429e:	4804      	ldr	r0, [pc, #16]	; (80042b0 <ethernetif_input+0x5c>)
 80042a0:	f00f f9a1 	bl	80135e6 <sys_mutex_unlock>
      } while(p!=NULL);
 80042a4:	68bb      	ldr	r3, [r7, #8]
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d1e4      	bne.n	8004274 <ethernetif_input+0x20>
    if (osSemaphoreWait(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 80042aa:	e7d9      	b.n	8004260 <ethernetif_input+0xc>
 80042ac:	200002fc 	.word	0x200002fc
 80042b0:	2000b7ac 	.word	0x2000b7ac

080042b4 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 80042b4:	b580      	push	{r7, lr}
 80042b6:	b082      	sub	sp, #8
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d106      	bne.n	80042d0 <ethernetif_init+0x1c>
 80042c2:	4b0e      	ldr	r3, [pc, #56]	; (80042fc <ethernetif_init+0x48>)
 80042c4:	f240 2235 	movw	r2, #565	; 0x235
 80042c8:	490d      	ldr	r1, [pc, #52]	; (8004300 <ethernetif_init+0x4c>)
 80042ca:	480e      	ldr	r0, [pc, #56]	; (8004304 <ethernetif_init+0x50>)
 80042cc:	f00f fa22 	bl	8013714 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2273      	movs	r2, #115	; 0x73
 80042d4:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  netif->name[1] = IFNAME1;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2274      	movs	r2, #116	; 0x74
 80042dc:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	4a09      	ldr	r2, [pc, #36]	; (8004308 <ethernetif_init+0x54>)
 80042e4:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	4a08      	ldr	r2, [pc, #32]	; (800430c <ethernetif_init+0x58>)
 80042ea:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 80042ec:	6878      	ldr	r0, [r7, #4]
 80042ee:	f7ff fd87 	bl	8003e00 <low_level_init>

  return ERR_OK;
 80042f2:	2300      	movs	r3, #0
}
 80042f4:	4618      	mov	r0, r3
 80042f6:	3708      	adds	r7, #8
 80042f8:	46bd      	mov	sp, r7
 80042fa:	bd80      	pop	{r7, pc}
 80042fc:	080145dc 	.word	0x080145dc
 8004300:	080145f8 	.word	0x080145f8
 8004304:	08014608 	.word	0x08014608
 8004308:	08011745 	.word	0x08011745
 800430c:	08003fb1 	.word	0x08003fb1

08004310 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 8004310:	b580      	push	{r7, lr}
 8004312:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8004314:	f7fc fd10 	bl	8000d38 <HAL_GetTick>
 8004318:	4603      	mov	r3, r0
}
 800431a:	4618      	mov	r0, r3
 800431c:	bd80      	pop	{r7, pc}
	...

08004320 <ethernetif_set_link>:
  * @param  netif: the network interface
  * @retval None
  */
void ethernetif_set_link(void const *argument)

{
 8004320:	b580      	push	{r7, lr}
 8004322:	b084      	sub	sp, #16
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 8004328:	2300      	movs	r3, #0
 800432a:	60bb      	str	r3, [r7, #8]
  struct link_str *link_arg = (struct link_str *)argument;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	60fb      	str	r3, [r7, #12]

  for(;;)
  {
    /* Read PHY_BSR*/
    HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8004330:	f107 0308 	add.w	r3, r7, #8
 8004334:	461a      	mov	r2, r3
 8004336:	2101      	movs	r1, #1
 8004338:	4816      	ldr	r0, [pc, #88]	; (8004394 <ethernetif_set_link+0x74>)
 800433a:	f7fd fa6e 	bl	800181a <HAL_ETH_ReadPHYRegister>

    regvalue &= PHY_LINKED_STATUS;
 800433e:	68bb      	ldr	r3, [r7, #8]
 8004340:	f003 0304 	and.w	r3, r3, #4
 8004344:	60bb      	str	r3, [r7, #8]

    /* Check whether the netif link down and the PHY link is up */
    if(!netif_is_link_up(link_arg->netif) && (regvalue))
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800434e:	f003 0304 	and.w	r3, r3, #4
 8004352:	2b00      	cmp	r3, #0
 8004354:	d108      	bne.n	8004368 <ethernetif_set_link+0x48>
 8004356:	68bb      	ldr	r3, [r7, #8]
 8004358:	2b00      	cmp	r3, #0
 800435a:	d005      	beq.n	8004368 <ethernetif_set_link+0x48>
    {
      /* network cable is connected */
      netif_set_link_up(link_arg->netif);
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	4618      	mov	r0, r3
 8004362:	f004 f8b3 	bl	80084cc <netif_set_link_up>
 8004366:	e011      	b.n	800438c <ethernetif_set_link+0x6c>
    }
    else if(netif_is_link_up(link_arg->netif) && (!regvalue))
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004370:	089b      	lsrs	r3, r3, #2
 8004372:	f003 0301 	and.w	r3, r3, #1
 8004376:	b2db      	uxtb	r3, r3
 8004378:	2b00      	cmp	r3, #0
 800437a:	d007      	beq.n	800438c <ethernetif_set_link+0x6c>
 800437c:	68bb      	ldr	r3, [r7, #8]
 800437e:	2b00      	cmp	r3, #0
 8004380:	d104      	bne.n	800438c <ethernetif_set_link+0x6c>
    {
      /* network cable is dis-connected */
      netif_set_link_down(link_arg->netif);
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	4618      	mov	r0, r3
 8004388:	f004 f8d8 	bl	800853c <netif_set_link_down>
    }

    /* Suspend thread for 200 ms */
    osDelay(200);
 800438c:	20c8      	movs	r0, #200	; 0xc8
 800438e:	f000 f916 	bl	80045be <osDelay>
    HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8004392:	e7cd      	b.n	8004330 <ethernetif_set_link+0x10>
 8004394:	20009f94 	.word	0x20009f94

08004398 <ethernetif_update_config>:
  *         to update low level driver configuration.
* @param  netif: The network interface
  * @retval None
  */
void ethernetif_update_config(struct netif *netif)
{
 8004398:	b580      	push	{r7, lr}
 800439a:	b084      	sub	sp, #16
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tickstart = 0;
 80043a0:	2300      	movs	r3, #0
 80043a2:	60fb      	str	r3, [r7, #12]
  uint32_t regvalue = 0;
 80043a4:	2300      	movs	r3, #0
 80043a6:	60bb      	str	r3, [r7, #8]

  if(netif_is_link_up(netif))
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80043ae:	089b      	lsrs	r3, r3, #2
 80043b0:	f003 0301 	and.w	r3, r3, #1
 80043b4:	b2db      	uxtb	r3, r3
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d05d      	beq.n	8004476 <ethernetif_update_config+0xde>
  {
    /* Restart the auto-negotiation */
    if(heth.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 80043ba:	4b34      	ldr	r3, [pc, #208]	; (800448c <ethernetif_update_config+0xf4>)
 80043bc:	685b      	ldr	r3, [r3, #4]
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d03f      	beq.n	8004442 <ethernetif_update_config+0xaa>
    {
      /* Enable Auto-Negotiation */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, PHY_AUTONEGOTIATION);
 80043c2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80043c6:	2100      	movs	r1, #0
 80043c8:	4830      	ldr	r0, [pc, #192]	; (800448c <ethernetif_update_config+0xf4>)
 80043ca:	f7fd fa8e 	bl	80018ea <HAL_ETH_WritePHYRegister>

      /* Get tick */
      tickstart = HAL_GetTick();
 80043ce:	f7fc fcb3 	bl	8000d38 <HAL_GetTick>
 80043d2:	4603      	mov	r3, r0
 80043d4:	60fb      	str	r3, [r7, #12]

      /* Wait until the auto-negotiation will be completed */
      do
      {
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 80043d6:	f107 0308 	add.w	r3, r7, #8
 80043da:	461a      	mov	r2, r3
 80043dc:	2101      	movs	r1, #1
 80043de:	482b      	ldr	r0, [pc, #172]	; (800448c <ethernetif_update_config+0xf4>)
 80043e0:	f7fd fa1b 	bl	800181a <HAL_ETH_ReadPHYRegister>

        /* Check for the Timeout ( 1s ) */
        if((HAL_GetTick() - tickstart ) > 1000)
 80043e4:	f7fc fca8 	bl	8000d38 <HAL_GetTick>
 80043e8:	4602      	mov	r2, r0
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	1ad3      	subs	r3, r2, r3
 80043ee:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80043f2:	d828      	bhi.n	8004446 <ethernetif_update_config+0xae>
        {
          /* In case of timeout */
          goto error;
        }
      } while (((regvalue & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 80043f4:	68bb      	ldr	r3, [r7, #8]
 80043f6:	f003 0320 	and.w	r3, r3, #32
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d0eb      	beq.n	80043d6 <ethernetif_update_config+0x3e>

      /* Read the result of the auto-negotiation */
      HAL_ETH_ReadPHYRegister(&heth, PHY_SR, &regvalue);
 80043fe:	f107 0308 	add.w	r3, r7, #8
 8004402:	461a      	mov	r2, r3
 8004404:	211f      	movs	r1, #31
 8004406:	4821      	ldr	r0, [pc, #132]	; (800448c <ethernetif_update_config+0xf4>)
 8004408:	f7fd fa07 	bl	800181a <HAL_ETH_ReadPHYRegister>

      /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
      if((regvalue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 800440c:	68bb      	ldr	r3, [r7, #8]
 800440e:	f003 0310 	and.w	r3, r3, #16
 8004412:	2b00      	cmp	r3, #0
 8004414:	d004      	beq.n	8004420 <ethernetif_update_config+0x88>
      {
        /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8004416:	4b1d      	ldr	r3, [pc, #116]	; (800448c <ethernetif_update_config+0xf4>)
 8004418:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800441c:	60da      	str	r2, [r3, #12]
 800441e:	e002      	b.n	8004426 <ethernetif_update_config+0x8e>
      }
      else
      {
        /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_HALFDUPLEX;
 8004420:	4b1a      	ldr	r3, [pc, #104]	; (800448c <ethernetif_update_config+0xf4>)
 8004422:	2200      	movs	r2, #0
 8004424:	60da      	str	r2, [r3, #12]
      }
      /* Configure the MAC with the speed fixed by the auto-negotiation process */
      if(regvalue & PHY_SPEED_STATUS)
 8004426:	68bb      	ldr	r3, [r7, #8]
 8004428:	f003 0304 	and.w	r3, r3, #4
 800442c:	2b00      	cmp	r3, #0
 800442e:	d003      	beq.n	8004438 <ethernetif_update_config+0xa0>
      {
        /* Set Ethernet speed to 10M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_10M;
 8004430:	4b16      	ldr	r3, [pc, #88]	; (800448c <ethernetif_update_config+0xf4>)
 8004432:	2200      	movs	r2, #0
 8004434:	609a      	str	r2, [r3, #8]
 8004436:	e016      	b.n	8004466 <ethernetif_update_config+0xce>
      }
      else
      {
        /* Set Ethernet speed to 100M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_100M;
 8004438:	4b14      	ldr	r3, [pc, #80]	; (800448c <ethernetif_update_config+0xf4>)
 800443a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800443e:	609a      	str	r2, [r3, #8]
 8004440:	e011      	b.n	8004466 <ethernetif_update_config+0xce>
      }
    }
    else /* AutoNegotiation Disable */
    {
    error :
 8004442:	bf00      	nop
 8004444:	e000      	b.n	8004448 <ethernetif_update_config+0xb0>
          goto error;
 8004446:	bf00      	nop
      /* Check parameters */
      assert_param(IS_ETH_SPEED(heth.Init.Speed));
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));

      /* Set MAC Speed and Duplex Mode to PHY */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8004448:	4b10      	ldr	r3, [pc, #64]	; (800448c <ethernetif_update_config+0xf4>)
 800444a:	68db      	ldr	r3, [r3, #12]
 800444c:	08db      	lsrs	r3, r3, #3
 800444e:	b29a      	uxth	r2, r3
                                                     (uint16_t)(heth.Init.Speed >> 1)));
 8004450:	4b0e      	ldr	r3, [pc, #56]	; (800448c <ethernetif_update_config+0xf4>)
 8004452:	689b      	ldr	r3, [r3, #8]
 8004454:	085b      	lsrs	r3, r3, #1
 8004456:	b29b      	uxth	r3, r3
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8004458:	4313      	orrs	r3, r2
 800445a:	b29b      	uxth	r3, r3
 800445c:	461a      	mov	r2, r3
 800445e:	2100      	movs	r1, #0
 8004460:	480a      	ldr	r0, [pc, #40]	; (800448c <ethernetif_update_config+0xf4>)
 8004462:	f7fd fa42 	bl	80018ea <HAL_ETH_WritePHYRegister>
    }

    /* ETHERNET MAC Re-Configuration */
    HAL_ETH_ConfigMAC(&heth, (ETH_MACInitTypeDef *) NULL);
 8004466:	2100      	movs	r1, #0
 8004468:	4808      	ldr	r0, [pc, #32]	; (800448c <ethernetif_update_config+0xf4>)
 800446a:	f7fd fb03 	bl	8001a74 <HAL_ETH_ConfigMAC>

    /* Restart MAC interface */
    HAL_ETH_Start(&heth);
 800446e:	4807      	ldr	r0, [pc, #28]	; (800448c <ethernetif_update_config+0xf4>)
 8004470:	f7fd faa1 	bl	80019b6 <HAL_ETH_Start>
 8004474:	e002      	b.n	800447c <ethernetif_update_config+0xe4>
  }
  else
  {
    /* Stop MAC interface */
    HAL_ETH_Stop(&heth);
 8004476:	4805      	ldr	r0, [pc, #20]	; (800448c <ethernetif_update_config+0xf4>)
 8004478:	f7fd facc 	bl	8001a14 <HAL_ETH_Stop>
  }

  ethernetif_notify_conn_changed(netif);
 800447c:	6878      	ldr	r0, [r7, #4]
 800447e:	f000 f807 	bl	8004490 <ethernetif_notify_conn_changed>
}
 8004482:	bf00      	nop
 8004484:	3710      	adds	r7, #16
 8004486:	46bd      	mov	sp, r7
 8004488:	bd80      	pop	{r7, pc}
 800448a:	bf00      	nop
 800448c:	20009f94 	.word	0x20009f94

08004490 <ethernetif_notify_conn_changed>:
  * @brief  This function notify user about link status changement.
  * @param  netif: the network interface
  * @retval None
  */
__weak void ethernetif_notify_conn_changed(struct netif *netif)
{
 8004490:	b480      	push	{r7}
 8004492:	b083      	sub	sp, #12
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
  /* NOTE : This is function could be implemented in user file
            when the callback is needed,
  */

}
 8004498:	bf00      	nop
 800449a:	370c      	adds	r7, #12
 800449c:	46bd      	mov	sp, r7
 800449e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a2:	4770      	bx	lr

080044a4 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80044a4:	b480      	push	{r7}
 80044a6:	b085      	sub	sp, #20
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	4603      	mov	r3, r0
 80044ac:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80044ae:	2300      	movs	r3, #0
 80044b0:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80044b2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80044b6:	2b84      	cmp	r3, #132	; 0x84
 80044b8:	d005      	beq.n	80044c6 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80044ba:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	4413      	add	r3, r2
 80044c2:	3303      	adds	r3, #3
 80044c4:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80044c6:	68fb      	ldr	r3, [r7, #12]
}
 80044c8:	4618      	mov	r0, r3
 80044ca:	3714      	adds	r7, #20
 80044cc:	46bd      	mov	sp, r7
 80044ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d2:	4770      	bx	lr

080044d4 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 80044d4:	b480      	push	{r7}
 80044d6:	b083      	sub	sp, #12
 80044d8:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80044da:	f3ef 8305 	mrs	r3, IPSR
 80044de:	607b      	str	r3, [r7, #4]
  return(result);
 80044e0:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	bf14      	ite	ne
 80044e6:	2301      	movne	r3, #1
 80044e8:	2300      	moveq	r3, #0
 80044ea:	b2db      	uxtb	r3, r3
}
 80044ec:	4618      	mov	r0, r3
 80044ee:	370c      	adds	r7, #12
 80044f0:	46bd      	mov	sp, r7
 80044f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f6:	4770      	bx	lr

080044f8 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80044f8:	b580      	push	{r7, lr}
 80044fa:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80044fc:	f001 fc44 	bl	8005d88 <vTaskStartScheduler>
  
  return osOK;
 8004500:	2300      	movs	r3, #0
}
 8004502:	4618      	mov	r0, r3
 8004504:	bd80      	pop	{r7, pc}

08004506 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 8004506:	b580      	push	{r7, lr}
 8004508:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 800450a:	f7ff ffe3 	bl	80044d4 <inHandlerMode>
 800450e:	4603      	mov	r3, r0
 8004510:	2b00      	cmp	r3, #0
 8004512:	d003      	beq.n	800451c <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 8004514:	f001 fd50 	bl	8005fb8 <xTaskGetTickCountFromISR>
 8004518:	4603      	mov	r3, r0
 800451a:	e002      	b.n	8004522 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 800451c:	f001 fd3c 	bl	8005f98 <xTaskGetTickCount>
 8004520:	4603      	mov	r3, r0
  }
}
 8004522:	4618      	mov	r0, r3
 8004524:	bd80      	pop	{r7, pc}

08004526 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8004526:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004528:	b089      	sub	sp, #36	; 0x24
 800452a:	af04      	add	r7, sp, #16
 800452c:	6078      	str	r0, [r7, #4]
 800452e:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	695b      	ldr	r3, [r3, #20]
 8004534:	2b00      	cmp	r3, #0
 8004536:	d020      	beq.n	800457a <osThreadCreate+0x54>
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	699b      	ldr	r3, [r3, #24]
 800453c:	2b00      	cmp	r3, #0
 800453e:	d01c      	beq.n	800457a <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	685c      	ldr	r4, [r3, #4]
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681d      	ldr	r5, [r3, #0]
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	691e      	ldr	r6, [r3, #16]
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004552:	4618      	mov	r0, r3
 8004554:	f7ff ffa6 	bl	80044a4 <makeFreeRtosPriority>
 8004558:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	695b      	ldr	r3, [r3, #20]
 800455e:	687a      	ldr	r2, [r7, #4]
 8004560:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004562:	9202      	str	r2, [sp, #8]
 8004564:	9301      	str	r3, [sp, #4]
 8004566:	9100      	str	r1, [sp, #0]
 8004568:	683b      	ldr	r3, [r7, #0]
 800456a:	4632      	mov	r2, r6
 800456c:	4629      	mov	r1, r5
 800456e:	4620      	mov	r0, r4
 8004570:	f001 fa47 	bl	8005a02 <xTaskCreateStatic>
 8004574:	4603      	mov	r3, r0
 8004576:	60fb      	str	r3, [r7, #12]
 8004578:	e01c      	b.n	80045b4 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	685c      	ldr	r4, [r3, #4]
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004586:	b29e      	uxth	r6, r3
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800458e:	4618      	mov	r0, r3
 8004590:	f7ff ff88 	bl	80044a4 <makeFreeRtosPriority>
 8004594:	4602      	mov	r2, r0
 8004596:	f107 030c 	add.w	r3, r7, #12
 800459a:	9301      	str	r3, [sp, #4]
 800459c:	9200      	str	r2, [sp, #0]
 800459e:	683b      	ldr	r3, [r7, #0]
 80045a0:	4632      	mov	r2, r6
 80045a2:	4629      	mov	r1, r5
 80045a4:	4620      	mov	r0, r4
 80045a6:	f001 fa86 	bl	8005ab6 <xTaskCreate>
 80045aa:	4603      	mov	r3, r0
 80045ac:	2b01      	cmp	r3, #1
 80045ae:	d001      	beq.n	80045b4 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80045b0:	2300      	movs	r3, #0
 80045b2:	e000      	b.n	80045b6 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80045b4:	68fb      	ldr	r3, [r7, #12]
}
 80045b6:	4618      	mov	r0, r3
 80045b8:	3714      	adds	r7, #20
 80045ba:	46bd      	mov	sp, r7
 80045bc:	bdf0      	pop	{r4, r5, r6, r7, pc}

080045be <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80045be:	b580      	push	{r7, lr}
 80045c0:	b084      	sub	sp, #16
 80045c2:	af00      	add	r7, sp, #0
 80045c4:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d001      	beq.n	80045d4 <osDelay+0x16>
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	e000      	b.n	80045d6 <osDelay+0x18>
 80045d4:	2301      	movs	r3, #1
 80045d6:	4618      	mov	r0, r3
 80045d8:	f001 fba2 	bl	8005d20 <vTaskDelay>
  
  return osOK;
 80045dc:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80045de:	4618      	mov	r0, r3
 80045e0:	3710      	adds	r7, #16
 80045e2:	46bd      	mov	sp, r7
 80045e4:	bd80      	pop	{r7, pc}

080045e6 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 80045e6:	b580      	push	{r7, lr}
 80045e8:	b082      	sub	sp, #8
 80045ea:	af00      	add	r7, sp, #0
 80045ec:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	685b      	ldr	r3, [r3, #4]
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d007      	beq.n	8004606 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	685b      	ldr	r3, [r3, #4]
 80045fa:	4619      	mov	r1, r3
 80045fc:	2001      	movs	r0, #1
 80045fe:	f000 fc44 	bl	8004e8a <xQueueCreateMutexStatic>
 8004602:	4603      	mov	r3, r0
 8004604:	e003      	b.n	800460e <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8004606:	2001      	movs	r0, #1
 8004608:	f000 fc27 	bl	8004e5a <xQueueCreateMutex>
 800460c:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 800460e:	4618      	mov	r0, r3
 8004610:	3708      	adds	r7, #8
 8004612:	46bd      	mov	sp, r7
 8004614:	bd80      	pop	{r7, pc}
	...

08004618 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8004618:	b580      	push	{r7, lr}
 800461a:	b084      	sub	sp, #16
 800461c:	af00      	add	r7, sp, #0
 800461e:	6078      	str	r0, [r7, #4]
 8004620:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8004622:	2300      	movs	r3, #0
 8004624:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	2b00      	cmp	r3, #0
 800462a:	d101      	bne.n	8004630 <osMutexWait+0x18>
    return osErrorParameter;
 800462c:	2380      	movs	r3, #128	; 0x80
 800462e:	e03a      	b.n	80046a6 <osMutexWait+0x8e>
  }
  
  ticks = 0;
 8004630:	2300      	movs	r3, #0
 8004632:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8004634:	683b      	ldr	r3, [r7, #0]
 8004636:	f1b3 3fff 	cmp.w	r3, #4294967295
 800463a:	d103      	bne.n	8004644 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 800463c:	f04f 33ff 	mov.w	r3, #4294967295
 8004640:	60fb      	str	r3, [r7, #12]
 8004642:	e009      	b.n	8004658 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 8004644:	683b      	ldr	r3, [r7, #0]
 8004646:	2b00      	cmp	r3, #0
 8004648:	d006      	beq.n	8004658 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800464a:	683b      	ldr	r3, [r7, #0]
 800464c:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	2b00      	cmp	r3, #0
 8004652:	d101      	bne.n	8004658 <osMutexWait+0x40>
      ticks = 1;
 8004654:	2301      	movs	r3, #1
 8004656:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8004658:	f7ff ff3c 	bl	80044d4 <inHandlerMode>
 800465c:	4603      	mov	r3, r0
 800465e:	2b00      	cmp	r3, #0
 8004660:	d017      	beq.n	8004692 <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8004662:	f107 0308 	add.w	r3, r7, #8
 8004666:	461a      	mov	r2, r3
 8004668:	2100      	movs	r1, #0
 800466a:	6878      	ldr	r0, [r7, #4]
 800466c:	f001 f824 	bl	80056b8 <xQueueReceiveFromISR>
 8004670:	4603      	mov	r3, r0
 8004672:	2b01      	cmp	r3, #1
 8004674:	d001      	beq.n	800467a <osMutexWait+0x62>
      return osErrorOS;
 8004676:	23ff      	movs	r3, #255	; 0xff
 8004678:	e015      	b.n	80046a6 <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800467a:	68bb      	ldr	r3, [r7, #8]
 800467c:	2b00      	cmp	r3, #0
 800467e:	d011      	beq.n	80046a4 <osMutexWait+0x8c>
 8004680:	4b0b      	ldr	r3, [pc, #44]	; (80046b0 <osMutexWait+0x98>)
 8004682:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004686:	601a      	str	r2, [r3, #0]
 8004688:	f3bf 8f4f 	dsb	sy
 800468c:	f3bf 8f6f 	isb	sy
 8004690:	e008      	b.n	80046a4 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 8004692:	68f9      	ldr	r1, [r7, #12]
 8004694:	6878      	ldr	r0, [r7, #4]
 8004696:	f000 ff07 	bl	80054a8 <xQueueSemaphoreTake>
 800469a:	4603      	mov	r3, r0
 800469c:	2b01      	cmp	r3, #1
 800469e:	d001      	beq.n	80046a4 <osMutexWait+0x8c>
    return osErrorOS;
 80046a0:	23ff      	movs	r3, #255	; 0xff
 80046a2:	e000      	b.n	80046a6 <osMutexWait+0x8e>
  }
  
  return osOK;
 80046a4:	2300      	movs	r3, #0
}
 80046a6:	4618      	mov	r0, r3
 80046a8:	3710      	adds	r7, #16
 80046aa:	46bd      	mov	sp, r7
 80046ac:	bd80      	pop	{r7, pc}
 80046ae:	bf00      	nop
 80046b0:	e000ed04 	.word	0xe000ed04

080046b4 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 80046b4:	b580      	push	{r7, lr}
 80046b6:	b084      	sub	sp, #16
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 80046bc:	2300      	movs	r3, #0
 80046be:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 80046c0:	2300      	movs	r3, #0
 80046c2:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 80046c4:	f7ff ff06 	bl	80044d4 <inHandlerMode>
 80046c8:	4603      	mov	r3, r0
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d016      	beq.n	80046fc <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 80046ce:	f107 0308 	add.w	r3, r7, #8
 80046d2:	4619      	mov	r1, r3
 80046d4:	6878      	ldr	r0, [r7, #4]
 80046d6:	f000 fd81 	bl	80051dc <xQueueGiveFromISR>
 80046da:	4603      	mov	r3, r0
 80046dc:	2b01      	cmp	r3, #1
 80046de:	d001      	beq.n	80046e4 <osMutexRelease+0x30>
      return osErrorOS;
 80046e0:	23ff      	movs	r3, #255	; 0xff
 80046e2:	e017      	b.n	8004714 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80046e4:	68bb      	ldr	r3, [r7, #8]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d013      	beq.n	8004712 <osMutexRelease+0x5e>
 80046ea:	4b0c      	ldr	r3, [pc, #48]	; (800471c <osMutexRelease+0x68>)
 80046ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80046f0:	601a      	str	r2, [r3, #0]
 80046f2:	f3bf 8f4f 	dsb	sy
 80046f6:	f3bf 8f6f 	isb	sy
 80046fa:	e00a      	b.n	8004712 <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 80046fc:	2300      	movs	r3, #0
 80046fe:	2200      	movs	r2, #0
 8004700:	2100      	movs	r1, #0
 8004702:	6878      	ldr	r0, [r7, #4]
 8004704:	f000 fbdc 	bl	8004ec0 <xQueueGenericSend>
 8004708:	4603      	mov	r3, r0
 800470a:	2b01      	cmp	r3, #1
 800470c:	d001      	beq.n	8004712 <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 800470e:	23ff      	movs	r3, #255	; 0xff
 8004710:	60fb      	str	r3, [r7, #12]
  }
  return result;
 8004712:	68fb      	ldr	r3, [r7, #12]
}
 8004714:	4618      	mov	r0, r3
 8004716:	3710      	adds	r7, #16
 8004718:	46bd      	mov	sp, r7
 800471a:	bd80      	pop	{r7, pc}
 800471c:	e000ed04 	.word	0xe000ed04

08004720 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8004720:	b580      	push	{r7, lr}
 8004722:	b086      	sub	sp, #24
 8004724:	af02      	add	r7, sp, #8
 8004726:	6078      	str	r0, [r7, #4]
 8004728:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	685b      	ldr	r3, [r3, #4]
 800472e:	2b00      	cmp	r3, #0
 8004730:	d010      	beq.n	8004754 <osSemaphoreCreate+0x34>
    if (count == 1) {
 8004732:	683b      	ldr	r3, [r7, #0]
 8004734:	2b01      	cmp	r3, #1
 8004736:	d10b      	bne.n	8004750 <osSemaphoreCreate+0x30>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	685a      	ldr	r2, [r3, #4]
 800473c:	2303      	movs	r3, #3
 800473e:	9300      	str	r3, [sp, #0]
 8004740:	4613      	mov	r3, r2
 8004742:	2200      	movs	r2, #0
 8004744:	2100      	movs	r1, #0
 8004746:	2001      	movs	r0, #1
 8004748:	f000 fa9c 	bl	8004c84 <xQueueGenericCreateStatic>
 800474c:	4603      	mov	r3, r0
 800474e:	e016      	b.n	800477e <osSemaphoreCreate+0x5e>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8004750:	2300      	movs	r3, #0
 8004752:	e014      	b.n	800477e <osSemaphoreCreate+0x5e>
#endif
    }
  }
  else {
    if (count == 1) {
 8004754:	683b      	ldr	r3, [r7, #0]
 8004756:	2b01      	cmp	r3, #1
 8004758:	d110      	bne.n	800477c <osSemaphoreCreate+0x5c>
      vSemaphoreCreateBinary(sema);
 800475a:	2203      	movs	r2, #3
 800475c:	2100      	movs	r1, #0
 800475e:	2001      	movs	r0, #1
 8004760:	f000 fb03 	bl	8004d6a <xQueueGenericCreate>
 8004764:	60f8      	str	r0, [r7, #12]
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	2b00      	cmp	r3, #0
 800476a:	d005      	beq.n	8004778 <osSemaphoreCreate+0x58>
 800476c:	2300      	movs	r3, #0
 800476e:	2200      	movs	r2, #0
 8004770:	2100      	movs	r1, #0
 8004772:	68f8      	ldr	r0, [r7, #12]
 8004774:	f000 fba4 	bl	8004ec0 <xQueueGenericSend>
      return sema;
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	e000      	b.n	800477e <osSemaphoreCreate+0x5e>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 800477c:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 800477e:	4618      	mov	r0, r3
 8004780:	3710      	adds	r7, #16
 8004782:	46bd      	mov	sp, r7
 8004784:	bd80      	pop	{r7, pc}
	...

08004788 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8004788:	b580      	push	{r7, lr}
 800478a:	b084      	sub	sp, #16
 800478c:	af00      	add	r7, sp, #0
 800478e:	6078      	str	r0, [r7, #4]
 8004790:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8004792:	2300      	movs	r3, #0
 8004794:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	2b00      	cmp	r3, #0
 800479a:	d101      	bne.n	80047a0 <osSemaphoreWait+0x18>
    return osErrorParameter;
 800479c:	2380      	movs	r3, #128	; 0x80
 800479e:	e03a      	b.n	8004816 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 80047a0:	2300      	movs	r3, #0
 80047a2:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 80047a4:	683b      	ldr	r3, [r7, #0]
 80047a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047aa:	d103      	bne.n	80047b4 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 80047ac:	f04f 33ff 	mov.w	r3, #4294967295
 80047b0:	60fb      	str	r3, [r7, #12]
 80047b2:	e009      	b.n	80047c8 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d006      	beq.n	80047c8 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 80047ba:	683b      	ldr	r3, [r7, #0]
 80047bc:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d101      	bne.n	80047c8 <osSemaphoreWait+0x40>
      ticks = 1;
 80047c4:	2301      	movs	r3, #1
 80047c6:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 80047c8:	f7ff fe84 	bl	80044d4 <inHandlerMode>
 80047cc:	4603      	mov	r3, r0
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d017      	beq.n	8004802 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 80047d2:	f107 0308 	add.w	r3, r7, #8
 80047d6:	461a      	mov	r2, r3
 80047d8:	2100      	movs	r1, #0
 80047da:	6878      	ldr	r0, [r7, #4]
 80047dc:	f000 ff6c 	bl	80056b8 <xQueueReceiveFromISR>
 80047e0:	4603      	mov	r3, r0
 80047e2:	2b01      	cmp	r3, #1
 80047e4:	d001      	beq.n	80047ea <osSemaphoreWait+0x62>
      return osErrorOS;
 80047e6:	23ff      	movs	r3, #255	; 0xff
 80047e8:	e015      	b.n	8004816 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 80047ea:	68bb      	ldr	r3, [r7, #8]
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d011      	beq.n	8004814 <osSemaphoreWait+0x8c>
 80047f0:	4b0b      	ldr	r3, [pc, #44]	; (8004820 <osSemaphoreWait+0x98>)
 80047f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80047f6:	601a      	str	r2, [r3, #0]
 80047f8:	f3bf 8f4f 	dsb	sy
 80047fc:	f3bf 8f6f 	isb	sy
 8004800:	e008      	b.n	8004814 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8004802:	68f9      	ldr	r1, [r7, #12]
 8004804:	6878      	ldr	r0, [r7, #4]
 8004806:	f000 fe4f 	bl	80054a8 <xQueueSemaphoreTake>
 800480a:	4603      	mov	r3, r0
 800480c:	2b01      	cmp	r3, #1
 800480e:	d001      	beq.n	8004814 <osSemaphoreWait+0x8c>
    return osErrorOS;
 8004810:	23ff      	movs	r3, #255	; 0xff
 8004812:	e000      	b.n	8004816 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8004814:	2300      	movs	r3, #0
}
 8004816:	4618      	mov	r0, r3
 8004818:	3710      	adds	r7, #16
 800481a:	46bd      	mov	sp, r7
 800481c:	bd80      	pop	{r7, pc}
 800481e:	bf00      	nop
 8004820:	e000ed04 	.word	0xe000ed04

08004824 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8004824:	b580      	push	{r7, lr}
 8004826:	b084      	sub	sp, #16
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800482c:	2300      	movs	r3, #0
 800482e:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8004830:	2300      	movs	r3, #0
 8004832:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8004834:	f7ff fe4e 	bl	80044d4 <inHandlerMode>
 8004838:	4603      	mov	r3, r0
 800483a:	2b00      	cmp	r3, #0
 800483c:	d016      	beq.n	800486c <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800483e:	f107 0308 	add.w	r3, r7, #8
 8004842:	4619      	mov	r1, r3
 8004844:	6878      	ldr	r0, [r7, #4]
 8004846:	f000 fcc9 	bl	80051dc <xQueueGiveFromISR>
 800484a:	4603      	mov	r3, r0
 800484c:	2b01      	cmp	r3, #1
 800484e:	d001      	beq.n	8004854 <osSemaphoreRelease+0x30>
      return osErrorOS;
 8004850:	23ff      	movs	r3, #255	; 0xff
 8004852:	e017      	b.n	8004884 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8004854:	68bb      	ldr	r3, [r7, #8]
 8004856:	2b00      	cmp	r3, #0
 8004858:	d013      	beq.n	8004882 <osSemaphoreRelease+0x5e>
 800485a:	4b0c      	ldr	r3, [pc, #48]	; (800488c <osSemaphoreRelease+0x68>)
 800485c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004860:	601a      	str	r2, [r3, #0]
 8004862:	f3bf 8f4f 	dsb	sy
 8004866:	f3bf 8f6f 	isb	sy
 800486a:	e00a      	b.n	8004882 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 800486c:	2300      	movs	r3, #0
 800486e:	2200      	movs	r2, #0
 8004870:	2100      	movs	r1, #0
 8004872:	6878      	ldr	r0, [r7, #4]
 8004874:	f000 fb24 	bl	8004ec0 <xQueueGenericSend>
 8004878:	4603      	mov	r3, r0
 800487a:	2b01      	cmp	r3, #1
 800487c:	d001      	beq.n	8004882 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 800487e:	23ff      	movs	r3, #255	; 0xff
 8004880:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 8004882:	68fb      	ldr	r3, [r7, #12]
}
 8004884:	4618      	mov	r0, r3
 8004886:	3710      	adds	r7, #16
 8004888:	46bd      	mov	sp, r7
 800488a:	bd80      	pop	{r7, pc}
 800488c:	e000ed04 	.word	0xe000ed04

08004890 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8004890:	b590      	push	{r4, r7, lr}
 8004892:	b085      	sub	sp, #20
 8004894:	af02      	add	r7, sp, #8
 8004896:	6078      	str	r0, [r7, #4]
 8004898:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	689b      	ldr	r3, [r3, #8]
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d012      	beq.n	80048c8 <osMessageCreate+0x38>
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	68db      	ldr	r3, [r3, #12]
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d00e      	beq.n	80048c8 <osMessageCreate+0x38>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	6818      	ldr	r0, [r3, #0]
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	6859      	ldr	r1, [r3, #4]
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	689a      	ldr	r2, [r3, #8]
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	68dc      	ldr	r4, [r3, #12]
 80048ba:	2300      	movs	r3, #0
 80048bc:	9300      	str	r3, [sp, #0]
 80048be:	4623      	mov	r3, r4
 80048c0:	f000 f9e0 	bl	8004c84 <xQueueGenericCreateStatic>
 80048c4:	4603      	mov	r3, r0
 80048c6:	e008      	b.n	80048da <osMessageCreate+0x4a>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	6818      	ldr	r0, [r3, #0]
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	685b      	ldr	r3, [r3, #4]
 80048d0:	2200      	movs	r2, #0
 80048d2:	4619      	mov	r1, r3
 80048d4:	f000 fa49 	bl	8004d6a <xQueueGenericCreate>
 80048d8:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 80048da:	4618      	mov	r0, r3
 80048dc:	370c      	adds	r7, #12
 80048de:	46bd      	mov	sp, r7
 80048e0:	bd90      	pop	{r4, r7, pc}
	...

080048e4 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 80048e4:	b580      	push	{r7, lr}
 80048e6:	b086      	sub	sp, #24
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	60f8      	str	r0, [r7, #12]
 80048ec:	60b9      	str	r1, [r7, #8]
 80048ee:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 80048f0:	2300      	movs	r3, #0
 80048f2:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 80048f8:	697b      	ldr	r3, [r7, #20]
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d101      	bne.n	8004902 <osMessagePut+0x1e>
    ticks = 1;
 80048fe:	2301      	movs	r3, #1
 8004900:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8004902:	f7ff fde7 	bl	80044d4 <inHandlerMode>
 8004906:	4603      	mov	r3, r0
 8004908:	2b00      	cmp	r3, #0
 800490a:	d018      	beq.n	800493e <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800490c:	f107 0210 	add.w	r2, r7, #16
 8004910:	f107 0108 	add.w	r1, r7, #8
 8004914:	2300      	movs	r3, #0
 8004916:	68f8      	ldr	r0, [r7, #12]
 8004918:	f000 fbcc 	bl	80050b4 <xQueueGenericSendFromISR>
 800491c:	4603      	mov	r3, r0
 800491e:	2b01      	cmp	r3, #1
 8004920:	d001      	beq.n	8004926 <osMessagePut+0x42>
      return osErrorOS;
 8004922:	23ff      	movs	r3, #255	; 0xff
 8004924:	e018      	b.n	8004958 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8004926:	693b      	ldr	r3, [r7, #16]
 8004928:	2b00      	cmp	r3, #0
 800492a:	d014      	beq.n	8004956 <osMessagePut+0x72>
 800492c:	4b0c      	ldr	r3, [pc, #48]	; (8004960 <osMessagePut+0x7c>)
 800492e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004932:	601a      	str	r2, [r3, #0]
 8004934:	f3bf 8f4f 	dsb	sy
 8004938:	f3bf 8f6f 	isb	sy
 800493c:	e00b      	b.n	8004956 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800493e:	f107 0108 	add.w	r1, r7, #8
 8004942:	2300      	movs	r3, #0
 8004944:	697a      	ldr	r2, [r7, #20]
 8004946:	68f8      	ldr	r0, [r7, #12]
 8004948:	f000 faba 	bl	8004ec0 <xQueueGenericSend>
 800494c:	4603      	mov	r3, r0
 800494e:	2b01      	cmp	r3, #1
 8004950:	d001      	beq.n	8004956 <osMessagePut+0x72>
      return osErrorOS;
 8004952:	23ff      	movs	r3, #255	; 0xff
 8004954:	e000      	b.n	8004958 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8004956:	2300      	movs	r3, #0
}
 8004958:	4618      	mov	r0, r3
 800495a:	3718      	adds	r7, #24
 800495c:	46bd      	mov	sp, r7
 800495e:	bd80      	pop	{r7, pc}
 8004960:	e000ed04 	.word	0xe000ed04

08004964 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8004964:	b590      	push	{r4, r7, lr}
 8004966:	b08b      	sub	sp, #44	; 0x2c
 8004968:	af00      	add	r7, sp, #0
 800496a:	60f8      	str	r0, [r7, #12]
 800496c:	60b9      	str	r1, [r7, #8]
 800496e:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8004970:	68bb      	ldr	r3, [r7, #8]
 8004972:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8004974:	2300      	movs	r3, #0
 8004976:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8004978:	68bb      	ldr	r3, [r7, #8]
 800497a:	2b00      	cmp	r3, #0
 800497c:	d10a      	bne.n	8004994 <osMessageGet+0x30>
    event.status = osErrorParameter;
 800497e:	2380      	movs	r3, #128	; 0x80
 8004980:	617b      	str	r3, [r7, #20]
    return event;
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	461c      	mov	r4, r3
 8004986:	f107 0314 	add.w	r3, r7, #20
 800498a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800498e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8004992:	e054      	b.n	8004a3e <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8004994:	2300      	movs	r3, #0
 8004996:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8004998:	2300      	movs	r3, #0
 800499a:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049a2:	d103      	bne.n	80049ac <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 80049a4:	f04f 33ff 	mov.w	r3, #4294967295
 80049a8:	627b      	str	r3, [r7, #36]	; 0x24
 80049aa:	e009      	b.n	80049c0 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d006      	beq.n	80049c0 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 80049b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d101      	bne.n	80049c0 <osMessageGet+0x5c>
      ticks = 1;
 80049bc:	2301      	movs	r3, #1
 80049be:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 80049c0:	f7ff fd88 	bl	80044d4 <inHandlerMode>
 80049c4:	4603      	mov	r3, r0
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d01c      	beq.n	8004a04 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 80049ca:	f107 0220 	add.w	r2, r7, #32
 80049ce:	f107 0314 	add.w	r3, r7, #20
 80049d2:	3304      	adds	r3, #4
 80049d4:	4619      	mov	r1, r3
 80049d6:	68b8      	ldr	r0, [r7, #8]
 80049d8:	f000 fe6e 	bl	80056b8 <xQueueReceiveFromISR>
 80049dc:	4603      	mov	r3, r0
 80049de:	2b01      	cmp	r3, #1
 80049e0:	d102      	bne.n	80049e8 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 80049e2:	2310      	movs	r3, #16
 80049e4:	617b      	str	r3, [r7, #20]
 80049e6:	e001      	b.n	80049ec <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 80049e8:	2300      	movs	r3, #0
 80049ea:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 80049ec:	6a3b      	ldr	r3, [r7, #32]
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d01d      	beq.n	8004a2e <osMessageGet+0xca>
 80049f2:	4b15      	ldr	r3, [pc, #84]	; (8004a48 <osMessageGet+0xe4>)
 80049f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80049f8:	601a      	str	r2, [r3, #0]
 80049fa:	f3bf 8f4f 	dsb	sy
 80049fe:	f3bf 8f6f 	isb	sy
 8004a02:	e014      	b.n	8004a2e <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8004a04:	f107 0314 	add.w	r3, r7, #20
 8004a08:	3304      	adds	r3, #4
 8004a0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a0c:	4619      	mov	r1, r3
 8004a0e:	68b8      	ldr	r0, [r7, #8]
 8004a10:	f000 fc6e 	bl	80052f0 <xQueueReceive>
 8004a14:	4603      	mov	r3, r0
 8004a16:	2b01      	cmp	r3, #1
 8004a18:	d102      	bne.n	8004a20 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8004a1a:	2310      	movs	r3, #16
 8004a1c:	617b      	str	r3, [r7, #20]
 8004a1e:	e006      	b.n	8004a2e <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8004a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d101      	bne.n	8004a2a <osMessageGet+0xc6>
 8004a26:	2300      	movs	r3, #0
 8004a28:	e000      	b.n	8004a2c <osMessageGet+0xc8>
 8004a2a:	2340      	movs	r3, #64	; 0x40
 8004a2c:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	461c      	mov	r4, r3
 8004a32:	f107 0314 	add.w	r3, r7, #20
 8004a36:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004a3a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8004a3e:	68f8      	ldr	r0, [r7, #12]
 8004a40:	372c      	adds	r7, #44	; 0x2c
 8004a42:	46bd      	mov	sp, r7
 8004a44:	bd90      	pop	{r4, r7, pc}
 8004a46:	bf00      	nop
 8004a48:	e000ed04 	.word	0xe000ed04

08004a4c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004a4c:	b480      	push	{r7}
 8004a4e:	b083      	sub	sp, #12
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	f103 0208 	add.w	r2, r3, #8
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	f04f 32ff 	mov.w	r2, #4294967295
 8004a64:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	f103 0208 	add.w	r2, r3, #8
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	f103 0208 	add.w	r2, r3, #8
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	2200      	movs	r2, #0
 8004a7e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004a80:	bf00      	nop
 8004a82:	370c      	adds	r7, #12
 8004a84:	46bd      	mov	sp, r7
 8004a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8a:	4770      	bx	lr

08004a8c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004a8c:	b480      	push	{r7}
 8004a8e:	b083      	sub	sp, #12
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2200      	movs	r2, #0
 8004a98:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004a9a:	bf00      	nop
 8004a9c:	370c      	adds	r7, #12
 8004a9e:	46bd      	mov	sp, r7
 8004aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa4:	4770      	bx	lr

08004aa6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004aa6:	b480      	push	{r7}
 8004aa8:	b085      	sub	sp, #20
 8004aaa:	af00      	add	r7, sp, #0
 8004aac:	6078      	str	r0, [r7, #4]
 8004aae:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	685b      	ldr	r3, [r3, #4]
 8004ab4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004ab6:	683b      	ldr	r3, [r7, #0]
 8004ab8:	68fa      	ldr	r2, [r7, #12]
 8004aba:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	689a      	ldr	r2, [r3, #8]
 8004ac0:	683b      	ldr	r3, [r7, #0]
 8004ac2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	689b      	ldr	r3, [r3, #8]
 8004ac8:	683a      	ldr	r2, [r7, #0]
 8004aca:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	683a      	ldr	r2, [r7, #0]
 8004ad0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004ad2:	683b      	ldr	r3, [r7, #0]
 8004ad4:	687a      	ldr	r2, [r7, #4]
 8004ad6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	1c5a      	adds	r2, r3, #1
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	601a      	str	r2, [r3, #0]
}
 8004ae2:	bf00      	nop
 8004ae4:	3714      	adds	r7, #20
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aec:	4770      	bx	lr

08004aee <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004aee:	b480      	push	{r7}
 8004af0:	b085      	sub	sp, #20
 8004af2:	af00      	add	r7, sp, #0
 8004af4:	6078      	str	r0, [r7, #4]
 8004af6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004af8:	683b      	ldr	r3, [r7, #0]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004afe:	68bb      	ldr	r3, [r7, #8]
 8004b00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b04:	d103      	bne.n	8004b0e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	691b      	ldr	r3, [r3, #16]
 8004b0a:	60fb      	str	r3, [r7, #12]
 8004b0c:	e00c      	b.n	8004b28 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	3308      	adds	r3, #8
 8004b12:	60fb      	str	r3, [r7, #12]
 8004b14:	e002      	b.n	8004b1c <vListInsert+0x2e>
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	685b      	ldr	r3, [r3, #4]
 8004b1a:	60fb      	str	r3, [r7, #12]
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	685b      	ldr	r3, [r3, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	68ba      	ldr	r2, [r7, #8]
 8004b24:	429a      	cmp	r2, r3
 8004b26:	d2f6      	bcs.n	8004b16 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	685a      	ldr	r2, [r3, #4]
 8004b2c:	683b      	ldr	r3, [r7, #0]
 8004b2e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004b30:	683b      	ldr	r3, [r7, #0]
 8004b32:	685b      	ldr	r3, [r3, #4]
 8004b34:	683a      	ldr	r2, [r7, #0]
 8004b36:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004b38:	683b      	ldr	r3, [r7, #0]
 8004b3a:	68fa      	ldr	r2, [r7, #12]
 8004b3c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	683a      	ldr	r2, [r7, #0]
 8004b42:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004b44:	683b      	ldr	r3, [r7, #0]
 8004b46:	687a      	ldr	r2, [r7, #4]
 8004b48:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	1c5a      	adds	r2, r3, #1
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	601a      	str	r2, [r3, #0]
}
 8004b54:	bf00      	nop
 8004b56:	3714      	adds	r7, #20
 8004b58:	46bd      	mov	sp, r7
 8004b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5e:	4770      	bx	lr

08004b60 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004b60:	b480      	push	{r7}
 8004b62:	b085      	sub	sp, #20
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	691b      	ldr	r3, [r3, #16]
 8004b6c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	685b      	ldr	r3, [r3, #4]
 8004b72:	687a      	ldr	r2, [r7, #4]
 8004b74:	6892      	ldr	r2, [r2, #8]
 8004b76:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	689b      	ldr	r3, [r3, #8]
 8004b7c:	687a      	ldr	r2, [r7, #4]
 8004b7e:	6852      	ldr	r2, [r2, #4]
 8004b80:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	685b      	ldr	r3, [r3, #4]
 8004b86:	687a      	ldr	r2, [r7, #4]
 8004b88:	429a      	cmp	r2, r3
 8004b8a:	d103      	bne.n	8004b94 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	689a      	ldr	r2, [r3, #8]
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	2200      	movs	r2, #0
 8004b98:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	1e5a      	subs	r2, r3, #1
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	681b      	ldr	r3, [r3, #0]
}
 8004ba8:	4618      	mov	r0, r3
 8004baa:	3714      	adds	r7, #20
 8004bac:	46bd      	mov	sp, r7
 8004bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb2:	4770      	bx	lr

08004bb4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004bb4:	b580      	push	{r7, lr}
 8004bb6:	b084      	sub	sp, #16
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	6078      	str	r0, [r7, #4]
 8004bbc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d109      	bne.n	8004bdc <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004bc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bcc:	f383 8811 	msr	BASEPRI, r3
 8004bd0:	f3bf 8f6f 	isb	sy
 8004bd4:	f3bf 8f4f 	dsb	sy
 8004bd8:	60bb      	str	r3, [r7, #8]
 8004bda:	e7fe      	b.n	8004bda <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8004bdc:	f002 f846 	bl	8006c6c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	681a      	ldr	r2, [r3, #0]
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004be8:	68f9      	ldr	r1, [r7, #12]
 8004bea:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004bec:	fb01 f303 	mul.w	r3, r1, r3
 8004bf0:	441a      	add	r2, r3
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	681a      	ldr	r2, [r3, #0]
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	681a      	ldr	r2, [r3, #0]
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c0c:	3b01      	subs	r3, #1
 8004c0e:	68f9      	ldr	r1, [r7, #12]
 8004c10:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004c12:	fb01 f303 	mul.w	r3, r1, r3
 8004c16:	441a      	add	r2, r3
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	22ff      	movs	r2, #255	; 0xff
 8004c20:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	22ff      	movs	r2, #255	; 0xff
 8004c28:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8004c2c:	683b      	ldr	r3, [r7, #0]
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d114      	bne.n	8004c5c <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	691b      	ldr	r3, [r3, #16]
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d01a      	beq.n	8004c70 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	3310      	adds	r3, #16
 8004c3e:	4618      	mov	r0, r3
 8004c40:	f001 fb02 	bl	8006248 <xTaskRemoveFromEventList>
 8004c44:	4603      	mov	r3, r0
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d012      	beq.n	8004c70 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004c4a:	4b0d      	ldr	r3, [pc, #52]	; (8004c80 <xQueueGenericReset+0xcc>)
 8004c4c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c50:	601a      	str	r2, [r3, #0]
 8004c52:	f3bf 8f4f 	dsb	sy
 8004c56:	f3bf 8f6f 	isb	sy
 8004c5a:	e009      	b.n	8004c70 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	3310      	adds	r3, #16
 8004c60:	4618      	mov	r0, r3
 8004c62:	f7ff fef3 	bl	8004a4c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	3324      	adds	r3, #36	; 0x24
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	f7ff feee 	bl	8004a4c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004c70:	f002 f82a 	bl	8006cc8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004c74:	2301      	movs	r3, #1
}
 8004c76:	4618      	mov	r0, r3
 8004c78:	3710      	adds	r7, #16
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	bd80      	pop	{r7, pc}
 8004c7e:	bf00      	nop
 8004c80:	e000ed04 	.word	0xe000ed04

08004c84 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004c84:	b580      	push	{r7, lr}
 8004c86:	b08e      	sub	sp, #56	; 0x38
 8004c88:	af02      	add	r7, sp, #8
 8004c8a:	60f8      	str	r0, [r7, #12]
 8004c8c:	60b9      	str	r1, [r7, #8]
 8004c8e:	607a      	str	r2, [r7, #4]
 8004c90:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d109      	bne.n	8004cac <xQueueGenericCreateStatic+0x28>
 8004c98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c9c:	f383 8811 	msr	BASEPRI, r3
 8004ca0:	f3bf 8f6f 	isb	sy
 8004ca4:	f3bf 8f4f 	dsb	sy
 8004ca8:	62bb      	str	r3, [r7, #40]	; 0x28
 8004caa:	e7fe      	b.n	8004caa <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004cac:	683b      	ldr	r3, [r7, #0]
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d109      	bne.n	8004cc6 <xQueueGenericCreateStatic+0x42>
 8004cb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cb6:	f383 8811 	msr	BASEPRI, r3
 8004cba:	f3bf 8f6f 	isb	sy
 8004cbe:	f3bf 8f4f 	dsb	sy
 8004cc2:	627b      	str	r3, [r7, #36]	; 0x24
 8004cc4:	e7fe      	b.n	8004cc4 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d002      	beq.n	8004cd2 <xQueueGenericCreateStatic+0x4e>
 8004ccc:	68bb      	ldr	r3, [r7, #8]
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d001      	beq.n	8004cd6 <xQueueGenericCreateStatic+0x52>
 8004cd2:	2301      	movs	r3, #1
 8004cd4:	e000      	b.n	8004cd8 <xQueueGenericCreateStatic+0x54>
 8004cd6:	2300      	movs	r3, #0
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d109      	bne.n	8004cf0 <xQueueGenericCreateStatic+0x6c>
 8004cdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ce0:	f383 8811 	msr	BASEPRI, r3
 8004ce4:	f3bf 8f6f 	isb	sy
 8004ce8:	f3bf 8f4f 	dsb	sy
 8004cec:	623b      	str	r3, [r7, #32]
 8004cee:	e7fe      	b.n	8004cee <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d102      	bne.n	8004cfc <xQueueGenericCreateStatic+0x78>
 8004cf6:	68bb      	ldr	r3, [r7, #8]
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d101      	bne.n	8004d00 <xQueueGenericCreateStatic+0x7c>
 8004cfc:	2301      	movs	r3, #1
 8004cfe:	e000      	b.n	8004d02 <xQueueGenericCreateStatic+0x7e>
 8004d00:	2300      	movs	r3, #0
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d109      	bne.n	8004d1a <xQueueGenericCreateStatic+0x96>
 8004d06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d0a:	f383 8811 	msr	BASEPRI, r3
 8004d0e:	f3bf 8f6f 	isb	sy
 8004d12:	f3bf 8f4f 	dsb	sy
 8004d16:	61fb      	str	r3, [r7, #28]
 8004d18:	e7fe      	b.n	8004d18 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004d1a:	2348      	movs	r3, #72	; 0x48
 8004d1c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004d1e:	697b      	ldr	r3, [r7, #20]
 8004d20:	2b48      	cmp	r3, #72	; 0x48
 8004d22:	d009      	beq.n	8004d38 <xQueueGenericCreateStatic+0xb4>
 8004d24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d28:	f383 8811 	msr	BASEPRI, r3
 8004d2c:	f3bf 8f6f 	isb	sy
 8004d30:	f3bf 8f4f 	dsb	sy
 8004d34:	61bb      	str	r3, [r7, #24]
 8004d36:	e7fe      	b.n	8004d36 <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004d38:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004d3a:	683b      	ldr	r3, [r7, #0]
 8004d3c:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8004d3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d00d      	beq.n	8004d60 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004d44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d46:	2201      	movs	r2, #1
 8004d48:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004d4c:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8004d50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d52:	9300      	str	r3, [sp, #0]
 8004d54:	4613      	mov	r3, r2
 8004d56:	687a      	ldr	r2, [r7, #4]
 8004d58:	68b9      	ldr	r1, [r7, #8]
 8004d5a:	68f8      	ldr	r0, [r7, #12]
 8004d5c:	f000 f844 	bl	8004de8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004d60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8004d62:	4618      	mov	r0, r3
 8004d64:	3730      	adds	r7, #48	; 0x30
 8004d66:	46bd      	mov	sp, r7
 8004d68:	bd80      	pop	{r7, pc}

08004d6a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004d6a:	b580      	push	{r7, lr}
 8004d6c:	b08a      	sub	sp, #40	; 0x28
 8004d6e:	af02      	add	r7, sp, #8
 8004d70:	60f8      	str	r0, [r7, #12]
 8004d72:	60b9      	str	r1, [r7, #8]
 8004d74:	4613      	mov	r3, r2
 8004d76:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d109      	bne.n	8004d92 <xQueueGenericCreate+0x28>
 8004d7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d82:	f383 8811 	msr	BASEPRI, r3
 8004d86:	f3bf 8f6f 	isb	sy
 8004d8a:	f3bf 8f4f 	dsb	sy
 8004d8e:	613b      	str	r3, [r7, #16]
 8004d90:	e7fe      	b.n	8004d90 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8004d92:	68bb      	ldr	r3, [r7, #8]
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d102      	bne.n	8004d9e <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8004d98:	2300      	movs	r3, #0
 8004d9a:	61fb      	str	r3, [r7, #28]
 8004d9c:	e004      	b.n	8004da8 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	68ba      	ldr	r2, [r7, #8]
 8004da2:	fb02 f303 	mul.w	r3, r2, r3
 8004da6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004da8:	69fb      	ldr	r3, [r7, #28]
 8004daa:	3348      	adds	r3, #72	; 0x48
 8004dac:	4618      	mov	r0, r3
 8004dae:	f002 f877 	bl	8006ea0 <pvPortMalloc>
 8004db2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8004db4:	69bb      	ldr	r3, [r7, #24]
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d011      	beq.n	8004dde <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8004dba:	69bb      	ldr	r3, [r7, #24]
 8004dbc:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004dbe:	697b      	ldr	r3, [r7, #20]
 8004dc0:	3348      	adds	r3, #72	; 0x48
 8004dc2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004dc4:	69bb      	ldr	r3, [r7, #24]
 8004dc6:	2200      	movs	r2, #0
 8004dc8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004dcc:	79fa      	ldrb	r2, [r7, #7]
 8004dce:	69bb      	ldr	r3, [r7, #24]
 8004dd0:	9300      	str	r3, [sp, #0]
 8004dd2:	4613      	mov	r3, r2
 8004dd4:	697a      	ldr	r2, [r7, #20]
 8004dd6:	68b9      	ldr	r1, [r7, #8]
 8004dd8:	68f8      	ldr	r0, [r7, #12]
 8004dda:	f000 f805 	bl	8004de8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004dde:	69bb      	ldr	r3, [r7, #24]
	}
 8004de0:	4618      	mov	r0, r3
 8004de2:	3720      	adds	r7, #32
 8004de4:	46bd      	mov	sp, r7
 8004de6:	bd80      	pop	{r7, pc}

08004de8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004de8:	b580      	push	{r7, lr}
 8004dea:	b084      	sub	sp, #16
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	60f8      	str	r0, [r7, #12]
 8004df0:	60b9      	str	r1, [r7, #8]
 8004df2:	607a      	str	r2, [r7, #4]
 8004df4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004df6:	68bb      	ldr	r3, [r7, #8]
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d103      	bne.n	8004e04 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004dfc:	69bb      	ldr	r3, [r7, #24]
 8004dfe:	69ba      	ldr	r2, [r7, #24]
 8004e00:	601a      	str	r2, [r3, #0]
 8004e02:	e002      	b.n	8004e0a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004e04:	69bb      	ldr	r3, [r7, #24]
 8004e06:	687a      	ldr	r2, [r7, #4]
 8004e08:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004e0a:	69bb      	ldr	r3, [r7, #24]
 8004e0c:	68fa      	ldr	r2, [r7, #12]
 8004e0e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004e10:	69bb      	ldr	r3, [r7, #24]
 8004e12:	68ba      	ldr	r2, [r7, #8]
 8004e14:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004e16:	2101      	movs	r1, #1
 8004e18:	69b8      	ldr	r0, [r7, #24]
 8004e1a:	f7ff fecb 	bl	8004bb4 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004e1e:	bf00      	nop
 8004e20:	3710      	adds	r7, #16
 8004e22:	46bd      	mov	sp, r7
 8004e24:	bd80      	pop	{r7, pc}

08004e26 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8004e26:	b580      	push	{r7, lr}
 8004e28:	b082      	sub	sp, #8
 8004e2a:	af00      	add	r7, sp, #0
 8004e2c:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d00e      	beq.n	8004e52 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2200      	movs	r2, #0
 8004e38:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	2200      	movs	r2, #0
 8004e3e:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2200      	movs	r2, #0
 8004e44:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8004e46:	2300      	movs	r3, #0
 8004e48:	2200      	movs	r2, #0
 8004e4a:	2100      	movs	r1, #0
 8004e4c:	6878      	ldr	r0, [r7, #4]
 8004e4e:	f000 f837 	bl	8004ec0 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8004e52:	bf00      	nop
 8004e54:	3708      	adds	r7, #8
 8004e56:	46bd      	mov	sp, r7
 8004e58:	bd80      	pop	{r7, pc}

08004e5a <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8004e5a:	b580      	push	{r7, lr}
 8004e5c:	b086      	sub	sp, #24
 8004e5e:	af00      	add	r7, sp, #0
 8004e60:	4603      	mov	r3, r0
 8004e62:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8004e64:	2301      	movs	r3, #1
 8004e66:	617b      	str	r3, [r7, #20]
 8004e68:	2300      	movs	r3, #0
 8004e6a:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8004e6c:	79fb      	ldrb	r3, [r7, #7]
 8004e6e:	461a      	mov	r2, r3
 8004e70:	6939      	ldr	r1, [r7, #16]
 8004e72:	6978      	ldr	r0, [r7, #20]
 8004e74:	f7ff ff79 	bl	8004d6a <xQueueGenericCreate>
 8004e78:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8004e7a:	68f8      	ldr	r0, [r7, #12]
 8004e7c:	f7ff ffd3 	bl	8004e26 <prvInitialiseMutex>

		return xNewQueue;
 8004e80:	68fb      	ldr	r3, [r7, #12]
	}
 8004e82:	4618      	mov	r0, r3
 8004e84:	3718      	adds	r7, #24
 8004e86:	46bd      	mov	sp, r7
 8004e88:	bd80      	pop	{r7, pc}

08004e8a <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8004e8a:	b580      	push	{r7, lr}
 8004e8c:	b088      	sub	sp, #32
 8004e8e:	af02      	add	r7, sp, #8
 8004e90:	4603      	mov	r3, r0
 8004e92:	6039      	str	r1, [r7, #0]
 8004e94:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8004e96:	2301      	movs	r3, #1
 8004e98:	617b      	str	r3, [r7, #20]
 8004e9a:	2300      	movs	r3, #0
 8004e9c:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8004e9e:	79fb      	ldrb	r3, [r7, #7]
 8004ea0:	9300      	str	r3, [sp, #0]
 8004ea2:	683b      	ldr	r3, [r7, #0]
 8004ea4:	2200      	movs	r2, #0
 8004ea6:	6939      	ldr	r1, [r7, #16]
 8004ea8:	6978      	ldr	r0, [r7, #20]
 8004eaa:	f7ff feeb 	bl	8004c84 <xQueueGenericCreateStatic>
 8004eae:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8004eb0:	68f8      	ldr	r0, [r7, #12]
 8004eb2:	f7ff ffb8 	bl	8004e26 <prvInitialiseMutex>

		return xNewQueue;
 8004eb6:	68fb      	ldr	r3, [r7, #12]
	}
 8004eb8:	4618      	mov	r0, r3
 8004eba:	3718      	adds	r7, #24
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	bd80      	pop	{r7, pc}

08004ec0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004ec0:	b580      	push	{r7, lr}
 8004ec2:	b08e      	sub	sp, #56	; 0x38
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	60f8      	str	r0, [r7, #12]
 8004ec8:	60b9      	str	r1, [r7, #8]
 8004eca:	607a      	str	r2, [r7, #4]
 8004ecc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004ece:	2300      	movs	r3, #0
 8004ed0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004ed6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d109      	bne.n	8004ef0 <xQueueGenericSend+0x30>
 8004edc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ee0:	f383 8811 	msr	BASEPRI, r3
 8004ee4:	f3bf 8f6f 	isb	sy
 8004ee8:	f3bf 8f4f 	dsb	sy
 8004eec:	62bb      	str	r3, [r7, #40]	; 0x28
 8004eee:	e7fe      	b.n	8004eee <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004ef0:	68bb      	ldr	r3, [r7, #8]
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d103      	bne.n	8004efe <xQueueGenericSend+0x3e>
 8004ef6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d101      	bne.n	8004f02 <xQueueGenericSend+0x42>
 8004efe:	2301      	movs	r3, #1
 8004f00:	e000      	b.n	8004f04 <xQueueGenericSend+0x44>
 8004f02:	2300      	movs	r3, #0
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d109      	bne.n	8004f1c <xQueueGenericSend+0x5c>
 8004f08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f0c:	f383 8811 	msr	BASEPRI, r3
 8004f10:	f3bf 8f6f 	isb	sy
 8004f14:	f3bf 8f4f 	dsb	sy
 8004f18:	627b      	str	r3, [r7, #36]	; 0x24
 8004f1a:	e7fe      	b.n	8004f1a <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004f1c:	683b      	ldr	r3, [r7, #0]
 8004f1e:	2b02      	cmp	r3, #2
 8004f20:	d103      	bne.n	8004f2a <xQueueGenericSend+0x6a>
 8004f22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f26:	2b01      	cmp	r3, #1
 8004f28:	d101      	bne.n	8004f2e <xQueueGenericSend+0x6e>
 8004f2a:	2301      	movs	r3, #1
 8004f2c:	e000      	b.n	8004f30 <xQueueGenericSend+0x70>
 8004f2e:	2300      	movs	r3, #0
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d109      	bne.n	8004f48 <xQueueGenericSend+0x88>
 8004f34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f38:	f383 8811 	msr	BASEPRI, r3
 8004f3c:	f3bf 8f6f 	isb	sy
 8004f40:	f3bf 8f4f 	dsb	sy
 8004f44:	623b      	str	r3, [r7, #32]
 8004f46:	e7fe      	b.n	8004f46 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004f48:	f001 fb34 	bl	80065b4 <xTaskGetSchedulerState>
 8004f4c:	4603      	mov	r3, r0
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d102      	bne.n	8004f58 <xQueueGenericSend+0x98>
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d101      	bne.n	8004f5c <xQueueGenericSend+0x9c>
 8004f58:	2301      	movs	r3, #1
 8004f5a:	e000      	b.n	8004f5e <xQueueGenericSend+0x9e>
 8004f5c:	2300      	movs	r3, #0
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d109      	bne.n	8004f76 <xQueueGenericSend+0xb6>
 8004f62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f66:	f383 8811 	msr	BASEPRI, r3
 8004f6a:	f3bf 8f6f 	isb	sy
 8004f6e:	f3bf 8f4f 	dsb	sy
 8004f72:	61fb      	str	r3, [r7, #28]
 8004f74:	e7fe      	b.n	8004f74 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004f76:	f001 fe79 	bl	8006c6c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004f7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f7c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004f7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f82:	429a      	cmp	r2, r3
 8004f84:	d302      	bcc.n	8004f8c <xQueueGenericSend+0xcc>
 8004f86:	683b      	ldr	r3, [r7, #0]
 8004f88:	2b02      	cmp	r3, #2
 8004f8a:	d129      	bne.n	8004fe0 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004f8c:	683a      	ldr	r2, [r7, #0]
 8004f8e:	68b9      	ldr	r1, [r7, #8]
 8004f90:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004f92:	f000 fc26 	bl	80057e2 <prvCopyDataToQueue>
 8004f96:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004f98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d010      	beq.n	8004fc2 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004fa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fa2:	3324      	adds	r3, #36	; 0x24
 8004fa4:	4618      	mov	r0, r3
 8004fa6:	f001 f94f 	bl	8006248 <xTaskRemoveFromEventList>
 8004faa:	4603      	mov	r3, r0
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d013      	beq.n	8004fd8 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004fb0:	4b3f      	ldr	r3, [pc, #252]	; (80050b0 <xQueueGenericSend+0x1f0>)
 8004fb2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004fb6:	601a      	str	r2, [r3, #0]
 8004fb8:	f3bf 8f4f 	dsb	sy
 8004fbc:	f3bf 8f6f 	isb	sy
 8004fc0:	e00a      	b.n	8004fd8 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004fc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d007      	beq.n	8004fd8 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004fc8:	4b39      	ldr	r3, [pc, #228]	; (80050b0 <xQueueGenericSend+0x1f0>)
 8004fca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004fce:	601a      	str	r2, [r3, #0]
 8004fd0:	f3bf 8f4f 	dsb	sy
 8004fd4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004fd8:	f001 fe76 	bl	8006cc8 <vPortExitCritical>
				return pdPASS;
 8004fdc:	2301      	movs	r3, #1
 8004fde:	e063      	b.n	80050a8 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d103      	bne.n	8004fee <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004fe6:	f001 fe6f 	bl	8006cc8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004fea:	2300      	movs	r3, #0
 8004fec:	e05c      	b.n	80050a8 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004fee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d106      	bne.n	8005002 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004ff4:	f107 0314 	add.w	r3, r7, #20
 8004ff8:	4618      	mov	r0, r3
 8004ffa:	f001 f987 	bl	800630c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004ffe:	2301      	movs	r3, #1
 8005000:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005002:	f001 fe61 	bl	8006cc8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005006:	f000 ff1d 	bl	8005e44 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800500a:	f001 fe2f 	bl	8006c6c <vPortEnterCritical>
 800500e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005010:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005014:	b25b      	sxtb	r3, r3
 8005016:	f1b3 3fff 	cmp.w	r3, #4294967295
 800501a:	d103      	bne.n	8005024 <xQueueGenericSend+0x164>
 800501c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800501e:	2200      	movs	r2, #0
 8005020:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005024:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005026:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800502a:	b25b      	sxtb	r3, r3
 800502c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005030:	d103      	bne.n	800503a <xQueueGenericSend+0x17a>
 8005032:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005034:	2200      	movs	r2, #0
 8005036:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800503a:	f001 fe45 	bl	8006cc8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800503e:	1d3a      	adds	r2, r7, #4
 8005040:	f107 0314 	add.w	r3, r7, #20
 8005044:	4611      	mov	r1, r2
 8005046:	4618      	mov	r0, r3
 8005048:	f001 f976 	bl	8006338 <xTaskCheckForTimeOut>
 800504c:	4603      	mov	r3, r0
 800504e:	2b00      	cmp	r3, #0
 8005050:	d124      	bne.n	800509c <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005052:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005054:	f000 fcbd 	bl	80059d2 <prvIsQueueFull>
 8005058:	4603      	mov	r3, r0
 800505a:	2b00      	cmp	r3, #0
 800505c:	d018      	beq.n	8005090 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800505e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005060:	3310      	adds	r3, #16
 8005062:	687a      	ldr	r2, [r7, #4]
 8005064:	4611      	mov	r1, r2
 8005066:	4618      	mov	r0, r3
 8005068:	f001 f8ca 	bl	8006200 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800506c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800506e:	f000 fc48 	bl	8005902 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005072:	f000 fef5 	bl	8005e60 <xTaskResumeAll>
 8005076:	4603      	mov	r3, r0
 8005078:	2b00      	cmp	r3, #0
 800507a:	f47f af7c 	bne.w	8004f76 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 800507e:	4b0c      	ldr	r3, [pc, #48]	; (80050b0 <xQueueGenericSend+0x1f0>)
 8005080:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005084:	601a      	str	r2, [r3, #0]
 8005086:	f3bf 8f4f 	dsb	sy
 800508a:	f3bf 8f6f 	isb	sy
 800508e:	e772      	b.n	8004f76 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005090:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005092:	f000 fc36 	bl	8005902 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005096:	f000 fee3 	bl	8005e60 <xTaskResumeAll>
 800509a:	e76c      	b.n	8004f76 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800509c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800509e:	f000 fc30 	bl	8005902 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80050a2:	f000 fedd 	bl	8005e60 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80050a6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80050a8:	4618      	mov	r0, r3
 80050aa:	3738      	adds	r7, #56	; 0x38
 80050ac:	46bd      	mov	sp, r7
 80050ae:	bd80      	pop	{r7, pc}
 80050b0:	e000ed04 	.word	0xe000ed04

080050b4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80050b4:	b580      	push	{r7, lr}
 80050b6:	b08e      	sub	sp, #56	; 0x38
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	60f8      	str	r0, [r7, #12]
 80050bc:	60b9      	str	r1, [r7, #8]
 80050be:	607a      	str	r2, [r7, #4]
 80050c0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80050c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d109      	bne.n	80050e0 <xQueueGenericSendFromISR+0x2c>
 80050cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050d0:	f383 8811 	msr	BASEPRI, r3
 80050d4:	f3bf 8f6f 	isb	sy
 80050d8:	f3bf 8f4f 	dsb	sy
 80050dc:	627b      	str	r3, [r7, #36]	; 0x24
 80050de:	e7fe      	b.n	80050de <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80050e0:	68bb      	ldr	r3, [r7, #8]
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d103      	bne.n	80050ee <xQueueGenericSendFromISR+0x3a>
 80050e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d101      	bne.n	80050f2 <xQueueGenericSendFromISR+0x3e>
 80050ee:	2301      	movs	r3, #1
 80050f0:	e000      	b.n	80050f4 <xQueueGenericSendFromISR+0x40>
 80050f2:	2300      	movs	r3, #0
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d109      	bne.n	800510c <xQueueGenericSendFromISR+0x58>
 80050f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050fc:	f383 8811 	msr	BASEPRI, r3
 8005100:	f3bf 8f6f 	isb	sy
 8005104:	f3bf 8f4f 	dsb	sy
 8005108:	623b      	str	r3, [r7, #32]
 800510a:	e7fe      	b.n	800510a <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800510c:	683b      	ldr	r3, [r7, #0]
 800510e:	2b02      	cmp	r3, #2
 8005110:	d103      	bne.n	800511a <xQueueGenericSendFromISR+0x66>
 8005112:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005114:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005116:	2b01      	cmp	r3, #1
 8005118:	d101      	bne.n	800511e <xQueueGenericSendFromISR+0x6a>
 800511a:	2301      	movs	r3, #1
 800511c:	e000      	b.n	8005120 <xQueueGenericSendFromISR+0x6c>
 800511e:	2300      	movs	r3, #0
 8005120:	2b00      	cmp	r3, #0
 8005122:	d109      	bne.n	8005138 <xQueueGenericSendFromISR+0x84>
 8005124:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005128:	f383 8811 	msr	BASEPRI, r3
 800512c:	f3bf 8f6f 	isb	sy
 8005130:	f3bf 8f4f 	dsb	sy
 8005134:	61fb      	str	r3, [r7, #28]
 8005136:	e7fe      	b.n	8005136 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005138:	f001 fe74 	bl	8006e24 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800513c:	f3ef 8211 	mrs	r2, BASEPRI
 8005140:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005144:	f383 8811 	msr	BASEPRI, r3
 8005148:	f3bf 8f6f 	isb	sy
 800514c:	f3bf 8f4f 	dsb	sy
 8005150:	61ba      	str	r2, [r7, #24]
 8005152:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005154:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005156:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005158:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800515a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800515c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800515e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005160:	429a      	cmp	r2, r3
 8005162:	d302      	bcc.n	800516a <xQueueGenericSendFromISR+0xb6>
 8005164:	683b      	ldr	r3, [r7, #0]
 8005166:	2b02      	cmp	r3, #2
 8005168:	d12c      	bne.n	80051c4 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800516a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800516c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005170:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005174:	683a      	ldr	r2, [r7, #0]
 8005176:	68b9      	ldr	r1, [r7, #8]
 8005178:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800517a:	f000 fb32 	bl	80057e2 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800517e:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8005182:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005186:	d112      	bne.n	80051ae <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005188:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800518a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800518c:	2b00      	cmp	r3, #0
 800518e:	d016      	beq.n	80051be <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005190:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005192:	3324      	adds	r3, #36	; 0x24
 8005194:	4618      	mov	r0, r3
 8005196:	f001 f857 	bl	8006248 <xTaskRemoveFromEventList>
 800519a:	4603      	mov	r3, r0
 800519c:	2b00      	cmp	r3, #0
 800519e:	d00e      	beq.n	80051be <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d00b      	beq.n	80051be <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	2201      	movs	r2, #1
 80051aa:	601a      	str	r2, [r3, #0]
 80051ac:	e007      	b.n	80051be <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80051ae:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80051b2:	3301      	adds	r3, #1
 80051b4:	b2db      	uxtb	r3, r3
 80051b6:	b25a      	sxtb	r2, r3
 80051b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80051be:	2301      	movs	r3, #1
 80051c0:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80051c2:	e001      	b.n	80051c8 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80051c4:	2300      	movs	r3, #0
 80051c6:	637b      	str	r3, [r7, #52]	; 0x34
 80051c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051ca:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80051cc:	693b      	ldr	r3, [r7, #16]
 80051ce:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80051d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80051d4:	4618      	mov	r0, r3
 80051d6:	3738      	adds	r7, #56	; 0x38
 80051d8:	46bd      	mov	sp, r7
 80051da:	bd80      	pop	{r7, pc}

080051dc <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80051dc:	b580      	push	{r7, lr}
 80051de:	b08e      	sub	sp, #56	; 0x38
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	6078      	str	r0, [r7, #4]
 80051e4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80051ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d109      	bne.n	8005204 <xQueueGiveFromISR+0x28>
	__asm volatile
 80051f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051f4:	f383 8811 	msr	BASEPRI, r3
 80051f8:	f3bf 8f6f 	isb	sy
 80051fc:	f3bf 8f4f 	dsb	sy
 8005200:	623b      	str	r3, [r7, #32]
 8005202:	e7fe      	b.n	8005202 <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005204:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005206:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005208:	2b00      	cmp	r3, #0
 800520a:	d009      	beq.n	8005220 <xQueueGiveFromISR+0x44>
 800520c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005210:	f383 8811 	msr	BASEPRI, r3
 8005214:	f3bf 8f6f 	isb	sy
 8005218:	f3bf 8f4f 	dsb	sy
 800521c:	61fb      	str	r3, [r7, #28]
 800521e:	e7fe      	b.n	800521e <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8005220:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	2b00      	cmp	r3, #0
 8005226:	d103      	bne.n	8005230 <xQueueGiveFromISR+0x54>
 8005228:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800522a:	689b      	ldr	r3, [r3, #8]
 800522c:	2b00      	cmp	r3, #0
 800522e:	d101      	bne.n	8005234 <xQueueGiveFromISR+0x58>
 8005230:	2301      	movs	r3, #1
 8005232:	e000      	b.n	8005236 <xQueueGiveFromISR+0x5a>
 8005234:	2300      	movs	r3, #0
 8005236:	2b00      	cmp	r3, #0
 8005238:	d109      	bne.n	800524e <xQueueGiveFromISR+0x72>
 800523a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800523e:	f383 8811 	msr	BASEPRI, r3
 8005242:	f3bf 8f6f 	isb	sy
 8005246:	f3bf 8f4f 	dsb	sy
 800524a:	61bb      	str	r3, [r7, #24]
 800524c:	e7fe      	b.n	800524c <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800524e:	f001 fde9 	bl	8006e24 <vPortValidateInterruptPriority>
	__asm volatile
 8005252:	f3ef 8211 	mrs	r2, BASEPRI
 8005256:	f04f 0350 	mov.w	r3, #80	; 0x50
 800525a:	f383 8811 	msr	BASEPRI, r3
 800525e:	f3bf 8f6f 	isb	sy
 8005262:	f3bf 8f4f 	dsb	sy
 8005266:	617a      	str	r2, [r7, #20]
 8005268:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800526a:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800526c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800526e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005270:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005272:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8005274:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005276:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005278:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800527a:	429a      	cmp	r2, r3
 800527c:	d22b      	bcs.n	80052d6 <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800527e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005280:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005284:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005288:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800528a:	1c5a      	adds	r2, r3, #1
 800528c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800528e:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005290:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005294:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005298:	d112      	bne.n	80052c0 <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800529a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800529c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d016      	beq.n	80052d0 <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80052a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052a4:	3324      	adds	r3, #36	; 0x24
 80052a6:	4618      	mov	r0, r3
 80052a8:	f000 ffce 	bl	8006248 <xTaskRemoveFromEventList>
 80052ac:	4603      	mov	r3, r0
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d00e      	beq.n	80052d0 <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80052b2:	683b      	ldr	r3, [r7, #0]
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d00b      	beq.n	80052d0 <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80052b8:	683b      	ldr	r3, [r7, #0]
 80052ba:	2201      	movs	r2, #1
 80052bc:	601a      	str	r2, [r3, #0]
 80052be:	e007      	b.n	80052d0 <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80052c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80052c4:	3301      	adds	r3, #1
 80052c6:	b2db      	uxtb	r3, r3
 80052c8:	b25a      	sxtb	r2, r3
 80052ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80052d0:	2301      	movs	r3, #1
 80052d2:	637b      	str	r3, [r7, #52]	; 0x34
 80052d4:	e001      	b.n	80052da <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80052d6:	2300      	movs	r3, #0
 80052d8:	637b      	str	r3, [r7, #52]	; 0x34
 80052da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052dc:	60fb      	str	r3, [r7, #12]
	__asm volatile
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80052e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80052e6:	4618      	mov	r0, r3
 80052e8:	3738      	adds	r7, #56	; 0x38
 80052ea:	46bd      	mov	sp, r7
 80052ec:	bd80      	pop	{r7, pc}
	...

080052f0 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80052f0:	b580      	push	{r7, lr}
 80052f2:	b08c      	sub	sp, #48	; 0x30
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	60f8      	str	r0, [r7, #12]
 80052f8:	60b9      	str	r1, [r7, #8]
 80052fa:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80052fc:	2300      	movs	r3, #0
 80052fe:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005304:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005306:	2b00      	cmp	r3, #0
 8005308:	d109      	bne.n	800531e <xQueueReceive+0x2e>
	__asm volatile
 800530a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800530e:	f383 8811 	msr	BASEPRI, r3
 8005312:	f3bf 8f6f 	isb	sy
 8005316:	f3bf 8f4f 	dsb	sy
 800531a:	623b      	str	r3, [r7, #32]
 800531c:	e7fe      	b.n	800531c <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800531e:	68bb      	ldr	r3, [r7, #8]
 8005320:	2b00      	cmp	r3, #0
 8005322:	d103      	bne.n	800532c <xQueueReceive+0x3c>
 8005324:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005326:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005328:	2b00      	cmp	r3, #0
 800532a:	d101      	bne.n	8005330 <xQueueReceive+0x40>
 800532c:	2301      	movs	r3, #1
 800532e:	e000      	b.n	8005332 <xQueueReceive+0x42>
 8005330:	2300      	movs	r3, #0
 8005332:	2b00      	cmp	r3, #0
 8005334:	d109      	bne.n	800534a <xQueueReceive+0x5a>
 8005336:	f04f 0350 	mov.w	r3, #80	; 0x50
 800533a:	f383 8811 	msr	BASEPRI, r3
 800533e:	f3bf 8f6f 	isb	sy
 8005342:	f3bf 8f4f 	dsb	sy
 8005346:	61fb      	str	r3, [r7, #28]
 8005348:	e7fe      	b.n	8005348 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800534a:	f001 f933 	bl	80065b4 <xTaskGetSchedulerState>
 800534e:	4603      	mov	r3, r0
 8005350:	2b00      	cmp	r3, #0
 8005352:	d102      	bne.n	800535a <xQueueReceive+0x6a>
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2b00      	cmp	r3, #0
 8005358:	d101      	bne.n	800535e <xQueueReceive+0x6e>
 800535a:	2301      	movs	r3, #1
 800535c:	e000      	b.n	8005360 <xQueueReceive+0x70>
 800535e:	2300      	movs	r3, #0
 8005360:	2b00      	cmp	r3, #0
 8005362:	d109      	bne.n	8005378 <xQueueReceive+0x88>
 8005364:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005368:	f383 8811 	msr	BASEPRI, r3
 800536c:	f3bf 8f6f 	isb	sy
 8005370:	f3bf 8f4f 	dsb	sy
 8005374:	61bb      	str	r3, [r7, #24]
 8005376:	e7fe      	b.n	8005376 <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005378:	f001 fc78 	bl	8006c6c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800537c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800537e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005380:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005384:	2b00      	cmp	r3, #0
 8005386:	d01f      	beq.n	80053c8 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005388:	68b9      	ldr	r1, [r7, #8]
 800538a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800538c:	f000 fa93 	bl	80058b6 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005392:	1e5a      	subs	r2, r3, #1
 8005394:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005396:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005398:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800539a:	691b      	ldr	r3, [r3, #16]
 800539c:	2b00      	cmp	r3, #0
 800539e:	d00f      	beq.n	80053c0 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80053a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053a2:	3310      	adds	r3, #16
 80053a4:	4618      	mov	r0, r3
 80053a6:	f000 ff4f 	bl	8006248 <xTaskRemoveFromEventList>
 80053aa:	4603      	mov	r3, r0
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d007      	beq.n	80053c0 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80053b0:	4b3c      	ldr	r3, [pc, #240]	; (80054a4 <xQueueReceive+0x1b4>)
 80053b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80053b6:	601a      	str	r2, [r3, #0]
 80053b8:	f3bf 8f4f 	dsb	sy
 80053bc:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80053c0:	f001 fc82 	bl	8006cc8 <vPortExitCritical>
				return pdPASS;
 80053c4:	2301      	movs	r3, #1
 80053c6:	e069      	b.n	800549c <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d103      	bne.n	80053d6 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80053ce:	f001 fc7b 	bl	8006cc8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80053d2:	2300      	movs	r3, #0
 80053d4:	e062      	b.n	800549c <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 80053d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d106      	bne.n	80053ea <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80053dc:	f107 0310 	add.w	r3, r7, #16
 80053e0:	4618      	mov	r0, r3
 80053e2:	f000 ff93 	bl	800630c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80053e6:	2301      	movs	r3, #1
 80053e8:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80053ea:	f001 fc6d 	bl	8006cc8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80053ee:	f000 fd29 	bl	8005e44 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80053f2:	f001 fc3b 	bl	8006c6c <vPortEnterCritical>
 80053f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053f8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80053fc:	b25b      	sxtb	r3, r3
 80053fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005402:	d103      	bne.n	800540c <xQueueReceive+0x11c>
 8005404:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005406:	2200      	movs	r2, #0
 8005408:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800540c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800540e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005412:	b25b      	sxtb	r3, r3
 8005414:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005418:	d103      	bne.n	8005422 <xQueueReceive+0x132>
 800541a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800541c:	2200      	movs	r2, #0
 800541e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005422:	f001 fc51 	bl	8006cc8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005426:	1d3a      	adds	r2, r7, #4
 8005428:	f107 0310 	add.w	r3, r7, #16
 800542c:	4611      	mov	r1, r2
 800542e:	4618      	mov	r0, r3
 8005430:	f000 ff82 	bl	8006338 <xTaskCheckForTimeOut>
 8005434:	4603      	mov	r3, r0
 8005436:	2b00      	cmp	r3, #0
 8005438:	d123      	bne.n	8005482 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800543a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800543c:	f000 fab3 	bl	80059a6 <prvIsQueueEmpty>
 8005440:	4603      	mov	r3, r0
 8005442:	2b00      	cmp	r3, #0
 8005444:	d017      	beq.n	8005476 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005446:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005448:	3324      	adds	r3, #36	; 0x24
 800544a:	687a      	ldr	r2, [r7, #4]
 800544c:	4611      	mov	r1, r2
 800544e:	4618      	mov	r0, r3
 8005450:	f000 fed6 	bl	8006200 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005454:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005456:	f000 fa54 	bl	8005902 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800545a:	f000 fd01 	bl	8005e60 <xTaskResumeAll>
 800545e:	4603      	mov	r3, r0
 8005460:	2b00      	cmp	r3, #0
 8005462:	d189      	bne.n	8005378 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8005464:	4b0f      	ldr	r3, [pc, #60]	; (80054a4 <xQueueReceive+0x1b4>)
 8005466:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800546a:	601a      	str	r2, [r3, #0]
 800546c:	f3bf 8f4f 	dsb	sy
 8005470:	f3bf 8f6f 	isb	sy
 8005474:	e780      	b.n	8005378 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005476:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005478:	f000 fa43 	bl	8005902 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800547c:	f000 fcf0 	bl	8005e60 <xTaskResumeAll>
 8005480:	e77a      	b.n	8005378 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005482:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005484:	f000 fa3d 	bl	8005902 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005488:	f000 fcea 	bl	8005e60 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800548c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800548e:	f000 fa8a 	bl	80059a6 <prvIsQueueEmpty>
 8005492:	4603      	mov	r3, r0
 8005494:	2b00      	cmp	r3, #0
 8005496:	f43f af6f 	beq.w	8005378 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800549a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800549c:	4618      	mov	r0, r3
 800549e:	3730      	adds	r7, #48	; 0x30
 80054a0:	46bd      	mov	sp, r7
 80054a2:	bd80      	pop	{r7, pc}
 80054a4:	e000ed04 	.word	0xe000ed04

080054a8 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80054a8:	b580      	push	{r7, lr}
 80054aa:	b08e      	sub	sp, #56	; 0x38
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	6078      	str	r0, [r7, #4]
 80054b0:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80054b2:	2300      	movs	r3, #0
 80054b4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80054ba:	2300      	movs	r3, #0
 80054bc:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80054be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d109      	bne.n	80054d8 <xQueueSemaphoreTake+0x30>
 80054c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054c8:	f383 8811 	msr	BASEPRI, r3
 80054cc:	f3bf 8f6f 	isb	sy
 80054d0:	f3bf 8f4f 	dsb	sy
 80054d4:	623b      	str	r3, [r7, #32]
 80054d6:	e7fe      	b.n	80054d6 <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80054d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d009      	beq.n	80054f4 <xQueueSemaphoreTake+0x4c>
 80054e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054e4:	f383 8811 	msr	BASEPRI, r3
 80054e8:	f3bf 8f6f 	isb	sy
 80054ec:	f3bf 8f4f 	dsb	sy
 80054f0:	61fb      	str	r3, [r7, #28]
 80054f2:	e7fe      	b.n	80054f2 <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80054f4:	f001 f85e 	bl	80065b4 <xTaskGetSchedulerState>
 80054f8:	4603      	mov	r3, r0
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d102      	bne.n	8005504 <xQueueSemaphoreTake+0x5c>
 80054fe:	683b      	ldr	r3, [r7, #0]
 8005500:	2b00      	cmp	r3, #0
 8005502:	d101      	bne.n	8005508 <xQueueSemaphoreTake+0x60>
 8005504:	2301      	movs	r3, #1
 8005506:	e000      	b.n	800550a <xQueueSemaphoreTake+0x62>
 8005508:	2300      	movs	r3, #0
 800550a:	2b00      	cmp	r3, #0
 800550c:	d109      	bne.n	8005522 <xQueueSemaphoreTake+0x7a>
 800550e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005512:	f383 8811 	msr	BASEPRI, r3
 8005516:	f3bf 8f6f 	isb	sy
 800551a:	f3bf 8f4f 	dsb	sy
 800551e:	61bb      	str	r3, [r7, #24]
 8005520:	e7fe      	b.n	8005520 <xQueueSemaphoreTake+0x78>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005522:	f001 fba3 	bl	8006c6c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8005526:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005528:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800552a:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800552c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800552e:	2b00      	cmp	r3, #0
 8005530:	d024      	beq.n	800557c <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8005532:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005534:	1e5a      	subs	r2, r3, #1
 8005536:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005538:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800553a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	2b00      	cmp	r3, #0
 8005540:	d104      	bne.n	800554c <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8005542:	f001 f9f1 	bl	8006928 <pvTaskIncrementMutexHeldCount>
 8005546:	4602      	mov	r2, r0
 8005548:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800554a:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800554c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800554e:	691b      	ldr	r3, [r3, #16]
 8005550:	2b00      	cmp	r3, #0
 8005552:	d00f      	beq.n	8005574 <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005554:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005556:	3310      	adds	r3, #16
 8005558:	4618      	mov	r0, r3
 800555a:	f000 fe75 	bl	8006248 <xTaskRemoveFromEventList>
 800555e:	4603      	mov	r3, r0
 8005560:	2b00      	cmp	r3, #0
 8005562:	d007      	beq.n	8005574 <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005564:	4b53      	ldr	r3, [pc, #332]	; (80056b4 <xQueueSemaphoreTake+0x20c>)
 8005566:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800556a:	601a      	str	r2, [r3, #0]
 800556c:	f3bf 8f4f 	dsb	sy
 8005570:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005574:	f001 fba8 	bl	8006cc8 <vPortExitCritical>
				return pdPASS;
 8005578:	2301      	movs	r3, #1
 800557a:	e096      	b.n	80056aa <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800557c:	683b      	ldr	r3, [r7, #0]
 800557e:	2b00      	cmp	r3, #0
 8005580:	d110      	bne.n	80055a4 <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8005582:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005584:	2b00      	cmp	r3, #0
 8005586:	d009      	beq.n	800559c <xQueueSemaphoreTake+0xf4>
 8005588:	f04f 0350 	mov.w	r3, #80	; 0x50
 800558c:	f383 8811 	msr	BASEPRI, r3
 8005590:	f3bf 8f6f 	isb	sy
 8005594:	f3bf 8f4f 	dsb	sy
 8005598:	617b      	str	r3, [r7, #20]
 800559a:	e7fe      	b.n	800559a <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800559c:	f001 fb94 	bl	8006cc8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80055a0:	2300      	movs	r3, #0
 80055a2:	e082      	b.n	80056aa <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 80055a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d106      	bne.n	80055b8 <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80055aa:	f107 030c 	add.w	r3, r7, #12
 80055ae:	4618      	mov	r0, r3
 80055b0:	f000 feac 	bl	800630c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80055b4:	2301      	movs	r3, #1
 80055b6:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80055b8:	f001 fb86 	bl	8006cc8 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80055bc:	f000 fc42 	bl	8005e44 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80055c0:	f001 fb54 	bl	8006c6c <vPortEnterCritical>
 80055c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055c6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80055ca:	b25b      	sxtb	r3, r3
 80055cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055d0:	d103      	bne.n	80055da <xQueueSemaphoreTake+0x132>
 80055d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055d4:	2200      	movs	r2, #0
 80055d6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80055da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055dc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80055e0:	b25b      	sxtb	r3, r3
 80055e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055e6:	d103      	bne.n	80055f0 <xQueueSemaphoreTake+0x148>
 80055e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055ea:	2200      	movs	r2, #0
 80055ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80055f0:	f001 fb6a 	bl	8006cc8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80055f4:	463a      	mov	r2, r7
 80055f6:	f107 030c 	add.w	r3, r7, #12
 80055fa:	4611      	mov	r1, r2
 80055fc:	4618      	mov	r0, r3
 80055fe:	f000 fe9b 	bl	8006338 <xTaskCheckForTimeOut>
 8005602:	4603      	mov	r3, r0
 8005604:	2b00      	cmp	r3, #0
 8005606:	d132      	bne.n	800566e <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005608:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800560a:	f000 f9cc 	bl	80059a6 <prvIsQueueEmpty>
 800560e:	4603      	mov	r3, r0
 8005610:	2b00      	cmp	r3, #0
 8005612:	d026      	beq.n	8005662 <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005614:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	2b00      	cmp	r3, #0
 800561a:	d109      	bne.n	8005630 <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 800561c:	f001 fb26 	bl	8006c6c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005620:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005622:	689b      	ldr	r3, [r3, #8]
 8005624:	4618      	mov	r0, r3
 8005626:	f000 ffe3 	bl	80065f0 <xTaskPriorityInherit>
 800562a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800562c:	f001 fb4c 	bl	8006cc8 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005630:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005632:	3324      	adds	r3, #36	; 0x24
 8005634:	683a      	ldr	r2, [r7, #0]
 8005636:	4611      	mov	r1, r2
 8005638:	4618      	mov	r0, r3
 800563a:	f000 fde1 	bl	8006200 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800563e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005640:	f000 f95f 	bl	8005902 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005644:	f000 fc0c 	bl	8005e60 <xTaskResumeAll>
 8005648:	4603      	mov	r3, r0
 800564a:	2b00      	cmp	r3, #0
 800564c:	f47f af69 	bne.w	8005522 <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 8005650:	4b18      	ldr	r3, [pc, #96]	; (80056b4 <xQueueSemaphoreTake+0x20c>)
 8005652:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005656:	601a      	str	r2, [r3, #0]
 8005658:	f3bf 8f4f 	dsb	sy
 800565c:	f3bf 8f6f 	isb	sy
 8005660:	e75f      	b.n	8005522 <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8005662:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005664:	f000 f94d 	bl	8005902 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005668:	f000 fbfa 	bl	8005e60 <xTaskResumeAll>
 800566c:	e759      	b.n	8005522 <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800566e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005670:	f000 f947 	bl	8005902 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005674:	f000 fbf4 	bl	8005e60 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005678:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800567a:	f000 f994 	bl	80059a6 <prvIsQueueEmpty>
 800567e:	4603      	mov	r3, r0
 8005680:	2b00      	cmp	r3, #0
 8005682:	f43f af4e 	beq.w	8005522 <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8005686:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005688:	2b00      	cmp	r3, #0
 800568a:	d00d      	beq.n	80056a8 <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 800568c:	f001 faee 	bl	8006c6c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8005690:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005692:	f000 f88e 	bl	80057b2 <prvGetDisinheritPriorityAfterTimeout>
 8005696:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8005698:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800569a:	689b      	ldr	r3, [r3, #8]
 800569c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800569e:	4618      	mov	r0, r3
 80056a0:	f001 f8aa 	bl	80067f8 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80056a4:	f001 fb10 	bl	8006cc8 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80056a8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80056aa:	4618      	mov	r0, r3
 80056ac:	3738      	adds	r7, #56	; 0x38
 80056ae:	46bd      	mov	sp, r7
 80056b0:	bd80      	pop	{r7, pc}
 80056b2:	bf00      	nop
 80056b4:	e000ed04 	.word	0xe000ed04

080056b8 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80056b8:	b580      	push	{r7, lr}
 80056ba:	b08e      	sub	sp, #56	; 0x38
 80056bc:	af00      	add	r7, sp, #0
 80056be:	60f8      	str	r0, [r7, #12]
 80056c0:	60b9      	str	r1, [r7, #8]
 80056c2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80056c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d109      	bne.n	80056e2 <xQueueReceiveFromISR+0x2a>
 80056ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056d2:	f383 8811 	msr	BASEPRI, r3
 80056d6:	f3bf 8f6f 	isb	sy
 80056da:	f3bf 8f4f 	dsb	sy
 80056de:	623b      	str	r3, [r7, #32]
 80056e0:	e7fe      	b.n	80056e0 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80056e2:	68bb      	ldr	r3, [r7, #8]
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d103      	bne.n	80056f0 <xQueueReceiveFromISR+0x38>
 80056e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d101      	bne.n	80056f4 <xQueueReceiveFromISR+0x3c>
 80056f0:	2301      	movs	r3, #1
 80056f2:	e000      	b.n	80056f6 <xQueueReceiveFromISR+0x3e>
 80056f4:	2300      	movs	r3, #0
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d109      	bne.n	800570e <xQueueReceiveFromISR+0x56>
 80056fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056fe:	f383 8811 	msr	BASEPRI, r3
 8005702:	f3bf 8f6f 	isb	sy
 8005706:	f3bf 8f4f 	dsb	sy
 800570a:	61fb      	str	r3, [r7, #28]
 800570c:	e7fe      	b.n	800570c <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800570e:	f001 fb89 	bl	8006e24 <vPortValidateInterruptPriority>
	__asm volatile
 8005712:	f3ef 8211 	mrs	r2, BASEPRI
 8005716:	f04f 0350 	mov.w	r3, #80	; 0x50
 800571a:	f383 8811 	msr	BASEPRI, r3
 800571e:	f3bf 8f6f 	isb	sy
 8005722:	f3bf 8f4f 	dsb	sy
 8005726:	61ba      	str	r2, [r7, #24]
 8005728:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800572a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800572c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800572e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005730:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005732:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005734:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005736:	2b00      	cmp	r3, #0
 8005738:	d02f      	beq.n	800579a <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800573a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800573c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005740:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005744:	68b9      	ldr	r1, [r7, #8]
 8005746:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005748:	f000 f8b5 	bl	80058b6 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800574c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800574e:	1e5a      	subs	r2, r3, #1
 8005750:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005752:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8005754:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005758:	f1b3 3fff 	cmp.w	r3, #4294967295
 800575c:	d112      	bne.n	8005784 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800575e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005760:	691b      	ldr	r3, [r3, #16]
 8005762:	2b00      	cmp	r3, #0
 8005764:	d016      	beq.n	8005794 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005766:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005768:	3310      	adds	r3, #16
 800576a:	4618      	mov	r0, r3
 800576c:	f000 fd6c 	bl	8006248 <xTaskRemoveFromEventList>
 8005770:	4603      	mov	r3, r0
 8005772:	2b00      	cmp	r3, #0
 8005774:	d00e      	beq.n	8005794 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	2b00      	cmp	r3, #0
 800577a:	d00b      	beq.n	8005794 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	2201      	movs	r2, #1
 8005780:	601a      	str	r2, [r3, #0]
 8005782:	e007      	b.n	8005794 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8005784:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005788:	3301      	adds	r3, #1
 800578a:	b2db      	uxtb	r3, r3
 800578c:	b25a      	sxtb	r2, r3
 800578e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005790:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8005794:	2301      	movs	r3, #1
 8005796:	637b      	str	r3, [r7, #52]	; 0x34
 8005798:	e001      	b.n	800579e <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 800579a:	2300      	movs	r3, #0
 800579c:	637b      	str	r3, [r7, #52]	; 0x34
 800579e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057a0:	613b      	str	r3, [r7, #16]
	__asm volatile
 80057a2:	693b      	ldr	r3, [r7, #16]
 80057a4:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80057a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80057aa:	4618      	mov	r0, r3
 80057ac:	3738      	adds	r7, #56	; 0x38
 80057ae:	46bd      	mov	sp, r7
 80057b0:	bd80      	pop	{r7, pc}

080057b2 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80057b2:	b480      	push	{r7}
 80057b4:	b085      	sub	sp, #20
 80057b6:	af00      	add	r7, sp, #0
 80057b8:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d006      	beq.n	80057d0 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	f1c3 0307 	rsb	r3, r3, #7
 80057cc:	60fb      	str	r3, [r7, #12]
 80057ce:	e001      	b.n	80057d4 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80057d0:	2300      	movs	r3, #0
 80057d2:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80057d4:	68fb      	ldr	r3, [r7, #12]
	}
 80057d6:	4618      	mov	r0, r3
 80057d8:	3714      	adds	r7, #20
 80057da:	46bd      	mov	sp, r7
 80057dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e0:	4770      	bx	lr

080057e2 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80057e2:	b580      	push	{r7, lr}
 80057e4:	b086      	sub	sp, #24
 80057e6:	af00      	add	r7, sp, #0
 80057e8:	60f8      	str	r0, [r7, #12]
 80057ea:	60b9      	str	r1, [r7, #8]
 80057ec:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80057ee:	2300      	movs	r3, #0
 80057f0:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057f6:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d10d      	bne.n	800581c <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	2b00      	cmp	r3, #0
 8005806:	d14d      	bne.n	80058a4 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	689b      	ldr	r3, [r3, #8]
 800580c:	4618      	mov	r0, r3
 800580e:	f000 ff6f 	bl	80066f0 <xTaskPriorityDisinherit>
 8005812:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	2200      	movs	r2, #0
 8005818:	609a      	str	r2, [r3, #8]
 800581a:	e043      	b.n	80058a4 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	2b00      	cmp	r3, #0
 8005820:	d119      	bne.n	8005856 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	6858      	ldr	r0, [r3, #4]
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800582a:	461a      	mov	r2, r3
 800582c:	68b9      	ldr	r1, [r7, #8]
 800582e:	f00d ff5e 	bl	80136ee <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	685a      	ldr	r2, [r3, #4]
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800583a:	441a      	add	r2, r3
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	685a      	ldr	r2, [r3, #4]
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	689b      	ldr	r3, [r3, #8]
 8005848:	429a      	cmp	r2, r3
 800584a:	d32b      	bcc.n	80058a4 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	681a      	ldr	r2, [r3, #0]
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	605a      	str	r2, [r3, #4]
 8005854:	e026      	b.n	80058a4 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	68d8      	ldr	r0, [r3, #12]
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800585e:	461a      	mov	r2, r3
 8005860:	68b9      	ldr	r1, [r7, #8]
 8005862:	f00d ff44 	bl	80136ee <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	68da      	ldr	r2, [r3, #12]
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800586e:	425b      	negs	r3, r3
 8005870:	441a      	add	r2, r3
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	68da      	ldr	r2, [r3, #12]
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	429a      	cmp	r2, r3
 8005880:	d207      	bcs.n	8005892 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	689a      	ldr	r2, [r3, #8]
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800588a:	425b      	negs	r3, r3
 800588c:	441a      	add	r2, r3
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	2b02      	cmp	r3, #2
 8005896:	d105      	bne.n	80058a4 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005898:	693b      	ldr	r3, [r7, #16]
 800589a:	2b00      	cmp	r3, #0
 800589c:	d002      	beq.n	80058a4 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800589e:	693b      	ldr	r3, [r7, #16]
 80058a0:	3b01      	subs	r3, #1
 80058a2:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80058a4:	693b      	ldr	r3, [r7, #16]
 80058a6:	1c5a      	adds	r2, r3, #1
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80058ac:	697b      	ldr	r3, [r7, #20]
}
 80058ae:	4618      	mov	r0, r3
 80058b0:	3718      	adds	r7, #24
 80058b2:	46bd      	mov	sp, r7
 80058b4:	bd80      	pop	{r7, pc}

080058b6 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80058b6:	b580      	push	{r7, lr}
 80058b8:	b082      	sub	sp, #8
 80058ba:	af00      	add	r7, sp, #0
 80058bc:	6078      	str	r0, [r7, #4]
 80058be:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d018      	beq.n	80058fa <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	68da      	ldr	r2, [r3, #12]
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058d0:	441a      	add	r2, r3
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	68da      	ldr	r2, [r3, #12]
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	689b      	ldr	r3, [r3, #8]
 80058de:	429a      	cmp	r2, r3
 80058e0:	d303      	bcc.n	80058ea <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681a      	ldr	r2, [r3, #0]
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	68d9      	ldr	r1, [r3, #12]
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058f2:	461a      	mov	r2, r3
 80058f4:	6838      	ldr	r0, [r7, #0]
 80058f6:	f00d fefa 	bl	80136ee <memcpy>
	}
}
 80058fa:	bf00      	nop
 80058fc:	3708      	adds	r7, #8
 80058fe:	46bd      	mov	sp, r7
 8005900:	bd80      	pop	{r7, pc}

08005902 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005902:	b580      	push	{r7, lr}
 8005904:	b084      	sub	sp, #16
 8005906:	af00      	add	r7, sp, #0
 8005908:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800590a:	f001 f9af 	bl	8006c6c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005914:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005916:	e011      	b.n	800593c <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800591c:	2b00      	cmp	r3, #0
 800591e:	d012      	beq.n	8005946 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	3324      	adds	r3, #36	; 0x24
 8005924:	4618      	mov	r0, r3
 8005926:	f000 fc8f 	bl	8006248 <xTaskRemoveFromEventList>
 800592a:	4603      	mov	r3, r0
 800592c:	2b00      	cmp	r3, #0
 800592e:	d001      	beq.n	8005934 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005930:	f000 fd62 	bl	80063f8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005934:	7bfb      	ldrb	r3, [r7, #15]
 8005936:	3b01      	subs	r3, #1
 8005938:	b2db      	uxtb	r3, r3
 800593a:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800593c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005940:	2b00      	cmp	r3, #0
 8005942:	dce9      	bgt.n	8005918 <prvUnlockQueue+0x16>
 8005944:	e000      	b.n	8005948 <prvUnlockQueue+0x46>
					break;
 8005946:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	22ff      	movs	r2, #255	; 0xff
 800594c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8005950:	f001 f9ba 	bl	8006cc8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005954:	f001 f98a 	bl	8006c6c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800595e:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005960:	e011      	b.n	8005986 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	691b      	ldr	r3, [r3, #16]
 8005966:	2b00      	cmp	r3, #0
 8005968:	d012      	beq.n	8005990 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	3310      	adds	r3, #16
 800596e:	4618      	mov	r0, r3
 8005970:	f000 fc6a 	bl	8006248 <xTaskRemoveFromEventList>
 8005974:	4603      	mov	r3, r0
 8005976:	2b00      	cmp	r3, #0
 8005978:	d001      	beq.n	800597e <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800597a:	f000 fd3d 	bl	80063f8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800597e:	7bbb      	ldrb	r3, [r7, #14]
 8005980:	3b01      	subs	r3, #1
 8005982:	b2db      	uxtb	r3, r3
 8005984:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005986:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800598a:	2b00      	cmp	r3, #0
 800598c:	dce9      	bgt.n	8005962 <prvUnlockQueue+0x60>
 800598e:	e000      	b.n	8005992 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005990:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	22ff      	movs	r2, #255	; 0xff
 8005996:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800599a:	f001 f995 	bl	8006cc8 <vPortExitCritical>
}
 800599e:	bf00      	nop
 80059a0:	3710      	adds	r7, #16
 80059a2:	46bd      	mov	sp, r7
 80059a4:	bd80      	pop	{r7, pc}

080059a6 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80059a6:	b580      	push	{r7, lr}
 80059a8:	b084      	sub	sp, #16
 80059aa:	af00      	add	r7, sp, #0
 80059ac:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80059ae:	f001 f95d 	bl	8006c6c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d102      	bne.n	80059c0 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80059ba:	2301      	movs	r3, #1
 80059bc:	60fb      	str	r3, [r7, #12]
 80059be:	e001      	b.n	80059c4 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80059c0:	2300      	movs	r3, #0
 80059c2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80059c4:	f001 f980 	bl	8006cc8 <vPortExitCritical>

	return xReturn;
 80059c8:	68fb      	ldr	r3, [r7, #12]
}
 80059ca:	4618      	mov	r0, r3
 80059cc:	3710      	adds	r7, #16
 80059ce:	46bd      	mov	sp, r7
 80059d0:	bd80      	pop	{r7, pc}

080059d2 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80059d2:	b580      	push	{r7, lr}
 80059d4:	b084      	sub	sp, #16
 80059d6:	af00      	add	r7, sp, #0
 80059d8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80059da:	f001 f947 	bl	8006c6c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059e6:	429a      	cmp	r2, r3
 80059e8:	d102      	bne.n	80059f0 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80059ea:	2301      	movs	r3, #1
 80059ec:	60fb      	str	r3, [r7, #12]
 80059ee:	e001      	b.n	80059f4 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80059f0:	2300      	movs	r3, #0
 80059f2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80059f4:	f001 f968 	bl	8006cc8 <vPortExitCritical>

	return xReturn;
 80059f8:	68fb      	ldr	r3, [r7, #12]
}
 80059fa:	4618      	mov	r0, r3
 80059fc:	3710      	adds	r7, #16
 80059fe:	46bd      	mov	sp, r7
 8005a00:	bd80      	pop	{r7, pc}

08005a02 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005a02:	b580      	push	{r7, lr}
 8005a04:	b08e      	sub	sp, #56	; 0x38
 8005a06:	af04      	add	r7, sp, #16
 8005a08:	60f8      	str	r0, [r7, #12]
 8005a0a:	60b9      	str	r1, [r7, #8]
 8005a0c:	607a      	str	r2, [r7, #4]
 8005a0e:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005a10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d109      	bne.n	8005a2a <xTaskCreateStatic+0x28>
	__asm volatile
 8005a16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a1a:	f383 8811 	msr	BASEPRI, r3
 8005a1e:	f3bf 8f6f 	isb	sy
 8005a22:	f3bf 8f4f 	dsb	sy
 8005a26:	623b      	str	r3, [r7, #32]
 8005a28:	e7fe      	b.n	8005a28 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8005a2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d109      	bne.n	8005a44 <xTaskCreateStatic+0x42>
 8005a30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a34:	f383 8811 	msr	BASEPRI, r3
 8005a38:	f3bf 8f6f 	isb	sy
 8005a3c:	f3bf 8f4f 	dsb	sy
 8005a40:	61fb      	str	r3, [r7, #28]
 8005a42:	e7fe      	b.n	8005a42 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005a44:	2354      	movs	r3, #84	; 0x54
 8005a46:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005a48:	693b      	ldr	r3, [r7, #16]
 8005a4a:	2b54      	cmp	r3, #84	; 0x54
 8005a4c:	d009      	beq.n	8005a62 <xTaskCreateStatic+0x60>
 8005a4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a52:	f383 8811 	msr	BASEPRI, r3
 8005a56:	f3bf 8f6f 	isb	sy
 8005a5a:	f3bf 8f4f 	dsb	sy
 8005a5e:	61bb      	str	r3, [r7, #24]
 8005a60:	e7fe      	b.n	8005a60 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005a62:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005a64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d01e      	beq.n	8005aa8 <xTaskCreateStatic+0xa6>
 8005a6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d01b      	beq.n	8005aa8 <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005a70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a72:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a76:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005a78:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a7c:	2202      	movs	r2, #2
 8005a7e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005a82:	2300      	movs	r3, #0
 8005a84:	9303      	str	r3, [sp, #12]
 8005a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a88:	9302      	str	r3, [sp, #8]
 8005a8a:	f107 0314 	add.w	r3, r7, #20
 8005a8e:	9301      	str	r3, [sp, #4]
 8005a90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a92:	9300      	str	r3, [sp, #0]
 8005a94:	683b      	ldr	r3, [r7, #0]
 8005a96:	687a      	ldr	r2, [r7, #4]
 8005a98:	68b9      	ldr	r1, [r7, #8]
 8005a9a:	68f8      	ldr	r0, [r7, #12]
 8005a9c:	f000 f850 	bl	8005b40 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005aa0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005aa2:	f000 f8d3 	bl	8005c4c <prvAddNewTaskToReadyList>
 8005aa6:	e001      	b.n	8005aac <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 8005aa8:	2300      	movs	r3, #0
 8005aaa:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005aac:	697b      	ldr	r3, [r7, #20]
	}
 8005aae:	4618      	mov	r0, r3
 8005ab0:	3728      	adds	r7, #40	; 0x28
 8005ab2:	46bd      	mov	sp, r7
 8005ab4:	bd80      	pop	{r7, pc}

08005ab6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005ab6:	b580      	push	{r7, lr}
 8005ab8:	b08c      	sub	sp, #48	; 0x30
 8005aba:	af04      	add	r7, sp, #16
 8005abc:	60f8      	str	r0, [r7, #12]
 8005abe:	60b9      	str	r1, [r7, #8]
 8005ac0:	603b      	str	r3, [r7, #0]
 8005ac2:	4613      	mov	r3, r2
 8005ac4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005ac6:	88fb      	ldrh	r3, [r7, #6]
 8005ac8:	009b      	lsls	r3, r3, #2
 8005aca:	4618      	mov	r0, r3
 8005acc:	f001 f9e8 	bl	8006ea0 <pvPortMalloc>
 8005ad0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005ad2:	697b      	ldr	r3, [r7, #20]
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d00e      	beq.n	8005af6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005ad8:	2054      	movs	r0, #84	; 0x54
 8005ada:	f001 f9e1 	bl	8006ea0 <pvPortMalloc>
 8005ade:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005ae0:	69fb      	ldr	r3, [r7, #28]
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d003      	beq.n	8005aee <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005ae6:	69fb      	ldr	r3, [r7, #28]
 8005ae8:	697a      	ldr	r2, [r7, #20]
 8005aea:	631a      	str	r2, [r3, #48]	; 0x30
 8005aec:	e005      	b.n	8005afa <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005aee:	6978      	ldr	r0, [r7, #20]
 8005af0:	f001 fa98 	bl	8007024 <vPortFree>
 8005af4:	e001      	b.n	8005afa <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005af6:	2300      	movs	r3, #0
 8005af8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005afa:	69fb      	ldr	r3, [r7, #28]
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d017      	beq.n	8005b30 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005b00:	69fb      	ldr	r3, [r7, #28]
 8005b02:	2200      	movs	r2, #0
 8005b04:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005b08:	88fa      	ldrh	r2, [r7, #6]
 8005b0a:	2300      	movs	r3, #0
 8005b0c:	9303      	str	r3, [sp, #12]
 8005b0e:	69fb      	ldr	r3, [r7, #28]
 8005b10:	9302      	str	r3, [sp, #8]
 8005b12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b14:	9301      	str	r3, [sp, #4]
 8005b16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b18:	9300      	str	r3, [sp, #0]
 8005b1a:	683b      	ldr	r3, [r7, #0]
 8005b1c:	68b9      	ldr	r1, [r7, #8]
 8005b1e:	68f8      	ldr	r0, [r7, #12]
 8005b20:	f000 f80e 	bl	8005b40 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005b24:	69f8      	ldr	r0, [r7, #28]
 8005b26:	f000 f891 	bl	8005c4c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005b2a:	2301      	movs	r3, #1
 8005b2c:	61bb      	str	r3, [r7, #24]
 8005b2e:	e002      	b.n	8005b36 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005b30:	f04f 33ff 	mov.w	r3, #4294967295
 8005b34:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005b36:	69bb      	ldr	r3, [r7, #24]
	}
 8005b38:	4618      	mov	r0, r3
 8005b3a:	3720      	adds	r7, #32
 8005b3c:	46bd      	mov	sp, r7
 8005b3e:	bd80      	pop	{r7, pc}

08005b40 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005b40:	b580      	push	{r7, lr}
 8005b42:	b088      	sub	sp, #32
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	60f8      	str	r0, [r7, #12]
 8005b48:	60b9      	str	r1, [r7, #8]
 8005b4a:	607a      	str	r2, [r7, #4]
 8005b4c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005b4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b50:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005b58:	3b01      	subs	r3, #1
 8005b5a:	009b      	lsls	r3, r3, #2
 8005b5c:	4413      	add	r3, r2
 8005b5e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005b60:	69bb      	ldr	r3, [r7, #24]
 8005b62:	f023 0307 	bic.w	r3, r3, #7
 8005b66:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005b68:	69bb      	ldr	r3, [r7, #24]
 8005b6a:	f003 0307 	and.w	r3, r3, #7
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d009      	beq.n	8005b86 <prvInitialiseNewTask+0x46>
 8005b72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b76:	f383 8811 	msr	BASEPRI, r3
 8005b7a:	f3bf 8f6f 	isb	sy
 8005b7e:	f3bf 8f4f 	dsb	sy
 8005b82:	617b      	str	r3, [r7, #20]
 8005b84:	e7fe      	b.n	8005b84 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005b86:	68bb      	ldr	r3, [r7, #8]
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d01f      	beq.n	8005bcc <prvInitialiseNewTask+0x8c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005b8c:	2300      	movs	r3, #0
 8005b8e:	61fb      	str	r3, [r7, #28]
 8005b90:	e012      	b.n	8005bb8 <prvInitialiseNewTask+0x78>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005b92:	68ba      	ldr	r2, [r7, #8]
 8005b94:	69fb      	ldr	r3, [r7, #28]
 8005b96:	4413      	add	r3, r2
 8005b98:	7819      	ldrb	r1, [r3, #0]
 8005b9a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005b9c:	69fb      	ldr	r3, [r7, #28]
 8005b9e:	4413      	add	r3, r2
 8005ba0:	3334      	adds	r3, #52	; 0x34
 8005ba2:	460a      	mov	r2, r1
 8005ba4:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005ba6:	68ba      	ldr	r2, [r7, #8]
 8005ba8:	69fb      	ldr	r3, [r7, #28]
 8005baa:	4413      	add	r3, r2
 8005bac:	781b      	ldrb	r3, [r3, #0]
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d006      	beq.n	8005bc0 <prvInitialiseNewTask+0x80>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005bb2:	69fb      	ldr	r3, [r7, #28]
 8005bb4:	3301      	adds	r3, #1
 8005bb6:	61fb      	str	r3, [r7, #28]
 8005bb8:	69fb      	ldr	r3, [r7, #28]
 8005bba:	2b0f      	cmp	r3, #15
 8005bbc:	d9e9      	bls.n	8005b92 <prvInitialiseNewTask+0x52>
 8005bbe:	e000      	b.n	8005bc2 <prvInitialiseNewTask+0x82>
			{
				break;
 8005bc0:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005bc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bc4:	2200      	movs	r2, #0
 8005bc6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005bca:	e003      	b.n	8005bd4 <prvInitialiseNewTask+0x94>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005bcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bce:	2200      	movs	r2, #0
 8005bd0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005bd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bd6:	2b06      	cmp	r3, #6
 8005bd8:	d901      	bls.n	8005bde <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005bda:	2306      	movs	r3, #6
 8005bdc:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005bde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005be0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005be2:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005be4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005be6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005be8:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8005bea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bec:	2200      	movs	r2, #0
 8005bee:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005bf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bf2:	3304      	adds	r3, #4
 8005bf4:	4618      	mov	r0, r3
 8005bf6:	f7fe ff49 	bl	8004a8c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005bfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bfc:	3318      	adds	r3, #24
 8005bfe:	4618      	mov	r0, r3
 8005c00:	f7fe ff44 	bl	8004a8c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005c04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c06:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005c08:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005c0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c0c:	f1c3 0207 	rsb	r2, r3, #7
 8005c10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c12:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005c14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c16:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005c18:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005c1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c1c:	2200      	movs	r2, #0
 8005c1e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005c20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c22:	2200      	movs	r2, #0
 8005c24:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005c28:	683a      	ldr	r2, [r7, #0]
 8005c2a:	68f9      	ldr	r1, [r7, #12]
 8005c2c:	69b8      	ldr	r0, [r7, #24]
 8005c2e:	f000 fef5 	bl	8006a1c <pxPortInitialiseStack>
 8005c32:	4602      	mov	r2, r0
 8005c34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c36:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005c38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d002      	beq.n	8005c44 <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005c3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c40:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005c42:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005c44:	bf00      	nop
 8005c46:	3720      	adds	r7, #32
 8005c48:	46bd      	mov	sp, r7
 8005c4a:	bd80      	pop	{r7, pc}

08005c4c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005c4c:	b580      	push	{r7, lr}
 8005c4e:	b082      	sub	sp, #8
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005c54:	f001 f80a 	bl	8006c6c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005c58:	4b2a      	ldr	r3, [pc, #168]	; (8005d04 <prvAddNewTaskToReadyList+0xb8>)
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	3301      	adds	r3, #1
 8005c5e:	4a29      	ldr	r2, [pc, #164]	; (8005d04 <prvAddNewTaskToReadyList+0xb8>)
 8005c60:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005c62:	4b29      	ldr	r3, [pc, #164]	; (8005d08 <prvAddNewTaskToReadyList+0xbc>)
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d109      	bne.n	8005c7e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005c6a:	4a27      	ldr	r2, [pc, #156]	; (8005d08 <prvAddNewTaskToReadyList+0xbc>)
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005c70:	4b24      	ldr	r3, [pc, #144]	; (8005d04 <prvAddNewTaskToReadyList+0xb8>)
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	2b01      	cmp	r3, #1
 8005c76:	d110      	bne.n	8005c9a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005c78:	f000 fbe2 	bl	8006440 <prvInitialiseTaskLists>
 8005c7c:	e00d      	b.n	8005c9a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005c7e:	4b23      	ldr	r3, [pc, #140]	; (8005d0c <prvAddNewTaskToReadyList+0xc0>)
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d109      	bne.n	8005c9a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005c86:	4b20      	ldr	r3, [pc, #128]	; (8005d08 <prvAddNewTaskToReadyList+0xbc>)
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c90:	429a      	cmp	r2, r3
 8005c92:	d802      	bhi.n	8005c9a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005c94:	4a1c      	ldr	r2, [pc, #112]	; (8005d08 <prvAddNewTaskToReadyList+0xbc>)
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005c9a:	4b1d      	ldr	r3, [pc, #116]	; (8005d10 <prvAddNewTaskToReadyList+0xc4>)
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	3301      	adds	r3, #1
 8005ca0:	4a1b      	ldr	r2, [pc, #108]	; (8005d10 <prvAddNewTaskToReadyList+0xc4>)
 8005ca2:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ca8:	2201      	movs	r2, #1
 8005caa:	409a      	lsls	r2, r3
 8005cac:	4b19      	ldr	r3, [pc, #100]	; (8005d14 <prvAddNewTaskToReadyList+0xc8>)
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	4313      	orrs	r3, r2
 8005cb2:	4a18      	ldr	r2, [pc, #96]	; (8005d14 <prvAddNewTaskToReadyList+0xc8>)
 8005cb4:	6013      	str	r3, [r2, #0]
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005cba:	4613      	mov	r3, r2
 8005cbc:	009b      	lsls	r3, r3, #2
 8005cbe:	4413      	add	r3, r2
 8005cc0:	009b      	lsls	r3, r3, #2
 8005cc2:	4a15      	ldr	r2, [pc, #84]	; (8005d18 <prvAddNewTaskToReadyList+0xcc>)
 8005cc4:	441a      	add	r2, r3
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	3304      	adds	r3, #4
 8005cca:	4619      	mov	r1, r3
 8005ccc:	4610      	mov	r0, r2
 8005cce:	f7fe feea 	bl	8004aa6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005cd2:	f000 fff9 	bl	8006cc8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005cd6:	4b0d      	ldr	r3, [pc, #52]	; (8005d0c <prvAddNewTaskToReadyList+0xc0>)
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d00e      	beq.n	8005cfc <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005cde:	4b0a      	ldr	r3, [pc, #40]	; (8005d08 <prvAddNewTaskToReadyList+0xbc>)
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ce8:	429a      	cmp	r2, r3
 8005cea:	d207      	bcs.n	8005cfc <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005cec:	4b0b      	ldr	r3, [pc, #44]	; (8005d1c <prvAddNewTaskToReadyList+0xd0>)
 8005cee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005cf2:	601a      	str	r2, [r3, #0]
 8005cf4:	f3bf 8f4f 	dsb	sy
 8005cf8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005cfc:	bf00      	nop
 8005cfe:	3708      	adds	r7, #8
 8005d00:	46bd      	mov	sp, r7
 8005d02:	bd80      	pop	{r7, pc}
 8005d04:	20000400 	.word	0x20000400
 8005d08:	20000300 	.word	0x20000300
 8005d0c:	2000040c 	.word	0x2000040c
 8005d10:	2000041c 	.word	0x2000041c
 8005d14:	20000408 	.word	0x20000408
 8005d18:	20000304 	.word	0x20000304
 8005d1c:	e000ed04 	.word	0xe000ed04

08005d20 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005d20:	b580      	push	{r7, lr}
 8005d22:	b084      	sub	sp, #16
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005d28:	2300      	movs	r3, #0
 8005d2a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d016      	beq.n	8005d60 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005d32:	4b13      	ldr	r3, [pc, #76]	; (8005d80 <vTaskDelay+0x60>)
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d009      	beq.n	8005d4e <vTaskDelay+0x2e>
 8005d3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d3e:	f383 8811 	msr	BASEPRI, r3
 8005d42:	f3bf 8f6f 	isb	sy
 8005d46:	f3bf 8f4f 	dsb	sy
 8005d4a:	60bb      	str	r3, [r7, #8]
 8005d4c:	e7fe      	b.n	8005d4c <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8005d4e:	f000 f879 	bl	8005e44 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005d52:	2100      	movs	r1, #0
 8005d54:	6878      	ldr	r0, [r7, #4]
 8005d56:	f000 fdfb 	bl	8006950 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005d5a:	f000 f881 	bl	8005e60 <xTaskResumeAll>
 8005d5e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d107      	bne.n	8005d76 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8005d66:	4b07      	ldr	r3, [pc, #28]	; (8005d84 <vTaskDelay+0x64>)
 8005d68:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d6c:	601a      	str	r2, [r3, #0]
 8005d6e:	f3bf 8f4f 	dsb	sy
 8005d72:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005d76:	bf00      	nop
 8005d78:	3710      	adds	r7, #16
 8005d7a:	46bd      	mov	sp, r7
 8005d7c:	bd80      	pop	{r7, pc}
 8005d7e:	bf00      	nop
 8005d80:	20000428 	.word	0x20000428
 8005d84:	e000ed04 	.word	0xe000ed04

08005d88 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005d88:	b580      	push	{r7, lr}
 8005d8a:	b08a      	sub	sp, #40	; 0x28
 8005d8c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005d8e:	2300      	movs	r3, #0
 8005d90:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005d92:	2300      	movs	r3, #0
 8005d94:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005d96:	463a      	mov	r2, r7
 8005d98:	1d39      	adds	r1, r7, #4
 8005d9a:	f107 0308 	add.w	r3, r7, #8
 8005d9e:	4618      	mov	r0, r3
 8005da0:	f7fa fbf6 	bl	8000590 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005da4:	6839      	ldr	r1, [r7, #0]
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	68ba      	ldr	r2, [r7, #8]
 8005daa:	9202      	str	r2, [sp, #8]
 8005dac:	9301      	str	r3, [sp, #4]
 8005dae:	2300      	movs	r3, #0
 8005db0:	9300      	str	r3, [sp, #0]
 8005db2:	2300      	movs	r3, #0
 8005db4:	460a      	mov	r2, r1
 8005db6:	491d      	ldr	r1, [pc, #116]	; (8005e2c <vTaskStartScheduler+0xa4>)
 8005db8:	481d      	ldr	r0, [pc, #116]	; (8005e30 <vTaskStartScheduler+0xa8>)
 8005dba:	f7ff fe22 	bl	8005a02 <xTaskCreateStatic>
 8005dbe:	4602      	mov	r2, r0
 8005dc0:	4b1c      	ldr	r3, [pc, #112]	; (8005e34 <vTaskStartScheduler+0xac>)
 8005dc2:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005dc4:	4b1b      	ldr	r3, [pc, #108]	; (8005e34 <vTaskStartScheduler+0xac>)
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d002      	beq.n	8005dd2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005dcc:	2301      	movs	r3, #1
 8005dce:	617b      	str	r3, [r7, #20]
 8005dd0:	e001      	b.n	8005dd6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005dd2:	2300      	movs	r3, #0
 8005dd4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005dd6:	697b      	ldr	r3, [r7, #20]
 8005dd8:	2b01      	cmp	r3, #1
 8005dda:	d115      	bne.n	8005e08 <vTaskStartScheduler+0x80>
 8005ddc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005de0:	f383 8811 	msr	BASEPRI, r3
 8005de4:	f3bf 8f6f 	isb	sy
 8005de8:	f3bf 8f4f 	dsb	sy
 8005dec:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005dee:	4b12      	ldr	r3, [pc, #72]	; (8005e38 <vTaskStartScheduler+0xb0>)
 8005df0:	f04f 32ff 	mov.w	r2, #4294967295
 8005df4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005df6:	4b11      	ldr	r3, [pc, #68]	; (8005e3c <vTaskStartScheduler+0xb4>)
 8005df8:	2201      	movs	r2, #1
 8005dfa:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005dfc:	4b10      	ldr	r3, [pc, #64]	; (8005e40 <vTaskStartScheduler+0xb8>)
 8005dfe:	2200      	movs	r2, #0
 8005e00:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005e02:	f000 fe95 	bl	8006b30 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005e06:	e00d      	b.n	8005e24 <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005e08:	697b      	ldr	r3, [r7, #20]
 8005e0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e0e:	d109      	bne.n	8005e24 <vTaskStartScheduler+0x9c>
 8005e10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e14:	f383 8811 	msr	BASEPRI, r3
 8005e18:	f3bf 8f6f 	isb	sy
 8005e1c:	f3bf 8f4f 	dsb	sy
 8005e20:	60fb      	str	r3, [r7, #12]
 8005e22:	e7fe      	b.n	8005e22 <vTaskStartScheduler+0x9a>
}
 8005e24:	bf00      	nop
 8005e26:	3718      	adds	r7, #24
 8005e28:	46bd      	mov	sp, r7
 8005e2a:	bd80      	pop	{r7, pc}
 8005e2c:	08014630 	.word	0x08014630
 8005e30:	08006411 	.word	0x08006411
 8005e34:	20000424 	.word	0x20000424
 8005e38:	20000420 	.word	0x20000420
 8005e3c:	2000040c 	.word	0x2000040c
 8005e40:	20000404 	.word	0x20000404

08005e44 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005e44:	b480      	push	{r7}
 8005e46:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8005e48:	4b04      	ldr	r3, [pc, #16]	; (8005e5c <vTaskSuspendAll+0x18>)
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	3301      	adds	r3, #1
 8005e4e:	4a03      	ldr	r2, [pc, #12]	; (8005e5c <vTaskSuspendAll+0x18>)
 8005e50:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8005e52:	bf00      	nop
 8005e54:	46bd      	mov	sp, r7
 8005e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e5a:	4770      	bx	lr
 8005e5c:	20000428 	.word	0x20000428

08005e60 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005e60:	b580      	push	{r7, lr}
 8005e62:	b084      	sub	sp, #16
 8005e64:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005e66:	2300      	movs	r3, #0
 8005e68:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005e6a:	2300      	movs	r3, #0
 8005e6c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005e6e:	4b41      	ldr	r3, [pc, #260]	; (8005f74 <xTaskResumeAll+0x114>)
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d109      	bne.n	8005e8a <xTaskResumeAll+0x2a>
 8005e76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e7a:	f383 8811 	msr	BASEPRI, r3
 8005e7e:	f3bf 8f6f 	isb	sy
 8005e82:	f3bf 8f4f 	dsb	sy
 8005e86:	603b      	str	r3, [r7, #0]
 8005e88:	e7fe      	b.n	8005e88 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005e8a:	f000 feef 	bl	8006c6c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005e8e:	4b39      	ldr	r3, [pc, #228]	; (8005f74 <xTaskResumeAll+0x114>)
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	3b01      	subs	r3, #1
 8005e94:	4a37      	ldr	r2, [pc, #220]	; (8005f74 <xTaskResumeAll+0x114>)
 8005e96:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005e98:	4b36      	ldr	r3, [pc, #216]	; (8005f74 <xTaskResumeAll+0x114>)
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d161      	bne.n	8005f64 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005ea0:	4b35      	ldr	r3, [pc, #212]	; (8005f78 <xTaskResumeAll+0x118>)
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d05d      	beq.n	8005f64 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005ea8:	e02e      	b.n	8005f08 <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005eaa:	4b34      	ldr	r3, [pc, #208]	; (8005f7c <xTaskResumeAll+0x11c>)
 8005eac:	68db      	ldr	r3, [r3, #12]
 8005eae:	68db      	ldr	r3, [r3, #12]
 8005eb0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	3318      	adds	r3, #24
 8005eb6:	4618      	mov	r0, r3
 8005eb8:	f7fe fe52 	bl	8004b60 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	3304      	adds	r3, #4
 8005ec0:	4618      	mov	r0, r3
 8005ec2:	f7fe fe4d 	bl	8004b60 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005eca:	2201      	movs	r2, #1
 8005ecc:	409a      	lsls	r2, r3
 8005ece:	4b2c      	ldr	r3, [pc, #176]	; (8005f80 <xTaskResumeAll+0x120>)
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	4313      	orrs	r3, r2
 8005ed4:	4a2a      	ldr	r2, [pc, #168]	; (8005f80 <xTaskResumeAll+0x120>)
 8005ed6:	6013      	str	r3, [r2, #0]
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005edc:	4613      	mov	r3, r2
 8005ede:	009b      	lsls	r3, r3, #2
 8005ee0:	4413      	add	r3, r2
 8005ee2:	009b      	lsls	r3, r3, #2
 8005ee4:	4a27      	ldr	r2, [pc, #156]	; (8005f84 <xTaskResumeAll+0x124>)
 8005ee6:	441a      	add	r2, r3
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	3304      	adds	r3, #4
 8005eec:	4619      	mov	r1, r3
 8005eee:	4610      	mov	r0, r2
 8005ef0:	f7fe fdd9 	bl	8004aa6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ef8:	4b23      	ldr	r3, [pc, #140]	; (8005f88 <xTaskResumeAll+0x128>)
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005efe:	429a      	cmp	r2, r3
 8005f00:	d302      	bcc.n	8005f08 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 8005f02:	4b22      	ldr	r3, [pc, #136]	; (8005f8c <xTaskResumeAll+0x12c>)
 8005f04:	2201      	movs	r2, #1
 8005f06:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005f08:	4b1c      	ldr	r3, [pc, #112]	; (8005f7c <xTaskResumeAll+0x11c>)
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d1cc      	bne.n	8005eaa <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d001      	beq.n	8005f1a <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005f16:	f000 fb2d 	bl	8006574 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8005f1a:	4b1d      	ldr	r3, [pc, #116]	; (8005f90 <xTaskResumeAll+0x130>)
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d010      	beq.n	8005f48 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005f26:	f000 f859 	bl	8005fdc <xTaskIncrementTick>
 8005f2a:	4603      	mov	r3, r0
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d002      	beq.n	8005f36 <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8005f30:	4b16      	ldr	r3, [pc, #88]	; (8005f8c <xTaskResumeAll+0x12c>)
 8005f32:	2201      	movs	r2, #1
 8005f34:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	3b01      	subs	r3, #1
 8005f3a:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d1f1      	bne.n	8005f26 <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 8005f42:	4b13      	ldr	r3, [pc, #76]	; (8005f90 <xTaskResumeAll+0x130>)
 8005f44:	2200      	movs	r2, #0
 8005f46:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005f48:	4b10      	ldr	r3, [pc, #64]	; (8005f8c <xTaskResumeAll+0x12c>)
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d009      	beq.n	8005f64 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005f50:	2301      	movs	r3, #1
 8005f52:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005f54:	4b0f      	ldr	r3, [pc, #60]	; (8005f94 <xTaskResumeAll+0x134>)
 8005f56:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f5a:	601a      	str	r2, [r3, #0]
 8005f5c:	f3bf 8f4f 	dsb	sy
 8005f60:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005f64:	f000 feb0 	bl	8006cc8 <vPortExitCritical>

	return xAlreadyYielded;
 8005f68:	68bb      	ldr	r3, [r7, #8]
}
 8005f6a:	4618      	mov	r0, r3
 8005f6c:	3710      	adds	r7, #16
 8005f6e:	46bd      	mov	sp, r7
 8005f70:	bd80      	pop	{r7, pc}
 8005f72:	bf00      	nop
 8005f74:	20000428 	.word	0x20000428
 8005f78:	20000400 	.word	0x20000400
 8005f7c:	200003c0 	.word	0x200003c0
 8005f80:	20000408 	.word	0x20000408
 8005f84:	20000304 	.word	0x20000304
 8005f88:	20000300 	.word	0x20000300
 8005f8c:	20000414 	.word	0x20000414
 8005f90:	20000410 	.word	0x20000410
 8005f94:	e000ed04 	.word	0xe000ed04

08005f98 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005f98:	b480      	push	{r7}
 8005f9a:	b083      	sub	sp, #12
 8005f9c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005f9e:	4b05      	ldr	r3, [pc, #20]	; (8005fb4 <xTaskGetTickCount+0x1c>)
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005fa4:	687b      	ldr	r3, [r7, #4]
}
 8005fa6:	4618      	mov	r0, r3
 8005fa8:	370c      	adds	r7, #12
 8005faa:	46bd      	mov	sp, r7
 8005fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb0:	4770      	bx	lr
 8005fb2:	bf00      	nop
 8005fb4:	20000404 	.word	0x20000404

08005fb8 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8005fb8:	b580      	push	{r7, lr}
 8005fba:	b082      	sub	sp, #8
 8005fbc:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005fbe:	f000 ff31 	bl	8006e24 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8005fc2:	2300      	movs	r3, #0
 8005fc4:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8005fc6:	4b04      	ldr	r3, [pc, #16]	; (8005fd8 <xTaskGetTickCountFromISR+0x20>)
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005fcc:	683b      	ldr	r3, [r7, #0]
}
 8005fce:	4618      	mov	r0, r3
 8005fd0:	3708      	adds	r7, #8
 8005fd2:	46bd      	mov	sp, r7
 8005fd4:	bd80      	pop	{r7, pc}
 8005fd6:	bf00      	nop
 8005fd8:	20000404 	.word	0x20000404

08005fdc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005fdc:	b580      	push	{r7, lr}
 8005fde:	b086      	sub	sp, #24
 8005fe0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005fe2:	2300      	movs	r3, #0
 8005fe4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005fe6:	4b4e      	ldr	r3, [pc, #312]	; (8006120 <xTaskIncrementTick+0x144>)
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	f040 8087 	bne.w	80060fe <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005ff0:	4b4c      	ldr	r3, [pc, #304]	; (8006124 <xTaskIncrementTick+0x148>)
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	3301      	adds	r3, #1
 8005ff6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005ff8:	4a4a      	ldr	r2, [pc, #296]	; (8006124 <xTaskIncrementTick+0x148>)
 8005ffa:	693b      	ldr	r3, [r7, #16]
 8005ffc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005ffe:	693b      	ldr	r3, [r7, #16]
 8006000:	2b00      	cmp	r3, #0
 8006002:	d11f      	bne.n	8006044 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8006004:	4b48      	ldr	r3, [pc, #288]	; (8006128 <xTaskIncrementTick+0x14c>)
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	2b00      	cmp	r3, #0
 800600c:	d009      	beq.n	8006022 <xTaskIncrementTick+0x46>
 800600e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006012:	f383 8811 	msr	BASEPRI, r3
 8006016:	f3bf 8f6f 	isb	sy
 800601a:	f3bf 8f4f 	dsb	sy
 800601e:	603b      	str	r3, [r7, #0]
 8006020:	e7fe      	b.n	8006020 <xTaskIncrementTick+0x44>
 8006022:	4b41      	ldr	r3, [pc, #260]	; (8006128 <xTaskIncrementTick+0x14c>)
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	60fb      	str	r3, [r7, #12]
 8006028:	4b40      	ldr	r3, [pc, #256]	; (800612c <xTaskIncrementTick+0x150>)
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	4a3e      	ldr	r2, [pc, #248]	; (8006128 <xTaskIncrementTick+0x14c>)
 800602e:	6013      	str	r3, [r2, #0]
 8006030:	4a3e      	ldr	r2, [pc, #248]	; (800612c <xTaskIncrementTick+0x150>)
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	6013      	str	r3, [r2, #0]
 8006036:	4b3e      	ldr	r3, [pc, #248]	; (8006130 <xTaskIncrementTick+0x154>)
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	3301      	adds	r3, #1
 800603c:	4a3c      	ldr	r2, [pc, #240]	; (8006130 <xTaskIncrementTick+0x154>)
 800603e:	6013      	str	r3, [r2, #0]
 8006040:	f000 fa98 	bl	8006574 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006044:	4b3b      	ldr	r3, [pc, #236]	; (8006134 <xTaskIncrementTick+0x158>)
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	693a      	ldr	r2, [r7, #16]
 800604a:	429a      	cmp	r2, r3
 800604c:	d348      	bcc.n	80060e0 <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800604e:	4b36      	ldr	r3, [pc, #216]	; (8006128 <xTaskIncrementTick+0x14c>)
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	2b00      	cmp	r3, #0
 8006056:	d104      	bne.n	8006062 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006058:	4b36      	ldr	r3, [pc, #216]	; (8006134 <xTaskIncrementTick+0x158>)
 800605a:	f04f 32ff 	mov.w	r2, #4294967295
 800605e:	601a      	str	r2, [r3, #0]
					break;
 8006060:	e03e      	b.n	80060e0 <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006062:	4b31      	ldr	r3, [pc, #196]	; (8006128 <xTaskIncrementTick+0x14c>)
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	68db      	ldr	r3, [r3, #12]
 8006068:	68db      	ldr	r3, [r3, #12]
 800606a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800606c:	68bb      	ldr	r3, [r7, #8]
 800606e:	685b      	ldr	r3, [r3, #4]
 8006070:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006072:	693a      	ldr	r2, [r7, #16]
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	429a      	cmp	r2, r3
 8006078:	d203      	bcs.n	8006082 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800607a:	4a2e      	ldr	r2, [pc, #184]	; (8006134 <xTaskIncrementTick+0x158>)
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006080:	e02e      	b.n	80060e0 <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006082:	68bb      	ldr	r3, [r7, #8]
 8006084:	3304      	adds	r3, #4
 8006086:	4618      	mov	r0, r3
 8006088:	f7fe fd6a 	bl	8004b60 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800608c:	68bb      	ldr	r3, [r7, #8]
 800608e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006090:	2b00      	cmp	r3, #0
 8006092:	d004      	beq.n	800609e <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006094:	68bb      	ldr	r3, [r7, #8]
 8006096:	3318      	adds	r3, #24
 8006098:	4618      	mov	r0, r3
 800609a:	f7fe fd61 	bl	8004b60 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800609e:	68bb      	ldr	r3, [r7, #8]
 80060a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060a2:	2201      	movs	r2, #1
 80060a4:	409a      	lsls	r2, r3
 80060a6:	4b24      	ldr	r3, [pc, #144]	; (8006138 <xTaskIncrementTick+0x15c>)
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	4313      	orrs	r3, r2
 80060ac:	4a22      	ldr	r2, [pc, #136]	; (8006138 <xTaskIncrementTick+0x15c>)
 80060ae:	6013      	str	r3, [r2, #0]
 80060b0:	68bb      	ldr	r3, [r7, #8]
 80060b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060b4:	4613      	mov	r3, r2
 80060b6:	009b      	lsls	r3, r3, #2
 80060b8:	4413      	add	r3, r2
 80060ba:	009b      	lsls	r3, r3, #2
 80060bc:	4a1f      	ldr	r2, [pc, #124]	; (800613c <xTaskIncrementTick+0x160>)
 80060be:	441a      	add	r2, r3
 80060c0:	68bb      	ldr	r3, [r7, #8]
 80060c2:	3304      	adds	r3, #4
 80060c4:	4619      	mov	r1, r3
 80060c6:	4610      	mov	r0, r2
 80060c8:	f7fe fced 	bl	8004aa6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80060cc:	68bb      	ldr	r3, [r7, #8]
 80060ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060d0:	4b1b      	ldr	r3, [pc, #108]	; (8006140 <xTaskIncrementTick+0x164>)
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060d6:	429a      	cmp	r2, r3
 80060d8:	d3b9      	bcc.n	800604e <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 80060da:	2301      	movs	r3, #1
 80060dc:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80060de:	e7b6      	b.n	800604e <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80060e0:	4b17      	ldr	r3, [pc, #92]	; (8006140 <xTaskIncrementTick+0x164>)
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060e6:	4915      	ldr	r1, [pc, #84]	; (800613c <xTaskIncrementTick+0x160>)
 80060e8:	4613      	mov	r3, r2
 80060ea:	009b      	lsls	r3, r3, #2
 80060ec:	4413      	add	r3, r2
 80060ee:	009b      	lsls	r3, r3, #2
 80060f0:	440b      	add	r3, r1
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	2b01      	cmp	r3, #1
 80060f6:	d907      	bls.n	8006108 <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 80060f8:	2301      	movs	r3, #1
 80060fa:	617b      	str	r3, [r7, #20]
 80060fc:	e004      	b.n	8006108 <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80060fe:	4b11      	ldr	r3, [pc, #68]	; (8006144 <xTaskIncrementTick+0x168>)
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	3301      	adds	r3, #1
 8006104:	4a0f      	ldr	r2, [pc, #60]	; (8006144 <xTaskIncrementTick+0x168>)
 8006106:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8006108:	4b0f      	ldr	r3, [pc, #60]	; (8006148 <xTaskIncrementTick+0x16c>)
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	2b00      	cmp	r3, #0
 800610e:	d001      	beq.n	8006114 <xTaskIncrementTick+0x138>
		{
			xSwitchRequired = pdTRUE;
 8006110:	2301      	movs	r3, #1
 8006112:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8006114:	697b      	ldr	r3, [r7, #20]
}
 8006116:	4618      	mov	r0, r3
 8006118:	3718      	adds	r7, #24
 800611a:	46bd      	mov	sp, r7
 800611c:	bd80      	pop	{r7, pc}
 800611e:	bf00      	nop
 8006120:	20000428 	.word	0x20000428
 8006124:	20000404 	.word	0x20000404
 8006128:	200003b8 	.word	0x200003b8
 800612c:	200003bc 	.word	0x200003bc
 8006130:	20000418 	.word	0x20000418
 8006134:	20000420 	.word	0x20000420
 8006138:	20000408 	.word	0x20000408
 800613c:	20000304 	.word	0x20000304
 8006140:	20000300 	.word	0x20000300
 8006144:	20000410 	.word	0x20000410
 8006148:	20000414 	.word	0x20000414

0800614c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800614c:	b480      	push	{r7}
 800614e:	b087      	sub	sp, #28
 8006150:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006152:	4b26      	ldr	r3, [pc, #152]	; (80061ec <vTaskSwitchContext+0xa0>)
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	2b00      	cmp	r3, #0
 8006158:	d003      	beq.n	8006162 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800615a:	4b25      	ldr	r3, [pc, #148]	; (80061f0 <vTaskSwitchContext+0xa4>)
 800615c:	2201      	movs	r2, #1
 800615e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006160:	e03e      	b.n	80061e0 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 8006162:	4b23      	ldr	r3, [pc, #140]	; (80061f0 <vTaskSwitchContext+0xa4>)
 8006164:	2200      	movs	r2, #0
 8006166:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006168:	4b22      	ldr	r3, [pc, #136]	; (80061f4 <vTaskSwitchContext+0xa8>)
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	fab3 f383 	clz	r3, r3
 8006174:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8006176:	7afb      	ldrb	r3, [r7, #11]
 8006178:	f1c3 031f 	rsb	r3, r3, #31
 800617c:	617b      	str	r3, [r7, #20]
 800617e:	491e      	ldr	r1, [pc, #120]	; (80061f8 <vTaskSwitchContext+0xac>)
 8006180:	697a      	ldr	r2, [r7, #20]
 8006182:	4613      	mov	r3, r2
 8006184:	009b      	lsls	r3, r3, #2
 8006186:	4413      	add	r3, r2
 8006188:	009b      	lsls	r3, r3, #2
 800618a:	440b      	add	r3, r1
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	2b00      	cmp	r3, #0
 8006190:	d109      	bne.n	80061a6 <vTaskSwitchContext+0x5a>
	__asm volatile
 8006192:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006196:	f383 8811 	msr	BASEPRI, r3
 800619a:	f3bf 8f6f 	isb	sy
 800619e:	f3bf 8f4f 	dsb	sy
 80061a2:	607b      	str	r3, [r7, #4]
 80061a4:	e7fe      	b.n	80061a4 <vTaskSwitchContext+0x58>
 80061a6:	697a      	ldr	r2, [r7, #20]
 80061a8:	4613      	mov	r3, r2
 80061aa:	009b      	lsls	r3, r3, #2
 80061ac:	4413      	add	r3, r2
 80061ae:	009b      	lsls	r3, r3, #2
 80061b0:	4a11      	ldr	r2, [pc, #68]	; (80061f8 <vTaskSwitchContext+0xac>)
 80061b2:	4413      	add	r3, r2
 80061b4:	613b      	str	r3, [r7, #16]
 80061b6:	693b      	ldr	r3, [r7, #16]
 80061b8:	685b      	ldr	r3, [r3, #4]
 80061ba:	685a      	ldr	r2, [r3, #4]
 80061bc:	693b      	ldr	r3, [r7, #16]
 80061be:	605a      	str	r2, [r3, #4]
 80061c0:	693b      	ldr	r3, [r7, #16]
 80061c2:	685a      	ldr	r2, [r3, #4]
 80061c4:	693b      	ldr	r3, [r7, #16]
 80061c6:	3308      	adds	r3, #8
 80061c8:	429a      	cmp	r2, r3
 80061ca:	d104      	bne.n	80061d6 <vTaskSwitchContext+0x8a>
 80061cc:	693b      	ldr	r3, [r7, #16]
 80061ce:	685b      	ldr	r3, [r3, #4]
 80061d0:	685a      	ldr	r2, [r3, #4]
 80061d2:	693b      	ldr	r3, [r7, #16]
 80061d4:	605a      	str	r2, [r3, #4]
 80061d6:	693b      	ldr	r3, [r7, #16]
 80061d8:	685b      	ldr	r3, [r3, #4]
 80061da:	68db      	ldr	r3, [r3, #12]
 80061dc:	4a07      	ldr	r2, [pc, #28]	; (80061fc <vTaskSwitchContext+0xb0>)
 80061de:	6013      	str	r3, [r2, #0]
}
 80061e0:	bf00      	nop
 80061e2:	371c      	adds	r7, #28
 80061e4:	46bd      	mov	sp, r7
 80061e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ea:	4770      	bx	lr
 80061ec:	20000428 	.word	0x20000428
 80061f0:	20000414 	.word	0x20000414
 80061f4:	20000408 	.word	0x20000408
 80061f8:	20000304 	.word	0x20000304
 80061fc:	20000300 	.word	0x20000300

08006200 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006200:	b580      	push	{r7, lr}
 8006202:	b084      	sub	sp, #16
 8006204:	af00      	add	r7, sp, #0
 8006206:	6078      	str	r0, [r7, #4]
 8006208:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	2b00      	cmp	r3, #0
 800620e:	d109      	bne.n	8006224 <vTaskPlaceOnEventList+0x24>
 8006210:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006214:	f383 8811 	msr	BASEPRI, r3
 8006218:	f3bf 8f6f 	isb	sy
 800621c:	f3bf 8f4f 	dsb	sy
 8006220:	60fb      	str	r3, [r7, #12]
 8006222:	e7fe      	b.n	8006222 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006224:	4b07      	ldr	r3, [pc, #28]	; (8006244 <vTaskPlaceOnEventList+0x44>)
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	3318      	adds	r3, #24
 800622a:	4619      	mov	r1, r3
 800622c:	6878      	ldr	r0, [r7, #4]
 800622e:	f7fe fc5e 	bl	8004aee <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006232:	2101      	movs	r1, #1
 8006234:	6838      	ldr	r0, [r7, #0]
 8006236:	f000 fb8b 	bl	8006950 <prvAddCurrentTaskToDelayedList>
}
 800623a:	bf00      	nop
 800623c:	3710      	adds	r7, #16
 800623e:	46bd      	mov	sp, r7
 8006240:	bd80      	pop	{r7, pc}
 8006242:	bf00      	nop
 8006244:	20000300 	.word	0x20000300

08006248 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006248:	b580      	push	{r7, lr}
 800624a:	b086      	sub	sp, #24
 800624c:	af00      	add	r7, sp, #0
 800624e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	68db      	ldr	r3, [r3, #12]
 8006254:	68db      	ldr	r3, [r3, #12]
 8006256:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006258:	693b      	ldr	r3, [r7, #16]
 800625a:	2b00      	cmp	r3, #0
 800625c:	d109      	bne.n	8006272 <xTaskRemoveFromEventList+0x2a>
 800625e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006262:	f383 8811 	msr	BASEPRI, r3
 8006266:	f3bf 8f6f 	isb	sy
 800626a:	f3bf 8f4f 	dsb	sy
 800626e:	60fb      	str	r3, [r7, #12]
 8006270:	e7fe      	b.n	8006270 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006272:	693b      	ldr	r3, [r7, #16]
 8006274:	3318      	adds	r3, #24
 8006276:	4618      	mov	r0, r3
 8006278:	f7fe fc72 	bl	8004b60 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800627c:	4b1d      	ldr	r3, [pc, #116]	; (80062f4 <xTaskRemoveFromEventList+0xac>)
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	2b00      	cmp	r3, #0
 8006282:	d11c      	bne.n	80062be <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006284:	693b      	ldr	r3, [r7, #16]
 8006286:	3304      	adds	r3, #4
 8006288:	4618      	mov	r0, r3
 800628a:	f7fe fc69 	bl	8004b60 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800628e:	693b      	ldr	r3, [r7, #16]
 8006290:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006292:	2201      	movs	r2, #1
 8006294:	409a      	lsls	r2, r3
 8006296:	4b18      	ldr	r3, [pc, #96]	; (80062f8 <xTaskRemoveFromEventList+0xb0>)
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	4313      	orrs	r3, r2
 800629c:	4a16      	ldr	r2, [pc, #88]	; (80062f8 <xTaskRemoveFromEventList+0xb0>)
 800629e:	6013      	str	r3, [r2, #0]
 80062a0:	693b      	ldr	r3, [r7, #16]
 80062a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062a4:	4613      	mov	r3, r2
 80062a6:	009b      	lsls	r3, r3, #2
 80062a8:	4413      	add	r3, r2
 80062aa:	009b      	lsls	r3, r3, #2
 80062ac:	4a13      	ldr	r2, [pc, #76]	; (80062fc <xTaskRemoveFromEventList+0xb4>)
 80062ae:	441a      	add	r2, r3
 80062b0:	693b      	ldr	r3, [r7, #16]
 80062b2:	3304      	adds	r3, #4
 80062b4:	4619      	mov	r1, r3
 80062b6:	4610      	mov	r0, r2
 80062b8:	f7fe fbf5 	bl	8004aa6 <vListInsertEnd>
 80062bc:	e005      	b.n	80062ca <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80062be:	693b      	ldr	r3, [r7, #16]
 80062c0:	3318      	adds	r3, #24
 80062c2:	4619      	mov	r1, r3
 80062c4:	480e      	ldr	r0, [pc, #56]	; (8006300 <xTaskRemoveFromEventList+0xb8>)
 80062c6:	f7fe fbee 	bl	8004aa6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80062ca:	693b      	ldr	r3, [r7, #16]
 80062cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062ce:	4b0d      	ldr	r3, [pc, #52]	; (8006304 <xTaskRemoveFromEventList+0xbc>)
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062d4:	429a      	cmp	r2, r3
 80062d6:	d905      	bls.n	80062e4 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80062d8:	2301      	movs	r3, #1
 80062da:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80062dc:	4b0a      	ldr	r3, [pc, #40]	; (8006308 <xTaskRemoveFromEventList+0xc0>)
 80062de:	2201      	movs	r2, #1
 80062e0:	601a      	str	r2, [r3, #0]
 80062e2:	e001      	b.n	80062e8 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 80062e4:	2300      	movs	r3, #0
 80062e6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80062e8:	697b      	ldr	r3, [r7, #20]
}
 80062ea:	4618      	mov	r0, r3
 80062ec:	3718      	adds	r7, #24
 80062ee:	46bd      	mov	sp, r7
 80062f0:	bd80      	pop	{r7, pc}
 80062f2:	bf00      	nop
 80062f4:	20000428 	.word	0x20000428
 80062f8:	20000408 	.word	0x20000408
 80062fc:	20000304 	.word	0x20000304
 8006300:	200003c0 	.word	0x200003c0
 8006304:	20000300 	.word	0x20000300
 8006308:	20000414 	.word	0x20000414

0800630c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800630c:	b480      	push	{r7}
 800630e:	b083      	sub	sp, #12
 8006310:	af00      	add	r7, sp, #0
 8006312:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006314:	4b06      	ldr	r3, [pc, #24]	; (8006330 <vTaskInternalSetTimeOutState+0x24>)
 8006316:	681a      	ldr	r2, [r3, #0]
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800631c:	4b05      	ldr	r3, [pc, #20]	; (8006334 <vTaskInternalSetTimeOutState+0x28>)
 800631e:	681a      	ldr	r2, [r3, #0]
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	605a      	str	r2, [r3, #4]
}
 8006324:	bf00      	nop
 8006326:	370c      	adds	r7, #12
 8006328:	46bd      	mov	sp, r7
 800632a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800632e:	4770      	bx	lr
 8006330:	20000418 	.word	0x20000418
 8006334:	20000404 	.word	0x20000404

08006338 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006338:	b580      	push	{r7, lr}
 800633a:	b088      	sub	sp, #32
 800633c:	af00      	add	r7, sp, #0
 800633e:	6078      	str	r0, [r7, #4]
 8006340:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	2b00      	cmp	r3, #0
 8006346:	d109      	bne.n	800635c <xTaskCheckForTimeOut+0x24>
 8006348:	f04f 0350 	mov.w	r3, #80	; 0x50
 800634c:	f383 8811 	msr	BASEPRI, r3
 8006350:	f3bf 8f6f 	isb	sy
 8006354:	f3bf 8f4f 	dsb	sy
 8006358:	613b      	str	r3, [r7, #16]
 800635a:	e7fe      	b.n	800635a <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 800635c:	683b      	ldr	r3, [r7, #0]
 800635e:	2b00      	cmp	r3, #0
 8006360:	d109      	bne.n	8006376 <xTaskCheckForTimeOut+0x3e>
 8006362:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006366:	f383 8811 	msr	BASEPRI, r3
 800636a:	f3bf 8f6f 	isb	sy
 800636e:	f3bf 8f4f 	dsb	sy
 8006372:	60fb      	str	r3, [r7, #12]
 8006374:	e7fe      	b.n	8006374 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8006376:	f000 fc79 	bl	8006c6c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800637a:	4b1d      	ldr	r3, [pc, #116]	; (80063f0 <xTaskCheckForTimeOut+0xb8>)
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	685b      	ldr	r3, [r3, #4]
 8006384:	69ba      	ldr	r2, [r7, #24]
 8006386:	1ad3      	subs	r3, r2, r3
 8006388:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800638a:	683b      	ldr	r3, [r7, #0]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006392:	d102      	bne.n	800639a <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006394:	2300      	movs	r3, #0
 8006396:	61fb      	str	r3, [r7, #28]
 8006398:	e023      	b.n	80063e2 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681a      	ldr	r2, [r3, #0]
 800639e:	4b15      	ldr	r3, [pc, #84]	; (80063f4 <xTaskCheckForTimeOut+0xbc>)
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	429a      	cmp	r2, r3
 80063a4:	d007      	beq.n	80063b6 <xTaskCheckForTimeOut+0x7e>
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	685b      	ldr	r3, [r3, #4]
 80063aa:	69ba      	ldr	r2, [r7, #24]
 80063ac:	429a      	cmp	r2, r3
 80063ae:	d302      	bcc.n	80063b6 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80063b0:	2301      	movs	r3, #1
 80063b2:	61fb      	str	r3, [r7, #28]
 80063b4:	e015      	b.n	80063e2 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80063b6:	683b      	ldr	r3, [r7, #0]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	697a      	ldr	r2, [r7, #20]
 80063bc:	429a      	cmp	r2, r3
 80063be:	d20b      	bcs.n	80063d8 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80063c0:	683b      	ldr	r3, [r7, #0]
 80063c2:	681a      	ldr	r2, [r3, #0]
 80063c4:	697b      	ldr	r3, [r7, #20]
 80063c6:	1ad2      	subs	r2, r2, r3
 80063c8:	683b      	ldr	r3, [r7, #0]
 80063ca:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80063cc:	6878      	ldr	r0, [r7, #4]
 80063ce:	f7ff ff9d 	bl	800630c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80063d2:	2300      	movs	r3, #0
 80063d4:	61fb      	str	r3, [r7, #28]
 80063d6:	e004      	b.n	80063e2 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 80063d8:	683b      	ldr	r3, [r7, #0]
 80063da:	2200      	movs	r2, #0
 80063dc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80063de:	2301      	movs	r3, #1
 80063e0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80063e2:	f000 fc71 	bl	8006cc8 <vPortExitCritical>

	return xReturn;
 80063e6:	69fb      	ldr	r3, [r7, #28]
}
 80063e8:	4618      	mov	r0, r3
 80063ea:	3720      	adds	r7, #32
 80063ec:	46bd      	mov	sp, r7
 80063ee:	bd80      	pop	{r7, pc}
 80063f0:	20000404 	.word	0x20000404
 80063f4:	20000418 	.word	0x20000418

080063f8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80063f8:	b480      	push	{r7}
 80063fa:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80063fc:	4b03      	ldr	r3, [pc, #12]	; (800640c <vTaskMissedYield+0x14>)
 80063fe:	2201      	movs	r2, #1
 8006400:	601a      	str	r2, [r3, #0]
}
 8006402:	bf00      	nop
 8006404:	46bd      	mov	sp, r7
 8006406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800640a:	4770      	bx	lr
 800640c:	20000414 	.word	0x20000414

08006410 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006410:	b580      	push	{r7, lr}
 8006412:	b082      	sub	sp, #8
 8006414:	af00      	add	r7, sp, #0
 8006416:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006418:	f000 f852 	bl	80064c0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800641c:	4b06      	ldr	r3, [pc, #24]	; (8006438 <prvIdleTask+0x28>)
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	2b01      	cmp	r3, #1
 8006422:	d9f9      	bls.n	8006418 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006424:	4b05      	ldr	r3, [pc, #20]	; (800643c <prvIdleTask+0x2c>)
 8006426:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800642a:	601a      	str	r2, [r3, #0]
 800642c:	f3bf 8f4f 	dsb	sy
 8006430:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006434:	e7f0      	b.n	8006418 <prvIdleTask+0x8>
 8006436:	bf00      	nop
 8006438:	20000304 	.word	0x20000304
 800643c:	e000ed04 	.word	0xe000ed04

08006440 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006440:	b580      	push	{r7, lr}
 8006442:	b082      	sub	sp, #8
 8006444:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006446:	2300      	movs	r3, #0
 8006448:	607b      	str	r3, [r7, #4]
 800644a:	e00c      	b.n	8006466 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800644c:	687a      	ldr	r2, [r7, #4]
 800644e:	4613      	mov	r3, r2
 8006450:	009b      	lsls	r3, r3, #2
 8006452:	4413      	add	r3, r2
 8006454:	009b      	lsls	r3, r3, #2
 8006456:	4a12      	ldr	r2, [pc, #72]	; (80064a0 <prvInitialiseTaskLists+0x60>)
 8006458:	4413      	add	r3, r2
 800645a:	4618      	mov	r0, r3
 800645c:	f7fe faf6 	bl	8004a4c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	3301      	adds	r3, #1
 8006464:	607b      	str	r3, [r7, #4]
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	2b06      	cmp	r3, #6
 800646a:	d9ef      	bls.n	800644c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800646c:	480d      	ldr	r0, [pc, #52]	; (80064a4 <prvInitialiseTaskLists+0x64>)
 800646e:	f7fe faed 	bl	8004a4c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006472:	480d      	ldr	r0, [pc, #52]	; (80064a8 <prvInitialiseTaskLists+0x68>)
 8006474:	f7fe faea 	bl	8004a4c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006478:	480c      	ldr	r0, [pc, #48]	; (80064ac <prvInitialiseTaskLists+0x6c>)
 800647a:	f7fe fae7 	bl	8004a4c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800647e:	480c      	ldr	r0, [pc, #48]	; (80064b0 <prvInitialiseTaskLists+0x70>)
 8006480:	f7fe fae4 	bl	8004a4c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006484:	480b      	ldr	r0, [pc, #44]	; (80064b4 <prvInitialiseTaskLists+0x74>)
 8006486:	f7fe fae1 	bl	8004a4c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800648a:	4b0b      	ldr	r3, [pc, #44]	; (80064b8 <prvInitialiseTaskLists+0x78>)
 800648c:	4a05      	ldr	r2, [pc, #20]	; (80064a4 <prvInitialiseTaskLists+0x64>)
 800648e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006490:	4b0a      	ldr	r3, [pc, #40]	; (80064bc <prvInitialiseTaskLists+0x7c>)
 8006492:	4a05      	ldr	r2, [pc, #20]	; (80064a8 <prvInitialiseTaskLists+0x68>)
 8006494:	601a      	str	r2, [r3, #0]
}
 8006496:	bf00      	nop
 8006498:	3708      	adds	r7, #8
 800649a:	46bd      	mov	sp, r7
 800649c:	bd80      	pop	{r7, pc}
 800649e:	bf00      	nop
 80064a0:	20000304 	.word	0x20000304
 80064a4:	20000390 	.word	0x20000390
 80064a8:	200003a4 	.word	0x200003a4
 80064ac:	200003c0 	.word	0x200003c0
 80064b0:	200003d4 	.word	0x200003d4
 80064b4:	200003ec 	.word	0x200003ec
 80064b8:	200003b8 	.word	0x200003b8
 80064bc:	200003bc 	.word	0x200003bc

080064c0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80064c0:	b580      	push	{r7, lr}
 80064c2:	b082      	sub	sp, #8
 80064c4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80064c6:	e019      	b.n	80064fc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80064c8:	f000 fbd0 	bl	8006c6c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80064cc:	4b0f      	ldr	r3, [pc, #60]	; (800650c <prvCheckTasksWaitingTermination+0x4c>)
 80064ce:	68db      	ldr	r3, [r3, #12]
 80064d0:	68db      	ldr	r3, [r3, #12]
 80064d2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	3304      	adds	r3, #4
 80064d8:	4618      	mov	r0, r3
 80064da:	f7fe fb41 	bl	8004b60 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80064de:	4b0c      	ldr	r3, [pc, #48]	; (8006510 <prvCheckTasksWaitingTermination+0x50>)
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	3b01      	subs	r3, #1
 80064e4:	4a0a      	ldr	r2, [pc, #40]	; (8006510 <prvCheckTasksWaitingTermination+0x50>)
 80064e6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80064e8:	4b0a      	ldr	r3, [pc, #40]	; (8006514 <prvCheckTasksWaitingTermination+0x54>)
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	3b01      	subs	r3, #1
 80064ee:	4a09      	ldr	r2, [pc, #36]	; (8006514 <prvCheckTasksWaitingTermination+0x54>)
 80064f0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80064f2:	f000 fbe9 	bl	8006cc8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80064f6:	6878      	ldr	r0, [r7, #4]
 80064f8:	f000 f80e 	bl	8006518 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80064fc:	4b05      	ldr	r3, [pc, #20]	; (8006514 <prvCheckTasksWaitingTermination+0x54>)
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	2b00      	cmp	r3, #0
 8006502:	d1e1      	bne.n	80064c8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006504:	bf00      	nop
 8006506:	3708      	adds	r7, #8
 8006508:	46bd      	mov	sp, r7
 800650a:	bd80      	pop	{r7, pc}
 800650c:	200003d4 	.word	0x200003d4
 8006510:	20000400 	.word	0x20000400
 8006514:	200003e8 	.word	0x200003e8

08006518 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006518:	b580      	push	{r7, lr}
 800651a:	b084      	sub	sp, #16
 800651c:	af00      	add	r7, sp, #0
 800651e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006526:	2b00      	cmp	r3, #0
 8006528:	d108      	bne.n	800653c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800652e:	4618      	mov	r0, r3
 8006530:	f000 fd78 	bl	8007024 <vPortFree>
				vPortFree( pxTCB );
 8006534:	6878      	ldr	r0, [r7, #4]
 8006536:	f000 fd75 	bl	8007024 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800653a:	e017      	b.n	800656c <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006542:	2b01      	cmp	r3, #1
 8006544:	d103      	bne.n	800654e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8006546:	6878      	ldr	r0, [r7, #4]
 8006548:	f000 fd6c 	bl	8007024 <vPortFree>
	}
 800654c:	e00e      	b.n	800656c <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006554:	2b02      	cmp	r3, #2
 8006556:	d009      	beq.n	800656c <prvDeleteTCB+0x54>
 8006558:	f04f 0350 	mov.w	r3, #80	; 0x50
 800655c:	f383 8811 	msr	BASEPRI, r3
 8006560:	f3bf 8f6f 	isb	sy
 8006564:	f3bf 8f4f 	dsb	sy
 8006568:	60fb      	str	r3, [r7, #12]
 800656a:	e7fe      	b.n	800656a <prvDeleteTCB+0x52>
	}
 800656c:	bf00      	nop
 800656e:	3710      	adds	r7, #16
 8006570:	46bd      	mov	sp, r7
 8006572:	bd80      	pop	{r7, pc}

08006574 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006574:	b480      	push	{r7}
 8006576:	b083      	sub	sp, #12
 8006578:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800657a:	4b0c      	ldr	r3, [pc, #48]	; (80065ac <prvResetNextTaskUnblockTime+0x38>)
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	2b00      	cmp	r3, #0
 8006582:	d104      	bne.n	800658e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006584:	4b0a      	ldr	r3, [pc, #40]	; (80065b0 <prvResetNextTaskUnblockTime+0x3c>)
 8006586:	f04f 32ff 	mov.w	r2, #4294967295
 800658a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800658c:	e008      	b.n	80065a0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800658e:	4b07      	ldr	r3, [pc, #28]	; (80065ac <prvResetNextTaskUnblockTime+0x38>)
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	68db      	ldr	r3, [r3, #12]
 8006594:	68db      	ldr	r3, [r3, #12]
 8006596:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	685b      	ldr	r3, [r3, #4]
 800659c:	4a04      	ldr	r2, [pc, #16]	; (80065b0 <prvResetNextTaskUnblockTime+0x3c>)
 800659e:	6013      	str	r3, [r2, #0]
}
 80065a0:	bf00      	nop
 80065a2:	370c      	adds	r7, #12
 80065a4:	46bd      	mov	sp, r7
 80065a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065aa:	4770      	bx	lr
 80065ac:	200003b8 	.word	0x200003b8
 80065b0:	20000420 	.word	0x20000420

080065b4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80065b4:	b480      	push	{r7}
 80065b6:	b083      	sub	sp, #12
 80065b8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80065ba:	4b0b      	ldr	r3, [pc, #44]	; (80065e8 <xTaskGetSchedulerState+0x34>)
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d102      	bne.n	80065c8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80065c2:	2301      	movs	r3, #1
 80065c4:	607b      	str	r3, [r7, #4]
 80065c6:	e008      	b.n	80065da <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80065c8:	4b08      	ldr	r3, [pc, #32]	; (80065ec <xTaskGetSchedulerState+0x38>)
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d102      	bne.n	80065d6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80065d0:	2302      	movs	r3, #2
 80065d2:	607b      	str	r3, [r7, #4]
 80065d4:	e001      	b.n	80065da <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80065d6:	2300      	movs	r3, #0
 80065d8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80065da:	687b      	ldr	r3, [r7, #4]
	}
 80065dc:	4618      	mov	r0, r3
 80065de:	370c      	adds	r7, #12
 80065e0:	46bd      	mov	sp, r7
 80065e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e6:	4770      	bx	lr
 80065e8:	2000040c 	.word	0x2000040c
 80065ec:	20000428 	.word	0x20000428

080065f0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80065f0:	b580      	push	{r7, lr}
 80065f2:	b084      	sub	sp, #16
 80065f4:	af00      	add	r7, sp, #0
 80065f6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80065fc:	2300      	movs	r3, #0
 80065fe:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	2b00      	cmp	r3, #0
 8006604:	d069      	beq.n	80066da <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8006606:	68bb      	ldr	r3, [r7, #8]
 8006608:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800660a:	4b36      	ldr	r3, [pc, #216]	; (80066e4 <xTaskPriorityInherit+0xf4>)
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006610:	429a      	cmp	r2, r3
 8006612:	d259      	bcs.n	80066c8 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006614:	68bb      	ldr	r3, [r7, #8]
 8006616:	699b      	ldr	r3, [r3, #24]
 8006618:	2b00      	cmp	r3, #0
 800661a:	db06      	blt.n	800662a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800661c:	4b31      	ldr	r3, [pc, #196]	; (80066e4 <xTaskPriorityInherit+0xf4>)
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006622:	f1c3 0207 	rsb	r2, r3, #7
 8006626:	68bb      	ldr	r3, [r7, #8]
 8006628:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800662a:	68bb      	ldr	r3, [r7, #8]
 800662c:	6959      	ldr	r1, [r3, #20]
 800662e:	68bb      	ldr	r3, [r7, #8]
 8006630:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006632:	4613      	mov	r3, r2
 8006634:	009b      	lsls	r3, r3, #2
 8006636:	4413      	add	r3, r2
 8006638:	009b      	lsls	r3, r3, #2
 800663a:	4a2b      	ldr	r2, [pc, #172]	; (80066e8 <xTaskPriorityInherit+0xf8>)
 800663c:	4413      	add	r3, r2
 800663e:	4299      	cmp	r1, r3
 8006640:	d13a      	bne.n	80066b8 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006642:	68bb      	ldr	r3, [r7, #8]
 8006644:	3304      	adds	r3, #4
 8006646:	4618      	mov	r0, r3
 8006648:	f7fe fa8a 	bl	8004b60 <uxListRemove>
 800664c:	4603      	mov	r3, r0
 800664e:	2b00      	cmp	r3, #0
 8006650:	d115      	bne.n	800667e <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8006652:	68bb      	ldr	r3, [r7, #8]
 8006654:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006656:	4924      	ldr	r1, [pc, #144]	; (80066e8 <xTaskPriorityInherit+0xf8>)
 8006658:	4613      	mov	r3, r2
 800665a:	009b      	lsls	r3, r3, #2
 800665c:	4413      	add	r3, r2
 800665e:	009b      	lsls	r3, r3, #2
 8006660:	440b      	add	r3, r1
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	2b00      	cmp	r3, #0
 8006666:	d10a      	bne.n	800667e <xTaskPriorityInherit+0x8e>
 8006668:	68bb      	ldr	r3, [r7, #8]
 800666a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800666c:	2201      	movs	r2, #1
 800666e:	fa02 f303 	lsl.w	r3, r2, r3
 8006672:	43da      	mvns	r2, r3
 8006674:	4b1d      	ldr	r3, [pc, #116]	; (80066ec <xTaskPriorityInherit+0xfc>)
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	4013      	ands	r3, r2
 800667a:	4a1c      	ldr	r2, [pc, #112]	; (80066ec <xTaskPriorityInherit+0xfc>)
 800667c:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800667e:	4b19      	ldr	r3, [pc, #100]	; (80066e4 <xTaskPriorityInherit+0xf4>)
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006684:	68bb      	ldr	r3, [r7, #8]
 8006686:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8006688:	68bb      	ldr	r3, [r7, #8]
 800668a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800668c:	2201      	movs	r2, #1
 800668e:	409a      	lsls	r2, r3
 8006690:	4b16      	ldr	r3, [pc, #88]	; (80066ec <xTaskPriorityInherit+0xfc>)
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	4313      	orrs	r3, r2
 8006696:	4a15      	ldr	r2, [pc, #84]	; (80066ec <xTaskPriorityInherit+0xfc>)
 8006698:	6013      	str	r3, [r2, #0]
 800669a:	68bb      	ldr	r3, [r7, #8]
 800669c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800669e:	4613      	mov	r3, r2
 80066a0:	009b      	lsls	r3, r3, #2
 80066a2:	4413      	add	r3, r2
 80066a4:	009b      	lsls	r3, r3, #2
 80066a6:	4a10      	ldr	r2, [pc, #64]	; (80066e8 <xTaskPriorityInherit+0xf8>)
 80066a8:	441a      	add	r2, r3
 80066aa:	68bb      	ldr	r3, [r7, #8]
 80066ac:	3304      	adds	r3, #4
 80066ae:	4619      	mov	r1, r3
 80066b0:	4610      	mov	r0, r2
 80066b2:	f7fe f9f8 	bl	8004aa6 <vListInsertEnd>
 80066b6:	e004      	b.n	80066c2 <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80066b8:	4b0a      	ldr	r3, [pc, #40]	; (80066e4 <xTaskPriorityInherit+0xf4>)
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066be:	68bb      	ldr	r3, [r7, #8]
 80066c0:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80066c2:	2301      	movs	r3, #1
 80066c4:	60fb      	str	r3, [r7, #12]
 80066c6:	e008      	b.n	80066da <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80066c8:	68bb      	ldr	r3, [r7, #8]
 80066ca:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80066cc:	4b05      	ldr	r3, [pc, #20]	; (80066e4 <xTaskPriorityInherit+0xf4>)
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066d2:	429a      	cmp	r2, r3
 80066d4:	d201      	bcs.n	80066da <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80066d6:	2301      	movs	r3, #1
 80066d8:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80066da:	68fb      	ldr	r3, [r7, #12]
	}
 80066dc:	4618      	mov	r0, r3
 80066de:	3710      	adds	r7, #16
 80066e0:	46bd      	mov	sp, r7
 80066e2:	bd80      	pop	{r7, pc}
 80066e4:	20000300 	.word	0x20000300
 80066e8:	20000304 	.word	0x20000304
 80066ec:	20000408 	.word	0x20000408

080066f0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80066f0:	b580      	push	{r7, lr}
 80066f2:	b086      	sub	sp, #24
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80066fc:	2300      	movs	r3, #0
 80066fe:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	2b00      	cmp	r3, #0
 8006704:	d06c      	beq.n	80067e0 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006706:	4b39      	ldr	r3, [pc, #228]	; (80067ec <xTaskPriorityDisinherit+0xfc>)
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	693a      	ldr	r2, [r7, #16]
 800670c:	429a      	cmp	r2, r3
 800670e:	d009      	beq.n	8006724 <xTaskPriorityDisinherit+0x34>
 8006710:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006714:	f383 8811 	msr	BASEPRI, r3
 8006718:	f3bf 8f6f 	isb	sy
 800671c:	f3bf 8f4f 	dsb	sy
 8006720:	60fb      	str	r3, [r7, #12]
 8006722:	e7fe      	b.n	8006722 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8006724:	693b      	ldr	r3, [r7, #16]
 8006726:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006728:	2b00      	cmp	r3, #0
 800672a:	d109      	bne.n	8006740 <xTaskPriorityDisinherit+0x50>
 800672c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006730:	f383 8811 	msr	BASEPRI, r3
 8006734:	f3bf 8f6f 	isb	sy
 8006738:	f3bf 8f4f 	dsb	sy
 800673c:	60bb      	str	r3, [r7, #8]
 800673e:	e7fe      	b.n	800673e <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8006740:	693b      	ldr	r3, [r7, #16]
 8006742:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006744:	1e5a      	subs	r2, r3, #1
 8006746:	693b      	ldr	r3, [r7, #16]
 8006748:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800674a:	693b      	ldr	r3, [r7, #16]
 800674c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800674e:	693b      	ldr	r3, [r7, #16]
 8006750:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006752:	429a      	cmp	r2, r3
 8006754:	d044      	beq.n	80067e0 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006756:	693b      	ldr	r3, [r7, #16]
 8006758:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800675a:	2b00      	cmp	r3, #0
 800675c:	d140      	bne.n	80067e0 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800675e:	693b      	ldr	r3, [r7, #16]
 8006760:	3304      	adds	r3, #4
 8006762:	4618      	mov	r0, r3
 8006764:	f7fe f9fc 	bl	8004b60 <uxListRemove>
 8006768:	4603      	mov	r3, r0
 800676a:	2b00      	cmp	r3, #0
 800676c:	d115      	bne.n	800679a <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800676e:	693b      	ldr	r3, [r7, #16]
 8006770:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006772:	491f      	ldr	r1, [pc, #124]	; (80067f0 <xTaskPriorityDisinherit+0x100>)
 8006774:	4613      	mov	r3, r2
 8006776:	009b      	lsls	r3, r3, #2
 8006778:	4413      	add	r3, r2
 800677a:	009b      	lsls	r3, r3, #2
 800677c:	440b      	add	r3, r1
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	2b00      	cmp	r3, #0
 8006782:	d10a      	bne.n	800679a <xTaskPriorityDisinherit+0xaa>
 8006784:	693b      	ldr	r3, [r7, #16]
 8006786:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006788:	2201      	movs	r2, #1
 800678a:	fa02 f303 	lsl.w	r3, r2, r3
 800678e:	43da      	mvns	r2, r3
 8006790:	4b18      	ldr	r3, [pc, #96]	; (80067f4 <xTaskPriorityDisinherit+0x104>)
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	4013      	ands	r3, r2
 8006796:	4a17      	ldr	r2, [pc, #92]	; (80067f4 <xTaskPriorityDisinherit+0x104>)
 8006798:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800679a:	693b      	ldr	r3, [r7, #16]
 800679c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800679e:	693b      	ldr	r3, [r7, #16]
 80067a0:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80067a2:	693b      	ldr	r3, [r7, #16]
 80067a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067a6:	f1c3 0207 	rsb	r2, r3, #7
 80067aa:	693b      	ldr	r3, [r7, #16]
 80067ac:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80067ae:	693b      	ldr	r3, [r7, #16]
 80067b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067b2:	2201      	movs	r2, #1
 80067b4:	409a      	lsls	r2, r3
 80067b6:	4b0f      	ldr	r3, [pc, #60]	; (80067f4 <xTaskPriorityDisinherit+0x104>)
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	4313      	orrs	r3, r2
 80067bc:	4a0d      	ldr	r2, [pc, #52]	; (80067f4 <xTaskPriorityDisinherit+0x104>)
 80067be:	6013      	str	r3, [r2, #0]
 80067c0:	693b      	ldr	r3, [r7, #16]
 80067c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067c4:	4613      	mov	r3, r2
 80067c6:	009b      	lsls	r3, r3, #2
 80067c8:	4413      	add	r3, r2
 80067ca:	009b      	lsls	r3, r3, #2
 80067cc:	4a08      	ldr	r2, [pc, #32]	; (80067f0 <xTaskPriorityDisinherit+0x100>)
 80067ce:	441a      	add	r2, r3
 80067d0:	693b      	ldr	r3, [r7, #16]
 80067d2:	3304      	adds	r3, #4
 80067d4:	4619      	mov	r1, r3
 80067d6:	4610      	mov	r0, r2
 80067d8:	f7fe f965 	bl	8004aa6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80067dc:	2301      	movs	r3, #1
 80067de:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80067e0:	697b      	ldr	r3, [r7, #20]
	}
 80067e2:	4618      	mov	r0, r3
 80067e4:	3718      	adds	r7, #24
 80067e6:	46bd      	mov	sp, r7
 80067e8:	bd80      	pop	{r7, pc}
 80067ea:	bf00      	nop
 80067ec:	20000300 	.word	0x20000300
 80067f0:	20000304 	.word	0x20000304
 80067f4:	20000408 	.word	0x20000408

080067f8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80067f8:	b580      	push	{r7, lr}
 80067fa:	b088      	sub	sp, #32
 80067fc:	af00      	add	r7, sp, #0
 80067fe:	6078      	str	r0, [r7, #4]
 8006800:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8006806:	2301      	movs	r3, #1
 8006808:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	2b00      	cmp	r3, #0
 800680e:	f000 8081 	beq.w	8006914 <vTaskPriorityDisinheritAfterTimeout+0x11c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8006812:	69bb      	ldr	r3, [r7, #24]
 8006814:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006816:	2b00      	cmp	r3, #0
 8006818:	d109      	bne.n	800682e <vTaskPriorityDisinheritAfterTimeout+0x36>
 800681a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800681e:	f383 8811 	msr	BASEPRI, r3
 8006822:	f3bf 8f6f 	isb	sy
 8006826:	f3bf 8f4f 	dsb	sy
 800682a:	60fb      	str	r3, [r7, #12]
 800682c:	e7fe      	b.n	800682c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800682e:	69bb      	ldr	r3, [r7, #24]
 8006830:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006832:	683a      	ldr	r2, [r7, #0]
 8006834:	429a      	cmp	r2, r3
 8006836:	d902      	bls.n	800683e <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8006838:	683b      	ldr	r3, [r7, #0]
 800683a:	61fb      	str	r3, [r7, #28]
 800683c:	e002      	b.n	8006844 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800683e:	69bb      	ldr	r3, [r7, #24]
 8006840:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006842:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8006844:	69bb      	ldr	r3, [r7, #24]
 8006846:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006848:	69fa      	ldr	r2, [r7, #28]
 800684a:	429a      	cmp	r2, r3
 800684c:	d062      	beq.n	8006914 <vTaskPriorityDisinheritAfterTimeout+0x11c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800684e:	69bb      	ldr	r3, [r7, #24]
 8006850:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006852:	697a      	ldr	r2, [r7, #20]
 8006854:	429a      	cmp	r2, r3
 8006856:	d15d      	bne.n	8006914 <vTaskPriorityDisinheritAfterTimeout+0x11c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8006858:	4b30      	ldr	r3, [pc, #192]	; (800691c <vTaskPriorityDisinheritAfterTimeout+0x124>)
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	69ba      	ldr	r2, [r7, #24]
 800685e:	429a      	cmp	r2, r3
 8006860:	d109      	bne.n	8006876 <vTaskPriorityDisinheritAfterTimeout+0x7e>
 8006862:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006866:	f383 8811 	msr	BASEPRI, r3
 800686a:	f3bf 8f6f 	isb	sy
 800686e:	f3bf 8f4f 	dsb	sy
 8006872:	60bb      	str	r3, [r7, #8]
 8006874:	e7fe      	b.n	8006874 <vTaskPriorityDisinheritAfterTimeout+0x7c>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8006876:	69bb      	ldr	r3, [r7, #24]
 8006878:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800687a:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800687c:	69bb      	ldr	r3, [r7, #24]
 800687e:	69fa      	ldr	r2, [r7, #28]
 8006880:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006882:	69bb      	ldr	r3, [r7, #24]
 8006884:	699b      	ldr	r3, [r3, #24]
 8006886:	2b00      	cmp	r3, #0
 8006888:	db04      	blt.n	8006894 <vTaskPriorityDisinheritAfterTimeout+0x9c>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800688a:	69fb      	ldr	r3, [r7, #28]
 800688c:	f1c3 0207 	rsb	r2, r3, #7
 8006890:	69bb      	ldr	r3, [r7, #24]
 8006892:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8006894:	69bb      	ldr	r3, [r7, #24]
 8006896:	6959      	ldr	r1, [r3, #20]
 8006898:	693a      	ldr	r2, [r7, #16]
 800689a:	4613      	mov	r3, r2
 800689c:	009b      	lsls	r3, r3, #2
 800689e:	4413      	add	r3, r2
 80068a0:	009b      	lsls	r3, r3, #2
 80068a2:	4a1f      	ldr	r2, [pc, #124]	; (8006920 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 80068a4:	4413      	add	r3, r2
 80068a6:	4299      	cmp	r1, r3
 80068a8:	d134      	bne.n	8006914 <vTaskPriorityDisinheritAfterTimeout+0x11c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80068aa:	69bb      	ldr	r3, [r7, #24]
 80068ac:	3304      	adds	r3, #4
 80068ae:	4618      	mov	r0, r3
 80068b0:	f7fe f956 	bl	8004b60 <uxListRemove>
 80068b4:	4603      	mov	r3, r0
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d115      	bne.n	80068e6 <vTaskPriorityDisinheritAfterTimeout+0xee>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80068ba:	69bb      	ldr	r3, [r7, #24]
 80068bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068be:	4918      	ldr	r1, [pc, #96]	; (8006920 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 80068c0:	4613      	mov	r3, r2
 80068c2:	009b      	lsls	r3, r3, #2
 80068c4:	4413      	add	r3, r2
 80068c6:	009b      	lsls	r3, r3, #2
 80068c8:	440b      	add	r3, r1
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d10a      	bne.n	80068e6 <vTaskPriorityDisinheritAfterTimeout+0xee>
 80068d0:	69bb      	ldr	r3, [r7, #24]
 80068d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068d4:	2201      	movs	r2, #1
 80068d6:	fa02 f303 	lsl.w	r3, r2, r3
 80068da:	43da      	mvns	r2, r3
 80068dc:	4b11      	ldr	r3, [pc, #68]	; (8006924 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	4013      	ands	r3, r2
 80068e2:	4a10      	ldr	r2, [pc, #64]	; (8006924 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 80068e4:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80068e6:	69bb      	ldr	r3, [r7, #24]
 80068e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068ea:	2201      	movs	r2, #1
 80068ec:	409a      	lsls	r2, r3
 80068ee:	4b0d      	ldr	r3, [pc, #52]	; (8006924 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	4313      	orrs	r3, r2
 80068f4:	4a0b      	ldr	r2, [pc, #44]	; (8006924 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 80068f6:	6013      	str	r3, [r2, #0]
 80068f8:	69bb      	ldr	r3, [r7, #24]
 80068fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068fc:	4613      	mov	r3, r2
 80068fe:	009b      	lsls	r3, r3, #2
 8006900:	4413      	add	r3, r2
 8006902:	009b      	lsls	r3, r3, #2
 8006904:	4a06      	ldr	r2, [pc, #24]	; (8006920 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 8006906:	441a      	add	r2, r3
 8006908:	69bb      	ldr	r3, [r7, #24]
 800690a:	3304      	adds	r3, #4
 800690c:	4619      	mov	r1, r3
 800690e:	4610      	mov	r0, r2
 8006910:	f7fe f8c9 	bl	8004aa6 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006914:	bf00      	nop
 8006916:	3720      	adds	r7, #32
 8006918:	46bd      	mov	sp, r7
 800691a:	bd80      	pop	{r7, pc}
 800691c:	20000300 	.word	0x20000300
 8006920:	20000304 	.word	0x20000304
 8006924:	20000408 	.word	0x20000408

08006928 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8006928:	b480      	push	{r7}
 800692a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800692c:	4b07      	ldr	r3, [pc, #28]	; (800694c <pvTaskIncrementMutexHeldCount+0x24>)
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	2b00      	cmp	r3, #0
 8006932:	d004      	beq.n	800693e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8006934:	4b05      	ldr	r3, [pc, #20]	; (800694c <pvTaskIncrementMutexHeldCount+0x24>)
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800693a:	3201      	adds	r2, #1
 800693c:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800693e:	4b03      	ldr	r3, [pc, #12]	; (800694c <pvTaskIncrementMutexHeldCount+0x24>)
 8006940:	681b      	ldr	r3, [r3, #0]
	}
 8006942:	4618      	mov	r0, r3
 8006944:	46bd      	mov	sp, r7
 8006946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800694a:	4770      	bx	lr
 800694c:	20000300 	.word	0x20000300

08006950 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006950:	b580      	push	{r7, lr}
 8006952:	b084      	sub	sp, #16
 8006954:	af00      	add	r7, sp, #0
 8006956:	6078      	str	r0, [r7, #4]
 8006958:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800695a:	4b29      	ldr	r3, [pc, #164]	; (8006a00 <prvAddCurrentTaskToDelayedList+0xb0>)
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006960:	4b28      	ldr	r3, [pc, #160]	; (8006a04 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	3304      	adds	r3, #4
 8006966:	4618      	mov	r0, r3
 8006968:	f7fe f8fa 	bl	8004b60 <uxListRemove>
 800696c:	4603      	mov	r3, r0
 800696e:	2b00      	cmp	r3, #0
 8006970:	d10b      	bne.n	800698a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8006972:	4b24      	ldr	r3, [pc, #144]	; (8006a04 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006978:	2201      	movs	r2, #1
 800697a:	fa02 f303 	lsl.w	r3, r2, r3
 800697e:	43da      	mvns	r2, r3
 8006980:	4b21      	ldr	r3, [pc, #132]	; (8006a08 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	4013      	ands	r3, r2
 8006986:	4a20      	ldr	r2, [pc, #128]	; (8006a08 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006988:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006990:	d10a      	bne.n	80069a8 <prvAddCurrentTaskToDelayedList+0x58>
 8006992:	683b      	ldr	r3, [r7, #0]
 8006994:	2b00      	cmp	r3, #0
 8006996:	d007      	beq.n	80069a8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006998:	4b1a      	ldr	r3, [pc, #104]	; (8006a04 <prvAddCurrentTaskToDelayedList+0xb4>)
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	3304      	adds	r3, #4
 800699e:	4619      	mov	r1, r3
 80069a0:	481a      	ldr	r0, [pc, #104]	; (8006a0c <prvAddCurrentTaskToDelayedList+0xbc>)
 80069a2:	f7fe f880 	bl	8004aa6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80069a6:	e026      	b.n	80069f6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80069a8:	68fa      	ldr	r2, [r7, #12]
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	4413      	add	r3, r2
 80069ae:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80069b0:	4b14      	ldr	r3, [pc, #80]	; (8006a04 <prvAddCurrentTaskToDelayedList+0xb4>)
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	68ba      	ldr	r2, [r7, #8]
 80069b6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80069b8:	68ba      	ldr	r2, [r7, #8]
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	429a      	cmp	r2, r3
 80069be:	d209      	bcs.n	80069d4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80069c0:	4b13      	ldr	r3, [pc, #76]	; (8006a10 <prvAddCurrentTaskToDelayedList+0xc0>)
 80069c2:	681a      	ldr	r2, [r3, #0]
 80069c4:	4b0f      	ldr	r3, [pc, #60]	; (8006a04 <prvAddCurrentTaskToDelayedList+0xb4>)
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	3304      	adds	r3, #4
 80069ca:	4619      	mov	r1, r3
 80069cc:	4610      	mov	r0, r2
 80069ce:	f7fe f88e 	bl	8004aee <vListInsert>
}
 80069d2:	e010      	b.n	80069f6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80069d4:	4b0f      	ldr	r3, [pc, #60]	; (8006a14 <prvAddCurrentTaskToDelayedList+0xc4>)
 80069d6:	681a      	ldr	r2, [r3, #0]
 80069d8:	4b0a      	ldr	r3, [pc, #40]	; (8006a04 <prvAddCurrentTaskToDelayedList+0xb4>)
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	3304      	adds	r3, #4
 80069de:	4619      	mov	r1, r3
 80069e0:	4610      	mov	r0, r2
 80069e2:	f7fe f884 	bl	8004aee <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80069e6:	4b0c      	ldr	r3, [pc, #48]	; (8006a18 <prvAddCurrentTaskToDelayedList+0xc8>)
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	68ba      	ldr	r2, [r7, #8]
 80069ec:	429a      	cmp	r2, r3
 80069ee:	d202      	bcs.n	80069f6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80069f0:	4a09      	ldr	r2, [pc, #36]	; (8006a18 <prvAddCurrentTaskToDelayedList+0xc8>)
 80069f2:	68bb      	ldr	r3, [r7, #8]
 80069f4:	6013      	str	r3, [r2, #0]
}
 80069f6:	bf00      	nop
 80069f8:	3710      	adds	r7, #16
 80069fa:	46bd      	mov	sp, r7
 80069fc:	bd80      	pop	{r7, pc}
 80069fe:	bf00      	nop
 8006a00:	20000404 	.word	0x20000404
 8006a04:	20000300 	.word	0x20000300
 8006a08:	20000408 	.word	0x20000408
 8006a0c:	200003ec 	.word	0x200003ec
 8006a10:	200003bc 	.word	0x200003bc
 8006a14:	200003b8 	.word	0x200003b8
 8006a18:	20000420 	.word	0x20000420

08006a1c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006a1c:	b480      	push	{r7}
 8006a1e:	b085      	sub	sp, #20
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	60f8      	str	r0, [r7, #12]
 8006a24:	60b9      	str	r1, [r7, #8]
 8006a26:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	3b04      	subs	r3, #4
 8006a2c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006a34:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	3b04      	subs	r3, #4
 8006a3a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006a3c:	68bb      	ldr	r3, [r7, #8]
 8006a3e:	f023 0201 	bic.w	r2, r3, #1
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	3b04      	subs	r3, #4
 8006a4a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006a4c:	4a0c      	ldr	r2, [pc, #48]	; (8006a80 <pxPortInitialiseStack+0x64>)
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	3b14      	subs	r3, #20
 8006a56:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006a58:	687a      	ldr	r2, [r7, #4]
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	3b04      	subs	r3, #4
 8006a62:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	f06f 0202 	mvn.w	r2, #2
 8006a6a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	3b20      	subs	r3, #32
 8006a70:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006a72:	68fb      	ldr	r3, [r7, #12]
}
 8006a74:	4618      	mov	r0, r3
 8006a76:	3714      	adds	r7, #20
 8006a78:	46bd      	mov	sp, r7
 8006a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a7e:	4770      	bx	lr
 8006a80:	08006a85 	.word	0x08006a85

08006a84 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006a84:	b480      	push	{r7}
 8006a86:	b085      	sub	sp, #20
 8006a88:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006a8a:	2300      	movs	r3, #0
 8006a8c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006a8e:	4b11      	ldr	r3, [pc, #68]	; (8006ad4 <prvTaskExitError+0x50>)
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a96:	d009      	beq.n	8006aac <prvTaskExitError+0x28>
 8006a98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a9c:	f383 8811 	msr	BASEPRI, r3
 8006aa0:	f3bf 8f6f 	isb	sy
 8006aa4:	f3bf 8f4f 	dsb	sy
 8006aa8:	60fb      	str	r3, [r7, #12]
 8006aaa:	e7fe      	b.n	8006aaa <prvTaskExitError+0x26>
 8006aac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ab0:	f383 8811 	msr	BASEPRI, r3
 8006ab4:	f3bf 8f6f 	isb	sy
 8006ab8:	f3bf 8f4f 	dsb	sy
 8006abc:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006abe:	bf00      	nop
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d0fc      	beq.n	8006ac0 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006ac6:	bf00      	nop
 8006ac8:	3714      	adds	r7, #20
 8006aca:	46bd      	mov	sp, r7
 8006acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad0:	4770      	bx	lr
 8006ad2:	bf00      	nop
 8006ad4:	2000000c 	.word	0x2000000c
	...

08006ae0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006ae0:	4b07      	ldr	r3, [pc, #28]	; (8006b00 <pxCurrentTCBConst2>)
 8006ae2:	6819      	ldr	r1, [r3, #0]
 8006ae4:	6808      	ldr	r0, [r1, #0]
 8006ae6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006aea:	f380 8809 	msr	PSP, r0
 8006aee:	f3bf 8f6f 	isb	sy
 8006af2:	f04f 0000 	mov.w	r0, #0
 8006af6:	f380 8811 	msr	BASEPRI, r0
 8006afa:	4770      	bx	lr
 8006afc:	f3af 8000 	nop.w

08006b00 <pxCurrentTCBConst2>:
 8006b00:	20000300 	.word	0x20000300
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006b04:	bf00      	nop
 8006b06:	bf00      	nop

08006b08 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006b08:	4808      	ldr	r0, [pc, #32]	; (8006b2c <prvPortStartFirstTask+0x24>)
 8006b0a:	6800      	ldr	r0, [r0, #0]
 8006b0c:	6800      	ldr	r0, [r0, #0]
 8006b0e:	f380 8808 	msr	MSP, r0
 8006b12:	f04f 0000 	mov.w	r0, #0
 8006b16:	f380 8814 	msr	CONTROL, r0
 8006b1a:	b662      	cpsie	i
 8006b1c:	b661      	cpsie	f
 8006b1e:	f3bf 8f4f 	dsb	sy
 8006b22:	f3bf 8f6f 	isb	sy
 8006b26:	df00      	svc	0
 8006b28:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006b2a:	bf00      	nop
 8006b2c:	e000ed08 	.word	0xe000ed08

08006b30 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006b30:	b580      	push	{r7, lr}
 8006b32:	b086      	sub	sp, #24
 8006b34:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006b36:	4b44      	ldr	r3, [pc, #272]	; (8006c48 <xPortStartScheduler+0x118>)
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	4a44      	ldr	r2, [pc, #272]	; (8006c4c <xPortStartScheduler+0x11c>)
 8006b3c:	4293      	cmp	r3, r2
 8006b3e:	d109      	bne.n	8006b54 <xPortStartScheduler+0x24>
 8006b40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b44:	f383 8811 	msr	BASEPRI, r3
 8006b48:	f3bf 8f6f 	isb	sy
 8006b4c:	f3bf 8f4f 	dsb	sy
 8006b50:	613b      	str	r3, [r7, #16]
 8006b52:	e7fe      	b.n	8006b52 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006b54:	4b3c      	ldr	r3, [pc, #240]	; (8006c48 <xPortStartScheduler+0x118>)
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	4a3d      	ldr	r2, [pc, #244]	; (8006c50 <xPortStartScheduler+0x120>)
 8006b5a:	4293      	cmp	r3, r2
 8006b5c:	d109      	bne.n	8006b72 <xPortStartScheduler+0x42>
 8006b5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b62:	f383 8811 	msr	BASEPRI, r3
 8006b66:	f3bf 8f6f 	isb	sy
 8006b6a:	f3bf 8f4f 	dsb	sy
 8006b6e:	60fb      	str	r3, [r7, #12]
 8006b70:	e7fe      	b.n	8006b70 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006b72:	4b38      	ldr	r3, [pc, #224]	; (8006c54 <xPortStartScheduler+0x124>)
 8006b74:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006b76:	697b      	ldr	r3, [r7, #20]
 8006b78:	781b      	ldrb	r3, [r3, #0]
 8006b7a:	b2db      	uxtb	r3, r3
 8006b7c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006b7e:	697b      	ldr	r3, [r7, #20]
 8006b80:	22ff      	movs	r2, #255	; 0xff
 8006b82:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006b84:	697b      	ldr	r3, [r7, #20]
 8006b86:	781b      	ldrb	r3, [r3, #0]
 8006b88:	b2db      	uxtb	r3, r3
 8006b8a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006b8c:	78fb      	ldrb	r3, [r7, #3]
 8006b8e:	b2db      	uxtb	r3, r3
 8006b90:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006b94:	b2da      	uxtb	r2, r3
 8006b96:	4b30      	ldr	r3, [pc, #192]	; (8006c58 <xPortStartScheduler+0x128>)
 8006b98:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006b9a:	4b30      	ldr	r3, [pc, #192]	; (8006c5c <xPortStartScheduler+0x12c>)
 8006b9c:	2207      	movs	r2, #7
 8006b9e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006ba0:	e009      	b.n	8006bb6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8006ba2:	4b2e      	ldr	r3, [pc, #184]	; (8006c5c <xPortStartScheduler+0x12c>)
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	3b01      	subs	r3, #1
 8006ba8:	4a2c      	ldr	r2, [pc, #176]	; (8006c5c <xPortStartScheduler+0x12c>)
 8006baa:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006bac:	78fb      	ldrb	r3, [r7, #3]
 8006bae:	b2db      	uxtb	r3, r3
 8006bb0:	005b      	lsls	r3, r3, #1
 8006bb2:	b2db      	uxtb	r3, r3
 8006bb4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006bb6:	78fb      	ldrb	r3, [r7, #3]
 8006bb8:	b2db      	uxtb	r3, r3
 8006bba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006bbe:	2b80      	cmp	r3, #128	; 0x80
 8006bc0:	d0ef      	beq.n	8006ba2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006bc2:	4b26      	ldr	r3, [pc, #152]	; (8006c5c <xPortStartScheduler+0x12c>)
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	f1c3 0307 	rsb	r3, r3, #7
 8006bca:	2b04      	cmp	r3, #4
 8006bcc:	d009      	beq.n	8006be2 <xPortStartScheduler+0xb2>
 8006bce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bd2:	f383 8811 	msr	BASEPRI, r3
 8006bd6:	f3bf 8f6f 	isb	sy
 8006bda:	f3bf 8f4f 	dsb	sy
 8006bde:	60bb      	str	r3, [r7, #8]
 8006be0:	e7fe      	b.n	8006be0 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006be2:	4b1e      	ldr	r3, [pc, #120]	; (8006c5c <xPortStartScheduler+0x12c>)
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	021b      	lsls	r3, r3, #8
 8006be8:	4a1c      	ldr	r2, [pc, #112]	; (8006c5c <xPortStartScheduler+0x12c>)
 8006bea:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006bec:	4b1b      	ldr	r3, [pc, #108]	; (8006c5c <xPortStartScheduler+0x12c>)
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006bf4:	4a19      	ldr	r2, [pc, #100]	; (8006c5c <xPortStartScheduler+0x12c>)
 8006bf6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	b2da      	uxtb	r2, r3
 8006bfc:	697b      	ldr	r3, [r7, #20]
 8006bfe:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006c00:	4b17      	ldr	r3, [pc, #92]	; (8006c60 <xPortStartScheduler+0x130>)
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	4a16      	ldr	r2, [pc, #88]	; (8006c60 <xPortStartScheduler+0x130>)
 8006c06:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006c0a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006c0c:	4b14      	ldr	r3, [pc, #80]	; (8006c60 <xPortStartScheduler+0x130>)
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	4a13      	ldr	r2, [pc, #76]	; (8006c60 <xPortStartScheduler+0x130>)
 8006c12:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006c16:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006c18:	f000 f8d6 	bl	8006dc8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006c1c:	4b11      	ldr	r3, [pc, #68]	; (8006c64 <xPortStartScheduler+0x134>)
 8006c1e:	2200      	movs	r2, #0
 8006c20:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006c22:	f000 f8f5 	bl	8006e10 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006c26:	4b10      	ldr	r3, [pc, #64]	; (8006c68 <xPortStartScheduler+0x138>)
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	4a0f      	ldr	r2, [pc, #60]	; (8006c68 <xPortStartScheduler+0x138>)
 8006c2c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006c30:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006c32:	f7ff ff69 	bl	8006b08 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006c36:	f7ff fa89 	bl	800614c <vTaskSwitchContext>
	prvTaskExitError();
 8006c3a:	f7ff ff23 	bl	8006a84 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006c3e:	2300      	movs	r3, #0
}
 8006c40:	4618      	mov	r0, r3
 8006c42:	3718      	adds	r7, #24
 8006c44:	46bd      	mov	sp, r7
 8006c46:	bd80      	pop	{r7, pc}
 8006c48:	e000ed00 	.word	0xe000ed00
 8006c4c:	410fc271 	.word	0x410fc271
 8006c50:	410fc270 	.word	0x410fc270
 8006c54:	e000e400 	.word	0xe000e400
 8006c58:	2000042c 	.word	0x2000042c
 8006c5c:	20000430 	.word	0x20000430
 8006c60:	e000ed20 	.word	0xe000ed20
 8006c64:	2000000c 	.word	0x2000000c
 8006c68:	e000ef34 	.word	0xe000ef34

08006c6c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006c6c:	b480      	push	{r7}
 8006c6e:	b083      	sub	sp, #12
 8006c70:	af00      	add	r7, sp, #0
 8006c72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c76:	f383 8811 	msr	BASEPRI, r3
 8006c7a:	f3bf 8f6f 	isb	sy
 8006c7e:	f3bf 8f4f 	dsb	sy
 8006c82:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006c84:	4b0e      	ldr	r3, [pc, #56]	; (8006cc0 <vPortEnterCritical+0x54>)
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	3301      	adds	r3, #1
 8006c8a:	4a0d      	ldr	r2, [pc, #52]	; (8006cc0 <vPortEnterCritical+0x54>)
 8006c8c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006c8e:	4b0c      	ldr	r3, [pc, #48]	; (8006cc0 <vPortEnterCritical+0x54>)
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	2b01      	cmp	r3, #1
 8006c94:	d10e      	bne.n	8006cb4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006c96:	4b0b      	ldr	r3, [pc, #44]	; (8006cc4 <vPortEnterCritical+0x58>)
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	b2db      	uxtb	r3, r3
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d009      	beq.n	8006cb4 <vPortEnterCritical+0x48>
 8006ca0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ca4:	f383 8811 	msr	BASEPRI, r3
 8006ca8:	f3bf 8f6f 	isb	sy
 8006cac:	f3bf 8f4f 	dsb	sy
 8006cb0:	603b      	str	r3, [r7, #0]
 8006cb2:	e7fe      	b.n	8006cb2 <vPortEnterCritical+0x46>
	}
}
 8006cb4:	bf00      	nop
 8006cb6:	370c      	adds	r7, #12
 8006cb8:	46bd      	mov	sp, r7
 8006cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cbe:	4770      	bx	lr
 8006cc0:	2000000c 	.word	0x2000000c
 8006cc4:	e000ed04 	.word	0xe000ed04

08006cc8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006cc8:	b480      	push	{r7}
 8006cca:	b083      	sub	sp, #12
 8006ccc:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006cce:	4b11      	ldr	r3, [pc, #68]	; (8006d14 <vPortExitCritical+0x4c>)
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d109      	bne.n	8006cea <vPortExitCritical+0x22>
 8006cd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cda:	f383 8811 	msr	BASEPRI, r3
 8006cde:	f3bf 8f6f 	isb	sy
 8006ce2:	f3bf 8f4f 	dsb	sy
 8006ce6:	607b      	str	r3, [r7, #4]
 8006ce8:	e7fe      	b.n	8006ce8 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8006cea:	4b0a      	ldr	r3, [pc, #40]	; (8006d14 <vPortExitCritical+0x4c>)
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	3b01      	subs	r3, #1
 8006cf0:	4a08      	ldr	r2, [pc, #32]	; (8006d14 <vPortExitCritical+0x4c>)
 8006cf2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006cf4:	4b07      	ldr	r3, [pc, #28]	; (8006d14 <vPortExitCritical+0x4c>)
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d104      	bne.n	8006d06 <vPortExitCritical+0x3e>
 8006cfc:	2300      	movs	r3, #0
 8006cfe:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006d00:	683b      	ldr	r3, [r7, #0]
 8006d02:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8006d06:	bf00      	nop
 8006d08:	370c      	adds	r7, #12
 8006d0a:	46bd      	mov	sp, r7
 8006d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d10:	4770      	bx	lr
 8006d12:	bf00      	nop
 8006d14:	2000000c 	.word	0x2000000c
	...

08006d20 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006d20:	f3ef 8009 	mrs	r0, PSP
 8006d24:	f3bf 8f6f 	isb	sy
 8006d28:	4b15      	ldr	r3, [pc, #84]	; (8006d80 <pxCurrentTCBConst>)
 8006d2a:	681a      	ldr	r2, [r3, #0]
 8006d2c:	f01e 0f10 	tst.w	lr, #16
 8006d30:	bf08      	it	eq
 8006d32:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006d36:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d3a:	6010      	str	r0, [r2, #0]
 8006d3c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006d40:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006d44:	f380 8811 	msr	BASEPRI, r0
 8006d48:	f3bf 8f4f 	dsb	sy
 8006d4c:	f3bf 8f6f 	isb	sy
 8006d50:	f7ff f9fc 	bl	800614c <vTaskSwitchContext>
 8006d54:	f04f 0000 	mov.w	r0, #0
 8006d58:	f380 8811 	msr	BASEPRI, r0
 8006d5c:	bc09      	pop	{r0, r3}
 8006d5e:	6819      	ldr	r1, [r3, #0]
 8006d60:	6808      	ldr	r0, [r1, #0]
 8006d62:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d66:	f01e 0f10 	tst.w	lr, #16
 8006d6a:	bf08      	it	eq
 8006d6c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006d70:	f380 8809 	msr	PSP, r0
 8006d74:	f3bf 8f6f 	isb	sy
 8006d78:	4770      	bx	lr
 8006d7a:	bf00      	nop
 8006d7c:	f3af 8000 	nop.w

08006d80 <pxCurrentTCBConst>:
 8006d80:	20000300 	.word	0x20000300
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006d84:	bf00      	nop
 8006d86:	bf00      	nop

08006d88 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006d88:	b580      	push	{r7, lr}
 8006d8a:	b082      	sub	sp, #8
 8006d8c:	af00      	add	r7, sp, #0
	__asm volatile
 8006d8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d92:	f383 8811 	msr	BASEPRI, r3
 8006d96:	f3bf 8f6f 	isb	sy
 8006d9a:	f3bf 8f4f 	dsb	sy
 8006d9e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006da0:	f7ff f91c 	bl	8005fdc <xTaskIncrementTick>
 8006da4:	4603      	mov	r3, r0
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d003      	beq.n	8006db2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006daa:	4b06      	ldr	r3, [pc, #24]	; (8006dc4 <SysTick_Handler+0x3c>)
 8006dac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006db0:	601a      	str	r2, [r3, #0]
 8006db2:	2300      	movs	r3, #0
 8006db4:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006db6:	683b      	ldr	r3, [r7, #0]
 8006db8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8006dbc:	bf00      	nop
 8006dbe:	3708      	adds	r7, #8
 8006dc0:	46bd      	mov	sp, r7
 8006dc2:	bd80      	pop	{r7, pc}
 8006dc4:	e000ed04 	.word	0xe000ed04

08006dc8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006dc8:	b480      	push	{r7}
 8006dca:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006dcc:	4b0b      	ldr	r3, [pc, #44]	; (8006dfc <vPortSetupTimerInterrupt+0x34>)
 8006dce:	2200      	movs	r2, #0
 8006dd0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006dd2:	4b0b      	ldr	r3, [pc, #44]	; (8006e00 <vPortSetupTimerInterrupt+0x38>)
 8006dd4:	2200      	movs	r2, #0
 8006dd6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006dd8:	4b0a      	ldr	r3, [pc, #40]	; (8006e04 <vPortSetupTimerInterrupt+0x3c>)
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	4a0a      	ldr	r2, [pc, #40]	; (8006e08 <vPortSetupTimerInterrupt+0x40>)
 8006dde:	fba2 2303 	umull	r2, r3, r2, r3
 8006de2:	099b      	lsrs	r3, r3, #6
 8006de4:	4a09      	ldr	r2, [pc, #36]	; (8006e0c <vPortSetupTimerInterrupt+0x44>)
 8006de6:	3b01      	subs	r3, #1
 8006de8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006dea:	4b04      	ldr	r3, [pc, #16]	; (8006dfc <vPortSetupTimerInterrupt+0x34>)
 8006dec:	2207      	movs	r2, #7
 8006dee:	601a      	str	r2, [r3, #0]
}
 8006df0:	bf00      	nop
 8006df2:	46bd      	mov	sp, r7
 8006df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df8:	4770      	bx	lr
 8006dfa:	bf00      	nop
 8006dfc:	e000e010 	.word	0xe000e010
 8006e00:	e000e018 	.word	0xe000e018
 8006e04:	20000000 	.word	0x20000000
 8006e08:	10624dd3 	.word	0x10624dd3
 8006e0c:	e000e014 	.word	0xe000e014

08006e10 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006e10:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006e20 <vPortEnableVFP+0x10>
 8006e14:	6801      	ldr	r1, [r0, #0]
 8006e16:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8006e1a:	6001      	str	r1, [r0, #0]
 8006e1c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006e1e:	bf00      	nop
 8006e20:	e000ed88 	.word	0xe000ed88

08006e24 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006e24:	b480      	push	{r7}
 8006e26:	b085      	sub	sp, #20
 8006e28:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006e2a:	f3ef 8305 	mrs	r3, IPSR
 8006e2e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	2b0f      	cmp	r3, #15
 8006e34:	d913      	bls.n	8006e5e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006e36:	4a16      	ldr	r2, [pc, #88]	; (8006e90 <vPortValidateInterruptPriority+0x6c>)
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	4413      	add	r3, r2
 8006e3c:	781b      	ldrb	r3, [r3, #0]
 8006e3e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006e40:	4b14      	ldr	r3, [pc, #80]	; (8006e94 <vPortValidateInterruptPriority+0x70>)
 8006e42:	781b      	ldrb	r3, [r3, #0]
 8006e44:	7afa      	ldrb	r2, [r7, #11]
 8006e46:	429a      	cmp	r2, r3
 8006e48:	d209      	bcs.n	8006e5e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8006e4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e4e:	f383 8811 	msr	BASEPRI, r3
 8006e52:	f3bf 8f6f 	isb	sy
 8006e56:	f3bf 8f4f 	dsb	sy
 8006e5a:	607b      	str	r3, [r7, #4]
 8006e5c:	e7fe      	b.n	8006e5c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006e5e:	4b0e      	ldr	r3, [pc, #56]	; (8006e98 <vPortValidateInterruptPriority+0x74>)
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006e66:	4b0d      	ldr	r3, [pc, #52]	; (8006e9c <vPortValidateInterruptPriority+0x78>)
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	429a      	cmp	r2, r3
 8006e6c:	d909      	bls.n	8006e82 <vPortValidateInterruptPriority+0x5e>
 8006e6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e72:	f383 8811 	msr	BASEPRI, r3
 8006e76:	f3bf 8f6f 	isb	sy
 8006e7a:	f3bf 8f4f 	dsb	sy
 8006e7e:	603b      	str	r3, [r7, #0]
 8006e80:	e7fe      	b.n	8006e80 <vPortValidateInterruptPriority+0x5c>
	}
 8006e82:	bf00      	nop
 8006e84:	3714      	adds	r7, #20
 8006e86:	46bd      	mov	sp, r7
 8006e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e8c:	4770      	bx	lr
 8006e8e:	bf00      	nop
 8006e90:	e000e3f0 	.word	0xe000e3f0
 8006e94:	2000042c 	.word	0x2000042c
 8006e98:	e000ed0c 	.word	0xe000ed0c
 8006e9c:	20000430 	.word	0x20000430

08006ea0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006ea0:	b580      	push	{r7, lr}
 8006ea2:	b08a      	sub	sp, #40	; 0x28
 8006ea4:	af00      	add	r7, sp, #0
 8006ea6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006ea8:	2300      	movs	r3, #0
 8006eaa:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006eac:	f7fe ffca 	bl	8005e44 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006eb0:	4b57      	ldr	r3, [pc, #348]	; (8007010 <pvPortMalloc+0x170>)
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d101      	bne.n	8006ebc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006eb8:	f000 f90c 	bl	80070d4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006ebc:	4b55      	ldr	r3, [pc, #340]	; (8007014 <pvPortMalloc+0x174>)
 8006ebe:	681a      	ldr	r2, [r3, #0]
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	4013      	ands	r3, r2
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	f040 808c 	bne.w	8006fe2 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d01c      	beq.n	8006f0a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8006ed0:	2208      	movs	r2, #8
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	4413      	add	r3, r2
 8006ed6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	f003 0307 	and.w	r3, r3, #7
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d013      	beq.n	8006f0a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	f023 0307 	bic.w	r3, r3, #7
 8006ee8:	3308      	adds	r3, #8
 8006eea:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	f003 0307 	and.w	r3, r3, #7
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d009      	beq.n	8006f0a <pvPortMalloc+0x6a>
 8006ef6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006efa:	f383 8811 	msr	BASEPRI, r3
 8006efe:	f3bf 8f6f 	isb	sy
 8006f02:	f3bf 8f4f 	dsb	sy
 8006f06:	617b      	str	r3, [r7, #20]
 8006f08:	e7fe      	b.n	8006f08 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d068      	beq.n	8006fe2 <pvPortMalloc+0x142>
 8006f10:	4b41      	ldr	r3, [pc, #260]	; (8007018 <pvPortMalloc+0x178>)
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	687a      	ldr	r2, [r7, #4]
 8006f16:	429a      	cmp	r2, r3
 8006f18:	d863      	bhi.n	8006fe2 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006f1a:	4b40      	ldr	r3, [pc, #256]	; (800701c <pvPortMalloc+0x17c>)
 8006f1c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006f1e:	4b3f      	ldr	r3, [pc, #252]	; (800701c <pvPortMalloc+0x17c>)
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006f24:	e004      	b.n	8006f30 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8006f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f28:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f32:	685b      	ldr	r3, [r3, #4]
 8006f34:	687a      	ldr	r2, [r7, #4]
 8006f36:	429a      	cmp	r2, r3
 8006f38:	d903      	bls.n	8006f42 <pvPortMalloc+0xa2>
 8006f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d1f1      	bne.n	8006f26 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006f42:	4b33      	ldr	r3, [pc, #204]	; (8007010 <pvPortMalloc+0x170>)
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006f48:	429a      	cmp	r2, r3
 8006f4a:	d04a      	beq.n	8006fe2 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006f4c:	6a3b      	ldr	r3, [r7, #32]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	2208      	movs	r2, #8
 8006f52:	4413      	add	r3, r2
 8006f54:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f58:	681a      	ldr	r2, [r3, #0]
 8006f5a:	6a3b      	ldr	r3, [r7, #32]
 8006f5c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f60:	685a      	ldr	r2, [r3, #4]
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	1ad2      	subs	r2, r2, r3
 8006f66:	2308      	movs	r3, #8
 8006f68:	005b      	lsls	r3, r3, #1
 8006f6a:	429a      	cmp	r2, r3
 8006f6c:	d91e      	bls.n	8006fac <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006f6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	4413      	add	r3, r2
 8006f74:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006f76:	69bb      	ldr	r3, [r7, #24]
 8006f78:	f003 0307 	and.w	r3, r3, #7
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d009      	beq.n	8006f94 <pvPortMalloc+0xf4>
 8006f80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f84:	f383 8811 	msr	BASEPRI, r3
 8006f88:	f3bf 8f6f 	isb	sy
 8006f8c:	f3bf 8f4f 	dsb	sy
 8006f90:	613b      	str	r3, [r7, #16]
 8006f92:	e7fe      	b.n	8006f92 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f96:	685a      	ldr	r2, [r3, #4]
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	1ad2      	subs	r2, r2, r3
 8006f9c:	69bb      	ldr	r3, [r7, #24]
 8006f9e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fa2:	687a      	ldr	r2, [r7, #4]
 8006fa4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006fa6:	69b8      	ldr	r0, [r7, #24]
 8006fa8:	f000 f8f6 	bl	8007198 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006fac:	4b1a      	ldr	r3, [pc, #104]	; (8007018 <pvPortMalloc+0x178>)
 8006fae:	681a      	ldr	r2, [r3, #0]
 8006fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fb2:	685b      	ldr	r3, [r3, #4]
 8006fb4:	1ad3      	subs	r3, r2, r3
 8006fb6:	4a18      	ldr	r2, [pc, #96]	; (8007018 <pvPortMalloc+0x178>)
 8006fb8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006fba:	4b17      	ldr	r3, [pc, #92]	; (8007018 <pvPortMalloc+0x178>)
 8006fbc:	681a      	ldr	r2, [r3, #0]
 8006fbe:	4b18      	ldr	r3, [pc, #96]	; (8007020 <pvPortMalloc+0x180>)
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	429a      	cmp	r2, r3
 8006fc4:	d203      	bcs.n	8006fce <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006fc6:	4b14      	ldr	r3, [pc, #80]	; (8007018 <pvPortMalloc+0x178>)
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	4a15      	ldr	r2, [pc, #84]	; (8007020 <pvPortMalloc+0x180>)
 8006fcc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fd0:	685a      	ldr	r2, [r3, #4]
 8006fd2:	4b10      	ldr	r3, [pc, #64]	; (8007014 <pvPortMalloc+0x174>)
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	431a      	orrs	r2, r3
 8006fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fda:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fde:	2200      	movs	r2, #0
 8006fe0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006fe2:	f7fe ff3d 	bl	8005e60 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006fe6:	69fb      	ldr	r3, [r7, #28]
 8006fe8:	f003 0307 	and.w	r3, r3, #7
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d009      	beq.n	8007004 <pvPortMalloc+0x164>
 8006ff0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ff4:	f383 8811 	msr	BASEPRI, r3
 8006ff8:	f3bf 8f6f 	isb	sy
 8006ffc:	f3bf 8f4f 	dsb	sy
 8007000:	60fb      	str	r3, [r7, #12]
 8007002:	e7fe      	b.n	8007002 <pvPortMalloc+0x162>
	return pvReturn;
 8007004:	69fb      	ldr	r3, [r7, #28]
}
 8007006:	4618      	mov	r0, r3
 8007008:	3728      	adds	r7, #40	; 0x28
 800700a:	46bd      	mov	sp, r7
 800700c:	bd80      	pop	{r7, pc}
 800700e:	bf00      	nop
 8007010:	2000843c 	.word	0x2000843c
 8007014:	20008448 	.word	0x20008448
 8007018:	20008440 	.word	0x20008440
 800701c:	20008434 	.word	0x20008434
 8007020:	20008444 	.word	0x20008444

08007024 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007024:	b580      	push	{r7, lr}
 8007026:	b086      	sub	sp, #24
 8007028:	af00      	add	r7, sp, #0
 800702a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	2b00      	cmp	r3, #0
 8007034:	d046      	beq.n	80070c4 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007036:	2308      	movs	r3, #8
 8007038:	425b      	negs	r3, r3
 800703a:	697a      	ldr	r2, [r7, #20]
 800703c:	4413      	add	r3, r2
 800703e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007040:	697b      	ldr	r3, [r7, #20]
 8007042:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007044:	693b      	ldr	r3, [r7, #16]
 8007046:	685a      	ldr	r2, [r3, #4]
 8007048:	4b20      	ldr	r3, [pc, #128]	; (80070cc <vPortFree+0xa8>)
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	4013      	ands	r3, r2
 800704e:	2b00      	cmp	r3, #0
 8007050:	d109      	bne.n	8007066 <vPortFree+0x42>
 8007052:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007056:	f383 8811 	msr	BASEPRI, r3
 800705a:	f3bf 8f6f 	isb	sy
 800705e:	f3bf 8f4f 	dsb	sy
 8007062:	60fb      	str	r3, [r7, #12]
 8007064:	e7fe      	b.n	8007064 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007066:	693b      	ldr	r3, [r7, #16]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	2b00      	cmp	r3, #0
 800706c:	d009      	beq.n	8007082 <vPortFree+0x5e>
 800706e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007072:	f383 8811 	msr	BASEPRI, r3
 8007076:	f3bf 8f6f 	isb	sy
 800707a:	f3bf 8f4f 	dsb	sy
 800707e:	60bb      	str	r3, [r7, #8]
 8007080:	e7fe      	b.n	8007080 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007082:	693b      	ldr	r3, [r7, #16]
 8007084:	685a      	ldr	r2, [r3, #4]
 8007086:	4b11      	ldr	r3, [pc, #68]	; (80070cc <vPortFree+0xa8>)
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	4013      	ands	r3, r2
 800708c:	2b00      	cmp	r3, #0
 800708e:	d019      	beq.n	80070c4 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007090:	693b      	ldr	r3, [r7, #16]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	2b00      	cmp	r3, #0
 8007096:	d115      	bne.n	80070c4 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007098:	693b      	ldr	r3, [r7, #16]
 800709a:	685a      	ldr	r2, [r3, #4]
 800709c:	4b0b      	ldr	r3, [pc, #44]	; (80070cc <vPortFree+0xa8>)
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	43db      	mvns	r3, r3
 80070a2:	401a      	ands	r2, r3
 80070a4:	693b      	ldr	r3, [r7, #16]
 80070a6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80070a8:	f7fe fecc 	bl	8005e44 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80070ac:	693b      	ldr	r3, [r7, #16]
 80070ae:	685a      	ldr	r2, [r3, #4]
 80070b0:	4b07      	ldr	r3, [pc, #28]	; (80070d0 <vPortFree+0xac>)
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	4413      	add	r3, r2
 80070b6:	4a06      	ldr	r2, [pc, #24]	; (80070d0 <vPortFree+0xac>)
 80070b8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80070ba:	6938      	ldr	r0, [r7, #16]
 80070bc:	f000 f86c 	bl	8007198 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80070c0:	f7fe fece 	bl	8005e60 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80070c4:	bf00      	nop
 80070c6:	3718      	adds	r7, #24
 80070c8:	46bd      	mov	sp, r7
 80070ca:	bd80      	pop	{r7, pc}
 80070cc:	20008448 	.word	0x20008448
 80070d0:	20008440 	.word	0x20008440

080070d4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80070d4:	b480      	push	{r7}
 80070d6:	b085      	sub	sp, #20
 80070d8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80070da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80070de:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80070e0:	4b27      	ldr	r3, [pc, #156]	; (8007180 <prvHeapInit+0xac>)
 80070e2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	f003 0307 	and.w	r3, r3, #7
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d00c      	beq.n	8007108 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	3307      	adds	r3, #7
 80070f2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	f023 0307 	bic.w	r3, r3, #7
 80070fa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80070fc:	68ba      	ldr	r2, [r7, #8]
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	1ad3      	subs	r3, r2, r3
 8007102:	4a1f      	ldr	r2, [pc, #124]	; (8007180 <prvHeapInit+0xac>)
 8007104:	4413      	add	r3, r2
 8007106:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800710c:	4a1d      	ldr	r2, [pc, #116]	; (8007184 <prvHeapInit+0xb0>)
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007112:	4b1c      	ldr	r3, [pc, #112]	; (8007184 <prvHeapInit+0xb0>)
 8007114:	2200      	movs	r2, #0
 8007116:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	68ba      	ldr	r2, [r7, #8]
 800711c:	4413      	add	r3, r2
 800711e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007120:	2208      	movs	r2, #8
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	1a9b      	subs	r3, r3, r2
 8007126:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	f023 0307 	bic.w	r3, r3, #7
 800712e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	4a15      	ldr	r2, [pc, #84]	; (8007188 <prvHeapInit+0xb4>)
 8007134:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007136:	4b14      	ldr	r3, [pc, #80]	; (8007188 <prvHeapInit+0xb4>)
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	2200      	movs	r2, #0
 800713c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800713e:	4b12      	ldr	r3, [pc, #72]	; (8007188 <prvHeapInit+0xb4>)
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	2200      	movs	r2, #0
 8007144:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800714a:	683b      	ldr	r3, [r7, #0]
 800714c:	68fa      	ldr	r2, [r7, #12]
 800714e:	1ad2      	subs	r2, r2, r3
 8007150:	683b      	ldr	r3, [r7, #0]
 8007152:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007154:	4b0c      	ldr	r3, [pc, #48]	; (8007188 <prvHeapInit+0xb4>)
 8007156:	681a      	ldr	r2, [r3, #0]
 8007158:	683b      	ldr	r3, [r7, #0]
 800715a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800715c:	683b      	ldr	r3, [r7, #0]
 800715e:	685b      	ldr	r3, [r3, #4]
 8007160:	4a0a      	ldr	r2, [pc, #40]	; (800718c <prvHeapInit+0xb8>)
 8007162:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007164:	683b      	ldr	r3, [r7, #0]
 8007166:	685b      	ldr	r3, [r3, #4]
 8007168:	4a09      	ldr	r2, [pc, #36]	; (8007190 <prvHeapInit+0xbc>)
 800716a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800716c:	4b09      	ldr	r3, [pc, #36]	; (8007194 <prvHeapInit+0xc0>)
 800716e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007172:	601a      	str	r2, [r3, #0]
}
 8007174:	bf00      	nop
 8007176:	3714      	adds	r7, #20
 8007178:	46bd      	mov	sp, r7
 800717a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800717e:	4770      	bx	lr
 8007180:	20000434 	.word	0x20000434
 8007184:	20008434 	.word	0x20008434
 8007188:	2000843c 	.word	0x2000843c
 800718c:	20008444 	.word	0x20008444
 8007190:	20008440 	.word	0x20008440
 8007194:	20008448 	.word	0x20008448

08007198 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007198:	b480      	push	{r7}
 800719a:	b085      	sub	sp, #20
 800719c:	af00      	add	r7, sp, #0
 800719e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80071a0:	4b28      	ldr	r3, [pc, #160]	; (8007244 <prvInsertBlockIntoFreeList+0xac>)
 80071a2:	60fb      	str	r3, [r7, #12]
 80071a4:	e002      	b.n	80071ac <prvInsertBlockIntoFreeList+0x14>
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	60fb      	str	r3, [r7, #12]
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	687a      	ldr	r2, [r7, #4]
 80071b2:	429a      	cmp	r2, r3
 80071b4:	d8f7      	bhi.n	80071a6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	685b      	ldr	r3, [r3, #4]
 80071be:	68ba      	ldr	r2, [r7, #8]
 80071c0:	4413      	add	r3, r2
 80071c2:	687a      	ldr	r2, [r7, #4]
 80071c4:	429a      	cmp	r2, r3
 80071c6:	d108      	bne.n	80071da <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	685a      	ldr	r2, [r3, #4]
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	685b      	ldr	r3, [r3, #4]
 80071d0:	441a      	add	r2, r3
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	685b      	ldr	r3, [r3, #4]
 80071e2:	68ba      	ldr	r2, [r7, #8]
 80071e4:	441a      	add	r2, r3
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	429a      	cmp	r2, r3
 80071ec:	d118      	bne.n	8007220 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	681a      	ldr	r2, [r3, #0]
 80071f2:	4b15      	ldr	r3, [pc, #84]	; (8007248 <prvInsertBlockIntoFreeList+0xb0>)
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	429a      	cmp	r2, r3
 80071f8:	d00d      	beq.n	8007216 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	685a      	ldr	r2, [r3, #4]
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	685b      	ldr	r3, [r3, #4]
 8007204:	441a      	add	r2, r3
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	681a      	ldr	r2, [r3, #0]
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	601a      	str	r2, [r3, #0]
 8007214:	e008      	b.n	8007228 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007216:	4b0c      	ldr	r3, [pc, #48]	; (8007248 <prvInsertBlockIntoFreeList+0xb0>)
 8007218:	681a      	ldr	r2, [r3, #0]
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	601a      	str	r2, [r3, #0]
 800721e:	e003      	b.n	8007228 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	681a      	ldr	r2, [r3, #0]
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007228:	68fa      	ldr	r2, [r7, #12]
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	429a      	cmp	r2, r3
 800722e:	d002      	beq.n	8007236 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	687a      	ldr	r2, [r7, #4]
 8007234:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007236:	bf00      	nop
 8007238:	3714      	adds	r7, #20
 800723a:	46bd      	mov	sp, r7
 800723c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007240:	4770      	bx	lr
 8007242:	bf00      	nop
 8007244:	20008434 	.word	0x20008434
 8007248:	2000843c 	.word	0x2000843c

0800724c <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 800724c:	b580      	push	{r7, lr}
 800724e:	b084      	sub	sp, #16
 8007250:	af00      	add	r7, sp, #0
 8007252:	6078      	str	r0, [r7, #4]
 8007254:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 8007256:	f007 fa8f 	bl	800e778 <sys_timeouts_sleeptime>
 800725a:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007262:	d10b      	bne.n	800727c <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 8007264:	4813      	ldr	r0, [pc, #76]	; (80072b4 <tcpip_timeouts_mbox_fetch+0x68>)
 8007266:	f00c f9be 	bl	80135e6 <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 800726a:	2200      	movs	r2, #0
 800726c:	6839      	ldr	r1, [r7, #0]
 800726e:	6878      	ldr	r0, [r7, #4]
 8007270:	f00c f930 	bl	80134d4 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 8007274:	480f      	ldr	r0, [pc, #60]	; (80072b4 <tcpip_timeouts_mbox_fetch+0x68>)
 8007276:	f00c f9a7 	bl	80135c8 <sys_mutex_lock>
    return;
 800727a:	e018      	b.n	80072ae <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	2b00      	cmp	r3, #0
 8007280:	d102      	bne.n	8007288 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 8007282:	f007 fa3f 	bl	800e704 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8007286:	e7e6      	b.n	8007256 <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 8007288:	480a      	ldr	r0, [pc, #40]	; (80072b4 <tcpip_timeouts_mbox_fetch+0x68>)
 800728a:	f00c f9ac 	bl	80135e6 <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 800728e:	68fa      	ldr	r2, [r7, #12]
 8007290:	6839      	ldr	r1, [r7, #0]
 8007292:	6878      	ldr	r0, [r7, #4]
 8007294:	f00c f91e 	bl	80134d4 <sys_arch_mbox_fetch>
 8007298:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 800729a:	4806      	ldr	r0, [pc, #24]	; (80072b4 <tcpip_timeouts_mbox_fetch+0x68>)
 800729c:	f00c f994 	bl	80135c8 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 80072a0:	68bb      	ldr	r3, [r7, #8]
 80072a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072a6:	d102      	bne.n	80072ae <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 80072a8:	f007 fa2c 	bl	800e704 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 80072ac:	e7d3      	b.n	8007256 <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 80072ae:	3710      	adds	r7, #16
 80072b0:	46bd      	mov	sp, r7
 80072b2:	bd80      	pop	{r7, pc}
 80072b4:	2000b7ac 	.word	0x2000b7ac

080072b8 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 80072b8:	b580      	push	{r7, lr}
 80072ba:	b084      	sub	sp, #16
 80072bc:	af00      	add	r7, sp, #0
 80072be:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 80072c0:	4810      	ldr	r0, [pc, #64]	; (8007304 <tcpip_thread+0x4c>)
 80072c2:	f00c f981 	bl	80135c8 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 80072c6:	4b10      	ldr	r3, [pc, #64]	; (8007308 <tcpip_thread+0x50>)
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d005      	beq.n	80072da <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 80072ce:	4b0e      	ldr	r3, [pc, #56]	; (8007308 <tcpip_thread+0x50>)
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	4a0e      	ldr	r2, [pc, #56]	; (800730c <tcpip_thread+0x54>)
 80072d4:	6812      	ldr	r2, [r2, #0]
 80072d6:	4610      	mov	r0, r2
 80072d8:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 80072da:	f107 030c 	add.w	r3, r7, #12
 80072de:	4619      	mov	r1, r3
 80072e0:	480b      	ldr	r0, [pc, #44]	; (8007310 <tcpip_thread+0x58>)
 80072e2:	f7ff ffb3 	bl	800724c <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d106      	bne.n	80072fa <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 80072ec:	4b09      	ldr	r3, [pc, #36]	; (8007314 <tcpip_thread+0x5c>)
 80072ee:	2291      	movs	r2, #145	; 0x91
 80072f0:	4909      	ldr	r1, [pc, #36]	; (8007318 <tcpip_thread+0x60>)
 80072f2:	480a      	ldr	r0, [pc, #40]	; (800731c <tcpip_thread+0x64>)
 80072f4:	f00c fa0e 	bl	8013714 <iprintf>
      continue;
 80072f8:	e003      	b.n	8007302 <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	4618      	mov	r0, r3
 80072fe:	f000 f80f 	bl	8007320 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 8007302:	e7ea      	b.n	80072da <tcpip_thread+0x22>
 8007304:	2000b7ac 	.word	0x2000b7ac
 8007308:	2000844c 	.word	0x2000844c
 800730c:	20008450 	.word	0x20008450
 8007310:	20008454 	.word	0x20008454
 8007314:	08014638 	.word	0x08014638
 8007318:	08014668 	.word	0x08014668
 800731c:	08014688 	.word	0x08014688

08007320 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 8007320:	b580      	push	{r7, lr}
 8007322:	b082      	sub	sp, #8
 8007324:	af00      	add	r7, sp, #0
 8007326:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	781b      	ldrb	r3, [r3, #0]
 800732c:	2b01      	cmp	r3, #1
 800732e:	d018      	beq.n	8007362 <tcpip_thread_handle_msg+0x42>
 8007330:	2b02      	cmp	r3, #2
 8007332:	d021      	beq.n	8007378 <tcpip_thread_handle_msg+0x58>
 8007334:	2b00      	cmp	r3, #0
 8007336:	d126      	bne.n	8007386 <tcpip_thread_handle_msg+0x66>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	68db      	ldr	r3, [r3, #12]
 800733c:	687a      	ldr	r2, [r7, #4]
 800733e:	6850      	ldr	r0, [r2, #4]
 8007340:	687a      	ldr	r2, [r7, #4]
 8007342:	6892      	ldr	r2, [r2, #8]
 8007344:	4611      	mov	r1, r2
 8007346:	4798      	blx	r3
 8007348:	4603      	mov	r3, r0
 800734a:	2b00      	cmp	r3, #0
 800734c:	d004      	beq.n	8007358 <tcpip_thread_handle_msg+0x38>
        pbuf_free(msg->msg.inp.p);
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	685b      	ldr	r3, [r3, #4]
 8007352:	4618      	mov	r0, r3
 8007354:	f001 fccc 	bl	8008cf0 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8007358:	6879      	ldr	r1, [r7, #4]
 800735a:	2009      	movs	r0, #9
 800735c:	f000 fe1c 	bl	8007f98 <memp_free>
      break;
 8007360:	e018      	b.n	8007394 <tcpip_thread_handle_msg+0x74>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	685b      	ldr	r3, [r3, #4]
 8007366:	687a      	ldr	r2, [r7, #4]
 8007368:	6892      	ldr	r2, [r2, #8]
 800736a:	4610      	mov	r0, r2
 800736c:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 800736e:	6879      	ldr	r1, [r7, #4]
 8007370:	2008      	movs	r0, #8
 8007372:	f000 fe11 	bl	8007f98 <memp_free>
      break;
 8007376:	e00d      	b.n	8007394 <tcpip_thread_handle_msg+0x74>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	685b      	ldr	r3, [r3, #4]
 800737c:	687a      	ldr	r2, [r7, #4]
 800737e:	6892      	ldr	r2, [r2, #8]
 8007380:	4610      	mov	r0, r2
 8007382:	4798      	blx	r3
      break;
 8007384:	e006      	b.n	8007394 <tcpip_thread_handle_msg+0x74>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8007386:	4b05      	ldr	r3, [pc, #20]	; (800739c <tcpip_thread_handle_msg+0x7c>)
 8007388:	22cf      	movs	r2, #207	; 0xcf
 800738a:	4905      	ldr	r1, [pc, #20]	; (80073a0 <tcpip_thread_handle_msg+0x80>)
 800738c:	4805      	ldr	r0, [pc, #20]	; (80073a4 <tcpip_thread_handle_msg+0x84>)
 800738e:	f00c f9c1 	bl	8013714 <iprintf>
      break;
 8007392:	bf00      	nop
  }
}
 8007394:	bf00      	nop
 8007396:	3708      	adds	r7, #8
 8007398:	46bd      	mov	sp, r7
 800739a:	bd80      	pop	{r7, pc}
 800739c:	08014638 	.word	0x08014638
 80073a0:	08014668 	.word	0x08014668
 80073a4:	08014688 	.word	0x08014688

080073a8 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 80073a8:	b580      	push	{r7, lr}
 80073aa:	b086      	sub	sp, #24
 80073ac:	af00      	add	r7, sp, #0
 80073ae:	60f8      	str	r0, [r7, #12]
 80073b0:	60b9      	str	r1, [r7, #8]
 80073b2:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 80073b4:	481a      	ldr	r0, [pc, #104]	; (8007420 <tcpip_inpkt+0x78>)
 80073b6:	f00c f8cc 	bl	8013552 <sys_mbox_valid>
 80073ba:	4603      	mov	r3, r0
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d105      	bne.n	80073cc <tcpip_inpkt+0x24>
 80073c0:	4b18      	ldr	r3, [pc, #96]	; (8007424 <tcpip_inpkt+0x7c>)
 80073c2:	22fc      	movs	r2, #252	; 0xfc
 80073c4:	4918      	ldr	r1, [pc, #96]	; (8007428 <tcpip_inpkt+0x80>)
 80073c6:	4819      	ldr	r0, [pc, #100]	; (800742c <tcpip_inpkt+0x84>)
 80073c8:	f00c f9a4 	bl	8013714 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 80073cc:	2009      	movs	r0, #9
 80073ce:	f000 fd91 	bl	8007ef4 <memp_malloc>
 80073d2:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 80073d4:	697b      	ldr	r3, [r7, #20]
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d102      	bne.n	80073e0 <tcpip_inpkt+0x38>
    return ERR_MEM;
 80073da:	f04f 33ff 	mov.w	r3, #4294967295
 80073de:	e01a      	b.n	8007416 <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 80073e0:	697b      	ldr	r3, [r7, #20]
 80073e2:	2200      	movs	r2, #0
 80073e4:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 80073e6:	697b      	ldr	r3, [r7, #20]
 80073e8:	68fa      	ldr	r2, [r7, #12]
 80073ea:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 80073ec:	697b      	ldr	r3, [r7, #20]
 80073ee:	68ba      	ldr	r2, [r7, #8]
 80073f0:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 80073f2:	697b      	ldr	r3, [r7, #20]
 80073f4:	687a      	ldr	r2, [r7, #4]
 80073f6:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 80073f8:	6979      	ldr	r1, [r7, #20]
 80073fa:	4809      	ldr	r0, [pc, #36]	; (8007420 <tcpip_inpkt+0x78>)
 80073fc:	f00c f850 	bl	80134a0 <sys_mbox_trypost>
 8007400:	4603      	mov	r3, r0
 8007402:	2b00      	cmp	r3, #0
 8007404:	d006      	beq.n	8007414 <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8007406:	6979      	ldr	r1, [r7, #20]
 8007408:	2009      	movs	r0, #9
 800740a:	f000 fdc5 	bl	8007f98 <memp_free>
    return ERR_MEM;
 800740e:	f04f 33ff 	mov.w	r3, #4294967295
 8007412:	e000      	b.n	8007416 <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 8007414:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 8007416:	4618      	mov	r0, r3
 8007418:	3718      	adds	r7, #24
 800741a:	46bd      	mov	sp, r7
 800741c:	bd80      	pop	{r7, pc}
 800741e:	bf00      	nop
 8007420:	20008454 	.word	0x20008454
 8007424:	08014638 	.word	0x08014638
 8007428:	080146b0 	.word	0x080146b0
 800742c:	08014688 	.word	0x08014688

08007430 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 8007430:	b580      	push	{r7, lr}
 8007432:	b082      	sub	sp, #8
 8007434:	af00      	add	r7, sp, #0
 8007436:	6078      	str	r0, [r7, #4]
 8007438:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 800743a:	683b      	ldr	r3, [r7, #0]
 800743c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8007440:	f003 0318 	and.w	r3, r3, #24
 8007444:	2b00      	cmp	r3, #0
 8007446:	d006      	beq.n	8007456 <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 8007448:	4a08      	ldr	r2, [pc, #32]	; (800746c <tcpip_input+0x3c>)
 800744a:	6839      	ldr	r1, [r7, #0]
 800744c:	6878      	ldr	r0, [r7, #4]
 800744e:	f7ff ffab 	bl	80073a8 <tcpip_inpkt>
 8007452:	4603      	mov	r3, r0
 8007454:	e005      	b.n	8007462 <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 8007456:	4a06      	ldr	r2, [pc, #24]	; (8007470 <tcpip_input+0x40>)
 8007458:	6839      	ldr	r1, [r7, #0]
 800745a:	6878      	ldr	r0, [r7, #4]
 800745c:	f7ff ffa4 	bl	80073a8 <tcpip_inpkt>
 8007460:	4603      	mov	r3, r0
}
 8007462:	4618      	mov	r0, r3
 8007464:	3708      	adds	r7, #8
 8007466:	46bd      	mov	sp, r7
 8007468:	bd80      	pop	{r7, pc}
 800746a:	bf00      	nop
 800746c:	080132b1 	.word	0x080132b1
 8007470:	08012195 	.word	0x08012195

08007474 <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 8007474:	b580      	push	{r7, lr}
 8007476:	b084      	sub	sp, #16
 8007478:	af00      	add	r7, sp, #0
 800747a:	6078      	str	r0, [r7, #4]
 800747c:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800747e:	4819      	ldr	r0, [pc, #100]	; (80074e4 <tcpip_try_callback+0x70>)
 8007480:	f00c f867 	bl	8013552 <sys_mbox_valid>
 8007484:	4603      	mov	r3, r0
 8007486:	2b00      	cmp	r3, #0
 8007488:	d106      	bne.n	8007498 <tcpip_try_callback+0x24>
 800748a:	4b17      	ldr	r3, [pc, #92]	; (80074e8 <tcpip_try_callback+0x74>)
 800748c:	f240 125d 	movw	r2, #349	; 0x15d
 8007490:	4916      	ldr	r1, [pc, #88]	; (80074ec <tcpip_try_callback+0x78>)
 8007492:	4817      	ldr	r0, [pc, #92]	; (80074f0 <tcpip_try_callback+0x7c>)
 8007494:	f00c f93e 	bl	8013714 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 8007498:	2008      	movs	r0, #8
 800749a:	f000 fd2b 	bl	8007ef4 <memp_malloc>
 800749e:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d102      	bne.n	80074ac <tcpip_try_callback+0x38>
    return ERR_MEM;
 80074a6:	f04f 33ff 	mov.w	r3, #4294967295
 80074aa:	e017      	b.n	80074dc <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	2201      	movs	r2, #1
 80074b0:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	687a      	ldr	r2, [r7, #4]
 80074b6:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	683a      	ldr	r2, [r7, #0]
 80074bc:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 80074be:	68f9      	ldr	r1, [r7, #12]
 80074c0:	4808      	ldr	r0, [pc, #32]	; (80074e4 <tcpip_try_callback+0x70>)
 80074c2:	f00b ffed 	bl	80134a0 <sys_mbox_trypost>
 80074c6:	4603      	mov	r3, r0
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d006      	beq.n	80074da <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 80074cc:	68f9      	ldr	r1, [r7, #12]
 80074ce:	2008      	movs	r0, #8
 80074d0:	f000 fd62 	bl	8007f98 <memp_free>
    return ERR_MEM;
 80074d4:	f04f 33ff 	mov.w	r3, #4294967295
 80074d8:	e000      	b.n	80074dc <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 80074da:	2300      	movs	r3, #0
}
 80074dc:	4618      	mov	r0, r3
 80074de:	3710      	adds	r7, #16
 80074e0:	46bd      	mov	sp, r7
 80074e2:	bd80      	pop	{r7, pc}
 80074e4:	20008454 	.word	0x20008454
 80074e8:	08014638 	.word	0x08014638
 80074ec:	080146b0 	.word	0x080146b0
 80074f0:	08014688 	.word	0x08014688

080074f4 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 80074f4:	b580      	push	{r7, lr}
 80074f6:	b084      	sub	sp, #16
 80074f8:	af02      	add	r7, sp, #8
 80074fa:	6078      	str	r0, [r7, #4]
 80074fc:	6039      	str	r1, [r7, #0]
  lwip_init();
 80074fe:	f000 f871 	bl	80075e4 <lwip_init>

  tcpip_init_done = initfunc;
 8007502:	4a17      	ldr	r2, [pc, #92]	; (8007560 <tcpip_init+0x6c>)
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 8007508:	4a16      	ldr	r2, [pc, #88]	; (8007564 <tcpip_init+0x70>)
 800750a:	683b      	ldr	r3, [r7, #0]
 800750c:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 800750e:	2106      	movs	r1, #6
 8007510:	4815      	ldr	r0, [pc, #84]	; (8007568 <tcpip_init+0x74>)
 8007512:	f00b ffa3 	bl	801345c <sys_mbox_new>
 8007516:	4603      	mov	r3, r0
 8007518:	2b00      	cmp	r3, #0
 800751a:	d006      	beq.n	800752a <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 800751c:	4b13      	ldr	r3, [pc, #76]	; (800756c <tcpip_init+0x78>)
 800751e:	f240 2261 	movw	r2, #609	; 0x261
 8007522:	4913      	ldr	r1, [pc, #76]	; (8007570 <tcpip_init+0x7c>)
 8007524:	4813      	ldr	r0, [pc, #76]	; (8007574 <tcpip_init+0x80>)
 8007526:	f00c f8f5 	bl	8013714 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 800752a:	4813      	ldr	r0, [pc, #76]	; (8007578 <tcpip_init+0x84>)
 800752c:	f00c f830 	bl	8013590 <sys_mutex_new>
 8007530:	4603      	mov	r3, r0
 8007532:	2b00      	cmp	r3, #0
 8007534:	d006      	beq.n	8007544 <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 8007536:	4b0d      	ldr	r3, [pc, #52]	; (800756c <tcpip_init+0x78>)
 8007538:	f240 2265 	movw	r2, #613	; 0x265
 800753c:	490f      	ldr	r1, [pc, #60]	; (800757c <tcpip_init+0x88>)
 800753e:	480d      	ldr	r0, [pc, #52]	; (8007574 <tcpip_init+0x80>)
 8007540:	f00c f8e8 	bl	8013714 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 8007544:	2300      	movs	r3, #0
 8007546:	9300      	str	r3, [sp, #0]
 8007548:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800754c:	2200      	movs	r2, #0
 800754e:	490c      	ldr	r1, [pc, #48]	; (8007580 <tcpip_init+0x8c>)
 8007550:	480c      	ldr	r0, [pc, #48]	; (8007584 <tcpip_init+0x90>)
 8007552:	f00c f855 	bl	8013600 <sys_thread_new>
}
 8007556:	bf00      	nop
 8007558:	3708      	adds	r7, #8
 800755a:	46bd      	mov	sp, r7
 800755c:	bd80      	pop	{r7, pc}
 800755e:	bf00      	nop
 8007560:	2000844c 	.word	0x2000844c
 8007564:	20008450 	.word	0x20008450
 8007568:	20008454 	.word	0x20008454
 800756c:	08014638 	.word	0x08014638
 8007570:	080146c0 	.word	0x080146c0
 8007574:	08014688 	.word	0x08014688
 8007578:	2000b7ac 	.word	0x2000b7ac
 800757c:	080146e4 	.word	0x080146e4
 8007580:	080072b9 	.word	0x080072b9
 8007584:	08014708 	.word	0x08014708

08007588 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8007588:	b480      	push	{r7}
 800758a:	b083      	sub	sp, #12
 800758c:	af00      	add	r7, sp, #0
 800758e:	4603      	mov	r3, r0
 8007590:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 8007592:	88fb      	ldrh	r3, [r7, #6]
 8007594:	021b      	lsls	r3, r3, #8
 8007596:	b21a      	sxth	r2, r3
 8007598:	88fb      	ldrh	r3, [r7, #6]
 800759a:	0a1b      	lsrs	r3, r3, #8
 800759c:	b29b      	uxth	r3, r3
 800759e:	b21b      	sxth	r3, r3
 80075a0:	4313      	orrs	r3, r2
 80075a2:	b21b      	sxth	r3, r3
 80075a4:	b29b      	uxth	r3, r3
}
 80075a6:	4618      	mov	r0, r3
 80075a8:	370c      	adds	r7, #12
 80075aa:	46bd      	mov	sp, r7
 80075ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b0:	4770      	bx	lr

080075b2 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 80075b2:	b480      	push	{r7}
 80075b4:	b083      	sub	sp, #12
 80075b6:	af00      	add	r7, sp, #0
 80075b8:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	061a      	lsls	r2, r3, #24
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	021b      	lsls	r3, r3, #8
 80075c2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80075c6:	431a      	orrs	r2, r3
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	0a1b      	lsrs	r3, r3, #8
 80075cc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80075d0:	431a      	orrs	r2, r3
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	0e1b      	lsrs	r3, r3, #24
 80075d6:	4313      	orrs	r3, r2
}
 80075d8:	4618      	mov	r0, r3
 80075da:	370c      	adds	r7, #12
 80075dc:	46bd      	mov	sp, r7
 80075de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e2:	4770      	bx	lr

080075e4 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 80075e4:	b580      	push	{r7, lr}
 80075e6:	b082      	sub	sp, #8
 80075e8:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 80075ea:	2300      	movs	r3, #0
 80075ec:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 80075ee:	f00b ffc1 	bl	8013574 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 80075f2:	f000 f8d5 	bl	80077a0 <mem_init>
  memp_init();
 80075f6:	f000 fc31 	bl	8007e5c <memp_init>
  pbuf_init();
  netif_init();
 80075fa:	f000 fcf7 	bl	8007fec <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 80075fe:	f007 f8f3 	bl	800e7e8 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8007602:	f001 fe1f 	bl	8009244 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 8007606:	f007 f837 	bl	800e678 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800760a:	bf00      	nop
 800760c:	3708      	adds	r7, #8
 800760e:	46bd      	mov	sp, r7
 8007610:	bd80      	pop	{r7, pc}
	...

08007614 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8007614:	b480      	push	{r7}
 8007616:	b083      	sub	sp, #12
 8007618:	af00      	add	r7, sp, #0
 800761a:	4603      	mov	r3, r0
 800761c:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800761e:	4b05      	ldr	r3, [pc, #20]	; (8007634 <ptr_to_mem+0x20>)
 8007620:	681a      	ldr	r2, [r3, #0]
 8007622:	88fb      	ldrh	r3, [r7, #6]
 8007624:	4413      	add	r3, r2
}
 8007626:	4618      	mov	r0, r3
 8007628:	370c      	adds	r7, #12
 800762a:	46bd      	mov	sp, r7
 800762c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007630:	4770      	bx	lr
 8007632:	bf00      	nop
 8007634:	20008458 	.word	0x20008458

08007638 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8007638:	b480      	push	{r7}
 800763a:	b083      	sub	sp, #12
 800763c:	af00      	add	r7, sp, #0
 800763e:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	4a05      	ldr	r2, [pc, #20]	; (8007658 <mem_to_ptr+0x20>)
 8007644:	6812      	ldr	r2, [r2, #0]
 8007646:	1a9b      	subs	r3, r3, r2
 8007648:	b29b      	uxth	r3, r3
}
 800764a:	4618      	mov	r0, r3
 800764c:	370c      	adds	r7, #12
 800764e:	46bd      	mov	sp, r7
 8007650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007654:	4770      	bx	lr
 8007656:	bf00      	nop
 8007658:	20008458 	.word	0x20008458

0800765c <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800765c:	b590      	push	{r4, r7, lr}
 800765e:	b085      	sub	sp, #20
 8007660:	af00      	add	r7, sp, #0
 8007662:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8007664:	4b45      	ldr	r3, [pc, #276]	; (800777c <plug_holes+0x120>)
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	687a      	ldr	r2, [r7, #4]
 800766a:	429a      	cmp	r2, r3
 800766c:	d206      	bcs.n	800767c <plug_holes+0x20>
 800766e:	4b44      	ldr	r3, [pc, #272]	; (8007780 <plug_holes+0x124>)
 8007670:	f240 12df 	movw	r2, #479	; 0x1df
 8007674:	4943      	ldr	r1, [pc, #268]	; (8007784 <plug_holes+0x128>)
 8007676:	4844      	ldr	r0, [pc, #272]	; (8007788 <plug_holes+0x12c>)
 8007678:	f00c f84c 	bl	8013714 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800767c:	4b43      	ldr	r3, [pc, #268]	; (800778c <plug_holes+0x130>)
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	687a      	ldr	r2, [r7, #4]
 8007682:	429a      	cmp	r2, r3
 8007684:	d306      	bcc.n	8007694 <plug_holes+0x38>
 8007686:	4b3e      	ldr	r3, [pc, #248]	; (8007780 <plug_holes+0x124>)
 8007688:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800768c:	4940      	ldr	r1, [pc, #256]	; (8007790 <plug_holes+0x134>)
 800768e:	483e      	ldr	r0, [pc, #248]	; (8007788 <plug_holes+0x12c>)
 8007690:	f00c f840 	bl	8013714 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	791b      	ldrb	r3, [r3, #4]
 8007698:	2b00      	cmp	r3, #0
 800769a:	d006      	beq.n	80076aa <plug_holes+0x4e>
 800769c:	4b38      	ldr	r3, [pc, #224]	; (8007780 <plug_holes+0x124>)
 800769e:	f240 12e1 	movw	r2, #481	; 0x1e1
 80076a2:	493c      	ldr	r1, [pc, #240]	; (8007794 <plug_holes+0x138>)
 80076a4:	4838      	ldr	r0, [pc, #224]	; (8007788 <plug_holes+0x12c>)
 80076a6:	f00c f835 	bl	8013714 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	881b      	ldrh	r3, [r3, #0]
 80076ae:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80076b2:	d906      	bls.n	80076c2 <plug_holes+0x66>
 80076b4:	4b32      	ldr	r3, [pc, #200]	; (8007780 <plug_holes+0x124>)
 80076b6:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 80076ba:	4937      	ldr	r1, [pc, #220]	; (8007798 <plug_holes+0x13c>)
 80076bc:	4832      	ldr	r0, [pc, #200]	; (8007788 <plug_holes+0x12c>)
 80076be:	f00c f829 	bl	8013714 <iprintf>

  nmem = ptr_to_mem(mem->next);
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	881b      	ldrh	r3, [r3, #0]
 80076c6:	4618      	mov	r0, r3
 80076c8:	f7ff ffa4 	bl	8007614 <ptr_to_mem>
 80076cc:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 80076ce:	687a      	ldr	r2, [r7, #4]
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	429a      	cmp	r2, r3
 80076d4:	d024      	beq.n	8007720 <plug_holes+0xc4>
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	791b      	ldrb	r3, [r3, #4]
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d120      	bne.n	8007720 <plug_holes+0xc4>
 80076de:	4b2b      	ldr	r3, [pc, #172]	; (800778c <plug_holes+0x130>)
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	68fa      	ldr	r2, [r7, #12]
 80076e4:	429a      	cmp	r2, r3
 80076e6:	d01b      	beq.n	8007720 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 80076e8:	4b2c      	ldr	r3, [pc, #176]	; (800779c <plug_holes+0x140>)
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	68fa      	ldr	r2, [r7, #12]
 80076ee:	429a      	cmp	r2, r3
 80076f0:	d102      	bne.n	80076f8 <plug_holes+0x9c>
      lfree = mem;
 80076f2:	4a2a      	ldr	r2, [pc, #168]	; (800779c <plug_holes+0x140>)
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	881a      	ldrh	r2, [r3, #0]
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	881b      	ldrh	r3, [r3, #0]
 8007704:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8007708:	d00a      	beq.n	8007720 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	881b      	ldrh	r3, [r3, #0]
 800770e:	4618      	mov	r0, r3
 8007710:	f7ff ff80 	bl	8007614 <ptr_to_mem>
 8007714:	4604      	mov	r4, r0
 8007716:	6878      	ldr	r0, [r7, #4]
 8007718:	f7ff ff8e 	bl	8007638 <mem_to_ptr>
 800771c:	4603      	mov	r3, r0
 800771e:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	885b      	ldrh	r3, [r3, #2]
 8007724:	4618      	mov	r0, r3
 8007726:	f7ff ff75 	bl	8007614 <ptr_to_mem>
 800772a:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800772c:	68ba      	ldr	r2, [r7, #8]
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	429a      	cmp	r2, r3
 8007732:	d01f      	beq.n	8007774 <plug_holes+0x118>
 8007734:	68bb      	ldr	r3, [r7, #8]
 8007736:	791b      	ldrb	r3, [r3, #4]
 8007738:	2b00      	cmp	r3, #0
 800773a:	d11b      	bne.n	8007774 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800773c:	4b17      	ldr	r3, [pc, #92]	; (800779c <plug_holes+0x140>)
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	687a      	ldr	r2, [r7, #4]
 8007742:	429a      	cmp	r2, r3
 8007744:	d102      	bne.n	800774c <plug_holes+0xf0>
      lfree = pmem;
 8007746:	4a15      	ldr	r2, [pc, #84]	; (800779c <plug_holes+0x140>)
 8007748:	68bb      	ldr	r3, [r7, #8]
 800774a:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	881a      	ldrh	r2, [r3, #0]
 8007750:	68bb      	ldr	r3, [r7, #8]
 8007752:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	881b      	ldrh	r3, [r3, #0]
 8007758:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800775c:	d00a      	beq.n	8007774 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	881b      	ldrh	r3, [r3, #0]
 8007762:	4618      	mov	r0, r3
 8007764:	f7ff ff56 	bl	8007614 <ptr_to_mem>
 8007768:	4604      	mov	r4, r0
 800776a:	68b8      	ldr	r0, [r7, #8]
 800776c:	f7ff ff64 	bl	8007638 <mem_to_ptr>
 8007770:	4603      	mov	r3, r0
 8007772:	8063      	strh	r3, [r4, #2]
    }
  }
}
 8007774:	bf00      	nop
 8007776:	3714      	adds	r7, #20
 8007778:	46bd      	mov	sp, r7
 800777a:	bd90      	pop	{r4, r7, pc}
 800777c:	20008458 	.word	0x20008458
 8007780:	08014718 	.word	0x08014718
 8007784:	08014748 	.word	0x08014748
 8007788:	08014760 	.word	0x08014760
 800778c:	2000845c 	.word	0x2000845c
 8007790:	08014788 	.word	0x08014788
 8007794:	080147a4 	.word	0x080147a4
 8007798:	080147c0 	.word	0x080147c0
 800779c:	20008464 	.word	0x20008464

080077a0 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 80077a0:	b580      	push	{r7, lr}
 80077a2:	b082      	sub	sp, #8
 80077a4:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 80077a6:	4b1f      	ldr	r3, [pc, #124]	; (8007824 <mem_init+0x84>)
 80077a8:	3303      	adds	r3, #3
 80077aa:	f023 0303 	bic.w	r3, r3, #3
 80077ae:	461a      	mov	r2, r3
 80077b0:	4b1d      	ldr	r3, [pc, #116]	; (8007828 <mem_init+0x88>)
 80077b2:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 80077b4:	4b1c      	ldr	r3, [pc, #112]	; (8007828 <mem_init+0x88>)
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 80077c0:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	2200      	movs	r2, #0
 80077c6:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	2200      	movs	r2, #0
 80077cc:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 80077ce:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 80077d2:	f7ff ff1f 	bl	8007614 <ptr_to_mem>
 80077d6:	4602      	mov	r2, r0
 80077d8:	4b14      	ldr	r3, [pc, #80]	; (800782c <mem_init+0x8c>)
 80077da:	601a      	str	r2, [r3, #0]
  ram_end->used = 1;
 80077dc:	4b13      	ldr	r3, [pc, #76]	; (800782c <mem_init+0x8c>)
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	2201      	movs	r2, #1
 80077e2:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 80077e4:	4b11      	ldr	r3, [pc, #68]	; (800782c <mem_init+0x8c>)
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 80077ec:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 80077ee:	4b0f      	ldr	r3, [pc, #60]	; (800782c <mem_init+0x8c>)
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 80077f6:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 80077f8:	4b0b      	ldr	r3, [pc, #44]	; (8007828 <mem_init+0x88>)
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	4a0c      	ldr	r2, [pc, #48]	; (8007830 <mem_init+0x90>)
 80077fe:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 8007800:	480c      	ldr	r0, [pc, #48]	; (8007834 <mem_init+0x94>)
 8007802:	f00b fec5 	bl	8013590 <sys_mutex_new>
 8007806:	4603      	mov	r3, r0
 8007808:	2b00      	cmp	r3, #0
 800780a:	d006      	beq.n	800781a <mem_init+0x7a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800780c:	4b0a      	ldr	r3, [pc, #40]	; (8007838 <mem_init+0x98>)
 800780e:	f240 221f 	movw	r2, #543	; 0x21f
 8007812:	490a      	ldr	r1, [pc, #40]	; (800783c <mem_init+0x9c>)
 8007814:	480a      	ldr	r0, [pc, #40]	; (8007840 <mem_init+0xa0>)
 8007816:	f00b ff7d 	bl	8013714 <iprintf>
  }
}
 800781a:	bf00      	nop
 800781c:	3708      	adds	r7, #8
 800781e:	46bd      	mov	sp, r7
 8007820:	bd80      	pop	{r7, pc}
 8007822:	bf00      	nop
 8007824:	2000b7c8 	.word	0x2000b7c8
 8007828:	20008458 	.word	0x20008458
 800782c:	2000845c 	.word	0x2000845c
 8007830:	20008464 	.word	0x20008464
 8007834:	20008460 	.word	0x20008460
 8007838:	08014718 	.word	0x08014718
 800783c:	080147ec 	.word	0x080147ec
 8007840:	08014760 	.word	0x08014760

08007844 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8007844:	b580      	push	{r7, lr}
 8007846:	b086      	sub	sp, #24
 8007848:	af00      	add	r7, sp, #0
 800784a:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800784c:	6878      	ldr	r0, [r7, #4]
 800784e:	f7ff fef3 	bl	8007638 <mem_to_ptr>
 8007852:	4603      	mov	r3, r0
 8007854:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	881b      	ldrh	r3, [r3, #0]
 800785a:	4618      	mov	r0, r3
 800785c:	f7ff feda 	bl	8007614 <ptr_to_mem>
 8007860:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	885b      	ldrh	r3, [r3, #2]
 8007866:	4618      	mov	r0, r3
 8007868:	f7ff fed4 	bl	8007614 <ptr_to_mem>
 800786c:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	881b      	ldrh	r3, [r3, #0]
 8007872:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8007876:	d818      	bhi.n	80078aa <mem_link_valid+0x66>
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	885b      	ldrh	r3, [r3, #2]
 800787c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8007880:	d813      	bhi.n	80078aa <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8007886:	8afa      	ldrh	r2, [r7, #22]
 8007888:	429a      	cmp	r2, r3
 800788a:	d004      	beq.n	8007896 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	881b      	ldrh	r3, [r3, #0]
 8007890:	8afa      	ldrh	r2, [r7, #22]
 8007892:	429a      	cmp	r2, r3
 8007894:	d109      	bne.n	80078aa <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8007896:	4b08      	ldr	r3, [pc, #32]	; (80078b8 <mem_link_valid+0x74>)
 8007898:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800789a:	693a      	ldr	r2, [r7, #16]
 800789c:	429a      	cmp	r2, r3
 800789e:	d006      	beq.n	80078ae <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 80078a0:	693b      	ldr	r3, [r7, #16]
 80078a2:	885b      	ldrh	r3, [r3, #2]
 80078a4:	8afa      	ldrh	r2, [r7, #22]
 80078a6:	429a      	cmp	r2, r3
 80078a8:	d001      	beq.n	80078ae <mem_link_valid+0x6a>
    return 0;
 80078aa:	2300      	movs	r3, #0
 80078ac:	e000      	b.n	80078b0 <mem_link_valid+0x6c>
  }
  return 1;
 80078ae:	2301      	movs	r3, #1
}
 80078b0:	4618      	mov	r0, r3
 80078b2:	3718      	adds	r7, #24
 80078b4:	46bd      	mov	sp, r7
 80078b6:	bd80      	pop	{r7, pc}
 80078b8:	2000845c 	.word	0x2000845c

080078bc <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 80078bc:	b580      	push	{r7, lr}
 80078be:	b088      	sub	sp, #32
 80078c0:	af00      	add	r7, sp, #0
 80078c2:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d070      	beq.n	80079ac <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	f003 0303 	and.w	r3, r3, #3
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d00d      	beq.n	80078f0 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 80078d4:	4b37      	ldr	r3, [pc, #220]	; (80079b4 <mem_free+0xf8>)
 80078d6:	f240 2273 	movw	r2, #627	; 0x273
 80078da:	4937      	ldr	r1, [pc, #220]	; (80079b8 <mem_free+0xfc>)
 80078dc:	4837      	ldr	r0, [pc, #220]	; (80079bc <mem_free+0x100>)
 80078de:	f00b ff19 	bl	8013714 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 80078e2:	f00b feb3 	bl	801364c <sys_arch_protect>
 80078e6:	60f8      	str	r0, [r7, #12]
 80078e8:	68f8      	ldr	r0, [r7, #12]
 80078ea:	f00b febd 	bl	8013668 <sys_arch_unprotect>
    return;
 80078ee:	e05e      	b.n	80079ae <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	3b08      	subs	r3, #8
 80078f4:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 80078f6:	4b32      	ldr	r3, [pc, #200]	; (80079c0 <mem_free+0x104>)
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	69fa      	ldr	r2, [r7, #28]
 80078fc:	429a      	cmp	r2, r3
 80078fe:	d306      	bcc.n	800790e <mem_free+0x52>
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	f103 020c 	add.w	r2, r3, #12
 8007906:	4b2f      	ldr	r3, [pc, #188]	; (80079c4 <mem_free+0x108>)
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	429a      	cmp	r2, r3
 800790c:	d90d      	bls.n	800792a <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800790e:	4b29      	ldr	r3, [pc, #164]	; (80079b4 <mem_free+0xf8>)
 8007910:	f240 227f 	movw	r2, #639	; 0x27f
 8007914:	492c      	ldr	r1, [pc, #176]	; (80079c8 <mem_free+0x10c>)
 8007916:	4829      	ldr	r0, [pc, #164]	; (80079bc <mem_free+0x100>)
 8007918:	f00b fefc 	bl	8013714 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800791c:	f00b fe96 	bl	801364c <sys_arch_protect>
 8007920:	6138      	str	r0, [r7, #16]
 8007922:	6938      	ldr	r0, [r7, #16]
 8007924:	f00b fea0 	bl	8013668 <sys_arch_unprotect>
    return;
 8007928:	e041      	b.n	80079ae <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800792a:	4828      	ldr	r0, [pc, #160]	; (80079cc <mem_free+0x110>)
 800792c:	f00b fe4c 	bl	80135c8 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 8007930:	69fb      	ldr	r3, [r7, #28]
 8007932:	791b      	ldrb	r3, [r3, #4]
 8007934:	2b00      	cmp	r3, #0
 8007936:	d110      	bne.n	800795a <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8007938:	4b1e      	ldr	r3, [pc, #120]	; (80079b4 <mem_free+0xf8>)
 800793a:	f44f 7223 	mov.w	r2, #652	; 0x28c
 800793e:	4924      	ldr	r1, [pc, #144]	; (80079d0 <mem_free+0x114>)
 8007940:	481e      	ldr	r0, [pc, #120]	; (80079bc <mem_free+0x100>)
 8007942:	f00b fee7 	bl	8013714 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 8007946:	4821      	ldr	r0, [pc, #132]	; (80079cc <mem_free+0x110>)
 8007948:	f00b fe4d 	bl	80135e6 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800794c:	f00b fe7e 	bl	801364c <sys_arch_protect>
 8007950:	6178      	str	r0, [r7, #20]
 8007952:	6978      	ldr	r0, [r7, #20]
 8007954:	f00b fe88 	bl	8013668 <sys_arch_unprotect>
    return;
 8007958:	e029      	b.n	80079ae <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 800795a:	69f8      	ldr	r0, [r7, #28]
 800795c:	f7ff ff72 	bl	8007844 <mem_link_valid>
 8007960:	4603      	mov	r3, r0
 8007962:	2b00      	cmp	r3, #0
 8007964:	d110      	bne.n	8007988 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8007966:	4b13      	ldr	r3, [pc, #76]	; (80079b4 <mem_free+0xf8>)
 8007968:	f240 2295 	movw	r2, #661	; 0x295
 800796c:	4919      	ldr	r1, [pc, #100]	; (80079d4 <mem_free+0x118>)
 800796e:	4813      	ldr	r0, [pc, #76]	; (80079bc <mem_free+0x100>)
 8007970:	f00b fed0 	bl	8013714 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 8007974:	4815      	ldr	r0, [pc, #84]	; (80079cc <mem_free+0x110>)
 8007976:	f00b fe36 	bl	80135e6 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800797a:	f00b fe67 	bl	801364c <sys_arch_protect>
 800797e:	61b8      	str	r0, [r7, #24]
 8007980:	69b8      	ldr	r0, [r7, #24]
 8007982:	f00b fe71 	bl	8013668 <sys_arch_unprotect>
    return;
 8007986:	e012      	b.n	80079ae <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 8007988:	69fb      	ldr	r3, [r7, #28]
 800798a:	2200      	movs	r2, #0
 800798c:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800798e:	4b12      	ldr	r3, [pc, #72]	; (80079d8 <mem_free+0x11c>)
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	69fa      	ldr	r2, [r7, #28]
 8007994:	429a      	cmp	r2, r3
 8007996:	d202      	bcs.n	800799e <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8007998:	4a0f      	ldr	r2, [pc, #60]	; (80079d8 <mem_free+0x11c>)
 800799a:	69fb      	ldr	r3, [r7, #28]
 800799c:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800799e:	69f8      	ldr	r0, [r7, #28]
 80079a0:	f7ff fe5c 	bl	800765c <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 80079a4:	4809      	ldr	r0, [pc, #36]	; (80079cc <mem_free+0x110>)
 80079a6:	f00b fe1e 	bl	80135e6 <sys_mutex_unlock>
 80079aa:	e000      	b.n	80079ae <mem_free+0xf2>
    return;
 80079ac:	bf00      	nop
}
 80079ae:	3720      	adds	r7, #32
 80079b0:	46bd      	mov	sp, r7
 80079b2:	bd80      	pop	{r7, pc}
 80079b4:	08014718 	.word	0x08014718
 80079b8:	08014808 	.word	0x08014808
 80079bc:	08014760 	.word	0x08014760
 80079c0:	20008458 	.word	0x20008458
 80079c4:	2000845c 	.word	0x2000845c
 80079c8:	0801482c 	.word	0x0801482c
 80079cc:	20008460 	.word	0x20008460
 80079d0:	08014848 	.word	0x08014848
 80079d4:	08014870 	.word	0x08014870
 80079d8:	20008464 	.word	0x20008464

080079dc <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 80079dc:	b580      	push	{r7, lr}
 80079de:	b088      	sub	sp, #32
 80079e0:	af00      	add	r7, sp, #0
 80079e2:	6078      	str	r0, [r7, #4]
 80079e4:	460b      	mov	r3, r1
 80079e6:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 80079e8:	887b      	ldrh	r3, [r7, #2]
 80079ea:	3303      	adds	r3, #3
 80079ec:	b29b      	uxth	r3, r3
 80079ee:	f023 0303 	bic.w	r3, r3, #3
 80079f2:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 80079f4:	8bfb      	ldrh	r3, [r7, #30]
 80079f6:	2b0b      	cmp	r3, #11
 80079f8:	d801      	bhi.n	80079fe <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 80079fa:	230c      	movs	r3, #12
 80079fc:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 80079fe:	8bfb      	ldrh	r3, [r7, #30]
 8007a00:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8007a04:	d803      	bhi.n	8007a0e <mem_trim+0x32>
 8007a06:	8bfa      	ldrh	r2, [r7, #30]
 8007a08:	887b      	ldrh	r3, [r7, #2]
 8007a0a:	429a      	cmp	r2, r3
 8007a0c:	d201      	bcs.n	8007a12 <mem_trim+0x36>
    return NULL;
 8007a0e:	2300      	movs	r3, #0
 8007a10:	e0d8      	b.n	8007bc4 <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8007a12:	4b6e      	ldr	r3, [pc, #440]	; (8007bcc <mem_trim+0x1f0>)
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	687a      	ldr	r2, [r7, #4]
 8007a18:	429a      	cmp	r2, r3
 8007a1a:	d304      	bcc.n	8007a26 <mem_trim+0x4a>
 8007a1c:	4b6c      	ldr	r3, [pc, #432]	; (8007bd0 <mem_trim+0x1f4>)
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	687a      	ldr	r2, [r7, #4]
 8007a22:	429a      	cmp	r2, r3
 8007a24:	d306      	bcc.n	8007a34 <mem_trim+0x58>
 8007a26:	4b6b      	ldr	r3, [pc, #428]	; (8007bd4 <mem_trim+0x1f8>)
 8007a28:	f240 22d2 	movw	r2, #722	; 0x2d2
 8007a2c:	496a      	ldr	r1, [pc, #424]	; (8007bd8 <mem_trim+0x1fc>)
 8007a2e:	486b      	ldr	r0, [pc, #428]	; (8007bdc <mem_trim+0x200>)
 8007a30:	f00b fe70 	bl	8013714 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8007a34:	4b65      	ldr	r3, [pc, #404]	; (8007bcc <mem_trim+0x1f0>)
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	687a      	ldr	r2, [r7, #4]
 8007a3a:	429a      	cmp	r2, r3
 8007a3c:	d304      	bcc.n	8007a48 <mem_trim+0x6c>
 8007a3e:	4b64      	ldr	r3, [pc, #400]	; (8007bd0 <mem_trim+0x1f4>)
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	687a      	ldr	r2, [r7, #4]
 8007a44:	429a      	cmp	r2, r3
 8007a46:	d307      	bcc.n	8007a58 <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8007a48:	f00b fe00 	bl	801364c <sys_arch_protect>
 8007a4c:	60b8      	str	r0, [r7, #8]
 8007a4e:	68b8      	ldr	r0, [r7, #8]
 8007a50:	f00b fe0a 	bl	8013668 <sys_arch_unprotect>
    return rmem;
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	e0b5      	b.n	8007bc4 <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	3b08      	subs	r3, #8
 8007a5c:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 8007a5e:	69b8      	ldr	r0, [r7, #24]
 8007a60:	f7ff fdea 	bl	8007638 <mem_to_ptr>
 8007a64:	4603      	mov	r3, r0
 8007a66:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8007a68:	69bb      	ldr	r3, [r7, #24]
 8007a6a:	881a      	ldrh	r2, [r3, #0]
 8007a6c:	8afb      	ldrh	r3, [r7, #22]
 8007a6e:	1ad3      	subs	r3, r2, r3
 8007a70:	b29b      	uxth	r3, r3
 8007a72:	3b08      	subs	r3, #8
 8007a74:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8007a76:	8bfa      	ldrh	r2, [r7, #30]
 8007a78:	8abb      	ldrh	r3, [r7, #20]
 8007a7a:	429a      	cmp	r2, r3
 8007a7c:	d906      	bls.n	8007a8c <mem_trim+0xb0>
 8007a7e:	4b55      	ldr	r3, [pc, #340]	; (8007bd4 <mem_trim+0x1f8>)
 8007a80:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 8007a84:	4956      	ldr	r1, [pc, #344]	; (8007be0 <mem_trim+0x204>)
 8007a86:	4855      	ldr	r0, [pc, #340]	; (8007bdc <mem_trim+0x200>)
 8007a88:	f00b fe44 	bl	8013714 <iprintf>
  if (newsize > size) {
 8007a8c:	8bfa      	ldrh	r2, [r7, #30]
 8007a8e:	8abb      	ldrh	r3, [r7, #20]
 8007a90:	429a      	cmp	r2, r3
 8007a92:	d901      	bls.n	8007a98 <mem_trim+0xbc>
    /* not supported */
    return NULL;
 8007a94:	2300      	movs	r3, #0
 8007a96:	e095      	b.n	8007bc4 <mem_trim+0x1e8>
  }
  if (newsize == size) {
 8007a98:	8bfa      	ldrh	r2, [r7, #30]
 8007a9a:	8abb      	ldrh	r3, [r7, #20]
 8007a9c:	429a      	cmp	r2, r3
 8007a9e:	d101      	bne.n	8007aa4 <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	e08f      	b.n	8007bc4 <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 8007aa4:	484f      	ldr	r0, [pc, #316]	; (8007be4 <mem_trim+0x208>)
 8007aa6:	f00b fd8f 	bl	80135c8 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 8007aaa:	69bb      	ldr	r3, [r7, #24]
 8007aac:	881b      	ldrh	r3, [r3, #0]
 8007aae:	4618      	mov	r0, r3
 8007ab0:	f7ff fdb0 	bl	8007614 <ptr_to_mem>
 8007ab4:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 8007ab6:	693b      	ldr	r3, [r7, #16]
 8007ab8:	791b      	ldrb	r3, [r3, #4]
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d13f      	bne.n	8007b3e <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8007abe:	69bb      	ldr	r3, [r7, #24]
 8007ac0:	881b      	ldrh	r3, [r3, #0]
 8007ac2:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8007ac6:	d106      	bne.n	8007ad6 <mem_trim+0xfa>
 8007ac8:	4b42      	ldr	r3, [pc, #264]	; (8007bd4 <mem_trim+0x1f8>)
 8007aca:	f240 22f5 	movw	r2, #757	; 0x2f5
 8007ace:	4946      	ldr	r1, [pc, #280]	; (8007be8 <mem_trim+0x20c>)
 8007ad0:	4842      	ldr	r0, [pc, #264]	; (8007bdc <mem_trim+0x200>)
 8007ad2:	f00b fe1f 	bl	8013714 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 8007ad6:	693b      	ldr	r3, [r7, #16]
 8007ad8:	881b      	ldrh	r3, [r3, #0]
 8007ada:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8007adc:	8afa      	ldrh	r2, [r7, #22]
 8007ade:	8bfb      	ldrh	r3, [r7, #30]
 8007ae0:	4413      	add	r3, r2
 8007ae2:	b29b      	uxth	r3, r3
 8007ae4:	3308      	adds	r3, #8
 8007ae6:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 8007ae8:	4b40      	ldr	r3, [pc, #256]	; (8007bec <mem_trim+0x210>)
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	693a      	ldr	r2, [r7, #16]
 8007aee:	429a      	cmp	r2, r3
 8007af0:	d106      	bne.n	8007b00 <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 8007af2:	89fb      	ldrh	r3, [r7, #14]
 8007af4:	4618      	mov	r0, r3
 8007af6:	f7ff fd8d 	bl	8007614 <ptr_to_mem>
 8007afa:	4602      	mov	r2, r0
 8007afc:	4b3b      	ldr	r3, [pc, #236]	; (8007bec <mem_trim+0x210>)
 8007afe:	601a      	str	r2, [r3, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 8007b00:	89fb      	ldrh	r3, [r7, #14]
 8007b02:	4618      	mov	r0, r3
 8007b04:	f7ff fd86 	bl	8007614 <ptr_to_mem>
 8007b08:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 8007b0a:	693b      	ldr	r3, [r7, #16]
 8007b0c:	2200      	movs	r2, #0
 8007b0e:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8007b10:	693b      	ldr	r3, [r7, #16]
 8007b12:	89ba      	ldrh	r2, [r7, #12]
 8007b14:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8007b16:	693b      	ldr	r3, [r7, #16]
 8007b18:	8afa      	ldrh	r2, [r7, #22]
 8007b1a:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8007b1c:	69bb      	ldr	r3, [r7, #24]
 8007b1e:	89fa      	ldrh	r2, [r7, #14]
 8007b20:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8007b22:	693b      	ldr	r3, [r7, #16]
 8007b24:	881b      	ldrh	r3, [r3, #0]
 8007b26:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8007b2a:	d047      	beq.n	8007bbc <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8007b2c:	693b      	ldr	r3, [r7, #16]
 8007b2e:	881b      	ldrh	r3, [r3, #0]
 8007b30:	4618      	mov	r0, r3
 8007b32:	f7ff fd6f 	bl	8007614 <ptr_to_mem>
 8007b36:	4602      	mov	r2, r0
 8007b38:	89fb      	ldrh	r3, [r7, #14]
 8007b3a:	8053      	strh	r3, [r2, #2]
 8007b3c:	e03e      	b.n	8007bbc <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8007b3e:	8bfb      	ldrh	r3, [r7, #30]
 8007b40:	f103 0214 	add.w	r2, r3, #20
 8007b44:	8abb      	ldrh	r3, [r7, #20]
 8007b46:	429a      	cmp	r2, r3
 8007b48:	d838      	bhi.n	8007bbc <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8007b4a:	8afa      	ldrh	r2, [r7, #22]
 8007b4c:	8bfb      	ldrh	r3, [r7, #30]
 8007b4e:	4413      	add	r3, r2
 8007b50:	b29b      	uxth	r3, r3
 8007b52:	3308      	adds	r3, #8
 8007b54:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8007b56:	69bb      	ldr	r3, [r7, #24]
 8007b58:	881b      	ldrh	r3, [r3, #0]
 8007b5a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8007b5e:	d106      	bne.n	8007b6e <mem_trim+0x192>
 8007b60:	4b1c      	ldr	r3, [pc, #112]	; (8007bd4 <mem_trim+0x1f8>)
 8007b62:	f240 3216 	movw	r2, #790	; 0x316
 8007b66:	4920      	ldr	r1, [pc, #128]	; (8007be8 <mem_trim+0x20c>)
 8007b68:	481c      	ldr	r0, [pc, #112]	; (8007bdc <mem_trim+0x200>)
 8007b6a:	f00b fdd3 	bl	8013714 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 8007b6e:	89fb      	ldrh	r3, [r7, #14]
 8007b70:	4618      	mov	r0, r3
 8007b72:	f7ff fd4f 	bl	8007614 <ptr_to_mem>
 8007b76:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 8007b78:	4b1c      	ldr	r3, [pc, #112]	; (8007bec <mem_trim+0x210>)
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	693a      	ldr	r2, [r7, #16]
 8007b7e:	429a      	cmp	r2, r3
 8007b80:	d202      	bcs.n	8007b88 <mem_trim+0x1ac>
      lfree = mem2;
 8007b82:	4a1a      	ldr	r2, [pc, #104]	; (8007bec <mem_trim+0x210>)
 8007b84:	693b      	ldr	r3, [r7, #16]
 8007b86:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8007b88:	693b      	ldr	r3, [r7, #16]
 8007b8a:	2200      	movs	r2, #0
 8007b8c:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8007b8e:	69bb      	ldr	r3, [r7, #24]
 8007b90:	881a      	ldrh	r2, [r3, #0]
 8007b92:	693b      	ldr	r3, [r7, #16]
 8007b94:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8007b96:	693b      	ldr	r3, [r7, #16]
 8007b98:	8afa      	ldrh	r2, [r7, #22]
 8007b9a:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8007b9c:	69bb      	ldr	r3, [r7, #24]
 8007b9e:	89fa      	ldrh	r2, [r7, #14]
 8007ba0:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8007ba2:	693b      	ldr	r3, [r7, #16]
 8007ba4:	881b      	ldrh	r3, [r3, #0]
 8007ba6:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8007baa:	d007      	beq.n	8007bbc <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8007bac:	693b      	ldr	r3, [r7, #16]
 8007bae:	881b      	ldrh	r3, [r3, #0]
 8007bb0:	4618      	mov	r0, r3
 8007bb2:	f7ff fd2f 	bl	8007614 <ptr_to_mem>
 8007bb6:	4602      	mov	r2, r0
 8007bb8:	89fb      	ldrh	r3, [r7, #14]
 8007bba:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 8007bbc:	4809      	ldr	r0, [pc, #36]	; (8007be4 <mem_trim+0x208>)
 8007bbe:	f00b fd12 	bl	80135e6 <sys_mutex_unlock>
  return rmem;
 8007bc2:	687b      	ldr	r3, [r7, #4]
}
 8007bc4:	4618      	mov	r0, r3
 8007bc6:	3720      	adds	r7, #32
 8007bc8:	46bd      	mov	sp, r7
 8007bca:	bd80      	pop	{r7, pc}
 8007bcc:	20008458 	.word	0x20008458
 8007bd0:	2000845c 	.word	0x2000845c
 8007bd4:	08014718 	.word	0x08014718
 8007bd8:	080148a4 	.word	0x080148a4
 8007bdc:	08014760 	.word	0x08014760
 8007be0:	080148bc 	.word	0x080148bc
 8007be4:	20008460 	.word	0x20008460
 8007be8:	080148dc 	.word	0x080148dc
 8007bec:	20008464 	.word	0x20008464

08007bf0 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8007bf0:	b580      	push	{r7, lr}
 8007bf2:	b088      	sub	sp, #32
 8007bf4:	af00      	add	r7, sp, #0
 8007bf6:	4603      	mov	r3, r0
 8007bf8:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8007bfa:	88fb      	ldrh	r3, [r7, #6]
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d101      	bne.n	8007c04 <mem_malloc+0x14>
    return NULL;
 8007c00:	2300      	movs	r3, #0
 8007c02:	e0e2      	b.n	8007dca <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8007c04:	88fb      	ldrh	r3, [r7, #6]
 8007c06:	3303      	adds	r3, #3
 8007c08:	b29b      	uxth	r3, r3
 8007c0a:	f023 0303 	bic.w	r3, r3, #3
 8007c0e:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8007c10:	8bbb      	ldrh	r3, [r7, #28]
 8007c12:	2b0b      	cmp	r3, #11
 8007c14:	d801      	bhi.n	8007c1a <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8007c16:	230c      	movs	r3, #12
 8007c18:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8007c1a:	8bbb      	ldrh	r3, [r7, #28]
 8007c1c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8007c20:	d803      	bhi.n	8007c2a <mem_malloc+0x3a>
 8007c22:	8bba      	ldrh	r2, [r7, #28]
 8007c24:	88fb      	ldrh	r3, [r7, #6]
 8007c26:	429a      	cmp	r2, r3
 8007c28:	d201      	bcs.n	8007c2e <mem_malloc+0x3e>
    return NULL;
 8007c2a:	2300      	movs	r3, #0
 8007c2c:	e0cd      	b.n	8007dca <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 8007c2e:	4869      	ldr	r0, [pc, #420]	; (8007dd4 <mem_malloc+0x1e4>)
 8007c30:	f00b fcca 	bl	80135c8 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8007c34:	4b68      	ldr	r3, [pc, #416]	; (8007dd8 <mem_malloc+0x1e8>)
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	4618      	mov	r0, r3
 8007c3a:	f7ff fcfd 	bl	8007638 <mem_to_ptr>
 8007c3e:	4603      	mov	r3, r0
 8007c40:	83fb      	strh	r3, [r7, #30]
 8007c42:	e0b7      	b.n	8007db4 <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 8007c44:	8bfb      	ldrh	r3, [r7, #30]
 8007c46:	4618      	mov	r0, r3
 8007c48:	f7ff fce4 	bl	8007614 <ptr_to_mem>
 8007c4c:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8007c4e:	697b      	ldr	r3, [r7, #20]
 8007c50:	791b      	ldrb	r3, [r3, #4]
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	f040 80a7 	bne.w	8007da6 <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8007c58:	697b      	ldr	r3, [r7, #20]
 8007c5a:	881b      	ldrh	r3, [r3, #0]
 8007c5c:	461a      	mov	r2, r3
 8007c5e:	8bfb      	ldrh	r3, [r7, #30]
 8007c60:	1ad3      	subs	r3, r2, r3
 8007c62:	f1a3 0208 	sub.w	r2, r3, #8
 8007c66:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 8007c68:	429a      	cmp	r2, r3
 8007c6a:	f0c0 809c 	bcc.w	8007da6 <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8007c6e:	697b      	ldr	r3, [r7, #20]
 8007c70:	881b      	ldrh	r3, [r3, #0]
 8007c72:	461a      	mov	r2, r3
 8007c74:	8bfb      	ldrh	r3, [r7, #30]
 8007c76:	1ad3      	subs	r3, r2, r3
 8007c78:	f1a3 0208 	sub.w	r2, r3, #8
 8007c7c:	8bbb      	ldrh	r3, [r7, #28]
 8007c7e:	3314      	adds	r3, #20
 8007c80:	429a      	cmp	r2, r3
 8007c82:	d333      	bcc.n	8007cec <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8007c84:	8bfa      	ldrh	r2, [r7, #30]
 8007c86:	8bbb      	ldrh	r3, [r7, #28]
 8007c88:	4413      	add	r3, r2
 8007c8a:	b29b      	uxth	r3, r3
 8007c8c:	3308      	adds	r3, #8
 8007c8e:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8007c90:	8a7b      	ldrh	r3, [r7, #18]
 8007c92:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8007c96:	d106      	bne.n	8007ca6 <mem_malloc+0xb6>
 8007c98:	4b50      	ldr	r3, [pc, #320]	; (8007ddc <mem_malloc+0x1ec>)
 8007c9a:	f240 3287 	movw	r2, #903	; 0x387
 8007c9e:	4950      	ldr	r1, [pc, #320]	; (8007de0 <mem_malloc+0x1f0>)
 8007ca0:	4850      	ldr	r0, [pc, #320]	; (8007de4 <mem_malloc+0x1f4>)
 8007ca2:	f00b fd37 	bl	8013714 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 8007ca6:	8a7b      	ldrh	r3, [r7, #18]
 8007ca8:	4618      	mov	r0, r3
 8007caa:	f7ff fcb3 	bl	8007614 <ptr_to_mem>
 8007cae:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	2200      	movs	r2, #0
 8007cb4:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8007cb6:	697b      	ldr	r3, [r7, #20]
 8007cb8:	881a      	ldrh	r2, [r3, #0]
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	8bfa      	ldrh	r2, [r7, #30]
 8007cc2:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8007cc4:	697b      	ldr	r3, [r7, #20]
 8007cc6:	8a7a      	ldrh	r2, [r7, #18]
 8007cc8:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8007cca:	697b      	ldr	r3, [r7, #20]
 8007ccc:	2201      	movs	r2, #1
 8007cce:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	881b      	ldrh	r3, [r3, #0]
 8007cd4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8007cd8:	d00b      	beq.n	8007cf2 <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	881b      	ldrh	r3, [r3, #0]
 8007cde:	4618      	mov	r0, r3
 8007ce0:	f7ff fc98 	bl	8007614 <ptr_to_mem>
 8007ce4:	4602      	mov	r2, r0
 8007ce6:	8a7b      	ldrh	r3, [r7, #18]
 8007ce8:	8053      	strh	r3, [r2, #2]
 8007cea:	e002      	b.n	8007cf2 <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8007cec:	697b      	ldr	r3, [r7, #20]
 8007cee:	2201      	movs	r2, #1
 8007cf0:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8007cf2:	4b39      	ldr	r3, [pc, #228]	; (8007dd8 <mem_malloc+0x1e8>)
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	697a      	ldr	r2, [r7, #20]
 8007cf8:	429a      	cmp	r2, r3
 8007cfa:	d127      	bne.n	8007d4c <mem_malloc+0x15c>
          struct mem *cur = lfree;
 8007cfc:	4b36      	ldr	r3, [pc, #216]	; (8007dd8 <mem_malloc+0x1e8>)
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8007d02:	e005      	b.n	8007d10 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 8007d04:	69bb      	ldr	r3, [r7, #24]
 8007d06:	881b      	ldrh	r3, [r3, #0]
 8007d08:	4618      	mov	r0, r3
 8007d0a:	f7ff fc83 	bl	8007614 <ptr_to_mem>
 8007d0e:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 8007d10:	69bb      	ldr	r3, [r7, #24]
 8007d12:	791b      	ldrb	r3, [r3, #4]
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d004      	beq.n	8007d22 <mem_malloc+0x132>
 8007d18:	4b33      	ldr	r3, [pc, #204]	; (8007de8 <mem_malloc+0x1f8>)
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	69ba      	ldr	r2, [r7, #24]
 8007d1e:	429a      	cmp	r2, r3
 8007d20:	d1f0      	bne.n	8007d04 <mem_malloc+0x114>
          }
          lfree = cur;
 8007d22:	4a2d      	ldr	r2, [pc, #180]	; (8007dd8 <mem_malloc+0x1e8>)
 8007d24:	69bb      	ldr	r3, [r7, #24]
 8007d26:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8007d28:	4b2b      	ldr	r3, [pc, #172]	; (8007dd8 <mem_malloc+0x1e8>)
 8007d2a:	681a      	ldr	r2, [r3, #0]
 8007d2c:	4b2e      	ldr	r3, [pc, #184]	; (8007de8 <mem_malloc+0x1f8>)
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	429a      	cmp	r2, r3
 8007d32:	d00b      	beq.n	8007d4c <mem_malloc+0x15c>
 8007d34:	4b28      	ldr	r3, [pc, #160]	; (8007dd8 <mem_malloc+0x1e8>)
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	791b      	ldrb	r3, [r3, #4]
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d006      	beq.n	8007d4c <mem_malloc+0x15c>
 8007d3e:	4b27      	ldr	r3, [pc, #156]	; (8007ddc <mem_malloc+0x1ec>)
 8007d40:	f240 32b5 	movw	r2, #949	; 0x3b5
 8007d44:	4929      	ldr	r1, [pc, #164]	; (8007dec <mem_malloc+0x1fc>)
 8007d46:	4827      	ldr	r0, [pc, #156]	; (8007de4 <mem_malloc+0x1f4>)
 8007d48:	f00b fce4 	bl	8013714 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 8007d4c:	4821      	ldr	r0, [pc, #132]	; (8007dd4 <mem_malloc+0x1e4>)
 8007d4e:	f00b fc4a 	bl	80135e6 <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8007d52:	8bba      	ldrh	r2, [r7, #28]
 8007d54:	697b      	ldr	r3, [r7, #20]
 8007d56:	4413      	add	r3, r2
 8007d58:	3308      	adds	r3, #8
 8007d5a:	4a23      	ldr	r2, [pc, #140]	; (8007de8 <mem_malloc+0x1f8>)
 8007d5c:	6812      	ldr	r2, [r2, #0]
 8007d5e:	4293      	cmp	r3, r2
 8007d60:	d906      	bls.n	8007d70 <mem_malloc+0x180>
 8007d62:	4b1e      	ldr	r3, [pc, #120]	; (8007ddc <mem_malloc+0x1ec>)
 8007d64:	f240 32ba 	movw	r2, #954	; 0x3ba
 8007d68:	4921      	ldr	r1, [pc, #132]	; (8007df0 <mem_malloc+0x200>)
 8007d6a:	481e      	ldr	r0, [pc, #120]	; (8007de4 <mem_malloc+0x1f4>)
 8007d6c:	f00b fcd2 	bl	8013714 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8007d70:	697b      	ldr	r3, [r7, #20]
 8007d72:	f003 0303 	and.w	r3, r3, #3
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d006      	beq.n	8007d88 <mem_malloc+0x198>
 8007d7a:	4b18      	ldr	r3, [pc, #96]	; (8007ddc <mem_malloc+0x1ec>)
 8007d7c:	f44f 726f 	mov.w	r2, #956	; 0x3bc
 8007d80:	491c      	ldr	r1, [pc, #112]	; (8007df4 <mem_malloc+0x204>)
 8007d82:	4818      	ldr	r0, [pc, #96]	; (8007de4 <mem_malloc+0x1f4>)
 8007d84:	f00b fcc6 	bl	8013714 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8007d88:	697b      	ldr	r3, [r7, #20]
 8007d8a:	f003 0303 	and.w	r3, r3, #3
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d006      	beq.n	8007da0 <mem_malloc+0x1b0>
 8007d92:	4b12      	ldr	r3, [pc, #72]	; (8007ddc <mem_malloc+0x1ec>)
 8007d94:	f240 32be 	movw	r2, #958	; 0x3be
 8007d98:	4917      	ldr	r1, [pc, #92]	; (8007df8 <mem_malloc+0x208>)
 8007d9a:	4812      	ldr	r0, [pc, #72]	; (8007de4 <mem_malloc+0x1f4>)
 8007d9c:	f00b fcba 	bl	8013714 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8007da0:	697b      	ldr	r3, [r7, #20]
 8007da2:	3308      	adds	r3, #8
 8007da4:	e011      	b.n	8007dca <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 8007da6:	8bfb      	ldrh	r3, [r7, #30]
 8007da8:	4618      	mov	r0, r3
 8007daa:	f7ff fc33 	bl	8007614 <ptr_to_mem>
 8007dae:	4603      	mov	r3, r0
 8007db0:	881b      	ldrh	r3, [r3, #0]
 8007db2:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8007db4:	8bfa      	ldrh	r2, [r7, #30]
 8007db6:	8bbb      	ldrh	r3, [r7, #28]
 8007db8:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 8007dbc:	429a      	cmp	r2, r3
 8007dbe:	f4ff af41 	bcc.w	8007c44 <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 8007dc2:	4804      	ldr	r0, [pc, #16]	; (8007dd4 <mem_malloc+0x1e4>)
 8007dc4:	f00b fc0f 	bl	80135e6 <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8007dc8:	2300      	movs	r3, #0
}
 8007dca:	4618      	mov	r0, r3
 8007dcc:	3720      	adds	r7, #32
 8007dce:	46bd      	mov	sp, r7
 8007dd0:	bd80      	pop	{r7, pc}
 8007dd2:	bf00      	nop
 8007dd4:	20008460 	.word	0x20008460
 8007dd8:	20008464 	.word	0x20008464
 8007ddc:	08014718 	.word	0x08014718
 8007de0:	080148dc 	.word	0x080148dc
 8007de4:	08014760 	.word	0x08014760
 8007de8:	2000845c 	.word	0x2000845c
 8007dec:	080148f0 	.word	0x080148f0
 8007df0:	0801490c 	.word	0x0801490c
 8007df4:	0801493c 	.word	0x0801493c
 8007df8:	0801496c 	.word	0x0801496c

08007dfc <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8007dfc:	b480      	push	{r7}
 8007dfe:	b085      	sub	sp, #20
 8007e00:	af00      	add	r7, sp, #0
 8007e02:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	689b      	ldr	r3, [r3, #8]
 8007e08:	2200      	movs	r2, #0
 8007e0a:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	685b      	ldr	r3, [r3, #4]
 8007e10:	3303      	adds	r3, #3
 8007e12:	f023 0303 	bic.w	r3, r3, #3
 8007e16:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8007e18:	2300      	movs	r3, #0
 8007e1a:	60fb      	str	r3, [r7, #12]
 8007e1c:	e011      	b.n	8007e42 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	689b      	ldr	r3, [r3, #8]
 8007e22:	681a      	ldr	r2, [r3, #0]
 8007e24:	68bb      	ldr	r3, [r7, #8]
 8007e26:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	689b      	ldr	r3, [r3, #8]
 8007e2c:	68ba      	ldr	r2, [r7, #8]
 8007e2e:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	881b      	ldrh	r3, [r3, #0]
 8007e34:	461a      	mov	r2, r3
 8007e36:	68bb      	ldr	r3, [r7, #8]
 8007e38:	4413      	add	r3, r2
 8007e3a:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	3301      	adds	r3, #1
 8007e40:	60fb      	str	r3, [r7, #12]
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	885b      	ldrh	r3, [r3, #2]
 8007e46:	461a      	mov	r2, r3
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	4293      	cmp	r3, r2
 8007e4c:	dbe7      	blt.n	8007e1e <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8007e4e:	bf00      	nop
 8007e50:	3714      	adds	r7, #20
 8007e52:	46bd      	mov	sp, r7
 8007e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e58:	4770      	bx	lr
	...

08007e5c <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8007e5c:	b580      	push	{r7, lr}
 8007e5e:	b082      	sub	sp, #8
 8007e60:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8007e62:	2300      	movs	r3, #0
 8007e64:	80fb      	strh	r3, [r7, #6]
 8007e66:	e009      	b.n	8007e7c <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8007e68:	88fb      	ldrh	r3, [r7, #6]
 8007e6a:	4a08      	ldr	r2, [pc, #32]	; (8007e8c <memp_init+0x30>)
 8007e6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007e70:	4618      	mov	r0, r3
 8007e72:	f7ff ffc3 	bl	8007dfc <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8007e76:	88fb      	ldrh	r3, [r7, #6]
 8007e78:	3301      	adds	r3, #1
 8007e7a:	80fb      	strh	r3, [r7, #6]
 8007e7c:	88fb      	ldrh	r3, [r7, #6]
 8007e7e:	2b0c      	cmp	r3, #12
 8007e80:	d9f2      	bls.n	8007e68 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8007e82:	bf00      	nop
 8007e84:	3708      	adds	r7, #8
 8007e86:	46bd      	mov	sp, r7
 8007e88:	bd80      	pop	{r7, pc}
 8007e8a:	bf00      	nop
 8007e8c:	08017514 	.word	0x08017514

08007e90 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8007e90:	b580      	push	{r7, lr}
 8007e92:	b084      	sub	sp, #16
 8007e94:	af00      	add	r7, sp, #0
 8007e96:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 8007e98:	f00b fbd8 	bl	801364c <sys_arch_protect>
 8007e9c:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	689b      	ldr	r3, [r3, #8]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8007ea6:	68bb      	ldr	r3, [r7, #8]
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d015      	beq.n	8007ed8 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	689b      	ldr	r3, [r3, #8]
 8007eb0:	68ba      	ldr	r2, [r7, #8]
 8007eb2:	6812      	ldr	r2, [r2, #0]
 8007eb4:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8007eb6:	68bb      	ldr	r3, [r7, #8]
 8007eb8:	f003 0303 	and.w	r3, r3, #3
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d006      	beq.n	8007ece <do_memp_malloc_pool+0x3e>
 8007ec0:	4b09      	ldr	r3, [pc, #36]	; (8007ee8 <do_memp_malloc_pool+0x58>)
 8007ec2:	f240 1219 	movw	r2, #281	; 0x119
 8007ec6:	4909      	ldr	r1, [pc, #36]	; (8007eec <do_memp_malloc_pool+0x5c>)
 8007ec8:	4809      	ldr	r0, [pc, #36]	; (8007ef0 <do_memp_malloc_pool+0x60>)
 8007eca:	f00b fc23 	bl	8013714 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 8007ece:	68f8      	ldr	r0, [r7, #12]
 8007ed0:	f00b fbca 	bl	8013668 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8007ed4:	68bb      	ldr	r3, [r7, #8]
 8007ed6:	e003      	b.n	8007ee0 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 8007ed8:	68f8      	ldr	r0, [r7, #12]
 8007eda:	f00b fbc5 	bl	8013668 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 8007ede:	2300      	movs	r3, #0
}
 8007ee0:	4618      	mov	r0, r3
 8007ee2:	3710      	adds	r7, #16
 8007ee4:	46bd      	mov	sp, r7
 8007ee6:	bd80      	pop	{r7, pc}
 8007ee8:	08014990 	.word	0x08014990
 8007eec:	080149c0 	.word	0x080149c0
 8007ef0:	080149e4 	.word	0x080149e4

08007ef4 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8007ef4:	b580      	push	{r7, lr}
 8007ef6:	b084      	sub	sp, #16
 8007ef8:	af00      	add	r7, sp, #0
 8007efa:	4603      	mov	r3, r0
 8007efc:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8007efe:	79fb      	ldrb	r3, [r7, #7]
 8007f00:	2b0c      	cmp	r3, #12
 8007f02:	d908      	bls.n	8007f16 <memp_malloc+0x22>
 8007f04:	4b0a      	ldr	r3, [pc, #40]	; (8007f30 <memp_malloc+0x3c>)
 8007f06:	f240 1257 	movw	r2, #343	; 0x157
 8007f0a:	490a      	ldr	r1, [pc, #40]	; (8007f34 <memp_malloc+0x40>)
 8007f0c:	480a      	ldr	r0, [pc, #40]	; (8007f38 <memp_malloc+0x44>)
 8007f0e:	f00b fc01 	bl	8013714 <iprintf>
 8007f12:	2300      	movs	r3, #0
 8007f14:	e008      	b.n	8007f28 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8007f16:	79fb      	ldrb	r3, [r7, #7]
 8007f18:	4a08      	ldr	r2, [pc, #32]	; (8007f3c <memp_malloc+0x48>)
 8007f1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007f1e:	4618      	mov	r0, r3
 8007f20:	f7ff ffb6 	bl	8007e90 <do_memp_malloc_pool>
 8007f24:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 8007f26:	68fb      	ldr	r3, [r7, #12]
}
 8007f28:	4618      	mov	r0, r3
 8007f2a:	3710      	adds	r7, #16
 8007f2c:	46bd      	mov	sp, r7
 8007f2e:	bd80      	pop	{r7, pc}
 8007f30:	08014990 	.word	0x08014990
 8007f34:	08014a20 	.word	0x08014a20
 8007f38:	080149e4 	.word	0x080149e4
 8007f3c:	08017514 	.word	0x08017514

08007f40 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8007f40:	b580      	push	{r7, lr}
 8007f42:	b084      	sub	sp, #16
 8007f44:	af00      	add	r7, sp, #0
 8007f46:	6078      	str	r0, [r7, #4]
 8007f48:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8007f4a:	683b      	ldr	r3, [r7, #0]
 8007f4c:	f003 0303 	and.w	r3, r3, #3
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d006      	beq.n	8007f62 <do_memp_free_pool+0x22>
 8007f54:	4b0d      	ldr	r3, [pc, #52]	; (8007f8c <do_memp_free_pool+0x4c>)
 8007f56:	f240 126d 	movw	r2, #365	; 0x16d
 8007f5a:	490d      	ldr	r1, [pc, #52]	; (8007f90 <do_memp_free_pool+0x50>)
 8007f5c:	480d      	ldr	r0, [pc, #52]	; (8007f94 <do_memp_free_pool+0x54>)
 8007f5e:	f00b fbd9 	bl	8013714 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 8007f62:	683b      	ldr	r3, [r7, #0]
 8007f64:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 8007f66:	f00b fb71 	bl	801364c <sys_arch_protect>
 8007f6a:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	689b      	ldr	r3, [r3, #8]
 8007f70:	681a      	ldr	r2, [r3, #0]
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	689b      	ldr	r3, [r3, #8]
 8007f7a:	68fa      	ldr	r2, [r7, #12]
 8007f7c:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 8007f7e:	68b8      	ldr	r0, [r7, #8]
 8007f80:	f00b fb72 	bl	8013668 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 8007f84:	bf00      	nop
 8007f86:	3710      	adds	r7, #16
 8007f88:	46bd      	mov	sp, r7
 8007f8a:	bd80      	pop	{r7, pc}
 8007f8c:	08014990 	.word	0x08014990
 8007f90:	08014a40 	.word	0x08014a40
 8007f94:	080149e4 	.word	0x080149e4

08007f98 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8007f98:	b580      	push	{r7, lr}
 8007f9a:	b082      	sub	sp, #8
 8007f9c:	af00      	add	r7, sp, #0
 8007f9e:	4603      	mov	r3, r0
 8007fa0:	6039      	str	r1, [r7, #0]
 8007fa2:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8007fa4:	79fb      	ldrb	r3, [r7, #7]
 8007fa6:	2b0c      	cmp	r3, #12
 8007fa8:	d907      	bls.n	8007fba <memp_free+0x22>
 8007faa:	4b0c      	ldr	r3, [pc, #48]	; (8007fdc <memp_free+0x44>)
 8007fac:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8007fb0:	490b      	ldr	r1, [pc, #44]	; (8007fe0 <memp_free+0x48>)
 8007fb2:	480c      	ldr	r0, [pc, #48]	; (8007fe4 <memp_free+0x4c>)
 8007fb4:	f00b fbae 	bl	8013714 <iprintf>
 8007fb8:	e00c      	b.n	8007fd4 <memp_free+0x3c>

  if (mem == NULL) {
 8007fba:	683b      	ldr	r3, [r7, #0]
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d008      	beq.n	8007fd2 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8007fc0:	79fb      	ldrb	r3, [r7, #7]
 8007fc2:	4a09      	ldr	r2, [pc, #36]	; (8007fe8 <memp_free+0x50>)
 8007fc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007fc8:	6839      	ldr	r1, [r7, #0]
 8007fca:	4618      	mov	r0, r3
 8007fcc:	f7ff ffb8 	bl	8007f40 <do_memp_free_pool>
 8007fd0:	e000      	b.n	8007fd4 <memp_free+0x3c>
    return;
 8007fd2:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8007fd4:	3708      	adds	r7, #8
 8007fd6:	46bd      	mov	sp, r7
 8007fd8:	bd80      	pop	{r7, pc}
 8007fda:	bf00      	nop
 8007fdc:	08014990 	.word	0x08014990
 8007fe0:	08014a60 	.word	0x08014a60
 8007fe4:	080149e4 	.word	0x080149e4
 8007fe8:	08017514 	.word	0x08017514

08007fec <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8007fec:	b480      	push	{r7}
 8007fee:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8007ff0:	bf00      	nop
 8007ff2:	46bd      	mov	sp, r7
 8007ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff8:	4770      	bx	lr
	...

08007ffc <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8007ffc:	b580      	push	{r7, lr}
 8007ffe:	b086      	sub	sp, #24
 8008000:	af00      	add	r7, sp, #0
 8008002:	60f8      	str	r0, [r7, #12]
 8008004:	60b9      	str	r1, [r7, #8]
 8008006:	607a      	str	r2, [r7, #4]
 8008008:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	2b00      	cmp	r3, #0
 800800e:	d108      	bne.n	8008022 <netif_add+0x26>
 8008010:	4b5b      	ldr	r3, [pc, #364]	; (8008180 <netif_add+0x184>)
 8008012:	f240 1227 	movw	r2, #295	; 0x127
 8008016:	495b      	ldr	r1, [pc, #364]	; (8008184 <netif_add+0x188>)
 8008018:	485b      	ldr	r0, [pc, #364]	; (8008188 <netif_add+0x18c>)
 800801a:	f00b fb7b 	bl	8013714 <iprintf>
 800801e:	2300      	movs	r3, #0
 8008020:	e0a9      	b.n	8008176 <netif_add+0x17a>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 8008022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008024:	2b00      	cmp	r3, #0
 8008026:	d108      	bne.n	800803a <netif_add+0x3e>
 8008028:	4b55      	ldr	r3, [pc, #340]	; (8008180 <netif_add+0x184>)
 800802a:	f44f 7294 	mov.w	r2, #296	; 0x128
 800802e:	4957      	ldr	r1, [pc, #348]	; (800818c <netif_add+0x190>)
 8008030:	4855      	ldr	r0, [pc, #340]	; (8008188 <netif_add+0x18c>)
 8008032:	f00b fb6f 	bl	8013714 <iprintf>
 8008036:	2300      	movs	r3, #0
 8008038:	e09d      	b.n	8008176 <netif_add+0x17a>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800803a:	68bb      	ldr	r3, [r7, #8]
 800803c:	2b00      	cmp	r3, #0
 800803e:	d101      	bne.n	8008044 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8008040:	4b53      	ldr	r3, [pc, #332]	; (8008190 <netif_add+0x194>)
 8008042:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	2b00      	cmp	r3, #0
 8008048:	d101      	bne.n	800804e <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800804a:	4b51      	ldr	r3, [pc, #324]	; (8008190 <netif_add+0x194>)
 800804c:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800804e:	683b      	ldr	r3, [r7, #0]
 8008050:	2b00      	cmp	r3, #0
 8008052:	d101      	bne.n	8008058 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8008054:	4b4e      	ldr	r3, [pc, #312]	; (8008190 <netif_add+0x194>)
 8008056:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	2200      	movs	r2, #0
 800805c:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	2200      	movs	r2, #0
 8008062:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	2200      	movs	r2, #0
 8008068:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	4a49      	ldr	r2, [pc, #292]	; (8008194 <netif_add+0x198>)
 800806e:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	2200      	movs	r2, #0
 8008074:	851a      	strh	r2, [r3, #40]	; 0x28
  netif->flags = 0;
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	2200      	movs	r2, #0
 800807a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
#ifdef netif_get_client_data
  memset(netif->client_data, 0, sizeof(netif->client_data));
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	3324      	adds	r3, #36	; 0x24
 8008082:	2204      	movs	r2, #4
 8008084:	2100      	movs	r1, #0
 8008086:	4618      	mov	r0, r3
 8008088:	f00b fb3c 	bl	8013704 <memset>
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	2200      	movs	r2, #0
 8008090:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	6a3a      	ldr	r2, [r7, #32]
 8008096:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 8008098:	4b3f      	ldr	r3, [pc, #252]	; (8008198 <netif_add+0x19c>)
 800809a:	781a      	ldrb	r2, [r3, #0]
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  netif->input = input;
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80080a6:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 80080a8:	683b      	ldr	r3, [r7, #0]
 80080aa:	687a      	ldr	r2, [r7, #4]
 80080ac:	68b9      	ldr	r1, [r7, #8]
 80080ae:	68f8      	ldr	r0, [r7, #12]
 80080b0:	f000 f914 	bl	80082dc <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 80080b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080b6:	68f8      	ldr	r0, [r7, #12]
 80080b8:	4798      	blx	r3
 80080ba:	4603      	mov	r3, r0
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d001      	beq.n	80080c4 <netif_add+0xc8>
    return NULL;
 80080c0:	2300      	movs	r3, #0
 80080c2:	e058      	b.n	8008176 <netif_add+0x17a>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80080ca:	2bff      	cmp	r3, #255	; 0xff
 80080cc:	d103      	bne.n	80080d6 <netif_add+0xda>
        netif->num = 0;
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	2200      	movs	r2, #0
 80080d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }
      num_netifs = 0;
 80080d6:	2300      	movs	r3, #0
 80080d8:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 80080da:	4b30      	ldr	r3, [pc, #192]	; (800819c <netif_add+0x1a0>)
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	617b      	str	r3, [r7, #20]
 80080e0:	e02b      	b.n	800813a <netif_add+0x13e>
        LWIP_ASSERT("netif already added", netif2 != netif);
 80080e2:	697a      	ldr	r2, [r7, #20]
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	429a      	cmp	r2, r3
 80080e8:	d106      	bne.n	80080f8 <netif_add+0xfc>
 80080ea:	4b25      	ldr	r3, [pc, #148]	; (8008180 <netif_add+0x184>)
 80080ec:	f240 128b 	movw	r2, #395	; 0x18b
 80080f0:	492b      	ldr	r1, [pc, #172]	; (80081a0 <netif_add+0x1a4>)
 80080f2:	4825      	ldr	r0, [pc, #148]	; (8008188 <netif_add+0x18c>)
 80080f4:	f00b fb0e 	bl	8013714 <iprintf>
        num_netifs++;
 80080f8:	693b      	ldr	r3, [r7, #16]
 80080fa:	3301      	adds	r3, #1
 80080fc:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 80080fe:	693b      	ldr	r3, [r7, #16]
 8008100:	2bff      	cmp	r3, #255	; 0xff
 8008102:	dd06      	ble.n	8008112 <netif_add+0x116>
 8008104:	4b1e      	ldr	r3, [pc, #120]	; (8008180 <netif_add+0x184>)
 8008106:	f240 128d 	movw	r2, #397	; 0x18d
 800810a:	4926      	ldr	r1, [pc, #152]	; (80081a4 <netif_add+0x1a8>)
 800810c:	481e      	ldr	r0, [pc, #120]	; (8008188 <netif_add+0x18c>)
 800810e:	f00b fb01 	bl	8013714 <iprintf>
        if (netif2->num == netif->num) {
 8008112:	697b      	ldr	r3, [r7, #20]
 8008114:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800811e:	429a      	cmp	r2, r3
 8008120:	d108      	bne.n	8008134 <netif_add+0x138>
          netif->num++;
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008128:	3301      	adds	r3, #1
 800812a:	b2da      	uxtb	r2, r3
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          break;
 8008132:	e005      	b.n	8008140 <netif_add+0x144>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8008134:	697b      	ldr	r3, [r7, #20]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	617b      	str	r3, [r7, #20]
 800813a:	697b      	ldr	r3, [r7, #20]
 800813c:	2b00      	cmp	r3, #0
 800813e:	d1d0      	bne.n	80080e2 <netif_add+0xe6>
        }
      }
    } while (netif2 != NULL);
 8008140:	697b      	ldr	r3, [r7, #20]
 8008142:	2b00      	cmp	r3, #0
 8008144:	d1be      	bne.n	80080c4 <netif_add+0xc8>
  }
  if (netif->num == 254) {
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800814c:	2bfe      	cmp	r3, #254	; 0xfe
 800814e:	d103      	bne.n	8008158 <netif_add+0x15c>
    netif_num = 0;
 8008150:	4b11      	ldr	r3, [pc, #68]	; (8008198 <netif_add+0x19c>)
 8008152:	2200      	movs	r2, #0
 8008154:	701a      	strb	r2, [r3, #0]
 8008156:	e006      	b.n	8008166 <netif_add+0x16a>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800815e:	3301      	adds	r3, #1
 8008160:	b2da      	uxtb	r2, r3
 8008162:	4b0d      	ldr	r3, [pc, #52]	; (8008198 <netif_add+0x19c>)
 8008164:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8008166:	4b0d      	ldr	r3, [pc, #52]	; (800819c <netif_add+0x1a0>)
 8008168:	681a      	ldr	r2, [r3, #0]
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800816e:	4a0b      	ldr	r2, [pc, #44]	; (800819c <netif_add+0x1a0>)
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 8008174:	68fb      	ldr	r3, [r7, #12]
}
 8008176:	4618      	mov	r0, r3
 8008178:	3718      	adds	r7, #24
 800817a:	46bd      	mov	sp, r7
 800817c:	bd80      	pop	{r7, pc}
 800817e:	bf00      	nop
 8008180:	08014a7c 	.word	0x08014a7c
 8008184:	08014b10 	.word	0x08014b10
 8008188:	08014acc 	.word	0x08014acc
 800818c:	08014b2c 	.word	0x08014b2c
 8008190:	08017598 	.word	0x08017598
 8008194:	080085bf 	.word	0x080085bf
 8008198:	2000849c 	.word	0x2000849c
 800819c:	2000eed4 	.word	0x2000eed4
 80081a0:	08014b50 	.word	0x08014b50
 80081a4:	08014b64 	.word	0x08014b64

080081a8 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80081a8:	b580      	push	{r7, lr}
 80081aa:	b082      	sub	sp, #8
 80081ac:	af00      	add	r7, sp, #0
 80081ae:	6078      	str	r0, [r7, #4]
 80081b0:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 80081b2:	6839      	ldr	r1, [r7, #0]
 80081b4:	6878      	ldr	r0, [r7, #4]
 80081b6:	f002 fb81 	bl	800a8bc <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 80081ba:	6839      	ldr	r1, [r7, #0]
 80081bc:	6878      	ldr	r0, [r7, #4]
 80081be:	f006 ff9f 	bl	800f100 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 80081c2:	bf00      	nop
 80081c4:	3708      	adds	r7, #8
 80081c6:	46bd      	mov	sp, r7
 80081c8:	bd80      	pop	{r7, pc}
	...

080081cc <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 80081cc:	b580      	push	{r7, lr}
 80081ce:	b086      	sub	sp, #24
 80081d0:	af00      	add	r7, sp, #0
 80081d2:	60f8      	str	r0, [r7, #12]
 80081d4:	60b9      	str	r1, [r7, #8]
 80081d6:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 80081d8:	68bb      	ldr	r3, [r7, #8]
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d106      	bne.n	80081ec <netif_do_set_ipaddr+0x20>
 80081de:	4b1d      	ldr	r3, [pc, #116]	; (8008254 <netif_do_set_ipaddr+0x88>)
 80081e0:	f240 12cb 	movw	r2, #459	; 0x1cb
 80081e4:	491c      	ldr	r1, [pc, #112]	; (8008258 <netif_do_set_ipaddr+0x8c>)
 80081e6:	481d      	ldr	r0, [pc, #116]	; (800825c <netif_do_set_ipaddr+0x90>)
 80081e8:	f00b fa94 	bl	8013714 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d106      	bne.n	8008200 <netif_do_set_ipaddr+0x34>
 80081f2:	4b18      	ldr	r3, [pc, #96]	; (8008254 <netif_do_set_ipaddr+0x88>)
 80081f4:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 80081f8:	4917      	ldr	r1, [pc, #92]	; (8008258 <netif_do_set_ipaddr+0x8c>)
 80081fa:	4818      	ldr	r0, [pc, #96]	; (800825c <netif_do_set_ipaddr+0x90>)
 80081fc:	f00b fa8a 	bl	8013714 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8008200:	68bb      	ldr	r3, [r7, #8]
 8008202:	681a      	ldr	r2, [r3, #0]
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	3304      	adds	r3, #4
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	429a      	cmp	r2, r3
 800820c:	d01c      	beq.n	8008248 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800820e:	68bb      	ldr	r3, [r7, #8]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	3304      	adds	r3, #4
 8008218:	681a      	ldr	r2, [r3, #0]
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800821e:	f107 0314 	add.w	r3, r7, #20
 8008222:	4619      	mov	r1, r3
 8008224:	6878      	ldr	r0, [r7, #4]
 8008226:	f7ff ffbf 	bl	80081a8 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800822a:	68bb      	ldr	r3, [r7, #8]
 800822c:	2b00      	cmp	r3, #0
 800822e:	d002      	beq.n	8008236 <netif_do_set_ipaddr+0x6a>
 8008230:	68bb      	ldr	r3, [r7, #8]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	e000      	b.n	8008238 <netif_do_set_ipaddr+0x6c>
 8008236:	2300      	movs	r3, #0
 8008238:	68fa      	ldr	r2, [r7, #12]
 800823a:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800823c:	2101      	movs	r1, #1
 800823e:	68f8      	ldr	r0, [r7, #12]
 8008240:	f000 f8d2 	bl	80083e8 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 8008244:	2301      	movs	r3, #1
 8008246:	e000      	b.n	800824a <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 8008248:	2300      	movs	r3, #0
}
 800824a:	4618      	mov	r0, r3
 800824c:	3718      	adds	r7, #24
 800824e:	46bd      	mov	sp, r7
 8008250:	bd80      	pop	{r7, pc}
 8008252:	bf00      	nop
 8008254:	08014a7c 	.word	0x08014a7c
 8008258:	08014b94 	.word	0x08014b94
 800825c:	08014acc 	.word	0x08014acc

08008260 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8008260:	b480      	push	{r7}
 8008262:	b085      	sub	sp, #20
 8008264:	af00      	add	r7, sp, #0
 8008266:	60f8      	str	r0, [r7, #12]
 8008268:	60b9      	str	r1, [r7, #8]
 800826a:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800826c:	68bb      	ldr	r3, [r7, #8]
 800826e:	681a      	ldr	r2, [r3, #0]
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	3308      	adds	r3, #8
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	429a      	cmp	r2, r3
 8008278:	d00a      	beq.n	8008290 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800827a:	68bb      	ldr	r3, [r7, #8]
 800827c:	2b00      	cmp	r3, #0
 800827e:	d002      	beq.n	8008286 <netif_do_set_netmask+0x26>
 8008280:	68bb      	ldr	r3, [r7, #8]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	e000      	b.n	8008288 <netif_do_set_netmask+0x28>
 8008286:	2300      	movs	r3, #0
 8008288:	68fa      	ldr	r2, [r7, #12]
 800828a:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800828c:	2301      	movs	r3, #1
 800828e:	e000      	b.n	8008292 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 8008290:	2300      	movs	r3, #0
}
 8008292:	4618      	mov	r0, r3
 8008294:	3714      	adds	r7, #20
 8008296:	46bd      	mov	sp, r7
 8008298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800829c:	4770      	bx	lr

0800829e <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800829e:	b480      	push	{r7}
 80082a0:	b085      	sub	sp, #20
 80082a2:	af00      	add	r7, sp, #0
 80082a4:	60f8      	str	r0, [r7, #12]
 80082a6:	60b9      	str	r1, [r7, #8]
 80082a8:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 80082aa:	68bb      	ldr	r3, [r7, #8]
 80082ac:	681a      	ldr	r2, [r3, #0]
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	330c      	adds	r3, #12
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	429a      	cmp	r2, r3
 80082b6:	d00a      	beq.n	80082ce <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 80082b8:	68bb      	ldr	r3, [r7, #8]
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d002      	beq.n	80082c4 <netif_do_set_gw+0x26>
 80082be:	68bb      	ldr	r3, [r7, #8]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	e000      	b.n	80082c6 <netif_do_set_gw+0x28>
 80082c4:	2300      	movs	r3, #0
 80082c6:	68fa      	ldr	r2, [r7, #12]
 80082c8:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 80082ca:	2301      	movs	r3, #1
 80082cc:	e000      	b.n	80082d0 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 80082ce:	2300      	movs	r3, #0
}
 80082d0:	4618      	mov	r0, r3
 80082d2:	3714      	adds	r7, #20
 80082d4:	46bd      	mov	sp, r7
 80082d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082da:	4770      	bx	lr

080082dc <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 80082dc:	b580      	push	{r7, lr}
 80082de:	b088      	sub	sp, #32
 80082e0:	af00      	add	r7, sp, #0
 80082e2:	60f8      	str	r0, [r7, #12]
 80082e4:	60b9      	str	r1, [r7, #8]
 80082e6:	607a      	str	r2, [r7, #4]
 80082e8:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 80082ea:	2300      	movs	r3, #0
 80082ec:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 80082ee:	2300      	movs	r3, #0
 80082f0:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 80082f2:	68bb      	ldr	r3, [r7, #8]
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d101      	bne.n	80082fc <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 80082f8:	4b1c      	ldr	r3, [pc, #112]	; (800836c <netif_set_addr+0x90>)
 80082fa:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d101      	bne.n	8008306 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 8008302:	4b1a      	ldr	r3, [pc, #104]	; (800836c <netif_set_addr+0x90>)
 8008304:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8008306:	683b      	ldr	r3, [r7, #0]
 8008308:	2b00      	cmp	r3, #0
 800830a:	d101      	bne.n	8008310 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800830c:	4b17      	ldr	r3, [pc, #92]	; (800836c <netif_set_addr+0x90>)
 800830e:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8008310:	68bb      	ldr	r3, [r7, #8]
 8008312:	2b00      	cmp	r3, #0
 8008314:	d003      	beq.n	800831e <netif_set_addr+0x42>
 8008316:	68bb      	ldr	r3, [r7, #8]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	2b00      	cmp	r3, #0
 800831c:	d101      	bne.n	8008322 <netif_set_addr+0x46>
 800831e:	2301      	movs	r3, #1
 8008320:	e000      	b.n	8008324 <netif_set_addr+0x48>
 8008322:	2300      	movs	r3, #0
 8008324:	617b      	str	r3, [r7, #20]
  if (remove) {
 8008326:	697b      	ldr	r3, [r7, #20]
 8008328:	2b00      	cmp	r3, #0
 800832a:	d006      	beq.n	800833a <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800832c:	f107 0310 	add.w	r3, r7, #16
 8008330:	461a      	mov	r2, r3
 8008332:	68b9      	ldr	r1, [r7, #8]
 8008334:	68f8      	ldr	r0, [r7, #12]
 8008336:	f7ff ff49 	bl	80081cc <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800833a:	69fa      	ldr	r2, [r7, #28]
 800833c:	6879      	ldr	r1, [r7, #4]
 800833e:	68f8      	ldr	r0, [r7, #12]
 8008340:	f7ff ff8e 	bl	8008260 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8008344:	69ba      	ldr	r2, [r7, #24]
 8008346:	6839      	ldr	r1, [r7, #0]
 8008348:	68f8      	ldr	r0, [r7, #12]
 800834a:	f7ff ffa8 	bl	800829e <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800834e:	697b      	ldr	r3, [r7, #20]
 8008350:	2b00      	cmp	r3, #0
 8008352:	d106      	bne.n	8008362 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8008354:	f107 0310 	add.w	r3, r7, #16
 8008358:	461a      	mov	r2, r3
 800835a:	68b9      	ldr	r1, [r7, #8]
 800835c:	68f8      	ldr	r0, [r7, #12]
 800835e:	f7ff ff35 	bl	80081cc <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 8008362:	bf00      	nop
 8008364:	3720      	adds	r7, #32
 8008366:	46bd      	mov	sp, r7
 8008368:	bd80      	pop	{r7, pc}
 800836a:	bf00      	nop
 800836c:	08017598 	.word	0x08017598

08008370 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8008370:	b480      	push	{r7}
 8008372:	b083      	sub	sp, #12
 8008374:	af00      	add	r7, sp, #0
 8008376:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8008378:	4a04      	ldr	r2, [pc, #16]	; (800838c <netif_set_default+0x1c>)
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800837e:	bf00      	nop
 8008380:	370c      	adds	r7, #12
 8008382:	46bd      	mov	sp, r7
 8008384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008388:	4770      	bx	lr
 800838a:	bf00      	nop
 800838c:	2000eed8 	.word	0x2000eed8

08008390 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8008390:	b580      	push	{r7, lr}
 8008392:	b082      	sub	sp, #8
 8008394:	af00      	add	r7, sp, #0
 8008396:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	2b00      	cmp	r3, #0
 800839c:	d107      	bne.n	80083ae <netif_set_up+0x1e>
 800839e:	4b0f      	ldr	r3, [pc, #60]	; (80083dc <netif_set_up+0x4c>)
 80083a0:	f44f 7254 	mov.w	r2, #848	; 0x350
 80083a4:	490e      	ldr	r1, [pc, #56]	; (80083e0 <netif_set_up+0x50>)
 80083a6:	480f      	ldr	r0, [pc, #60]	; (80083e4 <netif_set_up+0x54>)
 80083a8:	f00b f9b4 	bl	8013714 <iprintf>
 80083ac:	e013      	b.n	80083d6 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80083b4:	f003 0301 	and.w	r3, r3, #1
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d10c      	bne.n	80083d6 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80083c2:	f043 0301 	orr.w	r3, r3, #1
 80083c6:	b2da      	uxtb	r2, r3
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 80083ce:	2103      	movs	r1, #3
 80083d0:	6878      	ldr	r0, [r7, #4]
 80083d2:	f000 f809 	bl	80083e8 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 80083d6:	3708      	adds	r7, #8
 80083d8:	46bd      	mov	sp, r7
 80083da:	bd80      	pop	{r7, pc}
 80083dc:	08014a7c 	.word	0x08014a7c
 80083e0:	08014c04 	.word	0x08014c04
 80083e4:	08014acc 	.word	0x08014acc

080083e8 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 80083e8:	b580      	push	{r7, lr}
 80083ea:	b082      	sub	sp, #8
 80083ec:	af00      	add	r7, sp, #0
 80083ee:	6078      	str	r0, [r7, #4]
 80083f0:	460b      	mov	r3, r1
 80083f2:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d106      	bne.n	8008408 <netif_issue_reports+0x20>
 80083fa:	4b18      	ldr	r3, [pc, #96]	; (800845c <netif_issue_reports+0x74>)
 80083fc:	f240 326d 	movw	r2, #877	; 0x36d
 8008400:	4917      	ldr	r1, [pc, #92]	; (8008460 <netif_issue_reports+0x78>)
 8008402:	4818      	ldr	r0, [pc, #96]	; (8008464 <netif_issue_reports+0x7c>)
 8008404:	f00b f986 	bl	8013714 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800840e:	f003 0304 	and.w	r3, r3, #4
 8008412:	2b00      	cmp	r3, #0
 8008414:	d01e      	beq.n	8008454 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800841c:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8008420:	2b00      	cmp	r3, #0
 8008422:	d017      	beq.n	8008454 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8008424:	78fb      	ldrb	r3, [r7, #3]
 8008426:	f003 0301 	and.w	r3, r3, #1
 800842a:	2b00      	cmp	r3, #0
 800842c:	d013      	beq.n	8008456 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	3304      	adds	r3, #4
 8008432:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8008434:	2b00      	cmp	r3, #0
 8008436:	d00e      	beq.n	8008456 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800843e:	f003 0308 	and.w	r3, r3, #8
 8008442:	2b00      	cmp	r3, #0
 8008444:	d007      	beq.n	8008456 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	3304      	adds	r3, #4
 800844a:	4619      	mov	r1, r3
 800844c:	6878      	ldr	r0, [r7, #4]
 800844e:	f009 fc67 	bl	8011d20 <etharp_request>
 8008452:	e000      	b.n	8008456 <netif_issue_reports+0x6e>
    return;
 8008454:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 8008456:	3708      	adds	r7, #8
 8008458:	46bd      	mov	sp, r7
 800845a:	bd80      	pop	{r7, pc}
 800845c:	08014a7c 	.word	0x08014a7c
 8008460:	08014c20 	.word	0x08014c20
 8008464:	08014acc 	.word	0x08014acc

08008468 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8008468:	b580      	push	{r7, lr}
 800846a:	b082      	sub	sp, #8
 800846c:	af00      	add	r7, sp, #0
 800846e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	2b00      	cmp	r3, #0
 8008474:	d107      	bne.n	8008486 <netif_set_down+0x1e>
 8008476:	4b12      	ldr	r3, [pc, #72]	; (80084c0 <netif_set_down+0x58>)
 8008478:	f240 329b 	movw	r2, #923	; 0x39b
 800847c:	4911      	ldr	r1, [pc, #68]	; (80084c4 <netif_set_down+0x5c>)
 800847e:	4812      	ldr	r0, [pc, #72]	; (80084c8 <netif_set_down+0x60>)
 8008480:	f00b f948 	bl	8013714 <iprintf>
 8008484:	e019      	b.n	80084ba <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800848c:	f003 0301 	and.w	r3, r3, #1
 8008490:	2b00      	cmp	r3, #0
 8008492:	d012      	beq.n	80084ba <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800849a:	f023 0301 	bic.w	r3, r3, #1
 800849e:	b2da      	uxtb	r2, r3
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80084ac:	f003 0308 	and.w	r3, r3, #8
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d002      	beq.n	80084ba <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 80084b4:	6878      	ldr	r0, [r7, #4]
 80084b6:	f008 ffed 	bl	8011494 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 80084ba:	3708      	adds	r7, #8
 80084bc:	46bd      	mov	sp, r7
 80084be:	bd80      	pop	{r7, pc}
 80084c0:	08014a7c 	.word	0x08014a7c
 80084c4:	08014c44 	.word	0x08014c44
 80084c8:	08014acc 	.word	0x08014acc

080084cc <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 80084cc:	b580      	push	{r7, lr}
 80084ce:	b082      	sub	sp, #8
 80084d0:	af00      	add	r7, sp, #0
 80084d2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d107      	bne.n	80084ea <netif_set_link_up+0x1e>
 80084da:	4b15      	ldr	r3, [pc, #84]	; (8008530 <netif_set_link_up+0x64>)
 80084dc:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 80084e0:	4914      	ldr	r1, [pc, #80]	; (8008534 <netif_set_link_up+0x68>)
 80084e2:	4815      	ldr	r0, [pc, #84]	; (8008538 <netif_set_link_up+0x6c>)
 80084e4:	f00b f916 	bl	8013714 <iprintf>
 80084e8:	e01e      	b.n	8008528 <netif_set_link_up+0x5c>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80084f0:	f003 0304 	and.w	r3, r3, #4
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d117      	bne.n	8008528 <netif_set_link_up+0x5c>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80084fe:	f043 0304 	orr.w	r3, r3, #4
 8008502:	b2da      	uxtb	r2, r3
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

#if LWIP_DHCP
    dhcp_network_changed(netif);
 800850a:	6878      	ldr	r0, [r7, #4]
 800850c:	f007 fa22 	bl	800f954 <dhcp_network_changed>

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8008510:	2103      	movs	r1, #3
 8008512:	6878      	ldr	r0, [r7, #4]
 8008514:	f7ff ff68 	bl	80083e8 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	69db      	ldr	r3, [r3, #28]
 800851c:	2b00      	cmp	r3, #0
 800851e:	d003      	beq.n	8008528 <netif_set_link_up+0x5c>
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	69db      	ldr	r3, [r3, #28]
 8008524:	6878      	ldr	r0, [r7, #4]
 8008526:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8008528:	3708      	adds	r7, #8
 800852a:	46bd      	mov	sp, r7
 800852c:	bd80      	pop	{r7, pc}
 800852e:	bf00      	nop
 8008530:	08014a7c 	.word	0x08014a7c
 8008534:	08014c64 	.word	0x08014c64
 8008538:	08014acc 	.word	0x08014acc

0800853c <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 800853c:	b580      	push	{r7, lr}
 800853e:	b082      	sub	sp, #8
 8008540:	af00      	add	r7, sp, #0
 8008542:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	2b00      	cmp	r3, #0
 8008548:	d107      	bne.n	800855a <netif_set_link_down+0x1e>
 800854a:	4b11      	ldr	r3, [pc, #68]	; (8008590 <netif_set_link_down+0x54>)
 800854c:	f240 4206 	movw	r2, #1030	; 0x406
 8008550:	4910      	ldr	r1, [pc, #64]	; (8008594 <netif_set_link_down+0x58>)
 8008552:	4811      	ldr	r0, [pc, #68]	; (8008598 <netif_set_link_down+0x5c>)
 8008554:	f00b f8de 	bl	8013714 <iprintf>
 8008558:	e017      	b.n	800858a <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8008560:	f003 0304 	and.w	r3, r3, #4
 8008564:	2b00      	cmp	r3, #0
 8008566:	d010      	beq.n	800858a <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800856e:	f023 0304 	bic.w	r3, r3, #4
 8008572:	b2da      	uxtb	r2, r3
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    NETIF_LINK_CALLBACK(netif);
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	69db      	ldr	r3, [r3, #28]
 800857e:	2b00      	cmp	r3, #0
 8008580:	d003      	beq.n	800858a <netif_set_link_down+0x4e>
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	69db      	ldr	r3, [r3, #28]
 8008586:	6878      	ldr	r0, [r7, #4]
 8008588:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800858a:	3708      	adds	r7, #8
 800858c:	46bd      	mov	sp, r7
 800858e:	bd80      	pop	{r7, pc}
 8008590:	08014a7c 	.word	0x08014a7c
 8008594:	08014c88 	.word	0x08014c88
 8008598:	08014acc 	.word	0x08014acc

0800859c <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800859c:	b480      	push	{r7}
 800859e:	b083      	sub	sp, #12
 80085a0:	af00      	add	r7, sp, #0
 80085a2:	6078      	str	r0, [r7, #4]
 80085a4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d002      	beq.n	80085b2 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	683a      	ldr	r2, [r7, #0]
 80085b0:	61da      	str	r2, [r3, #28]
  }
}
 80085b2:	bf00      	nop
 80085b4:	370c      	adds	r7, #12
 80085b6:	46bd      	mov	sp, r7
 80085b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085bc:	4770      	bx	lr

080085be <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 80085be:	b480      	push	{r7}
 80085c0:	b085      	sub	sp, #20
 80085c2:	af00      	add	r7, sp, #0
 80085c4:	60f8      	str	r0, [r7, #12]
 80085c6:	60b9      	str	r1, [r7, #8]
 80085c8:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 80085ca:	f06f 030b 	mvn.w	r3, #11
}
 80085ce:	4618      	mov	r0, r3
 80085d0:	3714      	adds	r7, #20
 80085d2:	46bd      	mov	sp, r7
 80085d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085d8:	4770      	bx	lr
	...

080085dc <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 80085dc:	b480      	push	{r7}
 80085de:	b085      	sub	sp, #20
 80085e0:	af00      	add	r7, sp, #0
 80085e2:	4603      	mov	r3, r0
 80085e4:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 80085e6:	79fb      	ldrb	r3, [r7, #7]
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d013      	beq.n	8008614 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 80085ec:	4b0d      	ldr	r3, [pc, #52]	; (8008624 <netif_get_by_index+0x48>)
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	60fb      	str	r3, [r7, #12]
 80085f2:	e00c      	b.n	800860e <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80085fa:	3301      	adds	r3, #1
 80085fc:	b2db      	uxtb	r3, r3
 80085fe:	79fa      	ldrb	r2, [r7, #7]
 8008600:	429a      	cmp	r2, r3
 8008602:	d101      	bne.n	8008608 <netif_get_by_index+0x2c>
        return netif; /* found! */
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	e006      	b.n	8008616 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	60fb      	str	r3, [r7, #12]
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	2b00      	cmp	r3, #0
 8008612:	d1ef      	bne.n	80085f4 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 8008614:	2300      	movs	r3, #0
}
 8008616:	4618      	mov	r0, r3
 8008618:	3714      	adds	r7, #20
 800861a:	46bd      	mov	sp, r7
 800861c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008620:	4770      	bx	lr
 8008622:	bf00      	nop
 8008624:	2000eed4 	.word	0x2000eed4

08008628 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 8008628:	b580      	push	{r7, lr}
 800862a:	b082      	sub	sp, #8
 800862c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800862e:	f00b f80d 	bl	801364c <sys_arch_protect>
 8008632:	6038      	str	r0, [r7, #0]
 8008634:	4b0d      	ldr	r3, [pc, #52]	; (800866c <pbuf_free_ooseq+0x44>)
 8008636:	2200      	movs	r2, #0
 8008638:	701a      	strb	r2, [r3, #0]
 800863a:	6838      	ldr	r0, [r7, #0]
 800863c:	f00b f814 	bl	8013668 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8008640:	4b0b      	ldr	r3, [pc, #44]	; (8008670 <pbuf_free_ooseq+0x48>)
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	607b      	str	r3, [r7, #4]
 8008646:	e00a      	b.n	800865e <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800864c:	2b00      	cmp	r3, #0
 800864e:	d003      	beq.n	8008658 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 8008650:	6878      	ldr	r0, [r7, #4]
 8008652:	f002 f971 	bl	800a938 <tcp_free_ooseq>
      return;
 8008656:	e005      	b.n	8008664 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	68db      	ldr	r3, [r3, #12]
 800865c:	607b      	str	r3, [r7, #4]
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	2b00      	cmp	r3, #0
 8008662:	d1f1      	bne.n	8008648 <pbuf_free_ooseq+0x20>
    }
  }
}
 8008664:	3708      	adds	r7, #8
 8008666:	46bd      	mov	sp, r7
 8008668:	bd80      	pop	{r7, pc}
 800866a:	bf00      	nop
 800866c:	2000eedc 	.word	0x2000eedc
 8008670:	2000eee4 	.word	0x2000eee4

08008674 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 8008674:	b580      	push	{r7, lr}
 8008676:	b082      	sub	sp, #8
 8008678:	af00      	add	r7, sp, #0
 800867a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 800867c:	f7ff ffd4 	bl	8008628 <pbuf_free_ooseq>
}
 8008680:	bf00      	nop
 8008682:	3708      	adds	r7, #8
 8008684:	46bd      	mov	sp, r7
 8008686:	bd80      	pop	{r7, pc}

08008688 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8008688:	b580      	push	{r7, lr}
 800868a:	b082      	sub	sp, #8
 800868c:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 800868e:	f00a ffdd 	bl	801364c <sys_arch_protect>
 8008692:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 8008694:	4b0f      	ldr	r3, [pc, #60]	; (80086d4 <pbuf_pool_is_empty+0x4c>)
 8008696:	781b      	ldrb	r3, [r3, #0]
 8008698:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 800869a:	4b0e      	ldr	r3, [pc, #56]	; (80086d4 <pbuf_pool_is_empty+0x4c>)
 800869c:	2201      	movs	r2, #1
 800869e:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 80086a0:	6878      	ldr	r0, [r7, #4]
 80086a2:	f00a ffe1 	bl	8013668 <sys_arch_unprotect>

  if (!queued) {
 80086a6:	78fb      	ldrb	r3, [r7, #3]
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d10f      	bne.n	80086cc <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 80086ac:	2100      	movs	r1, #0
 80086ae:	480a      	ldr	r0, [pc, #40]	; (80086d8 <pbuf_pool_is_empty+0x50>)
 80086b0:	f7fe fee0 	bl	8007474 <tcpip_try_callback>
 80086b4:	4603      	mov	r3, r0
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d008      	beq.n	80086cc <pbuf_pool_is_empty+0x44>
 80086ba:	f00a ffc7 	bl	801364c <sys_arch_protect>
 80086be:	6078      	str	r0, [r7, #4]
 80086c0:	4b04      	ldr	r3, [pc, #16]	; (80086d4 <pbuf_pool_is_empty+0x4c>)
 80086c2:	2200      	movs	r2, #0
 80086c4:	701a      	strb	r2, [r3, #0]
 80086c6:	6878      	ldr	r0, [r7, #4]
 80086c8:	f00a ffce 	bl	8013668 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 80086cc:	bf00      	nop
 80086ce:	3708      	adds	r7, #8
 80086d0:	46bd      	mov	sp, r7
 80086d2:	bd80      	pop	{r7, pc}
 80086d4:	2000eedc 	.word	0x2000eedc
 80086d8:	08008675 	.word	0x08008675

080086dc <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 80086dc:	b480      	push	{r7}
 80086de:	b085      	sub	sp, #20
 80086e0:	af00      	add	r7, sp, #0
 80086e2:	60f8      	str	r0, [r7, #12]
 80086e4:	60b9      	str	r1, [r7, #8]
 80086e6:	4611      	mov	r1, r2
 80086e8:	461a      	mov	r2, r3
 80086ea:	460b      	mov	r3, r1
 80086ec:	80fb      	strh	r3, [r7, #6]
 80086ee:	4613      	mov	r3, r2
 80086f0:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	2200      	movs	r2, #0
 80086f6:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	68ba      	ldr	r2, [r7, #8]
 80086fc:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	88fa      	ldrh	r2, [r7, #6]
 8008702:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	88ba      	ldrh	r2, [r7, #4]
 8008708:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800870a:	8b3b      	ldrh	r3, [r7, #24]
 800870c:	b2da      	uxtb	r2, r3
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	7f3a      	ldrb	r2, [r7, #28]
 8008716:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	2201      	movs	r2, #1
 800871c:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	2200      	movs	r2, #0
 8008722:	73da      	strb	r2, [r3, #15]
}
 8008724:	bf00      	nop
 8008726:	3714      	adds	r7, #20
 8008728:	46bd      	mov	sp, r7
 800872a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800872e:	4770      	bx	lr

08008730 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8008730:	b580      	push	{r7, lr}
 8008732:	b08c      	sub	sp, #48	; 0x30
 8008734:	af02      	add	r7, sp, #8
 8008736:	4603      	mov	r3, r0
 8008738:	71fb      	strb	r3, [r7, #7]
 800873a:	460b      	mov	r3, r1
 800873c:	80bb      	strh	r3, [r7, #4]
 800873e:	4613      	mov	r3, r2
 8008740:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 8008742:	79fb      	ldrb	r3, [r7, #7]
 8008744:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 8008746:	887b      	ldrh	r3, [r7, #2]
 8008748:	2b41      	cmp	r3, #65	; 0x41
 800874a:	d00b      	beq.n	8008764 <pbuf_alloc+0x34>
 800874c:	2b41      	cmp	r3, #65	; 0x41
 800874e:	dc02      	bgt.n	8008756 <pbuf_alloc+0x26>
 8008750:	2b01      	cmp	r3, #1
 8008752:	d007      	beq.n	8008764 <pbuf_alloc+0x34>
 8008754:	e0c2      	b.n	80088dc <pbuf_alloc+0x1ac>
 8008756:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800875a:	d00b      	beq.n	8008774 <pbuf_alloc+0x44>
 800875c:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8008760:	d070      	beq.n	8008844 <pbuf_alloc+0x114>
 8008762:	e0bb      	b.n	80088dc <pbuf_alloc+0x1ac>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 8008764:	887a      	ldrh	r2, [r7, #2]
 8008766:	88bb      	ldrh	r3, [r7, #4]
 8008768:	4619      	mov	r1, r3
 800876a:	2000      	movs	r0, #0
 800876c:	f000 f8d2 	bl	8008914 <pbuf_alloc_reference>
 8008770:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 8008772:	e0bd      	b.n	80088f0 <pbuf_alloc+0x1c0>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 8008774:	2300      	movs	r3, #0
 8008776:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 8008778:	2300      	movs	r3, #0
 800877a:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800877c:	88bb      	ldrh	r3, [r7, #4]
 800877e:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8008780:	200c      	movs	r0, #12
 8008782:	f7ff fbb7 	bl	8007ef4 <memp_malloc>
 8008786:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 8008788:	693b      	ldr	r3, [r7, #16]
 800878a:	2b00      	cmp	r3, #0
 800878c:	d109      	bne.n	80087a2 <pbuf_alloc+0x72>
          PBUF_POOL_IS_EMPTY();
 800878e:	f7ff ff7b 	bl	8008688 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 8008792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008794:	2b00      	cmp	r3, #0
 8008796:	d002      	beq.n	800879e <pbuf_alloc+0x6e>
            pbuf_free(p);
 8008798:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800879a:	f000 faa9 	bl	8008cf0 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800879e:	2300      	movs	r3, #0
 80087a0:	e0a7      	b.n	80088f2 <pbuf_alloc+0x1c2>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 80087a2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80087a4:	3303      	adds	r3, #3
 80087a6:	b29b      	uxth	r3, r3
 80087a8:	f023 0303 	bic.w	r3, r3, #3
 80087ac:	b29b      	uxth	r3, r3
 80087ae:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 80087b2:	b29b      	uxth	r3, r3
 80087b4:	8b7a      	ldrh	r2, [r7, #26]
 80087b6:	4293      	cmp	r3, r2
 80087b8:	bf28      	it	cs
 80087ba:	4613      	movcs	r3, r2
 80087bc:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 80087be:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80087c0:	3310      	adds	r3, #16
 80087c2:	693a      	ldr	r2, [r7, #16]
 80087c4:	4413      	add	r3, r2
 80087c6:	3303      	adds	r3, #3
 80087c8:	f023 0303 	bic.w	r3, r3, #3
 80087cc:	4618      	mov	r0, r3
 80087ce:	89f9      	ldrh	r1, [r7, #14]
 80087d0:	8b7a      	ldrh	r2, [r7, #26]
 80087d2:	2300      	movs	r3, #0
 80087d4:	9301      	str	r3, [sp, #4]
 80087d6:	887b      	ldrh	r3, [r7, #2]
 80087d8:	9300      	str	r3, [sp, #0]
 80087da:	460b      	mov	r3, r1
 80087dc:	4601      	mov	r1, r0
 80087de:	6938      	ldr	r0, [r7, #16]
 80087e0:	f7ff ff7c 	bl	80086dc <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 80087e4:	693b      	ldr	r3, [r7, #16]
 80087e6:	685b      	ldr	r3, [r3, #4]
 80087e8:	f003 0303 	and.w	r3, r3, #3
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d006      	beq.n	80087fe <pbuf_alloc+0xce>
 80087f0:	4b42      	ldr	r3, [pc, #264]	; (80088fc <pbuf_alloc+0x1cc>)
 80087f2:	f240 1201 	movw	r2, #257	; 0x101
 80087f6:	4942      	ldr	r1, [pc, #264]	; (8008900 <pbuf_alloc+0x1d0>)
 80087f8:	4842      	ldr	r0, [pc, #264]	; (8008904 <pbuf_alloc+0x1d4>)
 80087fa:	f00a ff8b 	bl	8013714 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 80087fe:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008800:	3303      	adds	r3, #3
 8008802:	f023 0303 	bic.w	r3, r3, #3
 8008806:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800880a:	d106      	bne.n	800881a <pbuf_alloc+0xea>
 800880c:	4b3b      	ldr	r3, [pc, #236]	; (80088fc <pbuf_alloc+0x1cc>)
 800880e:	f240 1203 	movw	r2, #259	; 0x103
 8008812:	493d      	ldr	r1, [pc, #244]	; (8008908 <pbuf_alloc+0x1d8>)
 8008814:	483b      	ldr	r0, [pc, #236]	; (8008904 <pbuf_alloc+0x1d4>)
 8008816:	f00a ff7d 	bl	8013714 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800881a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800881c:	2b00      	cmp	r3, #0
 800881e:	d102      	bne.n	8008826 <pbuf_alloc+0xf6>
          /* allocated head of pbuf chain (into p) */
          p = q;
 8008820:	693b      	ldr	r3, [r7, #16]
 8008822:	627b      	str	r3, [r7, #36]	; 0x24
 8008824:	e002      	b.n	800882c <pbuf_alloc+0xfc>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8008826:	69fb      	ldr	r3, [r7, #28]
 8008828:	693a      	ldr	r2, [r7, #16]
 800882a:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800882c:	693b      	ldr	r3, [r7, #16]
 800882e:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 8008830:	8b7a      	ldrh	r2, [r7, #26]
 8008832:	89fb      	ldrh	r3, [r7, #14]
 8008834:	1ad3      	subs	r3, r2, r3
 8008836:	837b      	strh	r3, [r7, #26]
        offset = 0;
 8008838:	2300      	movs	r3, #0
 800883a:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 800883c:	8b7b      	ldrh	r3, [r7, #26]
 800883e:	2b00      	cmp	r3, #0
 8008840:	d19e      	bne.n	8008780 <pbuf_alloc+0x50>
      break;
 8008842:	e055      	b.n	80088f0 <pbuf_alloc+0x1c0>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 8008844:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008846:	3303      	adds	r3, #3
 8008848:	b29b      	uxth	r3, r3
 800884a:	f023 0303 	bic.w	r3, r3, #3
 800884e:	b29a      	uxth	r2, r3
 8008850:	88bb      	ldrh	r3, [r7, #4]
 8008852:	3303      	adds	r3, #3
 8008854:	b29b      	uxth	r3, r3
 8008856:	f023 0303 	bic.w	r3, r3, #3
 800885a:	b29b      	uxth	r3, r3
 800885c:	4413      	add	r3, r2
 800885e:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8008860:	8b3b      	ldrh	r3, [r7, #24]
 8008862:	3310      	adds	r3, #16
 8008864:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8008866:	8b3a      	ldrh	r2, [r7, #24]
 8008868:	88bb      	ldrh	r3, [r7, #4]
 800886a:	3303      	adds	r3, #3
 800886c:	f023 0303 	bic.w	r3, r3, #3
 8008870:	429a      	cmp	r2, r3
 8008872:	d306      	bcc.n	8008882 <pbuf_alloc+0x152>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 8008874:	8afa      	ldrh	r2, [r7, #22]
 8008876:	88bb      	ldrh	r3, [r7, #4]
 8008878:	3303      	adds	r3, #3
 800887a:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800887e:	429a      	cmp	r2, r3
 8008880:	d201      	bcs.n	8008886 <pbuf_alloc+0x156>
        return NULL;
 8008882:	2300      	movs	r3, #0
 8008884:	e035      	b.n	80088f2 <pbuf_alloc+0x1c2>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8008886:	8afb      	ldrh	r3, [r7, #22]
 8008888:	4618      	mov	r0, r3
 800888a:	f7ff f9b1 	bl	8007bf0 <mem_malloc>
 800888e:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 8008890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008892:	2b00      	cmp	r3, #0
 8008894:	d101      	bne.n	800889a <pbuf_alloc+0x16a>
        return NULL;
 8008896:	2300      	movs	r3, #0
 8008898:	e02b      	b.n	80088f2 <pbuf_alloc+0x1c2>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800889a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800889c:	3310      	adds	r3, #16
 800889e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80088a0:	4413      	add	r3, r2
 80088a2:	3303      	adds	r3, #3
 80088a4:	f023 0303 	bic.w	r3, r3, #3
 80088a8:	4618      	mov	r0, r3
 80088aa:	88b9      	ldrh	r1, [r7, #4]
 80088ac:	88ba      	ldrh	r2, [r7, #4]
 80088ae:	2300      	movs	r3, #0
 80088b0:	9301      	str	r3, [sp, #4]
 80088b2:	887b      	ldrh	r3, [r7, #2]
 80088b4:	9300      	str	r3, [sp, #0]
 80088b6:	460b      	mov	r3, r1
 80088b8:	4601      	mov	r1, r0
 80088ba:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80088bc:	f7ff ff0e 	bl	80086dc <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 80088c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088c2:	685b      	ldr	r3, [r3, #4]
 80088c4:	f003 0303 	and.w	r3, r3, #3
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d010      	beq.n	80088ee <pbuf_alloc+0x1be>
 80088cc:	4b0b      	ldr	r3, [pc, #44]	; (80088fc <pbuf_alloc+0x1cc>)
 80088ce:	f240 1223 	movw	r2, #291	; 0x123
 80088d2:	490e      	ldr	r1, [pc, #56]	; (800890c <pbuf_alloc+0x1dc>)
 80088d4:	480b      	ldr	r0, [pc, #44]	; (8008904 <pbuf_alloc+0x1d4>)
 80088d6:	f00a ff1d 	bl	8013714 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 80088da:	e008      	b.n	80088ee <pbuf_alloc+0x1be>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 80088dc:	4b07      	ldr	r3, [pc, #28]	; (80088fc <pbuf_alloc+0x1cc>)
 80088de:	f240 1227 	movw	r2, #295	; 0x127
 80088e2:	490b      	ldr	r1, [pc, #44]	; (8008910 <pbuf_alloc+0x1e0>)
 80088e4:	4807      	ldr	r0, [pc, #28]	; (8008904 <pbuf_alloc+0x1d4>)
 80088e6:	f00a ff15 	bl	8013714 <iprintf>
      return NULL;
 80088ea:	2300      	movs	r3, #0
 80088ec:	e001      	b.n	80088f2 <pbuf_alloc+0x1c2>
      break;
 80088ee:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 80088f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80088f2:	4618      	mov	r0, r3
 80088f4:	3728      	adds	r7, #40	; 0x28
 80088f6:	46bd      	mov	sp, r7
 80088f8:	bd80      	pop	{r7, pc}
 80088fa:	bf00      	nop
 80088fc:	08014cac 	.word	0x08014cac
 8008900:	08014cdc 	.word	0x08014cdc
 8008904:	08014d0c 	.word	0x08014d0c
 8008908:	08014d34 	.word	0x08014d34
 800890c:	08014d68 	.word	0x08014d68
 8008910:	08014d94 	.word	0x08014d94

08008914 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 8008914:	b580      	push	{r7, lr}
 8008916:	b086      	sub	sp, #24
 8008918:	af02      	add	r7, sp, #8
 800891a:	6078      	str	r0, [r7, #4]
 800891c:	460b      	mov	r3, r1
 800891e:	807b      	strh	r3, [r7, #2]
 8008920:	4613      	mov	r3, r2
 8008922:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8008924:	883b      	ldrh	r3, [r7, #0]
 8008926:	2b41      	cmp	r3, #65	; 0x41
 8008928:	d009      	beq.n	800893e <pbuf_alloc_reference+0x2a>
 800892a:	883b      	ldrh	r3, [r7, #0]
 800892c:	2b01      	cmp	r3, #1
 800892e:	d006      	beq.n	800893e <pbuf_alloc_reference+0x2a>
 8008930:	4b0f      	ldr	r3, [pc, #60]	; (8008970 <pbuf_alloc_reference+0x5c>)
 8008932:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 8008936:	490f      	ldr	r1, [pc, #60]	; (8008974 <pbuf_alloc_reference+0x60>)
 8008938:	480f      	ldr	r0, [pc, #60]	; (8008978 <pbuf_alloc_reference+0x64>)
 800893a:	f00a feeb 	bl	8013714 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800893e:	200b      	movs	r0, #11
 8008940:	f7ff fad8 	bl	8007ef4 <memp_malloc>
 8008944:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	2b00      	cmp	r3, #0
 800894a:	d101      	bne.n	8008950 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800894c:	2300      	movs	r3, #0
 800894e:	e00b      	b.n	8008968 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8008950:	8879      	ldrh	r1, [r7, #2]
 8008952:	887a      	ldrh	r2, [r7, #2]
 8008954:	2300      	movs	r3, #0
 8008956:	9301      	str	r3, [sp, #4]
 8008958:	883b      	ldrh	r3, [r7, #0]
 800895a:	9300      	str	r3, [sp, #0]
 800895c:	460b      	mov	r3, r1
 800895e:	6879      	ldr	r1, [r7, #4]
 8008960:	68f8      	ldr	r0, [r7, #12]
 8008962:	f7ff febb 	bl	80086dc <pbuf_init_alloced_pbuf>
  return p;
 8008966:	68fb      	ldr	r3, [r7, #12]
}
 8008968:	4618      	mov	r0, r3
 800896a:	3710      	adds	r7, #16
 800896c:	46bd      	mov	sp, r7
 800896e:	bd80      	pop	{r7, pc}
 8008970:	08014cac 	.word	0x08014cac
 8008974:	08014db0 	.word	0x08014db0
 8008978:	08014d0c 	.word	0x08014d0c

0800897c <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800897c:	b580      	push	{r7, lr}
 800897e:	b088      	sub	sp, #32
 8008980:	af02      	add	r7, sp, #8
 8008982:	607b      	str	r3, [r7, #4]
 8008984:	4603      	mov	r3, r0
 8008986:	73fb      	strb	r3, [r7, #15]
 8008988:	460b      	mov	r3, r1
 800898a:	81bb      	strh	r3, [r7, #12]
 800898c:	4613      	mov	r3, r2
 800898e:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8008990:	7bfb      	ldrb	r3, [r7, #15]
 8008992:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8008994:	8a7b      	ldrh	r3, [r7, #18]
 8008996:	3303      	adds	r3, #3
 8008998:	f023 0203 	bic.w	r2, r3, #3
 800899c:	89bb      	ldrh	r3, [r7, #12]
 800899e:	441a      	add	r2, r3
 80089a0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80089a2:	429a      	cmp	r2, r3
 80089a4:	d901      	bls.n	80089aa <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 80089a6:	2300      	movs	r3, #0
 80089a8:	e018      	b.n	80089dc <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 80089aa:	6a3b      	ldr	r3, [r7, #32]
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d007      	beq.n	80089c0 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 80089b0:	8a7b      	ldrh	r3, [r7, #18]
 80089b2:	3303      	adds	r3, #3
 80089b4:	f023 0303 	bic.w	r3, r3, #3
 80089b8:	6a3a      	ldr	r2, [r7, #32]
 80089ba:	4413      	add	r3, r2
 80089bc:	617b      	str	r3, [r7, #20]
 80089be:	e001      	b.n	80089c4 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 80089c0:	2300      	movs	r3, #0
 80089c2:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 80089c4:	6878      	ldr	r0, [r7, #4]
 80089c6:	89b9      	ldrh	r1, [r7, #12]
 80089c8:	89ba      	ldrh	r2, [r7, #12]
 80089ca:	2302      	movs	r3, #2
 80089cc:	9301      	str	r3, [sp, #4]
 80089ce:	897b      	ldrh	r3, [r7, #10]
 80089d0:	9300      	str	r3, [sp, #0]
 80089d2:	460b      	mov	r3, r1
 80089d4:	6979      	ldr	r1, [r7, #20]
 80089d6:	f7ff fe81 	bl	80086dc <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 80089da:	687b      	ldr	r3, [r7, #4]
}
 80089dc:	4618      	mov	r0, r3
 80089de:	3718      	adds	r7, #24
 80089e0:	46bd      	mov	sp, r7
 80089e2:	bd80      	pop	{r7, pc}

080089e4 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 80089e4:	b580      	push	{r7, lr}
 80089e6:	b084      	sub	sp, #16
 80089e8:	af00      	add	r7, sp, #0
 80089ea:	6078      	str	r0, [r7, #4]
 80089ec:	460b      	mov	r3, r1
 80089ee:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d106      	bne.n	8008a04 <pbuf_realloc+0x20>
 80089f6:	4b3a      	ldr	r3, [pc, #232]	; (8008ae0 <pbuf_realloc+0xfc>)
 80089f8:	f44f 72cc 	mov.w	r2, #408	; 0x198
 80089fc:	4939      	ldr	r1, [pc, #228]	; (8008ae4 <pbuf_realloc+0x100>)
 80089fe:	483a      	ldr	r0, [pc, #232]	; (8008ae8 <pbuf_realloc+0x104>)
 8008a00:	f00a fe88 	bl	8013714 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	891b      	ldrh	r3, [r3, #8]
 8008a08:	887a      	ldrh	r2, [r7, #2]
 8008a0a:	429a      	cmp	r2, r3
 8008a0c:	d264      	bcs.n	8008ad8 <pbuf_realloc+0xf4>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	891a      	ldrh	r2, [r3, #8]
 8008a12:	887b      	ldrh	r3, [r7, #2]
 8008a14:	1ad3      	subs	r3, r2, r3
 8008a16:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8008a18:	887b      	ldrh	r3, [r7, #2]
 8008a1a:	817b      	strh	r3, [r7, #10]
  q = p;
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8008a20:	e018      	b.n	8008a54 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	895b      	ldrh	r3, [r3, #10]
 8008a26:	897a      	ldrh	r2, [r7, #10]
 8008a28:	1ad3      	subs	r3, r2, r3
 8008a2a:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	891a      	ldrh	r2, [r3, #8]
 8008a30:	893b      	ldrh	r3, [r7, #8]
 8008a32:	1ad3      	subs	r3, r2, r3
 8008a34:	b29a      	uxth	r2, r3
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d106      	bne.n	8008a54 <pbuf_realloc+0x70>
 8008a46:	4b26      	ldr	r3, [pc, #152]	; (8008ae0 <pbuf_realloc+0xfc>)
 8008a48:	f240 12af 	movw	r2, #431	; 0x1af
 8008a4c:	4927      	ldr	r1, [pc, #156]	; (8008aec <pbuf_realloc+0x108>)
 8008a4e:	4826      	ldr	r0, [pc, #152]	; (8008ae8 <pbuf_realloc+0x104>)
 8008a50:	f00a fe60 	bl	8013714 <iprintf>
  while (rem_len > q->len) {
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	895b      	ldrh	r3, [r3, #10]
 8008a58:	897a      	ldrh	r2, [r7, #10]
 8008a5a:	429a      	cmp	r2, r3
 8008a5c:	d8e1      	bhi.n	8008a22 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	7b1b      	ldrb	r3, [r3, #12]
 8008a62:	f003 030f 	and.w	r3, r3, #15
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d122      	bne.n	8008ab0 <pbuf_realloc+0xcc>
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	895b      	ldrh	r3, [r3, #10]
 8008a6e:	897a      	ldrh	r2, [r7, #10]
 8008a70:	429a      	cmp	r2, r3
 8008a72:	d01d      	beq.n	8008ab0 <pbuf_realloc+0xcc>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	7b5b      	ldrb	r3, [r3, #13]
 8008a78:	f003 0302 	and.w	r3, r3, #2
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d117      	bne.n	8008ab0 <pbuf_realloc+0xcc>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	685b      	ldr	r3, [r3, #4]
 8008a84:	461a      	mov	r2, r3
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	1ad3      	subs	r3, r2, r3
 8008a8a:	b29a      	uxth	r2, r3
 8008a8c:	897b      	ldrh	r3, [r7, #10]
 8008a8e:	4413      	add	r3, r2
 8008a90:	b29b      	uxth	r3, r3
 8008a92:	4619      	mov	r1, r3
 8008a94:	68f8      	ldr	r0, [r7, #12]
 8008a96:	f7fe ffa1 	bl	80079dc <mem_trim>
 8008a9a:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d106      	bne.n	8008ab0 <pbuf_realloc+0xcc>
 8008aa2:	4b0f      	ldr	r3, [pc, #60]	; (8008ae0 <pbuf_realloc+0xfc>)
 8008aa4:	f240 12bd 	movw	r2, #445	; 0x1bd
 8008aa8:	4911      	ldr	r1, [pc, #68]	; (8008af0 <pbuf_realloc+0x10c>)
 8008aaa:	480f      	ldr	r0, [pc, #60]	; (8008ae8 <pbuf_realloc+0x104>)
 8008aac:	f00a fe32 	bl	8013714 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	897a      	ldrh	r2, [r7, #10]
 8008ab4:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	895a      	ldrh	r2, [r3, #10]
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d004      	beq.n	8008ad0 <pbuf_realloc+0xec>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	4618      	mov	r0, r3
 8008acc:	f000 f910 	bl	8008cf0 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	2200      	movs	r2, #0
 8008ad4:	601a      	str	r2, [r3, #0]
 8008ad6:	e000      	b.n	8008ada <pbuf_realloc+0xf6>
    return;
 8008ad8:	bf00      	nop

}
 8008ada:	3710      	adds	r7, #16
 8008adc:	46bd      	mov	sp, r7
 8008ade:	bd80      	pop	{r7, pc}
 8008ae0:	08014cac 	.word	0x08014cac
 8008ae4:	08014dc4 	.word	0x08014dc4
 8008ae8:	08014d0c 	.word	0x08014d0c
 8008aec:	08014ddc 	.word	0x08014ddc
 8008af0:	08014df4 	.word	0x08014df4

08008af4 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8008af4:	b580      	push	{r7, lr}
 8008af6:	b086      	sub	sp, #24
 8008af8:	af00      	add	r7, sp, #0
 8008afa:	60f8      	str	r0, [r7, #12]
 8008afc:	60b9      	str	r1, [r7, #8]
 8008afe:	4613      	mov	r3, r2
 8008b00:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d106      	bne.n	8008b16 <pbuf_add_header_impl+0x22>
 8008b08:	4b2b      	ldr	r3, [pc, #172]	; (8008bb8 <pbuf_add_header_impl+0xc4>)
 8008b0a:	f240 12df 	movw	r2, #479	; 0x1df
 8008b0e:	492b      	ldr	r1, [pc, #172]	; (8008bbc <pbuf_add_header_impl+0xc8>)
 8008b10:	482b      	ldr	r0, [pc, #172]	; (8008bc0 <pbuf_add_header_impl+0xcc>)
 8008b12:	f00a fdff 	bl	8013714 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d003      	beq.n	8008b24 <pbuf_add_header_impl+0x30>
 8008b1c:	68bb      	ldr	r3, [r7, #8]
 8008b1e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008b22:	d301      	bcc.n	8008b28 <pbuf_add_header_impl+0x34>
    return 1;
 8008b24:	2301      	movs	r3, #1
 8008b26:	e043      	b.n	8008bb0 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8008b28:	68bb      	ldr	r3, [r7, #8]
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d101      	bne.n	8008b32 <pbuf_add_header_impl+0x3e>
    return 0;
 8008b2e:	2300      	movs	r3, #0
 8008b30:	e03e      	b.n	8008bb0 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 8008b32:	68bb      	ldr	r3, [r7, #8]
 8008b34:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	891a      	ldrh	r2, [r3, #8]
 8008b3a:	8a7b      	ldrh	r3, [r7, #18]
 8008b3c:	4413      	add	r3, r2
 8008b3e:	b29b      	uxth	r3, r3
 8008b40:	8a7a      	ldrh	r2, [r7, #18]
 8008b42:	429a      	cmp	r2, r3
 8008b44:	d901      	bls.n	8008b4a <pbuf_add_header_impl+0x56>
    return 1;
 8008b46:	2301      	movs	r3, #1
 8008b48:	e032      	b.n	8008bb0 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	7b1b      	ldrb	r3, [r3, #12]
 8008b4e:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8008b50:	8a3b      	ldrh	r3, [r7, #16]
 8008b52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d00c      	beq.n	8008b74 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	685a      	ldr	r2, [r3, #4]
 8008b5e:	68bb      	ldr	r3, [r7, #8]
 8008b60:	425b      	negs	r3, r3
 8008b62:	4413      	add	r3, r2
 8008b64:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	3310      	adds	r3, #16
 8008b6a:	697a      	ldr	r2, [r7, #20]
 8008b6c:	429a      	cmp	r2, r3
 8008b6e:	d20d      	bcs.n	8008b8c <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8008b70:	2301      	movs	r3, #1
 8008b72:	e01d      	b.n	8008bb0 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8008b74:	79fb      	ldrb	r3, [r7, #7]
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d006      	beq.n	8008b88 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	685a      	ldr	r2, [r3, #4]
 8008b7e:	68bb      	ldr	r3, [r7, #8]
 8008b80:	425b      	negs	r3, r3
 8008b82:	4413      	add	r3, r2
 8008b84:	617b      	str	r3, [r7, #20]
 8008b86:	e001      	b.n	8008b8c <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8008b88:	2301      	movs	r3, #1
 8008b8a:	e011      	b.n	8008bb0 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	697a      	ldr	r2, [r7, #20]
 8008b90:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	895a      	ldrh	r2, [r3, #10]
 8008b96:	8a7b      	ldrh	r3, [r7, #18]
 8008b98:	4413      	add	r3, r2
 8008b9a:	b29a      	uxth	r2, r3
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	891a      	ldrh	r2, [r3, #8]
 8008ba4:	8a7b      	ldrh	r3, [r7, #18]
 8008ba6:	4413      	add	r3, r2
 8008ba8:	b29a      	uxth	r2, r3
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	811a      	strh	r2, [r3, #8]


  return 0;
 8008bae:	2300      	movs	r3, #0
}
 8008bb0:	4618      	mov	r0, r3
 8008bb2:	3718      	adds	r7, #24
 8008bb4:	46bd      	mov	sp, r7
 8008bb6:	bd80      	pop	{r7, pc}
 8008bb8:	08014cac 	.word	0x08014cac
 8008bbc:	08014e10 	.word	0x08014e10
 8008bc0:	08014d0c 	.word	0x08014d0c

08008bc4 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8008bc4:	b580      	push	{r7, lr}
 8008bc6:	b082      	sub	sp, #8
 8008bc8:	af00      	add	r7, sp, #0
 8008bca:	6078      	str	r0, [r7, #4]
 8008bcc:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8008bce:	2200      	movs	r2, #0
 8008bd0:	6839      	ldr	r1, [r7, #0]
 8008bd2:	6878      	ldr	r0, [r7, #4]
 8008bd4:	f7ff ff8e 	bl	8008af4 <pbuf_add_header_impl>
 8008bd8:	4603      	mov	r3, r0
}
 8008bda:	4618      	mov	r0, r3
 8008bdc:	3708      	adds	r7, #8
 8008bde:	46bd      	mov	sp, r7
 8008be0:	bd80      	pop	{r7, pc}
	...

08008be4 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8008be4:	b580      	push	{r7, lr}
 8008be6:	b084      	sub	sp, #16
 8008be8:	af00      	add	r7, sp, #0
 8008bea:	6078      	str	r0, [r7, #4]
 8008bec:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d106      	bne.n	8008c02 <pbuf_remove_header+0x1e>
 8008bf4:	4b20      	ldr	r3, [pc, #128]	; (8008c78 <pbuf_remove_header+0x94>)
 8008bf6:	f240 224b 	movw	r2, #587	; 0x24b
 8008bfa:	4920      	ldr	r1, [pc, #128]	; (8008c7c <pbuf_remove_header+0x98>)
 8008bfc:	4820      	ldr	r0, [pc, #128]	; (8008c80 <pbuf_remove_header+0x9c>)
 8008bfe:	f00a fd89 	bl	8013714 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d003      	beq.n	8008c10 <pbuf_remove_header+0x2c>
 8008c08:	683b      	ldr	r3, [r7, #0]
 8008c0a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008c0e:	d301      	bcc.n	8008c14 <pbuf_remove_header+0x30>
    return 1;
 8008c10:	2301      	movs	r3, #1
 8008c12:	e02c      	b.n	8008c6e <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8008c14:	683b      	ldr	r3, [r7, #0]
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d101      	bne.n	8008c1e <pbuf_remove_header+0x3a>
    return 0;
 8008c1a:	2300      	movs	r3, #0
 8008c1c:	e027      	b.n	8008c6e <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 8008c1e:	683b      	ldr	r3, [r7, #0]
 8008c20:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	895b      	ldrh	r3, [r3, #10]
 8008c26:	89fa      	ldrh	r2, [r7, #14]
 8008c28:	429a      	cmp	r2, r3
 8008c2a:	d908      	bls.n	8008c3e <pbuf_remove_header+0x5a>
 8008c2c:	4b12      	ldr	r3, [pc, #72]	; (8008c78 <pbuf_remove_header+0x94>)
 8008c2e:	f240 2255 	movw	r2, #597	; 0x255
 8008c32:	4914      	ldr	r1, [pc, #80]	; (8008c84 <pbuf_remove_header+0xa0>)
 8008c34:	4812      	ldr	r0, [pc, #72]	; (8008c80 <pbuf_remove_header+0x9c>)
 8008c36:	f00a fd6d 	bl	8013714 <iprintf>
 8008c3a:	2301      	movs	r3, #1
 8008c3c:	e017      	b.n	8008c6e <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	685b      	ldr	r3, [r3, #4]
 8008c42:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	685a      	ldr	r2, [r3, #4]
 8008c48:	683b      	ldr	r3, [r7, #0]
 8008c4a:	441a      	add	r2, r3
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	895a      	ldrh	r2, [r3, #10]
 8008c54:	89fb      	ldrh	r3, [r7, #14]
 8008c56:	1ad3      	subs	r3, r2, r3
 8008c58:	b29a      	uxth	r2, r3
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	891a      	ldrh	r2, [r3, #8]
 8008c62:	89fb      	ldrh	r3, [r7, #14]
 8008c64:	1ad3      	subs	r3, r2, r3
 8008c66:	b29a      	uxth	r2, r3
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8008c6c:	2300      	movs	r3, #0
}
 8008c6e:	4618      	mov	r0, r3
 8008c70:	3710      	adds	r7, #16
 8008c72:	46bd      	mov	sp, r7
 8008c74:	bd80      	pop	{r7, pc}
 8008c76:	bf00      	nop
 8008c78:	08014cac 	.word	0x08014cac
 8008c7c:	08014e10 	.word	0x08014e10
 8008c80:	08014d0c 	.word	0x08014d0c
 8008c84:	08014e1c 	.word	0x08014e1c

08008c88 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8008c88:	b580      	push	{r7, lr}
 8008c8a:	b082      	sub	sp, #8
 8008c8c:	af00      	add	r7, sp, #0
 8008c8e:	6078      	str	r0, [r7, #4]
 8008c90:	460b      	mov	r3, r1
 8008c92:	807b      	strh	r3, [r7, #2]
 8008c94:	4613      	mov	r3, r2
 8008c96:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8008c98:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	da08      	bge.n	8008cb2 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8008ca0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8008ca4:	425b      	negs	r3, r3
 8008ca6:	4619      	mov	r1, r3
 8008ca8:	6878      	ldr	r0, [r7, #4]
 8008caa:	f7ff ff9b 	bl	8008be4 <pbuf_remove_header>
 8008cae:	4603      	mov	r3, r0
 8008cb0:	e007      	b.n	8008cc2 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 8008cb2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8008cb6:	787a      	ldrb	r2, [r7, #1]
 8008cb8:	4619      	mov	r1, r3
 8008cba:	6878      	ldr	r0, [r7, #4]
 8008cbc:	f7ff ff1a 	bl	8008af4 <pbuf_add_header_impl>
 8008cc0:	4603      	mov	r3, r0
  }
}
 8008cc2:	4618      	mov	r0, r3
 8008cc4:	3708      	adds	r7, #8
 8008cc6:	46bd      	mov	sp, r7
 8008cc8:	bd80      	pop	{r7, pc}

08008cca <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8008cca:	b580      	push	{r7, lr}
 8008ccc:	b082      	sub	sp, #8
 8008cce:	af00      	add	r7, sp, #0
 8008cd0:	6078      	str	r0, [r7, #4]
 8008cd2:	460b      	mov	r3, r1
 8008cd4:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 8008cd6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8008cda:	2201      	movs	r2, #1
 8008cdc:	4619      	mov	r1, r3
 8008cde:	6878      	ldr	r0, [r7, #4]
 8008ce0:	f7ff ffd2 	bl	8008c88 <pbuf_header_impl>
 8008ce4:	4603      	mov	r3, r0
}
 8008ce6:	4618      	mov	r0, r3
 8008ce8:	3708      	adds	r7, #8
 8008cea:	46bd      	mov	sp, r7
 8008cec:	bd80      	pop	{r7, pc}
	...

08008cf0 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8008cf0:	b580      	push	{r7, lr}
 8008cf2:	b088      	sub	sp, #32
 8008cf4:	af00      	add	r7, sp, #0
 8008cf6:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d10b      	bne.n	8008d16 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d106      	bne.n	8008d12 <pbuf_free+0x22>
 8008d04:	4b3b      	ldr	r3, [pc, #236]	; (8008df4 <pbuf_free+0x104>)
 8008d06:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 8008d0a:	493b      	ldr	r1, [pc, #236]	; (8008df8 <pbuf_free+0x108>)
 8008d0c:	483b      	ldr	r0, [pc, #236]	; (8008dfc <pbuf_free+0x10c>)
 8008d0e:	f00a fd01 	bl	8013714 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8008d12:	2300      	movs	r3, #0
 8008d14:	e069      	b.n	8008dea <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 8008d16:	2300      	movs	r3, #0
 8008d18:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8008d1a:	e062      	b.n	8008de2 <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 8008d1c:	f00a fc96 	bl	801364c <sys_arch_protect>
 8008d20:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	7b9b      	ldrb	r3, [r3, #14]
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d106      	bne.n	8008d38 <pbuf_free+0x48>
 8008d2a:	4b32      	ldr	r3, [pc, #200]	; (8008df4 <pbuf_free+0x104>)
 8008d2c:	f240 22f1 	movw	r2, #753	; 0x2f1
 8008d30:	4933      	ldr	r1, [pc, #204]	; (8008e00 <pbuf_free+0x110>)
 8008d32:	4832      	ldr	r0, [pc, #200]	; (8008dfc <pbuf_free+0x10c>)
 8008d34:	f00a fcee 	bl	8013714 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	7b9b      	ldrb	r3, [r3, #14]
 8008d3c:	3b01      	subs	r3, #1
 8008d3e:	b2da      	uxtb	r2, r3
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	739a      	strb	r2, [r3, #14]
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	7b9b      	ldrb	r3, [r3, #14]
 8008d48:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 8008d4a:	69b8      	ldr	r0, [r7, #24]
 8008d4c:	f00a fc8c 	bl	8013668 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8008d50:	7dfb      	ldrb	r3, [r7, #23]
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d143      	bne.n	8008dde <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	7b1b      	ldrb	r3, [r3, #12]
 8008d60:	f003 030f 	and.w	r3, r3, #15
 8008d64:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	7b5b      	ldrb	r3, [r3, #13]
 8008d6a:	f003 0302 	and.w	r3, r3, #2
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d011      	beq.n	8008d96 <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8008d76:	68bb      	ldr	r3, [r7, #8]
 8008d78:	691b      	ldr	r3, [r3, #16]
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d106      	bne.n	8008d8c <pbuf_free+0x9c>
 8008d7e:	4b1d      	ldr	r3, [pc, #116]	; (8008df4 <pbuf_free+0x104>)
 8008d80:	f240 22ff 	movw	r2, #767	; 0x2ff
 8008d84:	491f      	ldr	r1, [pc, #124]	; (8008e04 <pbuf_free+0x114>)
 8008d86:	481d      	ldr	r0, [pc, #116]	; (8008dfc <pbuf_free+0x10c>)
 8008d88:	f00a fcc4 	bl	8013714 <iprintf>
        pc->custom_free_function(p);
 8008d8c:	68bb      	ldr	r3, [r7, #8]
 8008d8e:	691b      	ldr	r3, [r3, #16]
 8008d90:	6878      	ldr	r0, [r7, #4]
 8008d92:	4798      	blx	r3
 8008d94:	e01d      	b.n	8008dd2 <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 8008d96:	7bfb      	ldrb	r3, [r7, #15]
 8008d98:	2b02      	cmp	r3, #2
 8008d9a:	d104      	bne.n	8008da6 <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 8008d9c:	6879      	ldr	r1, [r7, #4]
 8008d9e:	200c      	movs	r0, #12
 8008da0:	f7ff f8fa 	bl	8007f98 <memp_free>
 8008da4:	e015      	b.n	8008dd2 <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 8008da6:	7bfb      	ldrb	r3, [r7, #15]
 8008da8:	2b01      	cmp	r3, #1
 8008daa:	d104      	bne.n	8008db6 <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 8008dac:	6879      	ldr	r1, [r7, #4]
 8008dae:	200b      	movs	r0, #11
 8008db0:	f7ff f8f2 	bl	8007f98 <memp_free>
 8008db4:	e00d      	b.n	8008dd2 <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 8008db6:	7bfb      	ldrb	r3, [r7, #15]
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d103      	bne.n	8008dc4 <pbuf_free+0xd4>
          mem_free(p);
 8008dbc:	6878      	ldr	r0, [r7, #4]
 8008dbe:	f7fe fd7d 	bl	80078bc <mem_free>
 8008dc2:	e006      	b.n	8008dd2 <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8008dc4:	4b0b      	ldr	r3, [pc, #44]	; (8008df4 <pbuf_free+0x104>)
 8008dc6:	f240 320f 	movw	r2, #783	; 0x30f
 8008dca:	490f      	ldr	r1, [pc, #60]	; (8008e08 <pbuf_free+0x118>)
 8008dcc:	480b      	ldr	r0, [pc, #44]	; (8008dfc <pbuf_free+0x10c>)
 8008dce:	f00a fca1 	bl	8013714 <iprintf>
        }
      }
      count++;
 8008dd2:	7ffb      	ldrb	r3, [r7, #31]
 8008dd4:	3301      	adds	r3, #1
 8008dd6:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 8008dd8:	693b      	ldr	r3, [r7, #16]
 8008dda:	607b      	str	r3, [r7, #4]
 8008ddc:	e001      	b.n	8008de2 <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 8008dde:	2300      	movs	r3, #0
 8008de0:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d199      	bne.n	8008d1c <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8008de8:	7ffb      	ldrb	r3, [r7, #31]
}
 8008dea:	4618      	mov	r0, r3
 8008dec:	3720      	adds	r7, #32
 8008dee:	46bd      	mov	sp, r7
 8008df0:	bd80      	pop	{r7, pc}
 8008df2:	bf00      	nop
 8008df4:	08014cac 	.word	0x08014cac
 8008df8:	08014e10 	.word	0x08014e10
 8008dfc:	08014d0c 	.word	0x08014d0c
 8008e00:	08014e3c 	.word	0x08014e3c
 8008e04:	08014e54 	.word	0x08014e54
 8008e08:	08014e78 	.word	0x08014e78

08008e0c <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8008e0c:	b480      	push	{r7}
 8008e0e:	b085      	sub	sp, #20
 8008e10:	af00      	add	r7, sp, #0
 8008e12:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8008e14:	2300      	movs	r3, #0
 8008e16:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8008e18:	e005      	b.n	8008e26 <pbuf_clen+0x1a>
    ++len;
 8008e1a:	89fb      	ldrh	r3, [r7, #14]
 8008e1c:	3301      	adds	r3, #1
 8008e1e:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d1f6      	bne.n	8008e1a <pbuf_clen+0xe>
  }
  return len;
 8008e2c:	89fb      	ldrh	r3, [r7, #14]
}
 8008e2e:	4618      	mov	r0, r3
 8008e30:	3714      	adds	r7, #20
 8008e32:	46bd      	mov	sp, r7
 8008e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e38:	4770      	bx	lr
	...

08008e3c <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8008e3c:	b580      	push	{r7, lr}
 8008e3e:	b084      	sub	sp, #16
 8008e40:	af00      	add	r7, sp, #0
 8008e42:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d016      	beq.n	8008e78 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 8008e4a:	f00a fbff 	bl	801364c <sys_arch_protect>
 8008e4e:	60f8      	str	r0, [r7, #12]
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	7b9b      	ldrb	r3, [r3, #14]
 8008e54:	3301      	adds	r3, #1
 8008e56:	b2da      	uxtb	r2, r3
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	739a      	strb	r2, [r3, #14]
 8008e5c:	68f8      	ldr	r0, [r7, #12]
 8008e5e:	f00a fc03 	bl	8013668 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	7b9b      	ldrb	r3, [r3, #14]
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d106      	bne.n	8008e78 <pbuf_ref+0x3c>
 8008e6a:	4b05      	ldr	r3, [pc, #20]	; (8008e80 <pbuf_ref+0x44>)
 8008e6c:	f240 3242 	movw	r2, #834	; 0x342
 8008e70:	4904      	ldr	r1, [pc, #16]	; (8008e84 <pbuf_ref+0x48>)
 8008e72:	4805      	ldr	r0, [pc, #20]	; (8008e88 <pbuf_ref+0x4c>)
 8008e74:	f00a fc4e 	bl	8013714 <iprintf>
  }
}
 8008e78:	bf00      	nop
 8008e7a:	3710      	adds	r7, #16
 8008e7c:	46bd      	mov	sp, r7
 8008e7e:	bd80      	pop	{r7, pc}
 8008e80:	08014cac 	.word	0x08014cac
 8008e84:	08014e8c 	.word	0x08014e8c
 8008e88:	08014d0c 	.word	0x08014d0c

08008e8c <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8008e8c:	b580      	push	{r7, lr}
 8008e8e:	b084      	sub	sp, #16
 8008e90:	af00      	add	r7, sp, #0
 8008e92:	6078      	str	r0, [r7, #4]
 8008e94:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d002      	beq.n	8008ea2 <pbuf_cat+0x16>
 8008e9c:	683b      	ldr	r3, [r7, #0]
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d107      	bne.n	8008eb2 <pbuf_cat+0x26>
 8008ea2:	4b20      	ldr	r3, [pc, #128]	; (8008f24 <pbuf_cat+0x98>)
 8008ea4:	f240 325a 	movw	r2, #858	; 0x35a
 8008ea8:	491f      	ldr	r1, [pc, #124]	; (8008f28 <pbuf_cat+0x9c>)
 8008eaa:	4820      	ldr	r0, [pc, #128]	; (8008f2c <pbuf_cat+0xa0>)
 8008eac:	f00a fc32 	bl	8013714 <iprintf>
 8008eb0:	e034      	b.n	8008f1c <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	60fb      	str	r3, [r7, #12]
 8008eb6:	e00a      	b.n	8008ece <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	891a      	ldrh	r2, [r3, #8]
 8008ebc:	683b      	ldr	r3, [r7, #0]
 8008ebe:	891b      	ldrh	r3, [r3, #8]
 8008ec0:	4413      	add	r3, r2
 8008ec2:	b29a      	uxth	r2, r3
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	60fb      	str	r3, [r7, #12]
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d1f0      	bne.n	8008eb8 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	891a      	ldrh	r2, [r3, #8]
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	895b      	ldrh	r3, [r3, #10]
 8008ede:	429a      	cmp	r2, r3
 8008ee0:	d006      	beq.n	8008ef0 <pbuf_cat+0x64>
 8008ee2:	4b10      	ldr	r3, [pc, #64]	; (8008f24 <pbuf_cat+0x98>)
 8008ee4:	f240 3262 	movw	r2, #866	; 0x362
 8008ee8:	4911      	ldr	r1, [pc, #68]	; (8008f30 <pbuf_cat+0xa4>)
 8008eea:	4810      	ldr	r0, [pc, #64]	; (8008f2c <pbuf_cat+0xa0>)
 8008eec:	f00a fc12 	bl	8013714 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d006      	beq.n	8008f06 <pbuf_cat+0x7a>
 8008ef8:	4b0a      	ldr	r3, [pc, #40]	; (8008f24 <pbuf_cat+0x98>)
 8008efa:	f240 3263 	movw	r2, #867	; 0x363
 8008efe:	490d      	ldr	r1, [pc, #52]	; (8008f34 <pbuf_cat+0xa8>)
 8008f00:	480a      	ldr	r0, [pc, #40]	; (8008f2c <pbuf_cat+0xa0>)
 8008f02:	f00a fc07 	bl	8013714 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	891a      	ldrh	r2, [r3, #8]
 8008f0a:	683b      	ldr	r3, [r7, #0]
 8008f0c:	891b      	ldrh	r3, [r3, #8]
 8008f0e:	4413      	add	r3, r2
 8008f10:	b29a      	uxth	r2, r3
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	683a      	ldr	r2, [r7, #0]
 8008f1a:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8008f1c:	3710      	adds	r7, #16
 8008f1e:	46bd      	mov	sp, r7
 8008f20:	bd80      	pop	{r7, pc}
 8008f22:	bf00      	nop
 8008f24:	08014cac 	.word	0x08014cac
 8008f28:	08014ea0 	.word	0x08014ea0
 8008f2c:	08014d0c 	.word	0x08014d0c
 8008f30:	08014ed8 	.word	0x08014ed8
 8008f34:	08014f08 	.word	0x08014f08

08008f38 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 8008f38:	b580      	push	{r7, lr}
 8008f3a:	b082      	sub	sp, #8
 8008f3c:	af00      	add	r7, sp, #0
 8008f3e:	6078      	str	r0, [r7, #4]
 8008f40:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 8008f42:	6839      	ldr	r1, [r7, #0]
 8008f44:	6878      	ldr	r0, [r7, #4]
 8008f46:	f7ff ffa1 	bl	8008e8c <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 8008f4a:	6838      	ldr	r0, [r7, #0]
 8008f4c:	f7ff ff76 	bl	8008e3c <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 8008f50:	bf00      	nop
 8008f52:	3708      	adds	r7, #8
 8008f54:	46bd      	mov	sp, r7
 8008f56:	bd80      	pop	{r7, pc}

08008f58 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8008f58:	b580      	push	{r7, lr}
 8008f5a:	b086      	sub	sp, #24
 8008f5c:	af00      	add	r7, sp, #0
 8008f5e:	6078      	str	r0, [r7, #4]
 8008f60:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 8008f62:	2300      	movs	r3, #0
 8008f64:	617b      	str	r3, [r7, #20]
 8008f66:	2300      	movs	r3, #0
 8008f68:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d008      	beq.n	8008f82 <pbuf_copy+0x2a>
 8008f70:	683b      	ldr	r3, [r7, #0]
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d005      	beq.n	8008f82 <pbuf_copy+0x2a>
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	891a      	ldrh	r2, [r3, #8]
 8008f7a:	683b      	ldr	r3, [r7, #0]
 8008f7c:	891b      	ldrh	r3, [r3, #8]
 8008f7e:	429a      	cmp	r2, r3
 8008f80:	d209      	bcs.n	8008f96 <pbuf_copy+0x3e>
 8008f82:	4b57      	ldr	r3, [pc, #348]	; (80090e0 <pbuf_copy+0x188>)
 8008f84:	f240 32ca 	movw	r2, #970	; 0x3ca
 8008f88:	4956      	ldr	r1, [pc, #344]	; (80090e4 <pbuf_copy+0x18c>)
 8008f8a:	4857      	ldr	r0, [pc, #348]	; (80090e8 <pbuf_copy+0x190>)
 8008f8c:	f00a fbc2 	bl	8013714 <iprintf>
 8008f90:	f06f 030f 	mvn.w	r3, #15
 8008f94:	e09f      	b.n	80090d6 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	895b      	ldrh	r3, [r3, #10]
 8008f9a:	461a      	mov	r2, r3
 8008f9c:	697b      	ldr	r3, [r7, #20]
 8008f9e:	1ad2      	subs	r2, r2, r3
 8008fa0:	683b      	ldr	r3, [r7, #0]
 8008fa2:	895b      	ldrh	r3, [r3, #10]
 8008fa4:	4619      	mov	r1, r3
 8008fa6:	693b      	ldr	r3, [r7, #16]
 8008fa8:	1acb      	subs	r3, r1, r3
 8008faa:	429a      	cmp	r2, r3
 8008fac:	d306      	bcc.n	8008fbc <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 8008fae:	683b      	ldr	r3, [r7, #0]
 8008fb0:	895b      	ldrh	r3, [r3, #10]
 8008fb2:	461a      	mov	r2, r3
 8008fb4:	693b      	ldr	r3, [r7, #16]
 8008fb6:	1ad3      	subs	r3, r2, r3
 8008fb8:	60fb      	str	r3, [r7, #12]
 8008fba:	e005      	b.n	8008fc8 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	895b      	ldrh	r3, [r3, #10]
 8008fc0:	461a      	mov	r2, r3
 8008fc2:	697b      	ldr	r3, [r7, #20]
 8008fc4:	1ad3      	subs	r3, r2, r3
 8008fc6:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	685a      	ldr	r2, [r3, #4]
 8008fcc:	697b      	ldr	r3, [r7, #20]
 8008fce:	18d0      	adds	r0, r2, r3
 8008fd0:	683b      	ldr	r3, [r7, #0]
 8008fd2:	685a      	ldr	r2, [r3, #4]
 8008fd4:	693b      	ldr	r3, [r7, #16]
 8008fd6:	4413      	add	r3, r2
 8008fd8:	68fa      	ldr	r2, [r7, #12]
 8008fda:	4619      	mov	r1, r3
 8008fdc:	f00a fb87 	bl	80136ee <memcpy>
    offset_to += len;
 8008fe0:	697a      	ldr	r2, [r7, #20]
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	4413      	add	r3, r2
 8008fe6:	617b      	str	r3, [r7, #20]
    offset_from += len;
 8008fe8:	693a      	ldr	r2, [r7, #16]
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	4413      	add	r3, r2
 8008fee:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	895b      	ldrh	r3, [r3, #10]
 8008ff4:	461a      	mov	r2, r3
 8008ff6:	697b      	ldr	r3, [r7, #20]
 8008ff8:	4293      	cmp	r3, r2
 8008ffa:	d906      	bls.n	800900a <pbuf_copy+0xb2>
 8008ffc:	4b38      	ldr	r3, [pc, #224]	; (80090e0 <pbuf_copy+0x188>)
 8008ffe:	f240 32d9 	movw	r2, #985	; 0x3d9
 8009002:	493a      	ldr	r1, [pc, #232]	; (80090ec <pbuf_copy+0x194>)
 8009004:	4838      	ldr	r0, [pc, #224]	; (80090e8 <pbuf_copy+0x190>)
 8009006:	f00a fb85 	bl	8013714 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800900a:	683b      	ldr	r3, [r7, #0]
 800900c:	895b      	ldrh	r3, [r3, #10]
 800900e:	461a      	mov	r2, r3
 8009010:	693b      	ldr	r3, [r7, #16]
 8009012:	4293      	cmp	r3, r2
 8009014:	d906      	bls.n	8009024 <pbuf_copy+0xcc>
 8009016:	4b32      	ldr	r3, [pc, #200]	; (80090e0 <pbuf_copy+0x188>)
 8009018:	f240 32da 	movw	r2, #986	; 0x3da
 800901c:	4934      	ldr	r1, [pc, #208]	; (80090f0 <pbuf_copy+0x198>)
 800901e:	4832      	ldr	r0, [pc, #200]	; (80090e8 <pbuf_copy+0x190>)
 8009020:	f00a fb78 	bl	8013714 <iprintf>
    if (offset_from >= p_from->len) {
 8009024:	683b      	ldr	r3, [r7, #0]
 8009026:	895b      	ldrh	r3, [r3, #10]
 8009028:	461a      	mov	r2, r3
 800902a:	693b      	ldr	r3, [r7, #16]
 800902c:	4293      	cmp	r3, r2
 800902e:	d304      	bcc.n	800903a <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 8009030:	2300      	movs	r3, #0
 8009032:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 8009034:	683b      	ldr	r3, [r7, #0]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	895b      	ldrh	r3, [r3, #10]
 800903e:	461a      	mov	r2, r3
 8009040:	697b      	ldr	r3, [r7, #20]
 8009042:	4293      	cmp	r3, r2
 8009044:	d114      	bne.n	8009070 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 8009046:	2300      	movs	r3, #0
 8009048:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	2b00      	cmp	r3, #0
 8009054:	d10c      	bne.n	8009070 <pbuf_copy+0x118>
 8009056:	683b      	ldr	r3, [r7, #0]
 8009058:	2b00      	cmp	r3, #0
 800905a:	d009      	beq.n	8009070 <pbuf_copy+0x118>
 800905c:	4b20      	ldr	r3, [pc, #128]	; (80090e0 <pbuf_copy+0x188>)
 800905e:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 8009062:	4924      	ldr	r1, [pc, #144]	; (80090f4 <pbuf_copy+0x19c>)
 8009064:	4820      	ldr	r0, [pc, #128]	; (80090e8 <pbuf_copy+0x190>)
 8009066:	f00a fb55 	bl	8013714 <iprintf>
 800906a:	f06f 030f 	mvn.w	r3, #15
 800906e:	e032      	b.n	80090d6 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8009070:	683b      	ldr	r3, [r7, #0]
 8009072:	2b00      	cmp	r3, #0
 8009074:	d013      	beq.n	800909e <pbuf_copy+0x146>
 8009076:	683b      	ldr	r3, [r7, #0]
 8009078:	895a      	ldrh	r2, [r3, #10]
 800907a:	683b      	ldr	r3, [r7, #0]
 800907c:	891b      	ldrh	r3, [r3, #8]
 800907e:	429a      	cmp	r2, r3
 8009080:	d10d      	bne.n	800909e <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8009082:	683b      	ldr	r3, [r7, #0]
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	2b00      	cmp	r3, #0
 8009088:	d009      	beq.n	800909e <pbuf_copy+0x146>
 800908a:	4b15      	ldr	r3, [pc, #84]	; (80090e0 <pbuf_copy+0x188>)
 800908c:	f240 32ea 	movw	r2, #1002	; 0x3ea
 8009090:	4919      	ldr	r1, [pc, #100]	; (80090f8 <pbuf_copy+0x1a0>)
 8009092:	4815      	ldr	r0, [pc, #84]	; (80090e8 <pbuf_copy+0x190>)
 8009094:	f00a fb3e 	bl	8013714 <iprintf>
 8009098:	f06f 0305 	mvn.w	r3, #5
 800909c:	e01b      	b.n	80090d6 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d013      	beq.n	80090cc <pbuf_copy+0x174>
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	895a      	ldrh	r2, [r3, #10]
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	891b      	ldrh	r3, [r3, #8]
 80090ac:	429a      	cmp	r2, r3
 80090ae:	d10d      	bne.n	80090cc <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	d009      	beq.n	80090cc <pbuf_copy+0x174>
 80090b8:	4b09      	ldr	r3, [pc, #36]	; (80090e0 <pbuf_copy+0x188>)
 80090ba:	f240 32ef 	movw	r2, #1007	; 0x3ef
 80090be:	490e      	ldr	r1, [pc, #56]	; (80090f8 <pbuf_copy+0x1a0>)
 80090c0:	4809      	ldr	r0, [pc, #36]	; (80090e8 <pbuf_copy+0x190>)
 80090c2:	f00a fb27 	bl	8013714 <iprintf>
 80090c6:	f06f 0305 	mvn.w	r3, #5
 80090ca:	e004      	b.n	80090d6 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 80090cc:	683b      	ldr	r3, [r7, #0]
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	f47f af61 	bne.w	8008f96 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 80090d4:	2300      	movs	r3, #0
}
 80090d6:	4618      	mov	r0, r3
 80090d8:	3718      	adds	r7, #24
 80090da:	46bd      	mov	sp, r7
 80090dc:	bd80      	pop	{r7, pc}
 80090de:	bf00      	nop
 80090e0:	08014cac 	.word	0x08014cac
 80090e4:	08014f54 	.word	0x08014f54
 80090e8:	08014d0c 	.word	0x08014d0c
 80090ec:	08014f84 	.word	0x08014f84
 80090f0:	08014f9c 	.word	0x08014f9c
 80090f4:	08014fb8 	.word	0x08014fb8
 80090f8:	08014fc8 	.word	0x08014fc8

080090fc <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 80090fc:	b580      	push	{r7, lr}
 80090fe:	b088      	sub	sp, #32
 8009100:	af00      	add	r7, sp, #0
 8009102:	60f8      	str	r0, [r7, #12]
 8009104:	60b9      	str	r1, [r7, #8]
 8009106:	4611      	mov	r1, r2
 8009108:	461a      	mov	r2, r3
 800910a:	460b      	mov	r3, r1
 800910c:	80fb      	strh	r3, [r7, #6]
 800910e:	4613      	mov	r3, r2
 8009110:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 8009112:	2300      	movs	r3, #0
 8009114:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 8009116:	2300      	movs	r3, #0
 8009118:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	2b00      	cmp	r3, #0
 800911e:	d108      	bne.n	8009132 <pbuf_copy_partial+0x36>
 8009120:	4b2b      	ldr	r3, [pc, #172]	; (80091d0 <pbuf_copy_partial+0xd4>)
 8009122:	f240 420a 	movw	r2, #1034	; 0x40a
 8009126:	492b      	ldr	r1, [pc, #172]	; (80091d4 <pbuf_copy_partial+0xd8>)
 8009128:	482b      	ldr	r0, [pc, #172]	; (80091d8 <pbuf_copy_partial+0xdc>)
 800912a:	f00a faf3 	bl	8013714 <iprintf>
 800912e:	2300      	movs	r3, #0
 8009130:	e04a      	b.n	80091c8 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8009132:	68bb      	ldr	r3, [r7, #8]
 8009134:	2b00      	cmp	r3, #0
 8009136:	d108      	bne.n	800914a <pbuf_copy_partial+0x4e>
 8009138:	4b25      	ldr	r3, [pc, #148]	; (80091d0 <pbuf_copy_partial+0xd4>)
 800913a:	f240 420b 	movw	r2, #1035	; 0x40b
 800913e:	4927      	ldr	r1, [pc, #156]	; (80091dc <pbuf_copy_partial+0xe0>)
 8009140:	4825      	ldr	r0, [pc, #148]	; (80091d8 <pbuf_copy_partial+0xdc>)
 8009142:	f00a fae7 	bl	8013714 <iprintf>
 8009146:	2300      	movs	r3, #0
 8009148:	e03e      	b.n	80091c8 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	61fb      	str	r3, [r7, #28]
 800914e:	e034      	b.n	80091ba <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 8009150:	88bb      	ldrh	r3, [r7, #4]
 8009152:	2b00      	cmp	r3, #0
 8009154:	d00a      	beq.n	800916c <pbuf_copy_partial+0x70>
 8009156:	69fb      	ldr	r3, [r7, #28]
 8009158:	895b      	ldrh	r3, [r3, #10]
 800915a:	88ba      	ldrh	r2, [r7, #4]
 800915c:	429a      	cmp	r2, r3
 800915e:	d305      	bcc.n	800916c <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 8009160:	69fb      	ldr	r3, [r7, #28]
 8009162:	895b      	ldrh	r3, [r3, #10]
 8009164:	88ba      	ldrh	r2, [r7, #4]
 8009166:	1ad3      	subs	r3, r2, r3
 8009168:	80bb      	strh	r3, [r7, #4]
 800916a:	e023      	b.n	80091b4 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800916c:	69fb      	ldr	r3, [r7, #28]
 800916e:	895a      	ldrh	r2, [r3, #10]
 8009170:	88bb      	ldrh	r3, [r7, #4]
 8009172:	1ad3      	subs	r3, r2, r3
 8009174:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 8009176:	8b3a      	ldrh	r2, [r7, #24]
 8009178:	88fb      	ldrh	r3, [r7, #6]
 800917a:	429a      	cmp	r2, r3
 800917c:	d901      	bls.n	8009182 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800917e:	88fb      	ldrh	r3, [r7, #6]
 8009180:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 8009182:	8b7b      	ldrh	r3, [r7, #26]
 8009184:	68ba      	ldr	r2, [r7, #8]
 8009186:	18d0      	adds	r0, r2, r3
 8009188:	69fb      	ldr	r3, [r7, #28]
 800918a:	685a      	ldr	r2, [r3, #4]
 800918c:	88bb      	ldrh	r3, [r7, #4]
 800918e:	4413      	add	r3, r2
 8009190:	8b3a      	ldrh	r2, [r7, #24]
 8009192:	4619      	mov	r1, r3
 8009194:	f00a faab 	bl	80136ee <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8009198:	8afa      	ldrh	r2, [r7, #22]
 800919a:	8b3b      	ldrh	r3, [r7, #24]
 800919c:	4413      	add	r3, r2
 800919e:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 80091a0:	8b7a      	ldrh	r2, [r7, #26]
 80091a2:	8b3b      	ldrh	r3, [r7, #24]
 80091a4:	4413      	add	r3, r2
 80091a6:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 80091a8:	88fa      	ldrh	r2, [r7, #6]
 80091aa:	8b3b      	ldrh	r3, [r7, #24]
 80091ac:	1ad3      	subs	r3, r2, r3
 80091ae:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 80091b0:	2300      	movs	r3, #0
 80091b2:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 80091b4:	69fb      	ldr	r3, [r7, #28]
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	61fb      	str	r3, [r7, #28]
 80091ba:	88fb      	ldrh	r3, [r7, #6]
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d002      	beq.n	80091c6 <pbuf_copy_partial+0xca>
 80091c0:	69fb      	ldr	r3, [r7, #28]
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d1c4      	bne.n	8009150 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 80091c6:	8afb      	ldrh	r3, [r7, #22]
}
 80091c8:	4618      	mov	r0, r3
 80091ca:	3720      	adds	r7, #32
 80091cc:	46bd      	mov	sp, r7
 80091ce:	bd80      	pop	{r7, pc}
 80091d0:	08014cac 	.word	0x08014cac
 80091d4:	08014ff4 	.word	0x08014ff4
 80091d8:	08014d0c 	.word	0x08014d0c
 80091dc:	08015014 	.word	0x08015014

080091e0 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 80091e0:	b580      	push	{r7, lr}
 80091e2:	b084      	sub	sp, #16
 80091e4:	af00      	add	r7, sp, #0
 80091e6:	4603      	mov	r3, r0
 80091e8:	603a      	str	r2, [r7, #0]
 80091ea:	71fb      	strb	r3, [r7, #7]
 80091ec:	460b      	mov	r3, r1
 80091ee:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 80091f0:	683b      	ldr	r3, [r7, #0]
 80091f2:	8919      	ldrh	r1, [r3, #8]
 80091f4:	88ba      	ldrh	r2, [r7, #4]
 80091f6:	79fb      	ldrb	r3, [r7, #7]
 80091f8:	4618      	mov	r0, r3
 80091fa:	f7ff fa99 	bl	8008730 <pbuf_alloc>
 80091fe:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	2b00      	cmp	r3, #0
 8009204:	d101      	bne.n	800920a <pbuf_clone+0x2a>
    return NULL;
 8009206:	2300      	movs	r3, #0
 8009208:	e011      	b.n	800922e <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800920a:	6839      	ldr	r1, [r7, #0]
 800920c:	68f8      	ldr	r0, [r7, #12]
 800920e:	f7ff fea3 	bl	8008f58 <pbuf_copy>
 8009212:	4603      	mov	r3, r0
 8009214:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 8009216:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800921a:	2b00      	cmp	r3, #0
 800921c:	d006      	beq.n	800922c <pbuf_clone+0x4c>
 800921e:	4b06      	ldr	r3, [pc, #24]	; (8009238 <pbuf_clone+0x58>)
 8009220:	f240 5224 	movw	r2, #1316	; 0x524
 8009224:	4905      	ldr	r1, [pc, #20]	; (800923c <pbuf_clone+0x5c>)
 8009226:	4806      	ldr	r0, [pc, #24]	; (8009240 <pbuf_clone+0x60>)
 8009228:	f00a fa74 	bl	8013714 <iprintf>
  return q;
 800922c:	68fb      	ldr	r3, [r7, #12]
}
 800922e:	4618      	mov	r0, r3
 8009230:	3710      	adds	r7, #16
 8009232:	46bd      	mov	sp, r7
 8009234:	bd80      	pop	{r7, pc}
 8009236:	bf00      	nop
 8009238:	08014cac 	.word	0x08014cac
 800923c:	08015120 	.word	0x08015120
 8009240:	08014d0c 	.word	0x08014d0c

08009244 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8009244:	b580      	push	{r7, lr}
 8009246:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8009248:	f00a fa7c 	bl	8013744 <rand>
 800924c:	4603      	mov	r3, r0
 800924e:	b29b      	uxth	r3, r3
 8009250:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8009254:	b29b      	uxth	r3, r3
 8009256:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800925a:	b29a      	uxth	r2, r3
 800925c:	4b01      	ldr	r3, [pc, #4]	; (8009264 <tcp_init+0x20>)
 800925e:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8009260:	bf00      	nop
 8009262:	bd80      	pop	{r7, pc}
 8009264:	20000010 	.word	0x20000010

08009268 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 8009268:	b580      	push	{r7, lr}
 800926a:	b082      	sub	sp, #8
 800926c:	af00      	add	r7, sp, #0
 800926e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	7d1b      	ldrb	r3, [r3, #20]
 8009274:	2b01      	cmp	r3, #1
 8009276:	d105      	bne.n	8009284 <tcp_free+0x1c>
 8009278:	4b06      	ldr	r3, [pc, #24]	; (8009294 <tcp_free+0x2c>)
 800927a:	22d4      	movs	r2, #212	; 0xd4
 800927c:	4906      	ldr	r1, [pc, #24]	; (8009298 <tcp_free+0x30>)
 800927e:	4807      	ldr	r0, [pc, #28]	; (800929c <tcp_free+0x34>)
 8009280:	f00a fa48 	bl	8013714 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 8009284:	6879      	ldr	r1, [r7, #4]
 8009286:	2001      	movs	r0, #1
 8009288:	f7fe fe86 	bl	8007f98 <memp_free>
}
 800928c:	bf00      	nop
 800928e:	3708      	adds	r7, #8
 8009290:	46bd      	mov	sp, r7
 8009292:	bd80      	pop	{r7, pc}
 8009294:	080151ac 	.word	0x080151ac
 8009298:	080151dc 	.word	0x080151dc
 800929c:	080151f0 	.word	0x080151f0

080092a0 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 80092a0:	b580      	push	{r7, lr}
 80092a2:	b082      	sub	sp, #8
 80092a4:	af00      	add	r7, sp, #0
 80092a6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	7d1b      	ldrb	r3, [r3, #20]
 80092ac:	2b01      	cmp	r3, #1
 80092ae:	d105      	bne.n	80092bc <tcp_free_listen+0x1c>
 80092b0:	4b06      	ldr	r3, [pc, #24]	; (80092cc <tcp_free_listen+0x2c>)
 80092b2:	22df      	movs	r2, #223	; 0xdf
 80092b4:	4906      	ldr	r1, [pc, #24]	; (80092d0 <tcp_free_listen+0x30>)
 80092b6:	4807      	ldr	r0, [pc, #28]	; (80092d4 <tcp_free_listen+0x34>)
 80092b8:	f00a fa2c 	bl	8013714 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 80092bc:	6879      	ldr	r1, [r7, #4]
 80092be:	2002      	movs	r0, #2
 80092c0:	f7fe fe6a 	bl	8007f98 <memp_free>
}
 80092c4:	bf00      	nop
 80092c6:	3708      	adds	r7, #8
 80092c8:	46bd      	mov	sp, r7
 80092ca:	bd80      	pop	{r7, pc}
 80092cc:	080151ac 	.word	0x080151ac
 80092d0:	08015218 	.word	0x08015218
 80092d4:	080151f0 	.word	0x080151f0

080092d8 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 80092d8:	b580      	push	{r7, lr}
 80092da:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 80092dc:	f000 fe98 	bl	800a010 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 80092e0:	4b07      	ldr	r3, [pc, #28]	; (8009300 <tcp_tmr+0x28>)
 80092e2:	781b      	ldrb	r3, [r3, #0]
 80092e4:	3301      	adds	r3, #1
 80092e6:	b2da      	uxtb	r2, r3
 80092e8:	4b05      	ldr	r3, [pc, #20]	; (8009300 <tcp_tmr+0x28>)
 80092ea:	701a      	strb	r2, [r3, #0]
 80092ec:	4b04      	ldr	r3, [pc, #16]	; (8009300 <tcp_tmr+0x28>)
 80092ee:	781b      	ldrb	r3, [r3, #0]
 80092f0:	f003 0301 	and.w	r3, r3, #1
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d001      	beq.n	80092fc <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 80092f8:	f000 fb4c 	bl	8009994 <tcp_slowtmr>
  }
}
 80092fc:	bf00      	nop
 80092fe:	bd80      	pop	{r7, pc}
 8009300:	2000849d 	.word	0x2000849d

08009304 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8009304:	b580      	push	{r7, lr}
 8009306:	b084      	sub	sp, #16
 8009308:	af00      	add	r7, sp, #0
 800930a:	6078      	str	r0, [r7, #4]
 800930c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800930e:	683b      	ldr	r3, [r7, #0]
 8009310:	2b00      	cmp	r3, #0
 8009312:	d105      	bne.n	8009320 <tcp_remove_listener+0x1c>
 8009314:	4b0d      	ldr	r3, [pc, #52]	; (800934c <tcp_remove_listener+0x48>)
 8009316:	22ff      	movs	r2, #255	; 0xff
 8009318:	490d      	ldr	r1, [pc, #52]	; (8009350 <tcp_remove_listener+0x4c>)
 800931a:	480e      	ldr	r0, [pc, #56]	; (8009354 <tcp_remove_listener+0x50>)
 800931c:	f00a f9fa 	bl	8013714 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	60fb      	str	r3, [r7, #12]
 8009324:	e00a      	b.n	800933c <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800932a:	683a      	ldr	r2, [r7, #0]
 800932c:	429a      	cmp	r2, r3
 800932e:	d102      	bne.n	8009336 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	2200      	movs	r2, #0
 8009334:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	68db      	ldr	r3, [r3, #12]
 800933a:	60fb      	str	r3, [r7, #12]
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	2b00      	cmp	r3, #0
 8009340:	d1f1      	bne.n	8009326 <tcp_remove_listener+0x22>
    }
  }
}
 8009342:	bf00      	nop
 8009344:	3710      	adds	r7, #16
 8009346:	46bd      	mov	sp, r7
 8009348:	bd80      	pop	{r7, pc}
 800934a:	bf00      	nop
 800934c:	080151ac 	.word	0x080151ac
 8009350:	08015234 	.word	0x08015234
 8009354:	080151f0 	.word	0x080151f0

08009358 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8009358:	b580      	push	{r7, lr}
 800935a:	b084      	sub	sp, #16
 800935c:	af00      	add	r7, sp, #0
 800935e:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	2b00      	cmp	r3, #0
 8009364:	d106      	bne.n	8009374 <tcp_listen_closed+0x1c>
 8009366:	4b14      	ldr	r3, [pc, #80]	; (80093b8 <tcp_listen_closed+0x60>)
 8009368:	f240 1211 	movw	r2, #273	; 0x111
 800936c:	4913      	ldr	r1, [pc, #76]	; (80093bc <tcp_listen_closed+0x64>)
 800936e:	4814      	ldr	r0, [pc, #80]	; (80093c0 <tcp_listen_closed+0x68>)
 8009370:	f00a f9d0 	bl	8013714 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	7d1b      	ldrb	r3, [r3, #20]
 8009378:	2b01      	cmp	r3, #1
 800937a:	d006      	beq.n	800938a <tcp_listen_closed+0x32>
 800937c:	4b0e      	ldr	r3, [pc, #56]	; (80093b8 <tcp_listen_closed+0x60>)
 800937e:	f44f 7289 	mov.w	r2, #274	; 0x112
 8009382:	4910      	ldr	r1, [pc, #64]	; (80093c4 <tcp_listen_closed+0x6c>)
 8009384:	480e      	ldr	r0, [pc, #56]	; (80093c0 <tcp_listen_closed+0x68>)
 8009386:	f00a f9c5 	bl	8013714 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800938a:	2301      	movs	r3, #1
 800938c:	60fb      	str	r3, [r7, #12]
 800938e:	e00b      	b.n	80093a8 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8009390:	4a0d      	ldr	r2, [pc, #52]	; (80093c8 <tcp_listen_closed+0x70>)
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	6879      	ldr	r1, [r7, #4]
 800939c:	4618      	mov	r0, r3
 800939e:	f7ff ffb1 	bl	8009304 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	3301      	adds	r3, #1
 80093a6:	60fb      	str	r3, [r7, #12]
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	2b03      	cmp	r3, #3
 80093ac:	d9f0      	bls.n	8009390 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 80093ae:	bf00      	nop
 80093b0:	3710      	adds	r7, #16
 80093b2:	46bd      	mov	sp, r7
 80093b4:	bd80      	pop	{r7, pc}
 80093b6:	bf00      	nop
 80093b8:	080151ac 	.word	0x080151ac
 80093bc:	0801525c 	.word	0x0801525c
 80093c0:	080151f0 	.word	0x080151f0
 80093c4:	08015268 	.word	0x08015268
 80093c8:	08017560 	.word	0x08017560

080093cc <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 80093cc:	b5b0      	push	{r4, r5, r7, lr}
 80093ce:	b088      	sub	sp, #32
 80093d0:	af04      	add	r7, sp, #16
 80093d2:	6078      	str	r0, [r7, #4]
 80093d4:	460b      	mov	r3, r1
 80093d6:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d106      	bne.n	80093ec <tcp_close_shutdown+0x20>
 80093de:	4b61      	ldr	r3, [pc, #388]	; (8009564 <tcp_close_shutdown+0x198>)
 80093e0:	f44f 72af 	mov.w	r2, #350	; 0x15e
 80093e4:	4960      	ldr	r1, [pc, #384]	; (8009568 <tcp_close_shutdown+0x19c>)
 80093e6:	4861      	ldr	r0, [pc, #388]	; (800956c <tcp_close_shutdown+0x1a0>)
 80093e8:	f00a f994 	bl	8013714 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 80093ec:	78fb      	ldrb	r3, [r7, #3]
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d066      	beq.n	80094c0 <tcp_close_shutdown+0xf4>
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	7d1b      	ldrb	r3, [r3, #20]
 80093f6:	2b04      	cmp	r3, #4
 80093f8:	d003      	beq.n	8009402 <tcp_close_shutdown+0x36>
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	7d1b      	ldrb	r3, [r3, #20]
 80093fe:	2b07      	cmp	r3, #7
 8009400:	d15e      	bne.n	80094c0 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009406:	2b00      	cmp	r3, #0
 8009408:	d104      	bne.n	8009414 <tcp_close_shutdown+0x48>
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800940e:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8009412:	d055      	beq.n	80094c0 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	8b5b      	ldrh	r3, [r3, #26]
 8009418:	f003 0310 	and.w	r3, r3, #16
 800941c:	2b00      	cmp	r3, #0
 800941e:	d106      	bne.n	800942e <tcp_close_shutdown+0x62>
 8009420:	4b50      	ldr	r3, [pc, #320]	; (8009564 <tcp_close_shutdown+0x198>)
 8009422:	f44f 72b2 	mov.w	r2, #356	; 0x164
 8009426:	4952      	ldr	r1, [pc, #328]	; (8009570 <tcp_close_shutdown+0x1a4>)
 8009428:	4850      	ldr	r0, [pc, #320]	; (800956c <tcp_close_shutdown+0x1a0>)
 800942a:	f00a f973 	bl	8013714 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8009436:	687d      	ldr	r5, [r7, #4]
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	3304      	adds	r3, #4
 800943c:	687a      	ldr	r2, [r7, #4]
 800943e:	8ad2      	ldrh	r2, [r2, #22]
 8009440:	6879      	ldr	r1, [r7, #4]
 8009442:	8b09      	ldrh	r1, [r1, #24]
 8009444:	9102      	str	r1, [sp, #8]
 8009446:	9201      	str	r2, [sp, #4]
 8009448:	9300      	str	r3, [sp, #0]
 800944a:	462b      	mov	r3, r5
 800944c:	4622      	mov	r2, r4
 800944e:	4601      	mov	r1, r0
 8009450:	6878      	ldr	r0, [r7, #4]
 8009452:	f004 fe8f 	bl	800e174 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8009456:	6878      	ldr	r0, [r7, #4]
 8009458:	f001 f8ba 	bl	800a5d0 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800945c:	4b45      	ldr	r3, [pc, #276]	; (8009574 <tcp_close_shutdown+0x1a8>)
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	687a      	ldr	r2, [r7, #4]
 8009462:	429a      	cmp	r2, r3
 8009464:	d105      	bne.n	8009472 <tcp_close_shutdown+0xa6>
 8009466:	4b43      	ldr	r3, [pc, #268]	; (8009574 <tcp_close_shutdown+0x1a8>)
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	68db      	ldr	r3, [r3, #12]
 800946c:	4a41      	ldr	r2, [pc, #260]	; (8009574 <tcp_close_shutdown+0x1a8>)
 800946e:	6013      	str	r3, [r2, #0]
 8009470:	e013      	b.n	800949a <tcp_close_shutdown+0xce>
 8009472:	4b40      	ldr	r3, [pc, #256]	; (8009574 <tcp_close_shutdown+0x1a8>)
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	60fb      	str	r3, [r7, #12]
 8009478:	e00c      	b.n	8009494 <tcp_close_shutdown+0xc8>
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	68db      	ldr	r3, [r3, #12]
 800947e:	687a      	ldr	r2, [r7, #4]
 8009480:	429a      	cmp	r2, r3
 8009482:	d104      	bne.n	800948e <tcp_close_shutdown+0xc2>
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	68da      	ldr	r2, [r3, #12]
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	60da      	str	r2, [r3, #12]
 800948c:	e005      	b.n	800949a <tcp_close_shutdown+0xce>
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	68db      	ldr	r3, [r3, #12]
 8009492:	60fb      	str	r3, [r7, #12]
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	2b00      	cmp	r3, #0
 8009498:	d1ef      	bne.n	800947a <tcp_close_shutdown+0xae>
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	2200      	movs	r2, #0
 800949e:	60da      	str	r2, [r3, #12]
 80094a0:	4b35      	ldr	r3, [pc, #212]	; (8009578 <tcp_close_shutdown+0x1ac>)
 80094a2:	2201      	movs	r2, #1
 80094a4:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 80094a6:	4b35      	ldr	r3, [pc, #212]	; (800957c <tcp_close_shutdown+0x1b0>)
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	687a      	ldr	r2, [r7, #4]
 80094ac:	429a      	cmp	r2, r3
 80094ae:	d102      	bne.n	80094b6 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 80094b0:	f003 fd4c 	bl	800cf4c <tcp_trigger_input_pcb_close>
 80094b4:	e002      	b.n	80094bc <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 80094b6:	6878      	ldr	r0, [r7, #4]
 80094b8:	f7ff fed6 	bl	8009268 <tcp_free>
      }
      return ERR_OK;
 80094bc:	2300      	movs	r3, #0
 80094be:	e04d      	b.n	800955c <tcp_close_shutdown+0x190>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	7d1b      	ldrb	r3, [r3, #20]
 80094c4:	2b01      	cmp	r3, #1
 80094c6:	d02d      	beq.n	8009524 <tcp_close_shutdown+0x158>
 80094c8:	2b02      	cmp	r3, #2
 80094ca:	d036      	beq.n	800953a <tcp_close_shutdown+0x16e>
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	d13f      	bne.n	8009550 <tcp_close_shutdown+0x184>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	8adb      	ldrh	r3, [r3, #22]
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	d021      	beq.n	800951c <tcp_close_shutdown+0x150>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 80094d8:	4b29      	ldr	r3, [pc, #164]	; (8009580 <tcp_close_shutdown+0x1b4>)
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	687a      	ldr	r2, [r7, #4]
 80094de:	429a      	cmp	r2, r3
 80094e0:	d105      	bne.n	80094ee <tcp_close_shutdown+0x122>
 80094e2:	4b27      	ldr	r3, [pc, #156]	; (8009580 <tcp_close_shutdown+0x1b4>)
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	68db      	ldr	r3, [r3, #12]
 80094e8:	4a25      	ldr	r2, [pc, #148]	; (8009580 <tcp_close_shutdown+0x1b4>)
 80094ea:	6013      	str	r3, [r2, #0]
 80094ec:	e013      	b.n	8009516 <tcp_close_shutdown+0x14a>
 80094ee:	4b24      	ldr	r3, [pc, #144]	; (8009580 <tcp_close_shutdown+0x1b4>)
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	60bb      	str	r3, [r7, #8]
 80094f4:	e00c      	b.n	8009510 <tcp_close_shutdown+0x144>
 80094f6:	68bb      	ldr	r3, [r7, #8]
 80094f8:	68db      	ldr	r3, [r3, #12]
 80094fa:	687a      	ldr	r2, [r7, #4]
 80094fc:	429a      	cmp	r2, r3
 80094fe:	d104      	bne.n	800950a <tcp_close_shutdown+0x13e>
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	68da      	ldr	r2, [r3, #12]
 8009504:	68bb      	ldr	r3, [r7, #8]
 8009506:	60da      	str	r2, [r3, #12]
 8009508:	e005      	b.n	8009516 <tcp_close_shutdown+0x14a>
 800950a:	68bb      	ldr	r3, [r7, #8]
 800950c:	68db      	ldr	r3, [r3, #12]
 800950e:	60bb      	str	r3, [r7, #8]
 8009510:	68bb      	ldr	r3, [r7, #8]
 8009512:	2b00      	cmp	r3, #0
 8009514:	d1ef      	bne.n	80094f6 <tcp_close_shutdown+0x12a>
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	2200      	movs	r2, #0
 800951a:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800951c:	6878      	ldr	r0, [r7, #4]
 800951e:	f7ff fea3 	bl	8009268 <tcp_free>
      break;
 8009522:	e01a      	b.n	800955a <tcp_close_shutdown+0x18e>
    case LISTEN:
      tcp_listen_closed(pcb);
 8009524:	6878      	ldr	r0, [r7, #4]
 8009526:	f7ff ff17 	bl	8009358 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800952a:	6879      	ldr	r1, [r7, #4]
 800952c:	4815      	ldr	r0, [pc, #84]	; (8009584 <tcp_close_shutdown+0x1b8>)
 800952e:	f001 f89f 	bl	800a670 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 8009532:	6878      	ldr	r0, [r7, #4]
 8009534:	f7ff feb4 	bl	80092a0 <tcp_free_listen>
      break;
 8009538:	e00f      	b.n	800955a <tcp_close_shutdown+0x18e>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800953a:	6879      	ldr	r1, [r7, #4]
 800953c:	480d      	ldr	r0, [pc, #52]	; (8009574 <tcp_close_shutdown+0x1a8>)
 800953e:	f001 f897 	bl	800a670 <tcp_pcb_remove>
 8009542:	4b0d      	ldr	r3, [pc, #52]	; (8009578 <tcp_close_shutdown+0x1ac>)
 8009544:	2201      	movs	r2, #1
 8009546:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 8009548:	6878      	ldr	r0, [r7, #4]
 800954a:	f7ff fe8d 	bl	8009268 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800954e:	e004      	b.n	800955a <tcp_close_shutdown+0x18e>
    default:
      return tcp_close_shutdown_fin(pcb);
 8009550:	6878      	ldr	r0, [r7, #4]
 8009552:	f000 f819 	bl	8009588 <tcp_close_shutdown_fin>
 8009556:	4603      	mov	r3, r0
 8009558:	e000      	b.n	800955c <tcp_close_shutdown+0x190>
  }
  return ERR_OK;
 800955a:	2300      	movs	r3, #0
}
 800955c:	4618      	mov	r0, r3
 800955e:	3710      	adds	r7, #16
 8009560:	46bd      	mov	sp, r7
 8009562:	bdb0      	pop	{r4, r5, r7, pc}
 8009564:	080151ac 	.word	0x080151ac
 8009568:	08015280 	.word	0x08015280
 800956c:	080151f0 	.word	0x080151f0
 8009570:	080152a0 	.word	0x080152a0
 8009574:	2000eee4 	.word	0x2000eee4
 8009578:	2000eee0 	.word	0x2000eee0
 800957c:	2000eef8 	.word	0x2000eef8
 8009580:	2000eef0 	.word	0x2000eef0
 8009584:	2000eeec 	.word	0x2000eeec

08009588 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8009588:	b580      	push	{r7, lr}
 800958a:	b084      	sub	sp, #16
 800958c:	af00      	add	r7, sp, #0
 800958e:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	2b00      	cmp	r3, #0
 8009594:	d106      	bne.n	80095a4 <tcp_close_shutdown_fin+0x1c>
 8009596:	4b2c      	ldr	r3, [pc, #176]	; (8009648 <tcp_close_shutdown_fin+0xc0>)
 8009598:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 800959c:	492b      	ldr	r1, [pc, #172]	; (800964c <tcp_close_shutdown_fin+0xc4>)
 800959e:	482c      	ldr	r0, [pc, #176]	; (8009650 <tcp_close_shutdown_fin+0xc8>)
 80095a0:	f00a f8b8 	bl	8013714 <iprintf>

  switch (pcb->state) {
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	7d1b      	ldrb	r3, [r3, #20]
 80095a8:	2b04      	cmp	r3, #4
 80095aa:	d010      	beq.n	80095ce <tcp_close_shutdown_fin+0x46>
 80095ac:	2b07      	cmp	r3, #7
 80095ae:	d01b      	beq.n	80095e8 <tcp_close_shutdown_fin+0x60>
 80095b0:	2b03      	cmp	r3, #3
 80095b2:	d126      	bne.n	8009602 <tcp_close_shutdown_fin+0x7a>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 80095b4:	6878      	ldr	r0, [r7, #4]
 80095b6:	f003 fedb 	bl	800d370 <tcp_send_fin>
 80095ba:	4603      	mov	r3, r0
 80095bc:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 80095be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d11f      	bne.n	8009606 <tcp_close_shutdown_fin+0x7e>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	2205      	movs	r2, #5
 80095ca:	751a      	strb	r2, [r3, #20]
      }
      break;
 80095cc:	e01b      	b.n	8009606 <tcp_close_shutdown_fin+0x7e>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 80095ce:	6878      	ldr	r0, [r7, #4]
 80095d0:	f003 fece 	bl	800d370 <tcp_send_fin>
 80095d4:	4603      	mov	r3, r0
 80095d6:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 80095d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80095dc:	2b00      	cmp	r3, #0
 80095de:	d114      	bne.n	800960a <tcp_close_shutdown_fin+0x82>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	2205      	movs	r2, #5
 80095e4:	751a      	strb	r2, [r3, #20]
      }
      break;
 80095e6:	e010      	b.n	800960a <tcp_close_shutdown_fin+0x82>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 80095e8:	6878      	ldr	r0, [r7, #4]
 80095ea:	f003 fec1 	bl	800d370 <tcp_send_fin>
 80095ee:	4603      	mov	r3, r0
 80095f0:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 80095f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	d109      	bne.n	800960e <tcp_close_shutdown_fin+0x86>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	2209      	movs	r2, #9
 80095fe:	751a      	strb	r2, [r3, #20]
      }
      break;
 8009600:	e005      	b.n	800960e <tcp_close_shutdown_fin+0x86>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 8009602:	2300      	movs	r3, #0
 8009604:	e01c      	b.n	8009640 <tcp_close_shutdown_fin+0xb8>
      break;
 8009606:	bf00      	nop
 8009608:	e002      	b.n	8009610 <tcp_close_shutdown_fin+0x88>
      break;
 800960a:	bf00      	nop
 800960c:	e000      	b.n	8009610 <tcp_close_shutdown_fin+0x88>
      break;
 800960e:	bf00      	nop
  }

  if (err == ERR_OK) {
 8009610:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009614:	2b00      	cmp	r3, #0
 8009616:	d103      	bne.n	8009620 <tcp_close_shutdown_fin+0x98>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 8009618:	6878      	ldr	r0, [r7, #4]
 800961a:	f003 ffe7 	bl	800d5ec <tcp_output>
 800961e:	e00d      	b.n	800963c <tcp_close_shutdown_fin+0xb4>
  } else if (err == ERR_MEM) {
 8009620:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009624:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009628:	d108      	bne.n	800963c <tcp_close_shutdown_fin+0xb4>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	8b5b      	ldrh	r3, [r3, #26]
 800962e:	f043 0308 	orr.w	r3, r3, #8
 8009632:	b29a      	uxth	r2, r3
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 8009638:	2300      	movs	r3, #0
 800963a:	e001      	b.n	8009640 <tcp_close_shutdown_fin+0xb8>
  }
  return err;
 800963c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009640:	4618      	mov	r0, r3
 8009642:	3710      	adds	r7, #16
 8009644:	46bd      	mov	sp, r7
 8009646:	bd80      	pop	{r7, pc}
 8009648:	080151ac 	.word	0x080151ac
 800964c:	0801525c 	.word	0x0801525c
 8009650:	080151f0 	.word	0x080151f0

08009654 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8009654:	b580      	push	{r7, lr}
 8009656:	b082      	sub	sp, #8
 8009658:	af00      	add	r7, sp, #0
 800965a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	2b00      	cmp	r3, #0
 8009660:	d109      	bne.n	8009676 <tcp_close+0x22>
 8009662:	4b0f      	ldr	r3, [pc, #60]	; (80096a0 <tcp_close+0x4c>)
 8009664:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8009668:	490e      	ldr	r1, [pc, #56]	; (80096a4 <tcp_close+0x50>)
 800966a:	480f      	ldr	r0, [pc, #60]	; (80096a8 <tcp_close+0x54>)
 800966c:	f00a f852 	bl	8013714 <iprintf>
 8009670:	f06f 030f 	mvn.w	r3, #15
 8009674:	e00f      	b.n	8009696 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	7d1b      	ldrb	r3, [r3, #20]
 800967a:	2b01      	cmp	r3, #1
 800967c:	d006      	beq.n	800968c <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	8b5b      	ldrh	r3, [r3, #26]
 8009682:	f043 0310 	orr.w	r3, r3, #16
 8009686:	b29a      	uxth	r2, r3
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800968c:	2101      	movs	r1, #1
 800968e:	6878      	ldr	r0, [r7, #4]
 8009690:	f7ff fe9c 	bl	80093cc <tcp_close_shutdown>
 8009694:	4603      	mov	r3, r0
}
 8009696:	4618      	mov	r0, r3
 8009698:	3708      	adds	r7, #8
 800969a:	46bd      	mov	sp, r7
 800969c:	bd80      	pop	{r7, pc}
 800969e:	bf00      	nop
 80096a0:	080151ac 	.word	0x080151ac
 80096a4:	080152bc 	.word	0x080152bc
 80096a8:	080151f0 	.word	0x080151f0

080096ac <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 80096ac:	b580      	push	{r7, lr}
 80096ae:	b08e      	sub	sp, #56	; 0x38
 80096b0:	af04      	add	r7, sp, #16
 80096b2:	6078      	str	r0, [r7, #4]
 80096b4:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d107      	bne.n	80096cc <tcp_abandon+0x20>
 80096bc:	4b52      	ldr	r3, [pc, #328]	; (8009808 <tcp_abandon+0x15c>)
 80096be:	f240 223d 	movw	r2, #573	; 0x23d
 80096c2:	4952      	ldr	r1, [pc, #328]	; (800980c <tcp_abandon+0x160>)
 80096c4:	4852      	ldr	r0, [pc, #328]	; (8009810 <tcp_abandon+0x164>)
 80096c6:	f00a f825 	bl	8013714 <iprintf>
 80096ca:	e099      	b.n	8009800 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	7d1b      	ldrb	r3, [r3, #20]
 80096d0:	2b01      	cmp	r3, #1
 80096d2:	d106      	bne.n	80096e2 <tcp_abandon+0x36>
 80096d4:	4b4c      	ldr	r3, [pc, #304]	; (8009808 <tcp_abandon+0x15c>)
 80096d6:	f240 2241 	movw	r2, #577	; 0x241
 80096da:	494e      	ldr	r1, [pc, #312]	; (8009814 <tcp_abandon+0x168>)
 80096dc:	484c      	ldr	r0, [pc, #304]	; (8009810 <tcp_abandon+0x164>)
 80096de:	f00a f819 	bl	8013714 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	7d1b      	ldrb	r3, [r3, #20]
 80096e6:	2b0a      	cmp	r3, #10
 80096e8:	d107      	bne.n	80096fa <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 80096ea:	6879      	ldr	r1, [r7, #4]
 80096ec:	484a      	ldr	r0, [pc, #296]	; (8009818 <tcp_abandon+0x16c>)
 80096ee:	f000 ffbf 	bl	800a670 <tcp_pcb_remove>
    tcp_free(pcb);
 80096f2:	6878      	ldr	r0, [r7, #4]
 80096f4:	f7ff fdb8 	bl	8009268 <tcp_free>
 80096f8:	e082      	b.n	8009800 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 80096fa:	2300      	movs	r3, #0
 80096fc:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 80096fe:	2300      	movs	r3, #0
 8009700:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009706:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800970c:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009714:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	691b      	ldr	r3, [r3, #16]
 800971a:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	7d1b      	ldrb	r3, [r3, #20]
 8009720:	2b00      	cmp	r3, #0
 8009722:	d126      	bne.n	8009772 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	8adb      	ldrh	r3, [r3, #22]
 8009728:	2b00      	cmp	r3, #0
 800972a:	d02e      	beq.n	800978a <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800972c:	4b3b      	ldr	r3, [pc, #236]	; (800981c <tcp_abandon+0x170>)
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	687a      	ldr	r2, [r7, #4]
 8009732:	429a      	cmp	r2, r3
 8009734:	d105      	bne.n	8009742 <tcp_abandon+0x96>
 8009736:	4b39      	ldr	r3, [pc, #228]	; (800981c <tcp_abandon+0x170>)
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	68db      	ldr	r3, [r3, #12]
 800973c:	4a37      	ldr	r2, [pc, #220]	; (800981c <tcp_abandon+0x170>)
 800973e:	6013      	str	r3, [r2, #0]
 8009740:	e013      	b.n	800976a <tcp_abandon+0xbe>
 8009742:	4b36      	ldr	r3, [pc, #216]	; (800981c <tcp_abandon+0x170>)
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	61fb      	str	r3, [r7, #28]
 8009748:	e00c      	b.n	8009764 <tcp_abandon+0xb8>
 800974a:	69fb      	ldr	r3, [r7, #28]
 800974c:	68db      	ldr	r3, [r3, #12]
 800974e:	687a      	ldr	r2, [r7, #4]
 8009750:	429a      	cmp	r2, r3
 8009752:	d104      	bne.n	800975e <tcp_abandon+0xb2>
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	68da      	ldr	r2, [r3, #12]
 8009758:	69fb      	ldr	r3, [r7, #28]
 800975a:	60da      	str	r2, [r3, #12]
 800975c:	e005      	b.n	800976a <tcp_abandon+0xbe>
 800975e:	69fb      	ldr	r3, [r7, #28]
 8009760:	68db      	ldr	r3, [r3, #12]
 8009762:	61fb      	str	r3, [r7, #28]
 8009764:	69fb      	ldr	r3, [r7, #28]
 8009766:	2b00      	cmp	r3, #0
 8009768:	d1ef      	bne.n	800974a <tcp_abandon+0x9e>
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	2200      	movs	r2, #0
 800976e:	60da      	str	r2, [r3, #12]
 8009770:	e00b      	b.n	800978a <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 8009772:	683b      	ldr	r3, [r7, #0]
 8009774:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	8adb      	ldrh	r3, [r3, #22]
 800977a:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800977c:	6879      	ldr	r1, [r7, #4]
 800977e:	4828      	ldr	r0, [pc, #160]	; (8009820 <tcp_abandon+0x174>)
 8009780:	f000 ff76 	bl	800a670 <tcp_pcb_remove>
 8009784:	4b27      	ldr	r3, [pc, #156]	; (8009824 <tcp_abandon+0x178>)
 8009786:	2201      	movs	r2, #1
 8009788:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800978e:	2b00      	cmp	r3, #0
 8009790:	d004      	beq.n	800979c <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009796:	4618      	mov	r0, r3
 8009798:	f000 fd1a 	bl	800a1d0 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d004      	beq.n	80097ae <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80097a8:	4618      	mov	r0, r3
 80097aa:	f000 fd11 	bl	800a1d0 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	d004      	beq.n	80097c0 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80097ba:	4618      	mov	r0, r3
 80097bc:	f000 fd08 	bl	800a1d0 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 80097c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	d00e      	beq.n	80097e4 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 80097c6:	6879      	ldr	r1, [r7, #4]
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	3304      	adds	r3, #4
 80097cc:	687a      	ldr	r2, [r7, #4]
 80097ce:	8b12      	ldrh	r2, [r2, #24]
 80097d0:	9202      	str	r2, [sp, #8]
 80097d2:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80097d4:	9201      	str	r2, [sp, #4]
 80097d6:	9300      	str	r3, [sp, #0]
 80097d8:	460b      	mov	r3, r1
 80097da:	697a      	ldr	r2, [r7, #20]
 80097dc:	69b9      	ldr	r1, [r7, #24]
 80097de:	6878      	ldr	r0, [r7, #4]
 80097e0:	f004 fcc8 	bl	800e174 <tcp_rst>
    }
    last_state = pcb->state;
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	7d1b      	ldrb	r3, [r3, #20]
 80097e8:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 80097ea:	6878      	ldr	r0, [r7, #4]
 80097ec:	f7ff fd3c 	bl	8009268 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 80097f0:	693b      	ldr	r3, [r7, #16]
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	d004      	beq.n	8009800 <tcp_abandon+0x154>
 80097f6:	693b      	ldr	r3, [r7, #16]
 80097f8:	f06f 010c 	mvn.w	r1, #12
 80097fc:	68f8      	ldr	r0, [r7, #12]
 80097fe:	4798      	blx	r3
  }
}
 8009800:	3728      	adds	r7, #40	; 0x28
 8009802:	46bd      	mov	sp, r7
 8009804:	bd80      	pop	{r7, pc}
 8009806:	bf00      	nop
 8009808:	080151ac 	.word	0x080151ac
 800980c:	080152f0 	.word	0x080152f0
 8009810:	080151f0 	.word	0x080151f0
 8009814:	0801530c 	.word	0x0801530c
 8009818:	2000eef4 	.word	0x2000eef4
 800981c:	2000eef0 	.word	0x2000eef0
 8009820:	2000eee4 	.word	0x2000eee4
 8009824:	2000eee0 	.word	0x2000eee0

08009828 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8009828:	b580      	push	{r7, lr}
 800982a:	b082      	sub	sp, #8
 800982c:	af00      	add	r7, sp, #0
 800982e:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8009830:	2101      	movs	r1, #1
 8009832:	6878      	ldr	r0, [r7, #4]
 8009834:	f7ff ff3a 	bl	80096ac <tcp_abandon>
}
 8009838:	bf00      	nop
 800983a:	3708      	adds	r7, #8
 800983c:	46bd      	mov	sp, r7
 800983e:	bd80      	pop	{r7, pc}

08009840 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8009840:	b580      	push	{r7, lr}
 8009842:	b084      	sub	sp, #16
 8009844:	af00      	add	r7, sp, #0
 8009846:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	2b00      	cmp	r3, #0
 800984c:	d106      	bne.n	800985c <tcp_update_rcv_ann_wnd+0x1c>
 800984e:	4b25      	ldr	r3, [pc, #148]	; (80098e4 <tcp_update_rcv_ann_wnd+0xa4>)
 8009850:	f240 32a6 	movw	r2, #934	; 0x3a6
 8009854:	4924      	ldr	r1, [pc, #144]	; (80098e8 <tcp_update_rcv_ann_wnd+0xa8>)
 8009856:	4825      	ldr	r0, [pc, #148]	; (80098ec <tcp_update_rcv_ann_wnd+0xac>)
 8009858:	f009 ff5c 	bl	8013714 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009860:	687a      	ldr	r2, [r7, #4]
 8009862:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8009864:	4413      	add	r3, r2
 8009866:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800986c:	687a      	ldr	r2, [r7, #4]
 800986e:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 8009870:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 8009874:	bf28      	it	cs
 8009876:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 800987a:	b292      	uxth	r2, r2
 800987c:	4413      	add	r3, r2
 800987e:	68fa      	ldr	r2, [r7, #12]
 8009880:	1ad3      	subs	r3, r2, r3
 8009882:	2b00      	cmp	r3, #0
 8009884:	db08      	blt.n	8009898 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009892:	68fa      	ldr	r2, [r7, #12]
 8009894:	1ad3      	subs	r3, r2, r3
 8009896:	e020      	b.n	80098da <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098a0:	1ad3      	subs	r3, r2, r3
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	dd03      	ble.n	80098ae <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	2200      	movs	r2, #0
 80098aa:	855a      	strh	r2, [r3, #42]	; 0x2a
 80098ac:	e014      	b.n	80098d8 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098b6:	1ad3      	subs	r3, r2, r3
 80098b8:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 80098ba:	68bb      	ldr	r3, [r7, #8]
 80098bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80098c0:	d306      	bcc.n	80098d0 <tcp_update_rcv_ann_wnd+0x90>
 80098c2:	4b08      	ldr	r3, [pc, #32]	; (80098e4 <tcp_update_rcv_ann_wnd+0xa4>)
 80098c4:	f240 32b6 	movw	r2, #950	; 0x3b6
 80098c8:	4909      	ldr	r1, [pc, #36]	; (80098f0 <tcp_update_rcv_ann_wnd+0xb0>)
 80098ca:	4808      	ldr	r0, [pc, #32]	; (80098ec <tcp_update_rcv_ann_wnd+0xac>)
 80098cc:	f009 ff22 	bl	8013714 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 80098d0:	68bb      	ldr	r3, [r7, #8]
 80098d2:	b29a      	uxth	r2, r3
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 80098d8:	2300      	movs	r3, #0
  }
}
 80098da:	4618      	mov	r0, r3
 80098dc:	3710      	adds	r7, #16
 80098de:	46bd      	mov	sp, r7
 80098e0:	bd80      	pop	{r7, pc}
 80098e2:	bf00      	nop
 80098e4:	080151ac 	.word	0x080151ac
 80098e8:	08015408 	.word	0x08015408
 80098ec:	080151f0 	.word	0x080151f0
 80098f0:	0801542c 	.word	0x0801542c

080098f4 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 80098f4:	b580      	push	{r7, lr}
 80098f6:	b084      	sub	sp, #16
 80098f8:	af00      	add	r7, sp, #0
 80098fa:	6078      	str	r0, [r7, #4]
 80098fc:	460b      	mov	r3, r1
 80098fe:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	2b00      	cmp	r3, #0
 8009904:	d107      	bne.n	8009916 <tcp_recved+0x22>
 8009906:	4b1f      	ldr	r3, [pc, #124]	; (8009984 <tcp_recved+0x90>)
 8009908:	f240 32cf 	movw	r2, #975	; 0x3cf
 800990c:	491e      	ldr	r1, [pc, #120]	; (8009988 <tcp_recved+0x94>)
 800990e:	481f      	ldr	r0, [pc, #124]	; (800998c <tcp_recved+0x98>)
 8009910:	f009 ff00 	bl	8013714 <iprintf>
 8009914:	e032      	b.n	800997c <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	7d1b      	ldrb	r3, [r3, #20]
 800991a:	2b01      	cmp	r3, #1
 800991c:	d106      	bne.n	800992c <tcp_recved+0x38>
 800991e:	4b19      	ldr	r3, [pc, #100]	; (8009984 <tcp_recved+0x90>)
 8009920:	f240 32d3 	movw	r2, #979	; 0x3d3
 8009924:	491a      	ldr	r1, [pc, #104]	; (8009990 <tcp_recved+0x9c>)
 8009926:	4819      	ldr	r0, [pc, #100]	; (800998c <tcp_recved+0x98>)
 8009928:	f009 fef4 	bl	8013714 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8009930:	887b      	ldrh	r3, [r7, #2]
 8009932:	4413      	add	r3, r2
 8009934:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 8009936:	89fb      	ldrh	r3, [r7, #14]
 8009938:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800993c:	d804      	bhi.n	8009948 <tcp_recved+0x54>
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009942:	89fa      	ldrh	r2, [r7, #14]
 8009944:	429a      	cmp	r2, r3
 8009946:	d204      	bcs.n	8009952 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800994e:	851a      	strh	r2, [r3, #40]	; 0x28
 8009950:	e002      	b.n	8009958 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	89fa      	ldrh	r2, [r7, #14]
 8009956:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8009958:	6878      	ldr	r0, [r7, #4]
 800995a:	f7ff ff71 	bl	8009840 <tcp_update_rcv_ann_wnd>
 800995e:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8009960:	68bb      	ldr	r3, [r7, #8]
 8009962:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8009966:	d309      	bcc.n	800997c <tcp_recved+0x88>
    tcp_ack_now(pcb);
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	8b5b      	ldrh	r3, [r3, #26]
 800996c:	f043 0302 	orr.w	r3, r3, #2
 8009970:	b29a      	uxth	r2, r3
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8009976:	6878      	ldr	r0, [r7, #4]
 8009978:	f003 fe38 	bl	800d5ec <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800997c:	3710      	adds	r7, #16
 800997e:	46bd      	mov	sp, r7
 8009980:	bd80      	pop	{r7, pc}
 8009982:	bf00      	nop
 8009984:	080151ac 	.word	0x080151ac
 8009988:	08015448 	.word	0x08015448
 800998c:	080151f0 	.word	0x080151f0
 8009990:	08015460 	.word	0x08015460

08009994 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8009994:	b5b0      	push	{r4, r5, r7, lr}
 8009996:	b090      	sub	sp, #64	; 0x40
 8009998:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800999a:	2300      	movs	r3, #0
 800999c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 80099a0:	4b94      	ldr	r3, [pc, #592]	; (8009bf4 <tcp_slowtmr+0x260>)
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	3301      	adds	r3, #1
 80099a6:	4a93      	ldr	r2, [pc, #588]	; (8009bf4 <tcp_slowtmr+0x260>)
 80099a8:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 80099aa:	4b93      	ldr	r3, [pc, #588]	; (8009bf8 <tcp_slowtmr+0x264>)
 80099ac:	781b      	ldrb	r3, [r3, #0]
 80099ae:	3301      	adds	r3, #1
 80099b0:	b2da      	uxtb	r2, r3
 80099b2:	4b91      	ldr	r3, [pc, #580]	; (8009bf8 <tcp_slowtmr+0x264>)
 80099b4:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 80099b6:	2300      	movs	r3, #0
 80099b8:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 80099ba:	4b90      	ldr	r3, [pc, #576]	; (8009bfc <tcp_slowtmr+0x268>)
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 80099c0:	e29f      	b.n	8009f02 <tcp_slowtmr+0x56e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 80099c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099c4:	7d1b      	ldrb	r3, [r3, #20]
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	d106      	bne.n	80099d8 <tcp_slowtmr+0x44>
 80099ca:	4b8d      	ldr	r3, [pc, #564]	; (8009c00 <tcp_slowtmr+0x26c>)
 80099cc:	f240 42be 	movw	r2, #1214	; 0x4be
 80099d0:	498c      	ldr	r1, [pc, #560]	; (8009c04 <tcp_slowtmr+0x270>)
 80099d2:	488d      	ldr	r0, [pc, #564]	; (8009c08 <tcp_slowtmr+0x274>)
 80099d4:	f009 fe9e 	bl	8013714 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 80099d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099da:	7d1b      	ldrb	r3, [r3, #20]
 80099dc:	2b01      	cmp	r3, #1
 80099de:	d106      	bne.n	80099ee <tcp_slowtmr+0x5a>
 80099e0:	4b87      	ldr	r3, [pc, #540]	; (8009c00 <tcp_slowtmr+0x26c>)
 80099e2:	f240 42bf 	movw	r2, #1215	; 0x4bf
 80099e6:	4989      	ldr	r1, [pc, #548]	; (8009c0c <tcp_slowtmr+0x278>)
 80099e8:	4887      	ldr	r0, [pc, #540]	; (8009c08 <tcp_slowtmr+0x274>)
 80099ea:	f009 fe93 	bl	8013714 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 80099ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099f0:	7d1b      	ldrb	r3, [r3, #20]
 80099f2:	2b0a      	cmp	r3, #10
 80099f4:	d106      	bne.n	8009a04 <tcp_slowtmr+0x70>
 80099f6:	4b82      	ldr	r3, [pc, #520]	; (8009c00 <tcp_slowtmr+0x26c>)
 80099f8:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 80099fc:	4984      	ldr	r1, [pc, #528]	; (8009c10 <tcp_slowtmr+0x27c>)
 80099fe:	4882      	ldr	r0, [pc, #520]	; (8009c08 <tcp_slowtmr+0x274>)
 8009a00:	f009 fe88 	bl	8013714 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8009a04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a06:	7f9a      	ldrb	r2, [r3, #30]
 8009a08:	4b7b      	ldr	r3, [pc, #492]	; (8009bf8 <tcp_slowtmr+0x264>)
 8009a0a:	781b      	ldrb	r3, [r3, #0]
 8009a0c:	429a      	cmp	r2, r3
 8009a0e:	d105      	bne.n	8009a1c <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 8009a10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a12:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8009a14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a16:	68db      	ldr	r3, [r3, #12]
 8009a18:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 8009a1a:	e272      	b.n	8009f02 <tcp_slowtmr+0x56e>
    }
    pcb->last_timer = tcp_timer_ctr;
 8009a1c:	4b76      	ldr	r3, [pc, #472]	; (8009bf8 <tcp_slowtmr+0x264>)
 8009a1e:	781a      	ldrb	r2, [r3, #0]
 8009a20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a22:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 8009a24:	2300      	movs	r3, #0
 8009a26:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 8009a2a:	2300      	movs	r3, #0
 8009a2c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8009a30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a32:	7d1b      	ldrb	r3, [r3, #20]
 8009a34:	2b02      	cmp	r3, #2
 8009a36:	d10a      	bne.n	8009a4e <tcp_slowtmr+0xba>
 8009a38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a3a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009a3e:	2b05      	cmp	r3, #5
 8009a40:	d905      	bls.n	8009a4e <tcp_slowtmr+0xba>
      ++pcb_remove;
 8009a42:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009a46:	3301      	adds	r3, #1
 8009a48:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009a4c:	e11e      	b.n	8009c8c <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 8009a4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a50:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009a54:	2b0b      	cmp	r3, #11
 8009a56:	d905      	bls.n	8009a64 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 8009a58:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009a5c:	3301      	adds	r3, #1
 8009a5e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009a62:	e113      	b.n	8009c8c <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 8009a64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a66:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	d075      	beq.n	8009b5a <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 8009a6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	d006      	beq.n	8009a84 <tcp_slowtmr+0xf0>
 8009a76:	4b62      	ldr	r3, [pc, #392]	; (8009c00 <tcp_slowtmr+0x26c>)
 8009a78:	f240 42d4 	movw	r2, #1236	; 0x4d4
 8009a7c:	4965      	ldr	r1, [pc, #404]	; (8009c14 <tcp_slowtmr+0x280>)
 8009a7e:	4862      	ldr	r0, [pc, #392]	; (8009c08 <tcp_slowtmr+0x274>)
 8009a80:	f009 fe48 	bl	8013714 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8009a84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a86:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	d106      	bne.n	8009a9a <tcp_slowtmr+0x106>
 8009a8c:	4b5c      	ldr	r3, [pc, #368]	; (8009c00 <tcp_slowtmr+0x26c>)
 8009a8e:	f240 42d5 	movw	r2, #1237	; 0x4d5
 8009a92:	4961      	ldr	r1, [pc, #388]	; (8009c18 <tcp_slowtmr+0x284>)
 8009a94:	485c      	ldr	r0, [pc, #368]	; (8009c08 <tcp_slowtmr+0x274>)
 8009a96:	f009 fe3d 	bl	8013714 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 8009a9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a9c:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8009aa0:	2b0b      	cmp	r3, #11
 8009aa2:	d905      	bls.n	8009ab0 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 8009aa4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009aa8:	3301      	adds	r3, #1
 8009aaa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009aae:	e0ed      	b.n	8009c8c <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 8009ab0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ab2:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8009ab6:	3b01      	subs	r3, #1
 8009ab8:	4a58      	ldr	r2, [pc, #352]	; (8009c1c <tcp_slowtmr+0x288>)
 8009aba:	5cd3      	ldrb	r3, [r2, r3]
 8009abc:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 8009abe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ac0:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8009ac4:	7c7a      	ldrb	r2, [r7, #17]
 8009ac6:	429a      	cmp	r2, r3
 8009ac8:	d907      	bls.n	8009ada <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 8009aca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009acc:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8009ad0:	3301      	adds	r3, #1
 8009ad2:	b2da      	uxtb	r2, r3
 8009ad4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ad6:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 8009ada:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009adc:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8009ae0:	7c7a      	ldrb	r2, [r7, #17]
 8009ae2:	429a      	cmp	r2, r3
 8009ae4:	f200 80d2 	bhi.w	8009c8c <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 8009ae8:	2301      	movs	r3, #1
 8009aea:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 8009aec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009aee:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	d108      	bne.n	8009b08 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 8009af6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009af8:	f004 fc30 	bl	800e35c <tcp_zero_window_probe>
 8009afc:	4603      	mov	r3, r0
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	d014      	beq.n	8009b2c <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 8009b02:	2300      	movs	r3, #0
 8009b04:	623b      	str	r3, [r7, #32]
 8009b06:	e011      	b.n	8009b2c <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8009b08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b0a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009b0e:	4619      	mov	r1, r3
 8009b10:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009b12:	f003 fae5 	bl	800d0e0 <tcp_split_unsent_seg>
 8009b16:	4603      	mov	r3, r0
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	d107      	bne.n	8009b2c <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 8009b1c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009b1e:	f003 fd65 	bl	800d5ec <tcp_output>
 8009b22:	4603      	mov	r3, r0
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	d101      	bne.n	8009b2c <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 8009b28:	2300      	movs	r3, #0
 8009b2a:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 8009b2c:	6a3b      	ldr	r3, [r7, #32]
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	f000 80ac 	beq.w	8009c8c <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 8009b34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b36:	2200      	movs	r2, #0
 8009b38:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8009b3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b3e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8009b42:	2b06      	cmp	r3, #6
 8009b44:	f200 80a2 	bhi.w	8009c8c <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 8009b48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b4a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8009b4e:	3301      	adds	r3, #1
 8009b50:	b2da      	uxtb	r2, r3
 8009b52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b54:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 8009b58:	e098      	b.n	8009c8c <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 8009b5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b5c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	db0f      	blt.n	8009b84 <tcp_slowtmr+0x1f0>
 8009b64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b66:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8009b6a:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8009b6e:	4293      	cmp	r3, r2
 8009b70:	d008      	beq.n	8009b84 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 8009b72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b74:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8009b78:	b29b      	uxth	r3, r3
 8009b7a:	3301      	adds	r3, #1
 8009b7c:	b29b      	uxth	r3, r3
 8009b7e:	b21a      	sxth	r2, r3
 8009b80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b82:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 8009b84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b86:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 8009b8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b8c:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8009b90:	429a      	cmp	r2, r3
 8009b92:	db7b      	blt.n	8009c8c <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8009b94:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009b96:	f004 f821 	bl	800dbdc <tcp_rexmit_rto_prepare>
 8009b9a:	4603      	mov	r3, r0
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	d007      	beq.n	8009bb0 <tcp_slowtmr+0x21c>
 8009ba0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ba2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	d171      	bne.n	8009c8c <tcp_slowtmr+0x2f8>
 8009ba8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009baa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	d06d      	beq.n	8009c8c <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 8009bb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bb2:	7d1b      	ldrb	r3, [r3, #20]
 8009bb4:	2b02      	cmp	r3, #2
 8009bb6:	d03a      	beq.n	8009c2e <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8009bb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bba:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009bbe:	2b0c      	cmp	r3, #12
 8009bc0:	bf28      	it	cs
 8009bc2:	230c      	movcs	r3, #12
 8009bc4:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8009bc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bc8:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8009bcc:	10db      	asrs	r3, r3, #3
 8009bce:	b21b      	sxth	r3, r3
 8009bd0:	461a      	mov	r2, r3
 8009bd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bd4:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8009bd8:	4413      	add	r3, r2
 8009bda:	7efa      	ldrb	r2, [r7, #27]
 8009bdc:	4910      	ldr	r1, [pc, #64]	; (8009c20 <tcp_slowtmr+0x28c>)
 8009bde:	5c8a      	ldrb	r2, [r1, r2]
 8009be0:	4093      	lsls	r3, r2
 8009be2:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8009be4:	697b      	ldr	r3, [r7, #20]
 8009be6:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8009bea:	4293      	cmp	r3, r2
 8009bec:	dc1a      	bgt.n	8009c24 <tcp_slowtmr+0x290>
 8009bee:	697b      	ldr	r3, [r7, #20]
 8009bf0:	b21a      	sxth	r2, r3
 8009bf2:	e019      	b.n	8009c28 <tcp_slowtmr+0x294>
 8009bf4:	2000eee8 	.word	0x2000eee8
 8009bf8:	2000849e 	.word	0x2000849e
 8009bfc:	2000eee4 	.word	0x2000eee4
 8009c00:	080151ac 	.word	0x080151ac
 8009c04:	080154f0 	.word	0x080154f0
 8009c08:	080151f0 	.word	0x080151f0
 8009c0c:	0801551c 	.word	0x0801551c
 8009c10:	08015548 	.word	0x08015548
 8009c14:	08015578 	.word	0x08015578
 8009c18:	080155ac 	.word	0x080155ac
 8009c1c:	08017558 	.word	0x08017558
 8009c20:	08017548 	.word	0x08017548
 8009c24:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8009c28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c2a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 8009c2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c30:	2200      	movs	r2, #0
 8009c32:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8009c34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c36:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8009c3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c3c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8009c40:	4293      	cmp	r3, r2
 8009c42:	bf28      	it	cs
 8009c44:	4613      	movcs	r3, r2
 8009c46:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 8009c48:	8a7b      	ldrh	r3, [r7, #18]
 8009c4a:	085b      	lsrs	r3, r3, #1
 8009c4c:	b29a      	uxth	r2, r3
 8009c4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c50:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8009c54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c56:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8009c5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c5c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009c5e:	005b      	lsls	r3, r3, #1
 8009c60:	b29b      	uxth	r3, r3
 8009c62:	429a      	cmp	r2, r3
 8009c64:	d206      	bcs.n	8009c74 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 8009c66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c68:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009c6a:	005b      	lsls	r3, r3, #1
 8009c6c:	b29a      	uxth	r2, r3
 8009c6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c70:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 8009c74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c76:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8009c78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c7a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 8009c7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c80:	2200      	movs	r2, #0
 8009c82:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 8009c86:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009c88:	f004 f818 	bl	800dcbc <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 8009c8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c8e:	7d1b      	ldrb	r3, [r3, #20]
 8009c90:	2b06      	cmp	r3, #6
 8009c92:	d111      	bne.n	8009cb8 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 8009c94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c96:	8b5b      	ldrh	r3, [r3, #26]
 8009c98:	f003 0310 	and.w	r3, r3, #16
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	d00b      	beq.n	8009cb8 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8009ca0:	4b9d      	ldr	r3, [pc, #628]	; (8009f18 <tcp_slowtmr+0x584>)
 8009ca2:	681a      	ldr	r2, [r3, #0]
 8009ca4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ca6:	6a1b      	ldr	r3, [r3, #32]
 8009ca8:	1ad3      	subs	r3, r2, r3
 8009caa:	2b28      	cmp	r3, #40	; 0x28
 8009cac:	d904      	bls.n	8009cb8 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 8009cae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009cb2:	3301      	adds	r3, #1
 8009cb4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8009cb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009cba:	7a5b      	ldrb	r3, [r3, #9]
 8009cbc:	f003 0308 	and.w	r3, r3, #8
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	d04c      	beq.n	8009d5e <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 8009cc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009cc6:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8009cc8:	2b04      	cmp	r3, #4
 8009cca:	d003      	beq.n	8009cd4 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 8009ccc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009cce:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 8009cd0:	2b07      	cmp	r3, #7
 8009cd2:	d144      	bne.n	8009d5e <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8009cd4:	4b90      	ldr	r3, [pc, #576]	; (8009f18 <tcp_slowtmr+0x584>)
 8009cd6:	681a      	ldr	r2, [r3, #0]
 8009cd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009cda:	6a1b      	ldr	r3, [r3, #32]
 8009cdc:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 8009cde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ce0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009ce4:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 8009ce8:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 8009cec:	498b      	ldr	r1, [pc, #556]	; (8009f1c <tcp_slowtmr+0x588>)
 8009cee:	fba1 1303 	umull	r1, r3, r1, r3
 8009cf2:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8009cf4:	429a      	cmp	r2, r3
 8009cf6:	d90a      	bls.n	8009d0e <tcp_slowtmr+0x37a>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 8009cf8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009cfc:	3301      	adds	r3, #1
 8009cfe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 8009d02:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009d06:	3301      	adds	r3, #1
 8009d08:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8009d0c:	e027      	b.n	8009d5e <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8009d0e:	4b82      	ldr	r3, [pc, #520]	; (8009f18 <tcp_slowtmr+0x584>)
 8009d10:	681a      	ldr	r2, [r3, #0]
 8009d12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d14:	6a1b      	ldr	r3, [r3, #32]
 8009d16:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8009d18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d1a:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8009d1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d20:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8009d24:	4618      	mov	r0, r3
 8009d26:	4b7e      	ldr	r3, [pc, #504]	; (8009f20 <tcp_slowtmr+0x58c>)
 8009d28:	fb03 f300 	mul.w	r3, r3, r0
 8009d2c:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 8009d2e:	497b      	ldr	r1, [pc, #492]	; (8009f1c <tcp_slowtmr+0x588>)
 8009d30:	fba1 1303 	umull	r1, r3, r1, r3
 8009d34:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8009d36:	429a      	cmp	r2, r3
 8009d38:	d911      	bls.n	8009d5e <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 8009d3a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009d3c:	f004 face 	bl	800e2dc <tcp_keepalive>
 8009d40:	4603      	mov	r3, r0
 8009d42:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 8009d46:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	d107      	bne.n	8009d5e <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 8009d4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d50:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8009d54:	3301      	adds	r3, #1
 8009d56:	b2da      	uxtb	r2, r3
 8009d58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d5a:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 8009d5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	d011      	beq.n	8009d8a <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 8009d66:	4b6c      	ldr	r3, [pc, #432]	; (8009f18 <tcp_slowtmr+0x584>)
 8009d68:	681a      	ldr	r2, [r3, #0]
 8009d6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d6c:	6a1b      	ldr	r3, [r3, #32]
 8009d6e:	1ad2      	subs	r2, r2, r3
 8009d70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d72:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8009d76:	4619      	mov	r1, r3
 8009d78:	460b      	mov	r3, r1
 8009d7a:	005b      	lsls	r3, r3, #1
 8009d7c:	440b      	add	r3, r1
 8009d7e:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8009d80:	429a      	cmp	r2, r3
 8009d82:	d302      	bcc.n	8009d8a <tcp_slowtmr+0x3f6>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 8009d84:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009d86:	f000 fdd7 	bl	800a938 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 8009d8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d8c:	7d1b      	ldrb	r3, [r3, #20]
 8009d8e:	2b03      	cmp	r3, #3
 8009d90:	d10b      	bne.n	8009daa <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8009d92:	4b61      	ldr	r3, [pc, #388]	; (8009f18 <tcp_slowtmr+0x584>)
 8009d94:	681a      	ldr	r2, [r3, #0]
 8009d96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d98:	6a1b      	ldr	r3, [r3, #32]
 8009d9a:	1ad3      	subs	r3, r2, r3
 8009d9c:	2b28      	cmp	r3, #40	; 0x28
 8009d9e:	d904      	bls.n	8009daa <tcp_slowtmr+0x416>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 8009da0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009da4:	3301      	adds	r3, #1
 8009da6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 8009daa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009dac:	7d1b      	ldrb	r3, [r3, #20]
 8009dae:	2b09      	cmp	r3, #9
 8009db0:	d10b      	bne.n	8009dca <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8009db2:	4b59      	ldr	r3, [pc, #356]	; (8009f18 <tcp_slowtmr+0x584>)
 8009db4:	681a      	ldr	r2, [r3, #0]
 8009db6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009db8:	6a1b      	ldr	r3, [r3, #32]
 8009dba:	1ad3      	subs	r3, r2, r3
 8009dbc:	2bf0      	cmp	r3, #240	; 0xf0
 8009dbe:	d904      	bls.n	8009dca <tcp_slowtmr+0x436>
        ++pcb_remove;
 8009dc0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009dc4:	3301      	adds	r3, #1
 8009dc6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8009dca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	d060      	beq.n	8009e94 <tcp_slowtmr+0x500>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 8009dd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009dd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009dd8:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 8009dda:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009ddc:	f000 fbf8 	bl	800a5d0 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 8009de0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	d010      	beq.n	8009e08 <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8009de6:	4b4f      	ldr	r3, [pc, #316]	; (8009f24 <tcp_slowtmr+0x590>)
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009dec:	429a      	cmp	r2, r3
 8009dee:	d106      	bne.n	8009dfe <tcp_slowtmr+0x46a>
 8009df0:	4b4d      	ldr	r3, [pc, #308]	; (8009f28 <tcp_slowtmr+0x594>)
 8009df2:	f240 526d 	movw	r2, #1389	; 0x56d
 8009df6:	494d      	ldr	r1, [pc, #308]	; (8009f2c <tcp_slowtmr+0x598>)
 8009df8:	484d      	ldr	r0, [pc, #308]	; (8009f30 <tcp_slowtmr+0x59c>)
 8009dfa:	f009 fc8b 	bl	8013714 <iprintf>
        prev->next = pcb->next;
 8009dfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e00:	68da      	ldr	r2, [r3, #12]
 8009e02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e04:	60da      	str	r2, [r3, #12]
 8009e06:	e00f      	b.n	8009e28 <tcp_slowtmr+0x494>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8009e08:	4b46      	ldr	r3, [pc, #280]	; (8009f24 <tcp_slowtmr+0x590>)
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009e0e:	429a      	cmp	r2, r3
 8009e10:	d006      	beq.n	8009e20 <tcp_slowtmr+0x48c>
 8009e12:	4b45      	ldr	r3, [pc, #276]	; (8009f28 <tcp_slowtmr+0x594>)
 8009e14:	f240 5271 	movw	r2, #1393	; 0x571
 8009e18:	4946      	ldr	r1, [pc, #280]	; (8009f34 <tcp_slowtmr+0x5a0>)
 8009e1a:	4845      	ldr	r0, [pc, #276]	; (8009f30 <tcp_slowtmr+0x59c>)
 8009e1c:	f009 fc7a 	bl	8013714 <iprintf>
        tcp_active_pcbs = pcb->next;
 8009e20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e22:	68db      	ldr	r3, [r3, #12]
 8009e24:	4a3f      	ldr	r2, [pc, #252]	; (8009f24 <tcp_slowtmr+0x590>)
 8009e26:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 8009e28:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	d013      	beq.n	8009e58 <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8009e30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e32:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8009e34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e36:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8009e38:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 8009e3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e3c:	3304      	adds	r3, #4
 8009e3e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009e40:	8ad2      	ldrh	r2, [r2, #22]
 8009e42:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009e44:	8b09      	ldrh	r1, [r1, #24]
 8009e46:	9102      	str	r1, [sp, #8]
 8009e48:	9201      	str	r2, [sp, #4]
 8009e4a:	9300      	str	r3, [sp, #0]
 8009e4c:	462b      	mov	r3, r5
 8009e4e:	4622      	mov	r2, r4
 8009e50:	4601      	mov	r1, r0
 8009e52:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009e54:	f004 f98e 	bl	800e174 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 8009e58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e5a:	691b      	ldr	r3, [r3, #16]
 8009e5c:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 8009e5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e60:	7d1b      	ldrb	r3, [r3, #20]
 8009e62:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8009e64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e66:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8009e68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e6a:	68db      	ldr	r3, [r3, #12]
 8009e6c:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8009e6e:	6838      	ldr	r0, [r7, #0]
 8009e70:	f7ff f9fa 	bl	8009268 <tcp_free>

      tcp_active_pcbs_changed = 0;
 8009e74:	4b30      	ldr	r3, [pc, #192]	; (8009f38 <tcp_slowtmr+0x5a4>)
 8009e76:	2200      	movs	r2, #0
 8009e78:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	d004      	beq.n	8009e8a <tcp_slowtmr+0x4f6>
 8009e80:	68fb      	ldr	r3, [r7, #12]
 8009e82:	f06f 010c 	mvn.w	r1, #12
 8009e86:	68b8      	ldr	r0, [r7, #8]
 8009e88:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 8009e8a:	4b2b      	ldr	r3, [pc, #172]	; (8009f38 <tcp_slowtmr+0x5a4>)
 8009e8c:	781b      	ldrb	r3, [r3, #0]
 8009e8e:	2b00      	cmp	r3, #0
 8009e90:	d037      	beq.n	8009f02 <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 8009e92:	e590      	b.n	80099b6 <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 8009e94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e96:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8009e98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e9a:	68db      	ldr	r3, [r3, #12]
 8009e9c:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 8009e9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ea0:	7f1b      	ldrb	r3, [r3, #28]
 8009ea2:	3301      	adds	r3, #1
 8009ea4:	b2da      	uxtb	r2, r3
 8009ea6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ea8:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 8009eaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009eac:	7f1a      	ldrb	r2, [r3, #28]
 8009eae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009eb0:	7f5b      	ldrb	r3, [r3, #29]
 8009eb2:	429a      	cmp	r2, r3
 8009eb4:	d325      	bcc.n	8009f02 <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 8009eb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009eb8:	2200      	movs	r2, #0
 8009eba:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 8009ebc:	4b1e      	ldr	r3, [pc, #120]	; (8009f38 <tcp_slowtmr+0x5a4>)
 8009ebe:	2200      	movs	r2, #0
 8009ec0:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 8009ec2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ec4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	d00b      	beq.n	8009ee4 <tcp_slowtmr+0x550>
 8009ecc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ece:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009ed2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009ed4:	6912      	ldr	r2, [r2, #16]
 8009ed6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009ed8:	4610      	mov	r0, r2
 8009eda:	4798      	blx	r3
 8009edc:	4603      	mov	r3, r0
 8009ede:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8009ee2:	e002      	b.n	8009eea <tcp_slowtmr+0x556>
 8009ee4:	2300      	movs	r3, #0
 8009ee6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 8009eea:	4b13      	ldr	r3, [pc, #76]	; (8009f38 <tcp_slowtmr+0x5a4>)
 8009eec:	781b      	ldrb	r3, [r3, #0]
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	d000      	beq.n	8009ef4 <tcp_slowtmr+0x560>
          goto tcp_slowtmr_start;
 8009ef2:	e560      	b.n	80099b6 <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8009ef4:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	d102      	bne.n	8009f02 <tcp_slowtmr+0x56e>
          tcp_output(prev);
 8009efc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009efe:	f003 fb75 	bl	800d5ec <tcp_output>
  while (pcb != NULL) {
 8009f02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	f47f ad5c 	bne.w	80099c2 <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 8009f0a:	2300      	movs	r3, #0
 8009f0c:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 8009f0e:	4b0b      	ldr	r3, [pc, #44]	; (8009f3c <tcp_slowtmr+0x5a8>)
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8009f14:	e067      	b.n	8009fe6 <tcp_slowtmr+0x652>
 8009f16:	bf00      	nop
 8009f18:	2000eee8 	.word	0x2000eee8
 8009f1c:	10624dd3 	.word	0x10624dd3
 8009f20:	000124f8 	.word	0x000124f8
 8009f24:	2000eee4 	.word	0x2000eee4
 8009f28:	080151ac 	.word	0x080151ac
 8009f2c:	080155e4 	.word	0x080155e4
 8009f30:	080151f0 	.word	0x080151f0
 8009f34:	08015610 	.word	0x08015610
 8009f38:	2000eee0 	.word	0x2000eee0
 8009f3c:	2000eef4 	.word	0x2000eef4
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8009f40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f42:	7d1b      	ldrb	r3, [r3, #20]
 8009f44:	2b0a      	cmp	r3, #10
 8009f46:	d006      	beq.n	8009f56 <tcp_slowtmr+0x5c2>
 8009f48:	4b2a      	ldr	r3, [pc, #168]	; (8009ff4 <tcp_slowtmr+0x660>)
 8009f4a:	f240 52a1 	movw	r2, #1441	; 0x5a1
 8009f4e:	492a      	ldr	r1, [pc, #168]	; (8009ff8 <tcp_slowtmr+0x664>)
 8009f50:	482a      	ldr	r0, [pc, #168]	; (8009ffc <tcp_slowtmr+0x668>)
 8009f52:	f009 fbdf 	bl	8013714 <iprintf>
    pcb_remove = 0;
 8009f56:	2300      	movs	r3, #0
 8009f58:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8009f5c:	4b28      	ldr	r3, [pc, #160]	; (800a000 <tcp_slowtmr+0x66c>)
 8009f5e:	681a      	ldr	r2, [r3, #0]
 8009f60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f62:	6a1b      	ldr	r3, [r3, #32]
 8009f64:	1ad3      	subs	r3, r2, r3
 8009f66:	2bf0      	cmp	r3, #240	; 0xf0
 8009f68:	d904      	bls.n	8009f74 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 8009f6a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009f6e:	3301      	adds	r3, #1
 8009f70:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8009f74:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	d02f      	beq.n	8009fdc <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8009f7c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009f7e:	f000 fb27 	bl	800a5d0 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 8009f82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	d010      	beq.n	8009faa <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8009f88:	4b1e      	ldr	r3, [pc, #120]	; (800a004 <tcp_slowtmr+0x670>)
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009f8e:	429a      	cmp	r2, r3
 8009f90:	d106      	bne.n	8009fa0 <tcp_slowtmr+0x60c>
 8009f92:	4b18      	ldr	r3, [pc, #96]	; (8009ff4 <tcp_slowtmr+0x660>)
 8009f94:	f240 52af 	movw	r2, #1455	; 0x5af
 8009f98:	491b      	ldr	r1, [pc, #108]	; (800a008 <tcp_slowtmr+0x674>)
 8009f9a:	4818      	ldr	r0, [pc, #96]	; (8009ffc <tcp_slowtmr+0x668>)
 8009f9c:	f009 fbba 	bl	8013714 <iprintf>
        prev->next = pcb->next;
 8009fa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009fa2:	68da      	ldr	r2, [r3, #12]
 8009fa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fa6:	60da      	str	r2, [r3, #12]
 8009fa8:	e00f      	b.n	8009fca <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8009faa:	4b16      	ldr	r3, [pc, #88]	; (800a004 <tcp_slowtmr+0x670>)
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009fb0:	429a      	cmp	r2, r3
 8009fb2:	d006      	beq.n	8009fc2 <tcp_slowtmr+0x62e>
 8009fb4:	4b0f      	ldr	r3, [pc, #60]	; (8009ff4 <tcp_slowtmr+0x660>)
 8009fb6:	f240 52b3 	movw	r2, #1459	; 0x5b3
 8009fba:	4914      	ldr	r1, [pc, #80]	; (800a00c <tcp_slowtmr+0x678>)
 8009fbc:	480f      	ldr	r0, [pc, #60]	; (8009ffc <tcp_slowtmr+0x668>)
 8009fbe:	f009 fba9 	bl	8013714 <iprintf>
        tcp_tw_pcbs = pcb->next;
 8009fc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009fc4:	68db      	ldr	r3, [r3, #12]
 8009fc6:	4a0f      	ldr	r2, [pc, #60]	; (800a004 <tcp_slowtmr+0x670>)
 8009fc8:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 8009fca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009fcc:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 8009fce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009fd0:	68db      	ldr	r3, [r3, #12]
 8009fd2:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8009fd4:	69f8      	ldr	r0, [r7, #28]
 8009fd6:	f7ff f947 	bl	8009268 <tcp_free>
 8009fda:	e004      	b.n	8009fe6 <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 8009fdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009fde:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8009fe0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009fe2:	68db      	ldr	r3, [r3, #12]
 8009fe4:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8009fe6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	d1a9      	bne.n	8009f40 <tcp_slowtmr+0x5ac>
    }
  }
}
 8009fec:	bf00      	nop
 8009fee:	3730      	adds	r7, #48	; 0x30
 8009ff0:	46bd      	mov	sp, r7
 8009ff2:	bdb0      	pop	{r4, r5, r7, pc}
 8009ff4:	080151ac 	.word	0x080151ac
 8009ff8:	0801563c 	.word	0x0801563c
 8009ffc:	080151f0 	.word	0x080151f0
 800a000:	2000eee8 	.word	0x2000eee8
 800a004:	2000eef4 	.word	0x2000eef4
 800a008:	0801566c 	.word	0x0801566c
 800a00c:	08015694 	.word	0x08015694

0800a010 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800a010:	b580      	push	{r7, lr}
 800a012:	b082      	sub	sp, #8
 800a014:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800a016:	4b2d      	ldr	r3, [pc, #180]	; (800a0cc <tcp_fasttmr+0xbc>)
 800a018:	781b      	ldrb	r3, [r3, #0]
 800a01a:	3301      	adds	r3, #1
 800a01c:	b2da      	uxtb	r2, r3
 800a01e:	4b2b      	ldr	r3, [pc, #172]	; (800a0cc <tcp_fasttmr+0xbc>)
 800a020:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800a022:	4b2b      	ldr	r3, [pc, #172]	; (800a0d0 <tcp_fasttmr+0xc0>)
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800a028:	e048      	b.n	800a0bc <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	7f9a      	ldrb	r2, [r3, #30]
 800a02e:	4b27      	ldr	r3, [pc, #156]	; (800a0cc <tcp_fasttmr+0xbc>)
 800a030:	781b      	ldrb	r3, [r3, #0]
 800a032:	429a      	cmp	r2, r3
 800a034:	d03f      	beq.n	800a0b6 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800a036:	4b25      	ldr	r3, [pc, #148]	; (800a0cc <tcp_fasttmr+0xbc>)
 800a038:	781a      	ldrb	r2, [r3, #0]
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	8b5b      	ldrh	r3, [r3, #26]
 800a042:	f003 0301 	and.w	r3, r3, #1
 800a046:	2b00      	cmp	r3, #0
 800a048:	d010      	beq.n	800a06c <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	8b5b      	ldrh	r3, [r3, #26]
 800a04e:	f043 0302 	orr.w	r3, r3, #2
 800a052:	b29a      	uxth	r2, r3
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800a058:	6878      	ldr	r0, [r7, #4]
 800a05a:	f003 fac7 	bl	800d5ec <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	8b5b      	ldrh	r3, [r3, #26]
 800a062:	f023 0303 	bic.w	r3, r3, #3
 800a066:	b29a      	uxth	r2, r3
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	8b5b      	ldrh	r3, [r3, #26]
 800a070:	f003 0308 	and.w	r3, r3, #8
 800a074:	2b00      	cmp	r3, #0
 800a076:	d009      	beq.n	800a08c <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	8b5b      	ldrh	r3, [r3, #26]
 800a07c:	f023 0308 	bic.w	r3, r3, #8
 800a080:	b29a      	uxth	r2, r3
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800a086:	6878      	ldr	r0, [r7, #4]
 800a088:	f7ff fa7e 	bl	8009588 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	68db      	ldr	r3, [r3, #12]
 800a090:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a096:	2b00      	cmp	r3, #0
 800a098:	d00a      	beq.n	800a0b0 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800a09a:	4b0e      	ldr	r3, [pc, #56]	; (800a0d4 <tcp_fasttmr+0xc4>)
 800a09c:	2200      	movs	r2, #0
 800a09e:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800a0a0:	6878      	ldr	r0, [r7, #4]
 800a0a2:	f000 f819 	bl	800a0d8 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800a0a6:	4b0b      	ldr	r3, [pc, #44]	; (800a0d4 <tcp_fasttmr+0xc4>)
 800a0a8:	781b      	ldrb	r3, [r3, #0]
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	d000      	beq.n	800a0b0 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800a0ae:	e7b8      	b.n	800a022 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800a0b0:	683b      	ldr	r3, [r7, #0]
 800a0b2:	607b      	str	r3, [r7, #4]
 800a0b4:	e002      	b.n	800a0bc <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	68db      	ldr	r3, [r3, #12]
 800a0ba:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	d1b3      	bne.n	800a02a <tcp_fasttmr+0x1a>
    }
  }
}
 800a0c2:	bf00      	nop
 800a0c4:	3708      	adds	r7, #8
 800a0c6:	46bd      	mov	sp, r7
 800a0c8:	bd80      	pop	{r7, pc}
 800a0ca:	bf00      	nop
 800a0cc:	2000849e 	.word	0x2000849e
 800a0d0:	2000eee4 	.word	0x2000eee4
 800a0d4:	2000eee0 	.word	0x2000eee0

0800a0d8 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800a0d8:	b590      	push	{r4, r7, lr}
 800a0da:	b085      	sub	sp, #20
 800a0dc:	af00      	add	r7, sp, #0
 800a0de:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	d109      	bne.n	800a0fa <tcp_process_refused_data+0x22>
 800a0e6:	4b37      	ldr	r3, [pc, #220]	; (800a1c4 <tcp_process_refused_data+0xec>)
 800a0e8:	f240 6209 	movw	r2, #1545	; 0x609
 800a0ec:	4936      	ldr	r1, [pc, #216]	; (800a1c8 <tcp_process_refused_data+0xf0>)
 800a0ee:	4837      	ldr	r0, [pc, #220]	; (800a1cc <tcp_process_refused_data+0xf4>)
 800a0f0:	f009 fb10 	bl	8013714 <iprintf>
 800a0f4:	f06f 030f 	mvn.w	r3, #15
 800a0f8:	e060      	b.n	800a1bc <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a0fe:	7b5b      	ldrb	r3, [r3, #13]
 800a100:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a106:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	2200      	movs	r2, #0
 800a10c:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a114:	2b00      	cmp	r3, #0
 800a116:	d00b      	beq.n	800a130 <tcp_process_refused_data+0x58>
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	6918      	ldr	r0, [r3, #16]
 800a122:	2300      	movs	r3, #0
 800a124:	68ba      	ldr	r2, [r7, #8]
 800a126:	6879      	ldr	r1, [r7, #4]
 800a128:	47a0      	blx	r4
 800a12a:	4603      	mov	r3, r0
 800a12c:	73fb      	strb	r3, [r7, #15]
 800a12e:	e007      	b.n	800a140 <tcp_process_refused_data+0x68>
 800a130:	2300      	movs	r3, #0
 800a132:	68ba      	ldr	r2, [r7, #8]
 800a134:	6879      	ldr	r1, [r7, #4]
 800a136:	2000      	movs	r0, #0
 800a138:	f000 f8a2 	bl	800a280 <tcp_recv_null>
 800a13c:	4603      	mov	r3, r0
 800a13e:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800a140:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a144:	2b00      	cmp	r3, #0
 800a146:	d12a      	bne.n	800a19e <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800a148:	7bbb      	ldrb	r3, [r7, #14]
 800a14a:	f003 0320 	and.w	r3, r3, #32
 800a14e:	2b00      	cmp	r3, #0
 800a150:	d033      	beq.n	800a1ba <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a156:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800a15a:	d005      	beq.n	800a168 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a160:	3301      	adds	r3, #1
 800a162:	b29a      	uxth	r2, r3
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a16e:	2b00      	cmp	r3, #0
 800a170:	d00b      	beq.n	800a18a <tcp_process_refused_data+0xb2>
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	6918      	ldr	r0, [r3, #16]
 800a17c:	2300      	movs	r3, #0
 800a17e:	2200      	movs	r2, #0
 800a180:	6879      	ldr	r1, [r7, #4]
 800a182:	47a0      	blx	r4
 800a184:	4603      	mov	r3, r0
 800a186:	73fb      	strb	r3, [r7, #15]
 800a188:	e001      	b.n	800a18e <tcp_process_refused_data+0xb6>
 800a18a:	2300      	movs	r3, #0
 800a18c:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800a18e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a192:	f113 0f0d 	cmn.w	r3, #13
 800a196:	d110      	bne.n	800a1ba <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800a198:	f06f 030c 	mvn.w	r3, #12
 800a19c:	e00e      	b.n	800a1bc <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800a19e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a1a2:	f113 0f0d 	cmn.w	r3, #13
 800a1a6:	d102      	bne.n	800a1ae <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800a1a8:	f06f 030c 	mvn.w	r3, #12
 800a1ac:	e006      	b.n	800a1bc <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	68ba      	ldr	r2, [r7, #8]
 800a1b2:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 800a1b4:	f06f 0304 	mvn.w	r3, #4
 800a1b8:	e000      	b.n	800a1bc <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800a1ba:	2300      	movs	r3, #0
}
 800a1bc:	4618      	mov	r0, r3
 800a1be:	3714      	adds	r7, #20
 800a1c0:	46bd      	mov	sp, r7
 800a1c2:	bd90      	pop	{r4, r7, pc}
 800a1c4:	080151ac 	.word	0x080151ac
 800a1c8:	080156bc 	.word	0x080156bc
 800a1cc:	080151f0 	.word	0x080151f0

0800a1d0 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800a1d0:	b580      	push	{r7, lr}
 800a1d2:	b084      	sub	sp, #16
 800a1d4:	af00      	add	r7, sp, #0
 800a1d6:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800a1d8:	e007      	b.n	800a1ea <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	681b      	ldr	r3, [r3, #0]
 800a1de:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800a1e0:	6878      	ldr	r0, [r7, #4]
 800a1e2:	f000 f809 	bl	800a1f8 <tcp_seg_free>
    seg = next;
 800a1e6:	68fb      	ldr	r3, [r7, #12]
 800a1e8:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	d1f4      	bne.n	800a1da <tcp_segs_free+0xa>
  }
}
 800a1f0:	bf00      	nop
 800a1f2:	3710      	adds	r7, #16
 800a1f4:	46bd      	mov	sp, r7
 800a1f6:	bd80      	pop	{r7, pc}

0800a1f8 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800a1f8:	b580      	push	{r7, lr}
 800a1fa:	b082      	sub	sp, #8
 800a1fc:	af00      	add	r7, sp, #0
 800a1fe:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	2b00      	cmp	r3, #0
 800a204:	d00c      	beq.n	800a220 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	685b      	ldr	r3, [r3, #4]
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	d004      	beq.n	800a218 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	685b      	ldr	r3, [r3, #4]
 800a212:	4618      	mov	r0, r3
 800a214:	f7fe fd6c 	bl	8008cf0 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800a218:	6879      	ldr	r1, [r7, #4]
 800a21a:	2003      	movs	r0, #3
 800a21c:	f7fd febc 	bl	8007f98 <memp_free>
  }
}
 800a220:	bf00      	nop
 800a222:	3708      	adds	r7, #8
 800a224:	46bd      	mov	sp, r7
 800a226:	bd80      	pop	{r7, pc}

0800a228 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800a228:	b580      	push	{r7, lr}
 800a22a:	b084      	sub	sp, #16
 800a22c:	af00      	add	r7, sp, #0
 800a22e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	2b00      	cmp	r3, #0
 800a234:	d106      	bne.n	800a244 <tcp_seg_copy+0x1c>
 800a236:	4b0f      	ldr	r3, [pc, #60]	; (800a274 <tcp_seg_copy+0x4c>)
 800a238:	f240 6282 	movw	r2, #1666	; 0x682
 800a23c:	490e      	ldr	r1, [pc, #56]	; (800a278 <tcp_seg_copy+0x50>)
 800a23e:	480f      	ldr	r0, [pc, #60]	; (800a27c <tcp_seg_copy+0x54>)
 800a240:	f009 fa68 	bl	8013714 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800a244:	2003      	movs	r0, #3
 800a246:	f7fd fe55 	bl	8007ef4 <memp_malloc>
 800a24a:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800a24c:	68fb      	ldr	r3, [r7, #12]
 800a24e:	2b00      	cmp	r3, #0
 800a250:	d101      	bne.n	800a256 <tcp_seg_copy+0x2e>
    return NULL;
 800a252:	2300      	movs	r3, #0
 800a254:	e00a      	b.n	800a26c <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800a256:	2210      	movs	r2, #16
 800a258:	6879      	ldr	r1, [r7, #4]
 800a25a:	68f8      	ldr	r0, [r7, #12]
 800a25c:	f009 fa47 	bl	80136ee <memcpy>
  pbuf_ref(cseg->p);
 800a260:	68fb      	ldr	r3, [r7, #12]
 800a262:	685b      	ldr	r3, [r3, #4]
 800a264:	4618      	mov	r0, r3
 800a266:	f7fe fde9 	bl	8008e3c <pbuf_ref>
  return cseg;
 800a26a:	68fb      	ldr	r3, [r7, #12]
}
 800a26c:	4618      	mov	r0, r3
 800a26e:	3710      	adds	r7, #16
 800a270:	46bd      	mov	sp, r7
 800a272:	bd80      	pop	{r7, pc}
 800a274:	080151ac 	.word	0x080151ac
 800a278:	08015700 	.word	0x08015700
 800a27c:	080151f0 	.word	0x080151f0

0800a280 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800a280:	b580      	push	{r7, lr}
 800a282:	b084      	sub	sp, #16
 800a284:	af00      	add	r7, sp, #0
 800a286:	60f8      	str	r0, [r7, #12]
 800a288:	60b9      	str	r1, [r7, #8]
 800a28a:	607a      	str	r2, [r7, #4]
 800a28c:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800a28e:	68bb      	ldr	r3, [r7, #8]
 800a290:	2b00      	cmp	r3, #0
 800a292:	d109      	bne.n	800a2a8 <tcp_recv_null+0x28>
 800a294:	4b12      	ldr	r3, [pc, #72]	; (800a2e0 <tcp_recv_null+0x60>)
 800a296:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800a29a:	4912      	ldr	r1, [pc, #72]	; (800a2e4 <tcp_recv_null+0x64>)
 800a29c:	4812      	ldr	r0, [pc, #72]	; (800a2e8 <tcp_recv_null+0x68>)
 800a29e:	f009 fa39 	bl	8013714 <iprintf>
 800a2a2:	f06f 030f 	mvn.w	r3, #15
 800a2a6:	e016      	b.n	800a2d6 <tcp_recv_null+0x56>

  if (p != NULL) {
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	d009      	beq.n	800a2c2 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	891b      	ldrh	r3, [r3, #8]
 800a2b2:	4619      	mov	r1, r3
 800a2b4:	68b8      	ldr	r0, [r7, #8]
 800a2b6:	f7ff fb1d 	bl	80098f4 <tcp_recved>
    pbuf_free(p);
 800a2ba:	6878      	ldr	r0, [r7, #4]
 800a2bc:	f7fe fd18 	bl	8008cf0 <pbuf_free>
 800a2c0:	e008      	b.n	800a2d4 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800a2c2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	d104      	bne.n	800a2d4 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800a2ca:	68b8      	ldr	r0, [r7, #8]
 800a2cc:	f7ff f9c2 	bl	8009654 <tcp_close>
 800a2d0:	4603      	mov	r3, r0
 800a2d2:	e000      	b.n	800a2d6 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800a2d4:	2300      	movs	r3, #0
}
 800a2d6:	4618      	mov	r0, r3
 800a2d8:	3710      	adds	r7, #16
 800a2da:	46bd      	mov	sp, r7
 800a2dc:	bd80      	pop	{r7, pc}
 800a2de:	bf00      	nop
 800a2e0:	080151ac 	.word	0x080151ac
 800a2e4:	0801571c 	.word	0x0801571c
 800a2e8:	080151f0 	.word	0x080151f0

0800a2ec <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800a2ec:	b580      	push	{r7, lr}
 800a2ee:	b086      	sub	sp, #24
 800a2f0:	af00      	add	r7, sp, #0
 800a2f2:	4603      	mov	r3, r0
 800a2f4:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800a2f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	db01      	blt.n	800a302 <tcp_kill_prio+0x16>
 800a2fe:	79fb      	ldrb	r3, [r7, #7]
 800a300:	e000      	b.n	800a304 <tcp_kill_prio+0x18>
 800a302:	237f      	movs	r3, #127	; 0x7f
 800a304:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800a306:	7afb      	ldrb	r3, [r7, #11]
 800a308:	2b00      	cmp	r3, #0
 800a30a:	d034      	beq.n	800a376 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800a30c:	7afb      	ldrb	r3, [r7, #11]
 800a30e:	3b01      	subs	r3, #1
 800a310:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800a312:	2300      	movs	r3, #0
 800a314:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800a316:	2300      	movs	r3, #0
 800a318:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800a31a:	4b19      	ldr	r3, [pc, #100]	; (800a380 <tcp_kill_prio+0x94>)
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	617b      	str	r3, [r7, #20]
 800a320:	e01f      	b.n	800a362 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800a322:	697b      	ldr	r3, [r7, #20]
 800a324:	7d5b      	ldrb	r3, [r3, #21]
 800a326:	7afa      	ldrb	r2, [r7, #11]
 800a328:	429a      	cmp	r2, r3
 800a32a:	d80c      	bhi.n	800a346 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800a32c:	697b      	ldr	r3, [r7, #20]
 800a32e:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800a330:	7afa      	ldrb	r2, [r7, #11]
 800a332:	429a      	cmp	r2, r3
 800a334:	d112      	bne.n	800a35c <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800a336:	4b13      	ldr	r3, [pc, #76]	; (800a384 <tcp_kill_prio+0x98>)
 800a338:	681a      	ldr	r2, [r3, #0]
 800a33a:	697b      	ldr	r3, [r7, #20]
 800a33c:	6a1b      	ldr	r3, [r3, #32]
 800a33e:	1ad3      	subs	r3, r2, r3
 800a340:	68fa      	ldr	r2, [r7, #12]
 800a342:	429a      	cmp	r2, r3
 800a344:	d80a      	bhi.n	800a35c <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800a346:	4b0f      	ldr	r3, [pc, #60]	; (800a384 <tcp_kill_prio+0x98>)
 800a348:	681a      	ldr	r2, [r3, #0]
 800a34a:	697b      	ldr	r3, [r7, #20]
 800a34c:	6a1b      	ldr	r3, [r3, #32]
 800a34e:	1ad3      	subs	r3, r2, r3
 800a350:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800a352:	697b      	ldr	r3, [r7, #20]
 800a354:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800a356:	697b      	ldr	r3, [r7, #20]
 800a358:	7d5b      	ldrb	r3, [r3, #21]
 800a35a:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800a35c:	697b      	ldr	r3, [r7, #20]
 800a35e:	68db      	ldr	r3, [r3, #12]
 800a360:	617b      	str	r3, [r7, #20]
 800a362:	697b      	ldr	r3, [r7, #20]
 800a364:	2b00      	cmp	r3, #0
 800a366:	d1dc      	bne.n	800a322 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800a368:	693b      	ldr	r3, [r7, #16]
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	d004      	beq.n	800a378 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800a36e:	6938      	ldr	r0, [r7, #16]
 800a370:	f7ff fa5a 	bl	8009828 <tcp_abort>
 800a374:	e000      	b.n	800a378 <tcp_kill_prio+0x8c>
    return;
 800a376:	bf00      	nop
  }
}
 800a378:	3718      	adds	r7, #24
 800a37a:	46bd      	mov	sp, r7
 800a37c:	bd80      	pop	{r7, pc}
 800a37e:	bf00      	nop
 800a380:	2000eee4 	.word	0x2000eee4
 800a384:	2000eee8 	.word	0x2000eee8

0800a388 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800a388:	b580      	push	{r7, lr}
 800a38a:	b086      	sub	sp, #24
 800a38c:	af00      	add	r7, sp, #0
 800a38e:	4603      	mov	r3, r0
 800a390:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800a392:	79fb      	ldrb	r3, [r7, #7]
 800a394:	2b08      	cmp	r3, #8
 800a396:	d009      	beq.n	800a3ac <tcp_kill_state+0x24>
 800a398:	79fb      	ldrb	r3, [r7, #7]
 800a39a:	2b09      	cmp	r3, #9
 800a39c:	d006      	beq.n	800a3ac <tcp_kill_state+0x24>
 800a39e:	4b1a      	ldr	r3, [pc, #104]	; (800a408 <tcp_kill_state+0x80>)
 800a3a0:	f240 62dd 	movw	r2, #1757	; 0x6dd
 800a3a4:	4919      	ldr	r1, [pc, #100]	; (800a40c <tcp_kill_state+0x84>)
 800a3a6:	481a      	ldr	r0, [pc, #104]	; (800a410 <tcp_kill_state+0x88>)
 800a3a8:	f009 f9b4 	bl	8013714 <iprintf>

  inactivity = 0;
 800a3ac:	2300      	movs	r3, #0
 800a3ae:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800a3b0:	2300      	movs	r3, #0
 800a3b2:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800a3b4:	4b17      	ldr	r3, [pc, #92]	; (800a414 <tcp_kill_state+0x8c>)
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	617b      	str	r3, [r7, #20]
 800a3ba:	e017      	b.n	800a3ec <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800a3bc:	697b      	ldr	r3, [r7, #20]
 800a3be:	7d1b      	ldrb	r3, [r3, #20]
 800a3c0:	79fa      	ldrb	r2, [r7, #7]
 800a3c2:	429a      	cmp	r2, r3
 800a3c4:	d10f      	bne.n	800a3e6 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800a3c6:	4b14      	ldr	r3, [pc, #80]	; (800a418 <tcp_kill_state+0x90>)
 800a3c8:	681a      	ldr	r2, [r3, #0]
 800a3ca:	697b      	ldr	r3, [r7, #20]
 800a3cc:	6a1b      	ldr	r3, [r3, #32]
 800a3ce:	1ad3      	subs	r3, r2, r3
 800a3d0:	68fa      	ldr	r2, [r7, #12]
 800a3d2:	429a      	cmp	r2, r3
 800a3d4:	d807      	bhi.n	800a3e6 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800a3d6:	4b10      	ldr	r3, [pc, #64]	; (800a418 <tcp_kill_state+0x90>)
 800a3d8:	681a      	ldr	r2, [r3, #0]
 800a3da:	697b      	ldr	r3, [r7, #20]
 800a3dc:	6a1b      	ldr	r3, [r3, #32]
 800a3de:	1ad3      	subs	r3, r2, r3
 800a3e0:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800a3e2:	697b      	ldr	r3, [r7, #20]
 800a3e4:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800a3e6:	697b      	ldr	r3, [r7, #20]
 800a3e8:	68db      	ldr	r3, [r3, #12]
 800a3ea:	617b      	str	r3, [r7, #20]
 800a3ec:	697b      	ldr	r3, [r7, #20]
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	d1e4      	bne.n	800a3bc <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800a3f2:	693b      	ldr	r3, [r7, #16]
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	d003      	beq.n	800a400 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800a3f8:	2100      	movs	r1, #0
 800a3fa:	6938      	ldr	r0, [r7, #16]
 800a3fc:	f7ff f956 	bl	80096ac <tcp_abandon>
  }
}
 800a400:	bf00      	nop
 800a402:	3718      	adds	r7, #24
 800a404:	46bd      	mov	sp, r7
 800a406:	bd80      	pop	{r7, pc}
 800a408:	080151ac 	.word	0x080151ac
 800a40c:	08015738 	.word	0x08015738
 800a410:	080151f0 	.word	0x080151f0
 800a414:	2000eee4 	.word	0x2000eee4
 800a418:	2000eee8 	.word	0x2000eee8

0800a41c <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800a41c:	b580      	push	{r7, lr}
 800a41e:	b084      	sub	sp, #16
 800a420:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800a422:	2300      	movs	r3, #0
 800a424:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800a426:	2300      	movs	r3, #0
 800a428:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800a42a:	4b12      	ldr	r3, [pc, #72]	; (800a474 <tcp_kill_timewait+0x58>)
 800a42c:	681b      	ldr	r3, [r3, #0]
 800a42e:	60fb      	str	r3, [r7, #12]
 800a430:	e012      	b.n	800a458 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800a432:	4b11      	ldr	r3, [pc, #68]	; (800a478 <tcp_kill_timewait+0x5c>)
 800a434:	681a      	ldr	r2, [r3, #0]
 800a436:	68fb      	ldr	r3, [r7, #12]
 800a438:	6a1b      	ldr	r3, [r3, #32]
 800a43a:	1ad3      	subs	r3, r2, r3
 800a43c:	687a      	ldr	r2, [r7, #4]
 800a43e:	429a      	cmp	r2, r3
 800a440:	d807      	bhi.n	800a452 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800a442:	4b0d      	ldr	r3, [pc, #52]	; (800a478 <tcp_kill_timewait+0x5c>)
 800a444:	681a      	ldr	r2, [r3, #0]
 800a446:	68fb      	ldr	r3, [r7, #12]
 800a448:	6a1b      	ldr	r3, [r3, #32]
 800a44a:	1ad3      	subs	r3, r2, r3
 800a44c:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800a44e:	68fb      	ldr	r3, [r7, #12]
 800a450:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800a452:	68fb      	ldr	r3, [r7, #12]
 800a454:	68db      	ldr	r3, [r3, #12]
 800a456:	60fb      	str	r3, [r7, #12]
 800a458:	68fb      	ldr	r3, [r7, #12]
 800a45a:	2b00      	cmp	r3, #0
 800a45c:	d1e9      	bne.n	800a432 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800a45e:	68bb      	ldr	r3, [r7, #8]
 800a460:	2b00      	cmp	r3, #0
 800a462:	d002      	beq.n	800a46a <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800a464:	68b8      	ldr	r0, [r7, #8]
 800a466:	f7ff f9df 	bl	8009828 <tcp_abort>
  }
}
 800a46a:	bf00      	nop
 800a46c:	3710      	adds	r7, #16
 800a46e:	46bd      	mov	sp, r7
 800a470:	bd80      	pop	{r7, pc}
 800a472:	bf00      	nop
 800a474:	2000eef4 	.word	0x2000eef4
 800a478:	2000eee8 	.word	0x2000eee8

0800a47c <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800a47c:	b580      	push	{r7, lr}
 800a47e:	b082      	sub	sp, #8
 800a480:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800a482:	4b10      	ldr	r3, [pc, #64]	; (800a4c4 <tcp_handle_closepend+0x48>)
 800a484:	681b      	ldr	r3, [r3, #0]
 800a486:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800a488:	e014      	b.n	800a4b4 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	68db      	ldr	r3, [r3, #12]
 800a48e:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	8b5b      	ldrh	r3, [r3, #26]
 800a494:	f003 0308 	and.w	r3, r3, #8
 800a498:	2b00      	cmp	r3, #0
 800a49a:	d009      	beq.n	800a4b0 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	8b5b      	ldrh	r3, [r3, #26]
 800a4a0:	f023 0308 	bic.w	r3, r3, #8
 800a4a4:	b29a      	uxth	r2, r3
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800a4aa:	6878      	ldr	r0, [r7, #4]
 800a4ac:	f7ff f86c 	bl	8009588 <tcp_close_shutdown_fin>
    }
    pcb = next;
 800a4b0:	683b      	ldr	r3, [r7, #0]
 800a4b2:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	2b00      	cmp	r3, #0
 800a4b8:	d1e7      	bne.n	800a48a <tcp_handle_closepend+0xe>
  }
}
 800a4ba:	bf00      	nop
 800a4bc:	3708      	adds	r7, #8
 800a4be:	46bd      	mov	sp, r7
 800a4c0:	bd80      	pop	{r7, pc}
 800a4c2:	bf00      	nop
 800a4c4:	2000eee4 	.word	0x2000eee4

0800a4c8 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800a4c8:	b580      	push	{r7, lr}
 800a4ca:	b084      	sub	sp, #16
 800a4cc:	af00      	add	r7, sp, #0
 800a4ce:	4603      	mov	r3, r0
 800a4d0:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800a4d2:	2001      	movs	r0, #1
 800a4d4:	f7fd fd0e 	bl	8007ef4 <memp_malloc>
 800a4d8:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800a4da:	68fb      	ldr	r3, [r7, #12]
 800a4dc:	2b00      	cmp	r3, #0
 800a4de:	d126      	bne.n	800a52e <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800a4e0:	f7ff ffcc 	bl	800a47c <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800a4e4:	f7ff ff9a 	bl	800a41c <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800a4e8:	2001      	movs	r0, #1
 800a4ea:	f7fd fd03 	bl	8007ef4 <memp_malloc>
 800a4ee:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800a4f0:	68fb      	ldr	r3, [r7, #12]
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	d11b      	bne.n	800a52e <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800a4f6:	2009      	movs	r0, #9
 800a4f8:	f7ff ff46 	bl	800a388 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800a4fc:	2001      	movs	r0, #1
 800a4fe:	f7fd fcf9 	bl	8007ef4 <memp_malloc>
 800a502:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800a504:	68fb      	ldr	r3, [r7, #12]
 800a506:	2b00      	cmp	r3, #0
 800a508:	d111      	bne.n	800a52e <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800a50a:	2008      	movs	r0, #8
 800a50c:	f7ff ff3c 	bl	800a388 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800a510:	2001      	movs	r0, #1
 800a512:	f7fd fcef 	bl	8007ef4 <memp_malloc>
 800a516:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800a518:	68fb      	ldr	r3, [r7, #12]
 800a51a:	2b00      	cmp	r3, #0
 800a51c:	d107      	bne.n	800a52e <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800a51e:	79fb      	ldrb	r3, [r7, #7]
 800a520:	4618      	mov	r0, r3
 800a522:	f7ff fee3 	bl	800a2ec <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800a526:	2001      	movs	r0, #1
 800a528:	f7fd fce4 	bl	8007ef4 <memp_malloc>
 800a52c:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800a52e:	68fb      	ldr	r3, [r7, #12]
 800a530:	2b00      	cmp	r3, #0
 800a532:	d03f      	beq.n	800a5b4 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800a534:	229c      	movs	r2, #156	; 0x9c
 800a536:	2100      	movs	r1, #0
 800a538:	68f8      	ldr	r0, [r7, #12]
 800a53a:	f009 f8e3 	bl	8013704 <memset>
    pcb->prio = prio;
 800a53e:	68fb      	ldr	r3, [r7, #12]
 800a540:	79fa      	ldrb	r2, [r7, #7]
 800a542:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800a54a:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800a54e:	68fb      	ldr	r3, [r7, #12]
 800a550:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800a554:	855a      	strh	r2, [r3, #42]	; 0x2a
 800a556:	68fb      	ldr	r3, [r7, #12]
 800a558:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800a55a:	68fb      	ldr	r3, [r7, #12]
 800a55c:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800a55e:	68fb      	ldr	r3, [r7, #12]
 800a560:	22ff      	movs	r2, #255	; 0xff
 800a562:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800a564:	68fb      	ldr	r3, [r7, #12]
 800a566:	f44f 7206 	mov.w	r2, #536	; 0x218
 800a56a:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800a56c:	68fb      	ldr	r3, [r7, #12]
 800a56e:	2206      	movs	r2, #6
 800a570:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800a574:	68fb      	ldr	r3, [r7, #12]
 800a576:	2206      	movs	r2, #6
 800a578:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800a57a:	68fb      	ldr	r3, [r7, #12]
 800a57c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a580:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800a582:	68fb      	ldr	r3, [r7, #12]
 800a584:	2201      	movs	r2, #1
 800a586:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800a58a:	4b0d      	ldr	r3, [pc, #52]	; (800a5c0 <tcp_alloc+0xf8>)
 800a58c:	681a      	ldr	r2, [r3, #0]
 800a58e:	68fb      	ldr	r3, [r7, #12]
 800a590:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800a592:	4b0c      	ldr	r3, [pc, #48]	; (800a5c4 <tcp_alloc+0xfc>)
 800a594:	781a      	ldrb	r2, [r3, #0]
 800a596:	68fb      	ldr	r3, [r7, #12]
 800a598:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800a59a:	68fb      	ldr	r3, [r7, #12]
 800a59c:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800a5a0:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800a5a4:	68fb      	ldr	r3, [r7, #12]
 800a5a6:	4a08      	ldr	r2, [pc, #32]	; (800a5c8 <tcp_alloc+0x100>)
 800a5a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800a5ac:	68fb      	ldr	r3, [r7, #12]
 800a5ae:	4a07      	ldr	r2, [pc, #28]	; (800a5cc <tcp_alloc+0x104>)
 800a5b0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800a5b4:	68fb      	ldr	r3, [r7, #12]
}
 800a5b6:	4618      	mov	r0, r3
 800a5b8:	3710      	adds	r7, #16
 800a5ba:	46bd      	mov	sp, r7
 800a5bc:	bd80      	pop	{r7, pc}
 800a5be:	bf00      	nop
 800a5c0:	2000eee8 	.word	0x2000eee8
 800a5c4:	2000849e 	.word	0x2000849e
 800a5c8:	0800a281 	.word	0x0800a281
 800a5cc:	006ddd00 	.word	0x006ddd00

0800a5d0 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800a5d0:	b580      	push	{r7, lr}
 800a5d2:	b082      	sub	sp, #8
 800a5d4:	af00      	add	r7, sp, #0
 800a5d6:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	2b00      	cmp	r3, #0
 800a5dc:	d107      	bne.n	800a5ee <tcp_pcb_purge+0x1e>
 800a5de:	4b21      	ldr	r3, [pc, #132]	; (800a664 <tcp_pcb_purge+0x94>)
 800a5e0:	f640 0251 	movw	r2, #2129	; 0x851
 800a5e4:	4920      	ldr	r1, [pc, #128]	; (800a668 <tcp_pcb_purge+0x98>)
 800a5e6:	4821      	ldr	r0, [pc, #132]	; (800a66c <tcp_pcb_purge+0x9c>)
 800a5e8:	f009 f894 	bl	8013714 <iprintf>
 800a5ec:	e037      	b.n	800a65e <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	7d1b      	ldrb	r3, [r3, #20]
 800a5f2:	2b00      	cmp	r3, #0
 800a5f4:	d033      	beq.n	800a65e <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800a5fa:	2b0a      	cmp	r3, #10
 800a5fc:	d02f      	beq.n	800a65e <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800a602:	2b01      	cmp	r3, #1
 800a604:	d02b      	beq.n	800a65e <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a60a:	2b00      	cmp	r3, #0
 800a60c:	d007      	beq.n	800a61e <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a612:	4618      	mov	r0, r3
 800a614:	f7fe fb6c 	bl	8008cf0 <pbuf_free>
      pcb->refused_data = NULL;
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	2200      	movs	r2, #0
 800a61c:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a622:	2b00      	cmp	r3, #0
 800a624:	d002      	beq.n	800a62c <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800a626:	6878      	ldr	r0, [r7, #4]
 800a628:	f000 f986 	bl	800a938 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a632:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a638:	4618      	mov	r0, r3
 800a63a:	f7ff fdc9 	bl	800a1d0 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a642:	4618      	mov	r0, r3
 800a644:	f7ff fdc4 	bl	800a1d0 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	2200      	movs	r2, #0
 800a64c:	66da      	str	r2, [r3, #108]	; 0x6c
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	2200      	movs	r2, #0
 800a65a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800a65e:	3708      	adds	r7, #8
 800a660:	46bd      	mov	sp, r7
 800a662:	bd80      	pop	{r7, pc}
 800a664:	080151ac 	.word	0x080151ac
 800a668:	080157f8 	.word	0x080157f8
 800a66c:	080151f0 	.word	0x080151f0

0800a670 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800a670:	b580      	push	{r7, lr}
 800a672:	b084      	sub	sp, #16
 800a674:	af00      	add	r7, sp, #0
 800a676:	6078      	str	r0, [r7, #4]
 800a678:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800a67a:	683b      	ldr	r3, [r7, #0]
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	d106      	bne.n	800a68e <tcp_pcb_remove+0x1e>
 800a680:	4b3e      	ldr	r3, [pc, #248]	; (800a77c <tcp_pcb_remove+0x10c>)
 800a682:	f640 0283 	movw	r2, #2179	; 0x883
 800a686:	493e      	ldr	r1, [pc, #248]	; (800a780 <tcp_pcb_remove+0x110>)
 800a688:	483e      	ldr	r0, [pc, #248]	; (800a784 <tcp_pcb_remove+0x114>)
 800a68a:	f009 f843 	bl	8013714 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	2b00      	cmp	r3, #0
 800a692:	d106      	bne.n	800a6a2 <tcp_pcb_remove+0x32>
 800a694:	4b39      	ldr	r3, [pc, #228]	; (800a77c <tcp_pcb_remove+0x10c>)
 800a696:	f640 0284 	movw	r2, #2180	; 0x884
 800a69a:	493b      	ldr	r1, [pc, #236]	; (800a788 <tcp_pcb_remove+0x118>)
 800a69c:	4839      	ldr	r0, [pc, #228]	; (800a784 <tcp_pcb_remove+0x114>)
 800a69e:	f009 f839 	bl	8013714 <iprintf>

  TCP_RMV(pcblist, pcb);
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	681b      	ldr	r3, [r3, #0]
 800a6a6:	683a      	ldr	r2, [r7, #0]
 800a6a8:	429a      	cmp	r2, r3
 800a6aa:	d105      	bne.n	800a6b8 <tcp_pcb_remove+0x48>
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	68da      	ldr	r2, [r3, #12]
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	601a      	str	r2, [r3, #0]
 800a6b6:	e013      	b.n	800a6e0 <tcp_pcb_remove+0x70>
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	60fb      	str	r3, [r7, #12]
 800a6be:	e00c      	b.n	800a6da <tcp_pcb_remove+0x6a>
 800a6c0:	68fb      	ldr	r3, [r7, #12]
 800a6c2:	68db      	ldr	r3, [r3, #12]
 800a6c4:	683a      	ldr	r2, [r7, #0]
 800a6c6:	429a      	cmp	r2, r3
 800a6c8:	d104      	bne.n	800a6d4 <tcp_pcb_remove+0x64>
 800a6ca:	683b      	ldr	r3, [r7, #0]
 800a6cc:	68da      	ldr	r2, [r3, #12]
 800a6ce:	68fb      	ldr	r3, [r7, #12]
 800a6d0:	60da      	str	r2, [r3, #12]
 800a6d2:	e005      	b.n	800a6e0 <tcp_pcb_remove+0x70>
 800a6d4:	68fb      	ldr	r3, [r7, #12]
 800a6d6:	68db      	ldr	r3, [r3, #12]
 800a6d8:	60fb      	str	r3, [r7, #12]
 800a6da:	68fb      	ldr	r3, [r7, #12]
 800a6dc:	2b00      	cmp	r3, #0
 800a6de:	d1ef      	bne.n	800a6c0 <tcp_pcb_remove+0x50>
 800a6e0:	683b      	ldr	r3, [r7, #0]
 800a6e2:	2200      	movs	r2, #0
 800a6e4:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800a6e6:	6838      	ldr	r0, [r7, #0]
 800a6e8:	f7ff ff72 	bl	800a5d0 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800a6ec:	683b      	ldr	r3, [r7, #0]
 800a6ee:	7d1b      	ldrb	r3, [r3, #20]
 800a6f0:	2b0a      	cmp	r3, #10
 800a6f2:	d013      	beq.n	800a71c <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800a6f4:	683b      	ldr	r3, [r7, #0]
 800a6f6:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800a6f8:	2b01      	cmp	r3, #1
 800a6fa:	d00f      	beq.n	800a71c <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800a6fc:	683b      	ldr	r3, [r7, #0]
 800a6fe:	8b5b      	ldrh	r3, [r3, #26]
 800a700:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800a704:	2b00      	cmp	r3, #0
 800a706:	d009      	beq.n	800a71c <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800a708:	683b      	ldr	r3, [r7, #0]
 800a70a:	8b5b      	ldrh	r3, [r3, #26]
 800a70c:	f043 0302 	orr.w	r3, r3, #2
 800a710:	b29a      	uxth	r2, r3
 800a712:	683b      	ldr	r3, [r7, #0]
 800a714:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800a716:	6838      	ldr	r0, [r7, #0]
 800a718:	f002 ff68 	bl	800d5ec <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800a71c:	683b      	ldr	r3, [r7, #0]
 800a71e:	7d1b      	ldrb	r3, [r3, #20]
 800a720:	2b01      	cmp	r3, #1
 800a722:	d020      	beq.n	800a766 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800a724:	683b      	ldr	r3, [r7, #0]
 800a726:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a728:	2b00      	cmp	r3, #0
 800a72a:	d006      	beq.n	800a73a <tcp_pcb_remove+0xca>
 800a72c:	4b13      	ldr	r3, [pc, #76]	; (800a77c <tcp_pcb_remove+0x10c>)
 800a72e:	f640 0293 	movw	r2, #2195	; 0x893
 800a732:	4916      	ldr	r1, [pc, #88]	; (800a78c <tcp_pcb_remove+0x11c>)
 800a734:	4813      	ldr	r0, [pc, #76]	; (800a784 <tcp_pcb_remove+0x114>)
 800a736:	f008 ffed 	bl	8013714 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800a73a:	683b      	ldr	r3, [r7, #0]
 800a73c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a73e:	2b00      	cmp	r3, #0
 800a740:	d006      	beq.n	800a750 <tcp_pcb_remove+0xe0>
 800a742:	4b0e      	ldr	r3, [pc, #56]	; (800a77c <tcp_pcb_remove+0x10c>)
 800a744:	f640 0294 	movw	r2, #2196	; 0x894
 800a748:	4911      	ldr	r1, [pc, #68]	; (800a790 <tcp_pcb_remove+0x120>)
 800a74a:	480e      	ldr	r0, [pc, #56]	; (800a784 <tcp_pcb_remove+0x114>)
 800a74c:	f008 ffe2 	bl	8013714 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800a750:	683b      	ldr	r3, [r7, #0]
 800a752:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a754:	2b00      	cmp	r3, #0
 800a756:	d006      	beq.n	800a766 <tcp_pcb_remove+0xf6>
 800a758:	4b08      	ldr	r3, [pc, #32]	; (800a77c <tcp_pcb_remove+0x10c>)
 800a75a:	f640 0296 	movw	r2, #2198	; 0x896
 800a75e:	490d      	ldr	r1, [pc, #52]	; (800a794 <tcp_pcb_remove+0x124>)
 800a760:	4808      	ldr	r0, [pc, #32]	; (800a784 <tcp_pcb_remove+0x114>)
 800a762:	f008 ffd7 	bl	8013714 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800a766:	683b      	ldr	r3, [r7, #0]
 800a768:	2200      	movs	r2, #0
 800a76a:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800a76c:	683b      	ldr	r3, [r7, #0]
 800a76e:	2200      	movs	r2, #0
 800a770:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800a772:	bf00      	nop
 800a774:	3710      	adds	r7, #16
 800a776:	46bd      	mov	sp, r7
 800a778:	bd80      	pop	{r7, pc}
 800a77a:	bf00      	nop
 800a77c:	080151ac 	.word	0x080151ac
 800a780:	08015814 	.word	0x08015814
 800a784:	080151f0 	.word	0x080151f0
 800a788:	08015830 	.word	0x08015830
 800a78c:	08015850 	.word	0x08015850
 800a790:	08015868 	.word	0x08015868
 800a794:	08015884 	.word	0x08015884

0800a798 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800a798:	b580      	push	{r7, lr}
 800a79a:	b082      	sub	sp, #8
 800a79c:	af00      	add	r7, sp, #0
 800a79e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	2b00      	cmp	r3, #0
 800a7a4:	d106      	bne.n	800a7b4 <tcp_next_iss+0x1c>
 800a7a6:	4b0a      	ldr	r3, [pc, #40]	; (800a7d0 <tcp_next_iss+0x38>)
 800a7a8:	f640 02af 	movw	r2, #2223	; 0x8af
 800a7ac:	4909      	ldr	r1, [pc, #36]	; (800a7d4 <tcp_next_iss+0x3c>)
 800a7ae:	480a      	ldr	r0, [pc, #40]	; (800a7d8 <tcp_next_iss+0x40>)
 800a7b0:	f008 ffb0 	bl	8013714 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800a7b4:	4b09      	ldr	r3, [pc, #36]	; (800a7dc <tcp_next_iss+0x44>)
 800a7b6:	681a      	ldr	r2, [r3, #0]
 800a7b8:	4b09      	ldr	r3, [pc, #36]	; (800a7e0 <tcp_next_iss+0x48>)
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	4413      	add	r3, r2
 800a7be:	4a07      	ldr	r2, [pc, #28]	; (800a7dc <tcp_next_iss+0x44>)
 800a7c0:	6013      	str	r3, [r2, #0]
  return iss;
 800a7c2:	4b06      	ldr	r3, [pc, #24]	; (800a7dc <tcp_next_iss+0x44>)
 800a7c4:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800a7c6:	4618      	mov	r0, r3
 800a7c8:	3708      	adds	r7, #8
 800a7ca:	46bd      	mov	sp, r7
 800a7cc:	bd80      	pop	{r7, pc}
 800a7ce:	bf00      	nop
 800a7d0:	080151ac 	.word	0x080151ac
 800a7d4:	0801589c 	.word	0x0801589c
 800a7d8:	080151f0 	.word	0x080151f0
 800a7dc:	20000014 	.word	0x20000014
 800a7e0:	2000eee8 	.word	0x2000eee8

0800a7e4 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800a7e4:	b580      	push	{r7, lr}
 800a7e6:	b086      	sub	sp, #24
 800a7e8:	af00      	add	r7, sp, #0
 800a7ea:	4603      	mov	r3, r0
 800a7ec:	60b9      	str	r1, [r7, #8]
 800a7ee:	607a      	str	r2, [r7, #4]
 800a7f0:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	2b00      	cmp	r3, #0
 800a7f6:	d106      	bne.n	800a806 <tcp_eff_send_mss_netif+0x22>
 800a7f8:	4b14      	ldr	r3, [pc, #80]	; (800a84c <tcp_eff_send_mss_netif+0x68>)
 800a7fa:	f640 02c5 	movw	r2, #2245	; 0x8c5
 800a7fe:	4914      	ldr	r1, [pc, #80]	; (800a850 <tcp_eff_send_mss_netif+0x6c>)
 800a800:	4814      	ldr	r0, [pc, #80]	; (800a854 <tcp_eff_send_mss_netif+0x70>)
 800a802:	f008 ff87 	bl	8013714 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800a806:	68bb      	ldr	r3, [r7, #8]
 800a808:	2b00      	cmp	r3, #0
 800a80a:	d101      	bne.n	800a810 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800a80c:	89fb      	ldrh	r3, [r7, #14]
 800a80e:	e019      	b.n	800a844 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800a810:	68bb      	ldr	r3, [r7, #8]
 800a812:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a814:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800a816:	8afb      	ldrh	r3, [r7, #22]
 800a818:	2b00      	cmp	r3, #0
 800a81a:	d012      	beq.n	800a842 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800a81c:	2328      	movs	r3, #40	; 0x28
 800a81e:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800a820:	8afa      	ldrh	r2, [r7, #22]
 800a822:	8abb      	ldrh	r3, [r7, #20]
 800a824:	429a      	cmp	r2, r3
 800a826:	d904      	bls.n	800a832 <tcp_eff_send_mss_netif+0x4e>
 800a828:	8afa      	ldrh	r2, [r7, #22]
 800a82a:	8abb      	ldrh	r3, [r7, #20]
 800a82c:	1ad3      	subs	r3, r2, r3
 800a82e:	b29b      	uxth	r3, r3
 800a830:	e000      	b.n	800a834 <tcp_eff_send_mss_netif+0x50>
 800a832:	2300      	movs	r3, #0
 800a834:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800a836:	8a7a      	ldrh	r2, [r7, #18]
 800a838:	89fb      	ldrh	r3, [r7, #14]
 800a83a:	4293      	cmp	r3, r2
 800a83c:	bf28      	it	cs
 800a83e:	4613      	movcs	r3, r2
 800a840:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800a842:	89fb      	ldrh	r3, [r7, #14]
}
 800a844:	4618      	mov	r0, r3
 800a846:	3718      	adds	r7, #24
 800a848:	46bd      	mov	sp, r7
 800a84a:	bd80      	pop	{r7, pc}
 800a84c:	080151ac 	.word	0x080151ac
 800a850:	080158b8 	.word	0x080158b8
 800a854:	080151f0 	.word	0x080151f0

0800a858 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800a858:	b580      	push	{r7, lr}
 800a85a:	b084      	sub	sp, #16
 800a85c:	af00      	add	r7, sp, #0
 800a85e:	6078      	str	r0, [r7, #4]
 800a860:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800a862:	683b      	ldr	r3, [r7, #0]
 800a864:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	2b00      	cmp	r3, #0
 800a86a:	d119      	bne.n	800a8a0 <tcp_netif_ip_addr_changed_pcblist+0x48>
 800a86c:	4b10      	ldr	r3, [pc, #64]	; (800a8b0 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800a86e:	f44f 6210 	mov.w	r2, #2304	; 0x900
 800a872:	4910      	ldr	r1, [pc, #64]	; (800a8b4 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800a874:	4810      	ldr	r0, [pc, #64]	; (800a8b8 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800a876:	f008 ff4d 	bl	8013714 <iprintf>

  while (pcb != NULL) {
 800a87a:	e011      	b.n	800a8a0 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800a87c:	68fb      	ldr	r3, [r7, #12]
 800a87e:	681a      	ldr	r2, [r3, #0]
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	681b      	ldr	r3, [r3, #0]
 800a884:	429a      	cmp	r2, r3
 800a886:	d108      	bne.n	800a89a <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800a888:	68fb      	ldr	r3, [r7, #12]
 800a88a:	68db      	ldr	r3, [r3, #12]
 800a88c:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800a88e:	68f8      	ldr	r0, [r7, #12]
 800a890:	f7fe ffca 	bl	8009828 <tcp_abort>
      pcb = next;
 800a894:	68bb      	ldr	r3, [r7, #8]
 800a896:	60fb      	str	r3, [r7, #12]
 800a898:	e002      	b.n	800a8a0 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800a89a:	68fb      	ldr	r3, [r7, #12]
 800a89c:	68db      	ldr	r3, [r3, #12]
 800a89e:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800a8a0:	68fb      	ldr	r3, [r7, #12]
 800a8a2:	2b00      	cmp	r3, #0
 800a8a4:	d1ea      	bne.n	800a87c <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800a8a6:	bf00      	nop
 800a8a8:	3710      	adds	r7, #16
 800a8aa:	46bd      	mov	sp, r7
 800a8ac:	bd80      	pop	{r7, pc}
 800a8ae:	bf00      	nop
 800a8b0:	080151ac 	.word	0x080151ac
 800a8b4:	080158e0 	.word	0x080158e0
 800a8b8:	080151f0 	.word	0x080151f0

0800a8bc <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800a8bc:	b580      	push	{r7, lr}
 800a8be:	b084      	sub	sp, #16
 800a8c0:	af00      	add	r7, sp, #0
 800a8c2:	6078      	str	r0, [r7, #4]
 800a8c4:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	d02a      	beq.n	800a922 <tcp_netif_ip_addr_changed+0x66>
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	681b      	ldr	r3, [r3, #0]
 800a8d0:	2b00      	cmp	r3, #0
 800a8d2:	d026      	beq.n	800a922 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800a8d4:	4b15      	ldr	r3, [pc, #84]	; (800a92c <tcp_netif_ip_addr_changed+0x70>)
 800a8d6:	681b      	ldr	r3, [r3, #0]
 800a8d8:	4619      	mov	r1, r3
 800a8da:	6878      	ldr	r0, [r7, #4]
 800a8dc:	f7ff ffbc 	bl	800a858 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800a8e0:	4b13      	ldr	r3, [pc, #76]	; (800a930 <tcp_netif_ip_addr_changed+0x74>)
 800a8e2:	681b      	ldr	r3, [r3, #0]
 800a8e4:	4619      	mov	r1, r3
 800a8e6:	6878      	ldr	r0, [r7, #4]
 800a8e8:	f7ff ffb6 	bl	800a858 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800a8ec:	683b      	ldr	r3, [r7, #0]
 800a8ee:	2b00      	cmp	r3, #0
 800a8f0:	d017      	beq.n	800a922 <tcp_netif_ip_addr_changed+0x66>
 800a8f2:	683b      	ldr	r3, [r7, #0]
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	2b00      	cmp	r3, #0
 800a8f8:	d013      	beq.n	800a922 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800a8fa:	4b0e      	ldr	r3, [pc, #56]	; (800a934 <tcp_netif_ip_addr_changed+0x78>)
 800a8fc:	681b      	ldr	r3, [r3, #0]
 800a8fe:	60fb      	str	r3, [r7, #12]
 800a900:	e00c      	b.n	800a91c <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800a902:	68fb      	ldr	r3, [r7, #12]
 800a904:	681a      	ldr	r2, [r3, #0]
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	681b      	ldr	r3, [r3, #0]
 800a90a:	429a      	cmp	r2, r3
 800a90c:	d103      	bne.n	800a916 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800a90e:	683b      	ldr	r3, [r7, #0]
 800a910:	681a      	ldr	r2, [r3, #0]
 800a912:	68fb      	ldr	r3, [r7, #12]
 800a914:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800a916:	68fb      	ldr	r3, [r7, #12]
 800a918:	68db      	ldr	r3, [r3, #12]
 800a91a:	60fb      	str	r3, [r7, #12]
 800a91c:	68fb      	ldr	r3, [r7, #12]
 800a91e:	2b00      	cmp	r3, #0
 800a920:	d1ef      	bne.n	800a902 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800a922:	bf00      	nop
 800a924:	3710      	adds	r7, #16
 800a926:	46bd      	mov	sp, r7
 800a928:	bd80      	pop	{r7, pc}
 800a92a:	bf00      	nop
 800a92c:	2000eee4 	.word	0x2000eee4
 800a930:	2000eef0 	.word	0x2000eef0
 800a934:	2000eeec 	.word	0x2000eeec

0800a938 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800a938:	b580      	push	{r7, lr}
 800a93a:	b082      	sub	sp, #8
 800a93c:	af00      	add	r7, sp, #0
 800a93e:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a944:	2b00      	cmp	r3, #0
 800a946:	d007      	beq.n	800a958 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a94c:	4618      	mov	r0, r3
 800a94e:	f7ff fc3f 	bl	800a1d0 <tcp_segs_free>
    pcb->ooseq = NULL;
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	2200      	movs	r2, #0
 800a956:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800a958:	bf00      	nop
 800a95a:	3708      	adds	r7, #8
 800a95c:	46bd      	mov	sp, r7
 800a95e:	bd80      	pop	{r7, pc}

0800a960 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800a960:	b590      	push	{r4, r7, lr}
 800a962:	b08d      	sub	sp, #52	; 0x34
 800a964:	af04      	add	r7, sp, #16
 800a966:	6078      	str	r0, [r7, #4]
 800a968:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	2b00      	cmp	r3, #0
 800a96e:	d105      	bne.n	800a97c <tcp_input+0x1c>
 800a970:	4b9b      	ldr	r3, [pc, #620]	; (800abe0 <tcp_input+0x280>)
 800a972:	2283      	movs	r2, #131	; 0x83
 800a974:	499b      	ldr	r1, [pc, #620]	; (800abe4 <tcp_input+0x284>)
 800a976:	489c      	ldr	r0, [pc, #624]	; (800abe8 <tcp_input+0x288>)
 800a978:	f008 fecc 	bl	8013714 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	685b      	ldr	r3, [r3, #4]
 800a980:	4a9a      	ldr	r2, [pc, #616]	; (800abec <tcp_input+0x28c>)
 800a982:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	895b      	ldrh	r3, [r3, #10]
 800a988:	2b13      	cmp	r3, #19
 800a98a:	f240 83c4 	bls.w	800b116 <tcp_input+0x7b6>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800a98e:	4b98      	ldr	r3, [pc, #608]	; (800abf0 <tcp_input+0x290>)
 800a990:	695a      	ldr	r2, [r3, #20]
 800a992:	4b97      	ldr	r3, [pc, #604]	; (800abf0 <tcp_input+0x290>)
 800a994:	681b      	ldr	r3, [r3, #0]
 800a996:	4619      	mov	r1, r3
 800a998:	4610      	mov	r0, r2
 800a99a:	f007 fe13 	bl	80125c4 <ip4_addr_isbroadcast_u32>
 800a99e:	4603      	mov	r3, r0
 800a9a0:	2b00      	cmp	r3, #0
 800a9a2:	f040 83ba 	bne.w	800b11a <tcp_input+0x7ba>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800a9a6:	4b92      	ldr	r3, [pc, #584]	; (800abf0 <tcp_input+0x290>)
 800a9a8:	695b      	ldr	r3, [r3, #20]
 800a9aa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800a9ae:	2be0      	cmp	r3, #224	; 0xe0
 800a9b0:	f000 83b3 	beq.w	800b11a <tcp_input+0x7ba>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800a9b4:	4b8d      	ldr	r3, [pc, #564]	; (800abec <tcp_input+0x28c>)
 800a9b6:	681b      	ldr	r3, [r3, #0]
 800a9b8:	899b      	ldrh	r3, [r3, #12]
 800a9ba:	b29b      	uxth	r3, r3
 800a9bc:	4618      	mov	r0, r3
 800a9be:	f7fc fde3 	bl	8007588 <lwip_htons>
 800a9c2:	4603      	mov	r3, r0
 800a9c4:	0b1b      	lsrs	r3, r3, #12
 800a9c6:	b29b      	uxth	r3, r3
 800a9c8:	b2db      	uxtb	r3, r3
 800a9ca:	009b      	lsls	r3, r3, #2
 800a9cc:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800a9ce:	7cbb      	ldrb	r3, [r7, #18]
 800a9d0:	2b13      	cmp	r3, #19
 800a9d2:	f240 83a2 	bls.w	800b11a <tcp_input+0x7ba>
 800a9d6:	7cbb      	ldrb	r3, [r7, #18]
 800a9d8:	b29a      	uxth	r2, r3
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	891b      	ldrh	r3, [r3, #8]
 800a9de:	429a      	cmp	r2, r3
 800a9e0:	f200 839b 	bhi.w	800b11a <tcp_input+0x7ba>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800a9e4:	7cbb      	ldrb	r3, [r7, #18]
 800a9e6:	b29b      	uxth	r3, r3
 800a9e8:	3b14      	subs	r3, #20
 800a9ea:	b29a      	uxth	r2, r3
 800a9ec:	4b81      	ldr	r3, [pc, #516]	; (800abf4 <tcp_input+0x294>)
 800a9ee:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800a9f0:	4b81      	ldr	r3, [pc, #516]	; (800abf8 <tcp_input+0x298>)
 800a9f2:	2200      	movs	r2, #0
 800a9f4:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	895a      	ldrh	r2, [r3, #10]
 800a9fa:	7cbb      	ldrb	r3, [r7, #18]
 800a9fc:	b29b      	uxth	r3, r3
 800a9fe:	429a      	cmp	r2, r3
 800aa00:	d309      	bcc.n	800aa16 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800aa02:	4b7c      	ldr	r3, [pc, #496]	; (800abf4 <tcp_input+0x294>)
 800aa04:	881a      	ldrh	r2, [r3, #0]
 800aa06:	4b7d      	ldr	r3, [pc, #500]	; (800abfc <tcp_input+0x29c>)
 800aa08:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800aa0a:	7cbb      	ldrb	r3, [r7, #18]
 800aa0c:	4619      	mov	r1, r3
 800aa0e:	6878      	ldr	r0, [r7, #4]
 800aa10:	f7fe f8e8 	bl	8008be4 <pbuf_remove_header>
 800aa14:	e04e      	b.n	800aab4 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	681b      	ldr	r3, [r3, #0]
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	d105      	bne.n	800aa2a <tcp_input+0xca>
 800aa1e:	4b70      	ldr	r3, [pc, #448]	; (800abe0 <tcp_input+0x280>)
 800aa20:	22c2      	movs	r2, #194	; 0xc2
 800aa22:	4977      	ldr	r1, [pc, #476]	; (800ac00 <tcp_input+0x2a0>)
 800aa24:	4870      	ldr	r0, [pc, #448]	; (800abe8 <tcp_input+0x288>)
 800aa26:	f008 fe75 	bl	8013714 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800aa2a:	2114      	movs	r1, #20
 800aa2c:	6878      	ldr	r0, [r7, #4]
 800aa2e:	f7fe f8d9 	bl	8008be4 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	895a      	ldrh	r2, [r3, #10]
 800aa36:	4b71      	ldr	r3, [pc, #452]	; (800abfc <tcp_input+0x29c>)
 800aa38:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800aa3a:	4b6e      	ldr	r3, [pc, #440]	; (800abf4 <tcp_input+0x294>)
 800aa3c:	881a      	ldrh	r2, [r3, #0]
 800aa3e:	4b6f      	ldr	r3, [pc, #444]	; (800abfc <tcp_input+0x29c>)
 800aa40:	881b      	ldrh	r3, [r3, #0]
 800aa42:	1ad3      	subs	r3, r2, r3
 800aa44:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800aa46:	4b6d      	ldr	r3, [pc, #436]	; (800abfc <tcp_input+0x29c>)
 800aa48:	881b      	ldrh	r3, [r3, #0]
 800aa4a:	4619      	mov	r1, r3
 800aa4c:	6878      	ldr	r0, [r7, #4]
 800aa4e:	f7fe f8c9 	bl	8008be4 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	681b      	ldr	r3, [r3, #0]
 800aa56:	895b      	ldrh	r3, [r3, #10]
 800aa58:	8a3a      	ldrh	r2, [r7, #16]
 800aa5a:	429a      	cmp	r2, r3
 800aa5c:	f200 835f 	bhi.w	800b11e <tcp_input+0x7be>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	681b      	ldr	r3, [r3, #0]
 800aa64:	685b      	ldr	r3, [r3, #4]
 800aa66:	4a64      	ldr	r2, [pc, #400]	; (800abf8 <tcp_input+0x298>)
 800aa68:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	681b      	ldr	r3, [r3, #0]
 800aa6e:	8a3a      	ldrh	r2, [r7, #16]
 800aa70:	4611      	mov	r1, r2
 800aa72:	4618      	mov	r0, r3
 800aa74:	f7fe f8b6 	bl	8008be4 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	891a      	ldrh	r2, [r3, #8]
 800aa7c:	8a3b      	ldrh	r3, [r7, #16]
 800aa7e:	1ad3      	subs	r3, r2, r3
 800aa80:	b29a      	uxth	r2, r3
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	895b      	ldrh	r3, [r3, #10]
 800aa8a:	2b00      	cmp	r3, #0
 800aa8c:	d005      	beq.n	800aa9a <tcp_input+0x13a>
 800aa8e:	4b54      	ldr	r3, [pc, #336]	; (800abe0 <tcp_input+0x280>)
 800aa90:	22df      	movs	r2, #223	; 0xdf
 800aa92:	495c      	ldr	r1, [pc, #368]	; (800ac04 <tcp_input+0x2a4>)
 800aa94:	4854      	ldr	r0, [pc, #336]	; (800abe8 <tcp_input+0x288>)
 800aa96:	f008 fe3d 	bl	8013714 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	891a      	ldrh	r2, [r3, #8]
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	681b      	ldr	r3, [r3, #0]
 800aaa2:	891b      	ldrh	r3, [r3, #8]
 800aaa4:	429a      	cmp	r2, r3
 800aaa6:	d005      	beq.n	800aab4 <tcp_input+0x154>
 800aaa8:	4b4d      	ldr	r3, [pc, #308]	; (800abe0 <tcp_input+0x280>)
 800aaaa:	22e0      	movs	r2, #224	; 0xe0
 800aaac:	4956      	ldr	r1, [pc, #344]	; (800ac08 <tcp_input+0x2a8>)
 800aaae:	484e      	ldr	r0, [pc, #312]	; (800abe8 <tcp_input+0x288>)
 800aab0:	f008 fe30 	bl	8013714 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800aab4:	4b4d      	ldr	r3, [pc, #308]	; (800abec <tcp_input+0x28c>)
 800aab6:	681b      	ldr	r3, [r3, #0]
 800aab8:	881b      	ldrh	r3, [r3, #0]
 800aaba:	b29a      	uxth	r2, r3
 800aabc:	4b4b      	ldr	r3, [pc, #300]	; (800abec <tcp_input+0x28c>)
 800aabe:	681c      	ldr	r4, [r3, #0]
 800aac0:	4610      	mov	r0, r2
 800aac2:	f7fc fd61 	bl	8007588 <lwip_htons>
 800aac6:	4603      	mov	r3, r0
 800aac8:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800aaca:	4b48      	ldr	r3, [pc, #288]	; (800abec <tcp_input+0x28c>)
 800aacc:	681b      	ldr	r3, [r3, #0]
 800aace:	885b      	ldrh	r3, [r3, #2]
 800aad0:	b29a      	uxth	r2, r3
 800aad2:	4b46      	ldr	r3, [pc, #280]	; (800abec <tcp_input+0x28c>)
 800aad4:	681c      	ldr	r4, [r3, #0]
 800aad6:	4610      	mov	r0, r2
 800aad8:	f7fc fd56 	bl	8007588 <lwip_htons>
 800aadc:	4603      	mov	r3, r0
 800aade:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800aae0:	4b42      	ldr	r3, [pc, #264]	; (800abec <tcp_input+0x28c>)
 800aae2:	681b      	ldr	r3, [r3, #0]
 800aae4:	685a      	ldr	r2, [r3, #4]
 800aae6:	4b41      	ldr	r3, [pc, #260]	; (800abec <tcp_input+0x28c>)
 800aae8:	681c      	ldr	r4, [r3, #0]
 800aaea:	4610      	mov	r0, r2
 800aaec:	f7fc fd61 	bl	80075b2 <lwip_htonl>
 800aaf0:	4603      	mov	r3, r0
 800aaf2:	6063      	str	r3, [r4, #4]
 800aaf4:	6863      	ldr	r3, [r4, #4]
 800aaf6:	4a45      	ldr	r2, [pc, #276]	; (800ac0c <tcp_input+0x2ac>)
 800aaf8:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800aafa:	4b3c      	ldr	r3, [pc, #240]	; (800abec <tcp_input+0x28c>)
 800aafc:	681b      	ldr	r3, [r3, #0]
 800aafe:	689a      	ldr	r2, [r3, #8]
 800ab00:	4b3a      	ldr	r3, [pc, #232]	; (800abec <tcp_input+0x28c>)
 800ab02:	681c      	ldr	r4, [r3, #0]
 800ab04:	4610      	mov	r0, r2
 800ab06:	f7fc fd54 	bl	80075b2 <lwip_htonl>
 800ab0a:	4603      	mov	r3, r0
 800ab0c:	60a3      	str	r3, [r4, #8]
 800ab0e:	68a3      	ldr	r3, [r4, #8]
 800ab10:	4a3f      	ldr	r2, [pc, #252]	; (800ac10 <tcp_input+0x2b0>)
 800ab12:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800ab14:	4b35      	ldr	r3, [pc, #212]	; (800abec <tcp_input+0x28c>)
 800ab16:	681b      	ldr	r3, [r3, #0]
 800ab18:	89db      	ldrh	r3, [r3, #14]
 800ab1a:	b29a      	uxth	r2, r3
 800ab1c:	4b33      	ldr	r3, [pc, #204]	; (800abec <tcp_input+0x28c>)
 800ab1e:	681c      	ldr	r4, [r3, #0]
 800ab20:	4610      	mov	r0, r2
 800ab22:	f7fc fd31 	bl	8007588 <lwip_htons>
 800ab26:	4603      	mov	r3, r0
 800ab28:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800ab2a:	4b30      	ldr	r3, [pc, #192]	; (800abec <tcp_input+0x28c>)
 800ab2c:	681b      	ldr	r3, [r3, #0]
 800ab2e:	899b      	ldrh	r3, [r3, #12]
 800ab30:	b29b      	uxth	r3, r3
 800ab32:	4618      	mov	r0, r3
 800ab34:	f7fc fd28 	bl	8007588 <lwip_htons>
 800ab38:	4603      	mov	r3, r0
 800ab3a:	b2db      	uxtb	r3, r3
 800ab3c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ab40:	b2da      	uxtb	r2, r3
 800ab42:	4b34      	ldr	r3, [pc, #208]	; (800ac14 <tcp_input+0x2b4>)
 800ab44:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	891a      	ldrh	r2, [r3, #8]
 800ab4a:	4b33      	ldr	r3, [pc, #204]	; (800ac18 <tcp_input+0x2b8>)
 800ab4c:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800ab4e:	4b31      	ldr	r3, [pc, #196]	; (800ac14 <tcp_input+0x2b4>)
 800ab50:	781b      	ldrb	r3, [r3, #0]
 800ab52:	f003 0303 	and.w	r3, r3, #3
 800ab56:	2b00      	cmp	r3, #0
 800ab58:	d00c      	beq.n	800ab74 <tcp_input+0x214>
    tcplen++;
 800ab5a:	4b2f      	ldr	r3, [pc, #188]	; (800ac18 <tcp_input+0x2b8>)
 800ab5c:	881b      	ldrh	r3, [r3, #0]
 800ab5e:	3301      	adds	r3, #1
 800ab60:	b29a      	uxth	r2, r3
 800ab62:	4b2d      	ldr	r3, [pc, #180]	; (800ac18 <tcp_input+0x2b8>)
 800ab64:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	891a      	ldrh	r2, [r3, #8]
 800ab6a:	4b2b      	ldr	r3, [pc, #172]	; (800ac18 <tcp_input+0x2b8>)
 800ab6c:	881b      	ldrh	r3, [r3, #0]
 800ab6e:	429a      	cmp	r2, r3
 800ab70:	f200 82d7 	bhi.w	800b122 <tcp_input+0x7c2>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800ab74:	2300      	movs	r3, #0
 800ab76:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800ab78:	4b28      	ldr	r3, [pc, #160]	; (800ac1c <tcp_input+0x2bc>)
 800ab7a:	681b      	ldr	r3, [r3, #0]
 800ab7c:	61fb      	str	r3, [r7, #28]
 800ab7e:	e09d      	b.n	800acbc <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800ab80:	69fb      	ldr	r3, [r7, #28]
 800ab82:	7d1b      	ldrb	r3, [r3, #20]
 800ab84:	2b00      	cmp	r3, #0
 800ab86:	d105      	bne.n	800ab94 <tcp_input+0x234>
 800ab88:	4b15      	ldr	r3, [pc, #84]	; (800abe0 <tcp_input+0x280>)
 800ab8a:	22fb      	movs	r2, #251	; 0xfb
 800ab8c:	4924      	ldr	r1, [pc, #144]	; (800ac20 <tcp_input+0x2c0>)
 800ab8e:	4816      	ldr	r0, [pc, #88]	; (800abe8 <tcp_input+0x288>)
 800ab90:	f008 fdc0 	bl	8013714 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800ab94:	69fb      	ldr	r3, [r7, #28]
 800ab96:	7d1b      	ldrb	r3, [r3, #20]
 800ab98:	2b0a      	cmp	r3, #10
 800ab9a:	d105      	bne.n	800aba8 <tcp_input+0x248>
 800ab9c:	4b10      	ldr	r3, [pc, #64]	; (800abe0 <tcp_input+0x280>)
 800ab9e:	22fc      	movs	r2, #252	; 0xfc
 800aba0:	4920      	ldr	r1, [pc, #128]	; (800ac24 <tcp_input+0x2c4>)
 800aba2:	4811      	ldr	r0, [pc, #68]	; (800abe8 <tcp_input+0x288>)
 800aba4:	f008 fdb6 	bl	8013714 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800aba8:	69fb      	ldr	r3, [r7, #28]
 800abaa:	7d1b      	ldrb	r3, [r3, #20]
 800abac:	2b01      	cmp	r3, #1
 800abae:	d105      	bne.n	800abbc <tcp_input+0x25c>
 800abb0:	4b0b      	ldr	r3, [pc, #44]	; (800abe0 <tcp_input+0x280>)
 800abb2:	22fd      	movs	r2, #253	; 0xfd
 800abb4:	491c      	ldr	r1, [pc, #112]	; (800ac28 <tcp_input+0x2c8>)
 800abb6:	480c      	ldr	r0, [pc, #48]	; (800abe8 <tcp_input+0x288>)
 800abb8:	f008 fdac 	bl	8013714 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800abbc:	69fb      	ldr	r3, [r7, #28]
 800abbe:	7a1b      	ldrb	r3, [r3, #8]
 800abc0:	2b00      	cmp	r3, #0
 800abc2:	d033      	beq.n	800ac2c <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800abc4:	69fb      	ldr	r3, [r7, #28]
 800abc6:	7a1a      	ldrb	r2, [r3, #8]
 800abc8:	4b09      	ldr	r3, [pc, #36]	; (800abf0 <tcp_input+0x290>)
 800abca:	685b      	ldr	r3, [r3, #4]
 800abcc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800abd0:	3301      	adds	r3, #1
 800abd2:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800abd4:	429a      	cmp	r2, r3
 800abd6:	d029      	beq.n	800ac2c <tcp_input+0x2cc>
      prev = pcb;
 800abd8:	69fb      	ldr	r3, [r7, #28]
 800abda:	61bb      	str	r3, [r7, #24]
      continue;
 800abdc:	e06b      	b.n	800acb6 <tcp_input+0x356>
 800abde:	bf00      	nop
 800abe0:	08015914 	.word	0x08015914
 800abe4:	08015948 	.word	0x08015948
 800abe8:	08015960 	.word	0x08015960
 800abec:	200084b0 	.word	0x200084b0
 800abf0:	2000b7b0 	.word	0x2000b7b0
 800abf4:	200084b4 	.word	0x200084b4
 800abf8:	200084b8 	.word	0x200084b8
 800abfc:	200084b6 	.word	0x200084b6
 800ac00:	08015988 	.word	0x08015988
 800ac04:	08015998 	.word	0x08015998
 800ac08:	080159a4 	.word	0x080159a4
 800ac0c:	200084c0 	.word	0x200084c0
 800ac10:	200084c4 	.word	0x200084c4
 800ac14:	200084cc 	.word	0x200084cc
 800ac18:	200084ca 	.word	0x200084ca
 800ac1c:	2000eee4 	.word	0x2000eee4
 800ac20:	080159c4 	.word	0x080159c4
 800ac24:	080159ec 	.word	0x080159ec
 800ac28:	08015a18 	.word	0x08015a18
    }

    if (pcb->remote_port == tcphdr->src &&
 800ac2c:	69fb      	ldr	r3, [r7, #28]
 800ac2e:	8b1a      	ldrh	r2, [r3, #24]
 800ac30:	4b94      	ldr	r3, [pc, #592]	; (800ae84 <tcp_input+0x524>)
 800ac32:	681b      	ldr	r3, [r3, #0]
 800ac34:	881b      	ldrh	r3, [r3, #0]
 800ac36:	b29b      	uxth	r3, r3
 800ac38:	429a      	cmp	r2, r3
 800ac3a:	d13a      	bne.n	800acb2 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800ac3c:	69fb      	ldr	r3, [r7, #28]
 800ac3e:	8ada      	ldrh	r2, [r3, #22]
 800ac40:	4b90      	ldr	r3, [pc, #576]	; (800ae84 <tcp_input+0x524>)
 800ac42:	681b      	ldr	r3, [r3, #0]
 800ac44:	885b      	ldrh	r3, [r3, #2]
 800ac46:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800ac48:	429a      	cmp	r2, r3
 800ac4a:	d132      	bne.n	800acb2 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800ac4c:	69fb      	ldr	r3, [r7, #28]
 800ac4e:	685a      	ldr	r2, [r3, #4]
 800ac50:	4b8d      	ldr	r3, [pc, #564]	; (800ae88 <tcp_input+0x528>)
 800ac52:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800ac54:	429a      	cmp	r2, r3
 800ac56:	d12c      	bne.n	800acb2 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800ac58:	69fb      	ldr	r3, [r7, #28]
 800ac5a:	681a      	ldr	r2, [r3, #0]
 800ac5c:	4b8a      	ldr	r3, [pc, #552]	; (800ae88 <tcp_input+0x528>)
 800ac5e:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800ac60:	429a      	cmp	r2, r3
 800ac62:	d126      	bne.n	800acb2 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800ac64:	69fb      	ldr	r3, [r7, #28]
 800ac66:	68db      	ldr	r3, [r3, #12]
 800ac68:	69fa      	ldr	r2, [r7, #28]
 800ac6a:	429a      	cmp	r2, r3
 800ac6c:	d106      	bne.n	800ac7c <tcp_input+0x31c>
 800ac6e:	4b87      	ldr	r3, [pc, #540]	; (800ae8c <tcp_input+0x52c>)
 800ac70:	f240 120d 	movw	r2, #269	; 0x10d
 800ac74:	4986      	ldr	r1, [pc, #536]	; (800ae90 <tcp_input+0x530>)
 800ac76:	4887      	ldr	r0, [pc, #540]	; (800ae94 <tcp_input+0x534>)
 800ac78:	f008 fd4c 	bl	8013714 <iprintf>
      if (prev != NULL) {
 800ac7c:	69bb      	ldr	r3, [r7, #24]
 800ac7e:	2b00      	cmp	r3, #0
 800ac80:	d00a      	beq.n	800ac98 <tcp_input+0x338>
        prev->next = pcb->next;
 800ac82:	69fb      	ldr	r3, [r7, #28]
 800ac84:	68da      	ldr	r2, [r3, #12]
 800ac86:	69bb      	ldr	r3, [r7, #24]
 800ac88:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800ac8a:	4b83      	ldr	r3, [pc, #524]	; (800ae98 <tcp_input+0x538>)
 800ac8c:	681a      	ldr	r2, [r3, #0]
 800ac8e:	69fb      	ldr	r3, [r7, #28]
 800ac90:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800ac92:	4a81      	ldr	r2, [pc, #516]	; (800ae98 <tcp_input+0x538>)
 800ac94:	69fb      	ldr	r3, [r7, #28]
 800ac96:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800ac98:	69fb      	ldr	r3, [r7, #28]
 800ac9a:	68db      	ldr	r3, [r3, #12]
 800ac9c:	69fa      	ldr	r2, [r7, #28]
 800ac9e:	429a      	cmp	r2, r3
 800aca0:	d111      	bne.n	800acc6 <tcp_input+0x366>
 800aca2:	4b7a      	ldr	r3, [pc, #488]	; (800ae8c <tcp_input+0x52c>)
 800aca4:	f240 1215 	movw	r2, #277	; 0x115
 800aca8:	497c      	ldr	r1, [pc, #496]	; (800ae9c <tcp_input+0x53c>)
 800acaa:	487a      	ldr	r0, [pc, #488]	; (800ae94 <tcp_input+0x534>)
 800acac:	f008 fd32 	bl	8013714 <iprintf>
      break;
 800acb0:	e009      	b.n	800acc6 <tcp_input+0x366>
    }
    prev = pcb;
 800acb2:	69fb      	ldr	r3, [r7, #28]
 800acb4:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800acb6:	69fb      	ldr	r3, [r7, #28]
 800acb8:	68db      	ldr	r3, [r3, #12]
 800acba:	61fb      	str	r3, [r7, #28]
 800acbc:	69fb      	ldr	r3, [r7, #28]
 800acbe:	2b00      	cmp	r3, #0
 800acc0:	f47f af5e 	bne.w	800ab80 <tcp_input+0x220>
 800acc4:	e000      	b.n	800acc8 <tcp_input+0x368>
      break;
 800acc6:	bf00      	nop
  }

  if (pcb == NULL) {
 800acc8:	69fb      	ldr	r3, [r7, #28]
 800acca:	2b00      	cmp	r3, #0
 800accc:	f040 8095 	bne.w	800adfa <tcp_input+0x49a>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800acd0:	4b73      	ldr	r3, [pc, #460]	; (800aea0 <tcp_input+0x540>)
 800acd2:	681b      	ldr	r3, [r3, #0]
 800acd4:	61fb      	str	r3, [r7, #28]
 800acd6:	e03f      	b.n	800ad58 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800acd8:	69fb      	ldr	r3, [r7, #28]
 800acda:	7d1b      	ldrb	r3, [r3, #20]
 800acdc:	2b0a      	cmp	r3, #10
 800acde:	d006      	beq.n	800acee <tcp_input+0x38e>
 800ace0:	4b6a      	ldr	r3, [pc, #424]	; (800ae8c <tcp_input+0x52c>)
 800ace2:	f240 121f 	movw	r2, #287	; 0x11f
 800ace6:	496f      	ldr	r1, [pc, #444]	; (800aea4 <tcp_input+0x544>)
 800ace8:	486a      	ldr	r0, [pc, #424]	; (800ae94 <tcp_input+0x534>)
 800acea:	f008 fd13 	bl	8013714 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800acee:	69fb      	ldr	r3, [r7, #28]
 800acf0:	7a1b      	ldrb	r3, [r3, #8]
 800acf2:	2b00      	cmp	r3, #0
 800acf4:	d009      	beq.n	800ad0a <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800acf6:	69fb      	ldr	r3, [r7, #28]
 800acf8:	7a1a      	ldrb	r2, [r3, #8]
 800acfa:	4b63      	ldr	r3, [pc, #396]	; (800ae88 <tcp_input+0x528>)
 800acfc:	685b      	ldr	r3, [r3, #4]
 800acfe:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800ad02:	3301      	adds	r3, #1
 800ad04:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800ad06:	429a      	cmp	r2, r3
 800ad08:	d122      	bne.n	800ad50 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800ad0a:	69fb      	ldr	r3, [r7, #28]
 800ad0c:	8b1a      	ldrh	r2, [r3, #24]
 800ad0e:	4b5d      	ldr	r3, [pc, #372]	; (800ae84 <tcp_input+0x524>)
 800ad10:	681b      	ldr	r3, [r3, #0]
 800ad12:	881b      	ldrh	r3, [r3, #0]
 800ad14:	b29b      	uxth	r3, r3
 800ad16:	429a      	cmp	r2, r3
 800ad18:	d11b      	bne.n	800ad52 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800ad1a:	69fb      	ldr	r3, [r7, #28]
 800ad1c:	8ada      	ldrh	r2, [r3, #22]
 800ad1e:	4b59      	ldr	r3, [pc, #356]	; (800ae84 <tcp_input+0x524>)
 800ad20:	681b      	ldr	r3, [r3, #0]
 800ad22:	885b      	ldrh	r3, [r3, #2]
 800ad24:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800ad26:	429a      	cmp	r2, r3
 800ad28:	d113      	bne.n	800ad52 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800ad2a:	69fb      	ldr	r3, [r7, #28]
 800ad2c:	685a      	ldr	r2, [r3, #4]
 800ad2e:	4b56      	ldr	r3, [pc, #344]	; (800ae88 <tcp_input+0x528>)
 800ad30:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800ad32:	429a      	cmp	r2, r3
 800ad34:	d10d      	bne.n	800ad52 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800ad36:	69fb      	ldr	r3, [r7, #28]
 800ad38:	681a      	ldr	r2, [r3, #0]
 800ad3a:	4b53      	ldr	r3, [pc, #332]	; (800ae88 <tcp_input+0x528>)
 800ad3c:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800ad3e:	429a      	cmp	r2, r3
 800ad40:	d107      	bne.n	800ad52 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800ad42:	69f8      	ldr	r0, [r7, #28]
 800ad44:	f000 fb52 	bl	800b3ec <tcp_timewait_input>
        }
        pbuf_free(p);
 800ad48:	6878      	ldr	r0, [r7, #4]
 800ad4a:	f7fd ffd1 	bl	8008cf0 <pbuf_free>
        return;
 800ad4e:	e1ee      	b.n	800b12e <tcp_input+0x7ce>
        continue;
 800ad50:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800ad52:	69fb      	ldr	r3, [r7, #28]
 800ad54:	68db      	ldr	r3, [r3, #12]
 800ad56:	61fb      	str	r3, [r7, #28]
 800ad58:	69fb      	ldr	r3, [r7, #28]
 800ad5a:	2b00      	cmp	r3, #0
 800ad5c:	d1bc      	bne.n	800acd8 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800ad5e:	2300      	movs	r3, #0
 800ad60:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800ad62:	4b51      	ldr	r3, [pc, #324]	; (800aea8 <tcp_input+0x548>)
 800ad64:	681b      	ldr	r3, [r3, #0]
 800ad66:	617b      	str	r3, [r7, #20]
 800ad68:	e02a      	b.n	800adc0 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800ad6a:	697b      	ldr	r3, [r7, #20]
 800ad6c:	7a1b      	ldrb	r3, [r3, #8]
 800ad6e:	2b00      	cmp	r3, #0
 800ad70:	d00c      	beq.n	800ad8c <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800ad72:	697b      	ldr	r3, [r7, #20]
 800ad74:	7a1a      	ldrb	r2, [r3, #8]
 800ad76:	4b44      	ldr	r3, [pc, #272]	; (800ae88 <tcp_input+0x528>)
 800ad78:	685b      	ldr	r3, [r3, #4]
 800ad7a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800ad7e:	3301      	adds	r3, #1
 800ad80:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800ad82:	429a      	cmp	r2, r3
 800ad84:	d002      	beq.n	800ad8c <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800ad86:	697b      	ldr	r3, [r7, #20]
 800ad88:	61bb      	str	r3, [r7, #24]
        continue;
 800ad8a:	e016      	b.n	800adba <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800ad8c:	697b      	ldr	r3, [r7, #20]
 800ad8e:	8ada      	ldrh	r2, [r3, #22]
 800ad90:	4b3c      	ldr	r3, [pc, #240]	; (800ae84 <tcp_input+0x524>)
 800ad92:	681b      	ldr	r3, [r3, #0]
 800ad94:	885b      	ldrh	r3, [r3, #2]
 800ad96:	b29b      	uxth	r3, r3
 800ad98:	429a      	cmp	r2, r3
 800ad9a:	d10c      	bne.n	800adb6 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800ad9c:	697b      	ldr	r3, [r7, #20]
 800ad9e:	681a      	ldr	r2, [r3, #0]
 800ada0:	4b39      	ldr	r3, [pc, #228]	; (800ae88 <tcp_input+0x528>)
 800ada2:	695b      	ldr	r3, [r3, #20]
 800ada4:	429a      	cmp	r2, r3
 800ada6:	d00f      	beq.n	800adc8 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800ada8:	697b      	ldr	r3, [r7, #20]
 800adaa:	2b00      	cmp	r3, #0
 800adac:	d00d      	beq.n	800adca <tcp_input+0x46a>
 800adae:	697b      	ldr	r3, [r7, #20]
 800adb0:	681b      	ldr	r3, [r3, #0]
 800adb2:	2b00      	cmp	r3, #0
 800adb4:	d009      	beq.n	800adca <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800adb6:	697b      	ldr	r3, [r7, #20]
 800adb8:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800adba:	697b      	ldr	r3, [r7, #20]
 800adbc:	68db      	ldr	r3, [r3, #12]
 800adbe:	617b      	str	r3, [r7, #20]
 800adc0:	697b      	ldr	r3, [r7, #20]
 800adc2:	2b00      	cmp	r3, #0
 800adc4:	d1d1      	bne.n	800ad6a <tcp_input+0x40a>
 800adc6:	e000      	b.n	800adca <tcp_input+0x46a>
            break;
 800adc8:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800adca:	697b      	ldr	r3, [r7, #20]
 800adcc:	2b00      	cmp	r3, #0
 800adce:	d014      	beq.n	800adfa <tcp_input+0x49a>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800add0:	69bb      	ldr	r3, [r7, #24]
 800add2:	2b00      	cmp	r3, #0
 800add4:	d00a      	beq.n	800adec <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800add6:	697b      	ldr	r3, [r7, #20]
 800add8:	68da      	ldr	r2, [r3, #12]
 800adda:	69bb      	ldr	r3, [r7, #24]
 800addc:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800adde:	4b32      	ldr	r3, [pc, #200]	; (800aea8 <tcp_input+0x548>)
 800ade0:	681a      	ldr	r2, [r3, #0]
 800ade2:	697b      	ldr	r3, [r7, #20]
 800ade4:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800ade6:	4a30      	ldr	r2, [pc, #192]	; (800aea8 <tcp_input+0x548>)
 800ade8:	697b      	ldr	r3, [r7, #20]
 800adea:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800adec:	6978      	ldr	r0, [r7, #20]
 800adee:	f000 f9ff 	bl	800b1f0 <tcp_listen_input>
      }
      pbuf_free(p);
 800adf2:	6878      	ldr	r0, [r7, #4]
 800adf4:	f7fd ff7c 	bl	8008cf0 <pbuf_free>
      return;
 800adf8:	e199      	b.n	800b12e <tcp_input+0x7ce>
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800adfa:	69fb      	ldr	r3, [r7, #28]
 800adfc:	2b00      	cmp	r3, #0
 800adfe:	f000 8160 	beq.w	800b0c2 <tcp_input+0x762>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800ae02:	4b2a      	ldr	r3, [pc, #168]	; (800aeac <tcp_input+0x54c>)
 800ae04:	2200      	movs	r2, #0
 800ae06:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	891a      	ldrh	r2, [r3, #8]
 800ae0c:	4b27      	ldr	r3, [pc, #156]	; (800aeac <tcp_input+0x54c>)
 800ae0e:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800ae10:	4a26      	ldr	r2, [pc, #152]	; (800aeac <tcp_input+0x54c>)
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800ae16:	4b1b      	ldr	r3, [pc, #108]	; (800ae84 <tcp_input+0x524>)
 800ae18:	681b      	ldr	r3, [r3, #0]
 800ae1a:	4a24      	ldr	r2, [pc, #144]	; (800aeac <tcp_input+0x54c>)
 800ae1c:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800ae1e:	4b24      	ldr	r3, [pc, #144]	; (800aeb0 <tcp_input+0x550>)
 800ae20:	2200      	movs	r2, #0
 800ae22:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800ae24:	4b23      	ldr	r3, [pc, #140]	; (800aeb4 <tcp_input+0x554>)
 800ae26:	2200      	movs	r2, #0
 800ae28:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800ae2a:	4b23      	ldr	r3, [pc, #140]	; (800aeb8 <tcp_input+0x558>)
 800ae2c:	2200      	movs	r2, #0
 800ae2e:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800ae30:	4b22      	ldr	r3, [pc, #136]	; (800aebc <tcp_input+0x55c>)
 800ae32:	781b      	ldrb	r3, [r3, #0]
 800ae34:	f003 0308 	and.w	r3, r3, #8
 800ae38:	2b00      	cmp	r3, #0
 800ae3a:	d006      	beq.n	800ae4a <tcp_input+0x4ea>
      p->flags |= PBUF_FLAG_PUSH;
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	7b5b      	ldrb	r3, [r3, #13]
 800ae40:	f043 0301 	orr.w	r3, r3, #1
 800ae44:	b2da      	uxtb	r2, r3
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800ae4a:	69fb      	ldr	r3, [r7, #28]
 800ae4c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ae4e:	2b00      	cmp	r3, #0
 800ae50:	d038      	beq.n	800aec4 <tcp_input+0x564>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800ae52:	69f8      	ldr	r0, [r7, #28]
 800ae54:	f7ff f940 	bl	800a0d8 <tcp_process_refused_data>
 800ae58:	4603      	mov	r3, r0
 800ae5a:	f113 0f0d 	cmn.w	r3, #13
 800ae5e:	d007      	beq.n	800ae70 <tcp_input+0x510>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800ae60:	69fb      	ldr	r3, [r7, #28]
 800ae62:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800ae64:	2b00      	cmp	r3, #0
 800ae66:	d02d      	beq.n	800aec4 <tcp_input+0x564>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800ae68:	4b15      	ldr	r3, [pc, #84]	; (800aec0 <tcp_input+0x560>)
 800ae6a:	881b      	ldrh	r3, [r3, #0]
 800ae6c:	2b00      	cmp	r3, #0
 800ae6e:	d029      	beq.n	800aec4 <tcp_input+0x564>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800ae70:	69fb      	ldr	r3, [r7, #28]
 800ae72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ae74:	2b00      	cmp	r3, #0
 800ae76:	f040 8104 	bne.w	800b082 <tcp_input+0x722>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800ae7a:	69f8      	ldr	r0, [r7, #28]
 800ae7c:	f003 f9cc 	bl	800e218 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800ae80:	e0ff      	b.n	800b082 <tcp_input+0x722>
 800ae82:	bf00      	nop
 800ae84:	200084b0 	.word	0x200084b0
 800ae88:	2000b7b0 	.word	0x2000b7b0
 800ae8c:	08015914 	.word	0x08015914
 800ae90:	08015a40 	.word	0x08015a40
 800ae94:	08015960 	.word	0x08015960
 800ae98:	2000eee4 	.word	0x2000eee4
 800ae9c:	08015a6c 	.word	0x08015a6c
 800aea0:	2000eef4 	.word	0x2000eef4
 800aea4:	08015a98 	.word	0x08015a98
 800aea8:	2000eeec 	.word	0x2000eeec
 800aeac:	200084a0 	.word	0x200084a0
 800aeb0:	200084d0 	.word	0x200084d0
 800aeb4:	200084cd 	.word	0x200084cd
 800aeb8:	200084c8 	.word	0x200084c8
 800aebc:	200084cc 	.word	0x200084cc
 800aec0:	200084ca 	.word	0x200084ca
      }
    }
    tcp_input_pcb = pcb;
 800aec4:	4a9b      	ldr	r2, [pc, #620]	; (800b134 <tcp_input+0x7d4>)
 800aec6:	69fb      	ldr	r3, [r7, #28]
 800aec8:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800aeca:	69f8      	ldr	r0, [r7, #28]
 800aecc:	f000 fb0a 	bl	800b4e4 <tcp_process>
 800aed0:	4603      	mov	r3, r0
 800aed2:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800aed4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800aed8:	f113 0f0d 	cmn.w	r3, #13
 800aedc:	f000 80d3 	beq.w	800b086 <tcp_input+0x726>
      if (recv_flags & TF_RESET) {
 800aee0:	4b95      	ldr	r3, [pc, #596]	; (800b138 <tcp_input+0x7d8>)
 800aee2:	781b      	ldrb	r3, [r3, #0]
 800aee4:	f003 0308 	and.w	r3, r3, #8
 800aee8:	2b00      	cmp	r3, #0
 800aeea:	d015      	beq.n	800af18 <tcp_input+0x5b8>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800aeec:	69fb      	ldr	r3, [r7, #28]
 800aeee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aef2:	2b00      	cmp	r3, #0
 800aef4:	d008      	beq.n	800af08 <tcp_input+0x5a8>
 800aef6:	69fb      	ldr	r3, [r7, #28]
 800aef8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aefc:	69fa      	ldr	r2, [r7, #28]
 800aefe:	6912      	ldr	r2, [r2, #16]
 800af00:	f06f 010d 	mvn.w	r1, #13
 800af04:	4610      	mov	r0, r2
 800af06:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800af08:	69f9      	ldr	r1, [r7, #28]
 800af0a:	488c      	ldr	r0, [pc, #560]	; (800b13c <tcp_input+0x7dc>)
 800af0c:	f7ff fbb0 	bl	800a670 <tcp_pcb_remove>
        tcp_free(pcb);
 800af10:	69f8      	ldr	r0, [r7, #28]
 800af12:	f7fe f9a9 	bl	8009268 <tcp_free>
 800af16:	e0c1      	b.n	800b09c <tcp_input+0x73c>
      } else {
        err = ERR_OK;
 800af18:	2300      	movs	r3, #0
 800af1a:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800af1c:	4b88      	ldr	r3, [pc, #544]	; (800b140 <tcp_input+0x7e0>)
 800af1e:	881b      	ldrh	r3, [r3, #0]
 800af20:	2b00      	cmp	r3, #0
 800af22:	d01d      	beq.n	800af60 <tcp_input+0x600>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800af24:	4b86      	ldr	r3, [pc, #536]	; (800b140 <tcp_input+0x7e0>)
 800af26:	881b      	ldrh	r3, [r3, #0]
 800af28:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800af2a:	69fb      	ldr	r3, [r7, #28]
 800af2c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800af30:	2b00      	cmp	r3, #0
 800af32:	d00a      	beq.n	800af4a <tcp_input+0x5ea>
 800af34:	69fb      	ldr	r3, [r7, #28]
 800af36:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800af3a:	69fa      	ldr	r2, [r7, #28]
 800af3c:	6910      	ldr	r0, [r2, #16]
 800af3e:	89fa      	ldrh	r2, [r7, #14]
 800af40:	69f9      	ldr	r1, [r7, #28]
 800af42:	4798      	blx	r3
 800af44:	4603      	mov	r3, r0
 800af46:	74fb      	strb	r3, [r7, #19]
 800af48:	e001      	b.n	800af4e <tcp_input+0x5ee>
 800af4a:	2300      	movs	r3, #0
 800af4c:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800af4e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800af52:	f113 0f0d 	cmn.w	r3, #13
 800af56:	f000 8098 	beq.w	800b08a <tcp_input+0x72a>
              goto aborted;
            }
          }
          recv_acked = 0;
 800af5a:	4b79      	ldr	r3, [pc, #484]	; (800b140 <tcp_input+0x7e0>)
 800af5c:	2200      	movs	r2, #0
 800af5e:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800af60:	69f8      	ldr	r0, [r7, #28]
 800af62:	f000 f905 	bl	800b170 <tcp_input_delayed_close>
 800af66:	4603      	mov	r3, r0
 800af68:	2b00      	cmp	r3, #0
 800af6a:	f040 8090 	bne.w	800b08e <tcp_input+0x72e>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800af6e:	4b75      	ldr	r3, [pc, #468]	; (800b144 <tcp_input+0x7e4>)
 800af70:	681b      	ldr	r3, [r3, #0]
 800af72:	2b00      	cmp	r3, #0
 800af74:	d041      	beq.n	800affa <tcp_input+0x69a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800af76:	69fb      	ldr	r3, [r7, #28]
 800af78:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800af7a:	2b00      	cmp	r3, #0
 800af7c:	d006      	beq.n	800af8c <tcp_input+0x62c>
 800af7e:	4b72      	ldr	r3, [pc, #456]	; (800b148 <tcp_input+0x7e8>)
 800af80:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800af84:	4971      	ldr	r1, [pc, #452]	; (800b14c <tcp_input+0x7ec>)
 800af86:	4872      	ldr	r0, [pc, #456]	; (800b150 <tcp_input+0x7f0>)
 800af88:	f008 fbc4 	bl	8013714 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800af8c:	69fb      	ldr	r3, [r7, #28]
 800af8e:	8b5b      	ldrh	r3, [r3, #26]
 800af90:	f003 0310 	and.w	r3, r3, #16
 800af94:	2b00      	cmp	r3, #0
 800af96:	d008      	beq.n	800afaa <tcp_input+0x64a>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800af98:	4b6a      	ldr	r3, [pc, #424]	; (800b144 <tcp_input+0x7e4>)
 800af9a:	681b      	ldr	r3, [r3, #0]
 800af9c:	4618      	mov	r0, r3
 800af9e:	f7fd fea7 	bl	8008cf0 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800afa2:	69f8      	ldr	r0, [r7, #28]
 800afa4:	f7fe fc40 	bl	8009828 <tcp_abort>
            goto aborted;
 800afa8:	e078      	b.n	800b09c <tcp_input+0x73c>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800afaa:	69fb      	ldr	r3, [r7, #28]
 800afac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800afb0:	2b00      	cmp	r3, #0
 800afb2:	d00c      	beq.n	800afce <tcp_input+0x66e>
 800afb4:	69fb      	ldr	r3, [r7, #28]
 800afb6:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800afba:	69fb      	ldr	r3, [r7, #28]
 800afbc:	6918      	ldr	r0, [r3, #16]
 800afbe:	4b61      	ldr	r3, [pc, #388]	; (800b144 <tcp_input+0x7e4>)
 800afc0:	681a      	ldr	r2, [r3, #0]
 800afc2:	2300      	movs	r3, #0
 800afc4:	69f9      	ldr	r1, [r7, #28]
 800afc6:	47a0      	blx	r4
 800afc8:	4603      	mov	r3, r0
 800afca:	74fb      	strb	r3, [r7, #19]
 800afcc:	e008      	b.n	800afe0 <tcp_input+0x680>
 800afce:	4b5d      	ldr	r3, [pc, #372]	; (800b144 <tcp_input+0x7e4>)
 800afd0:	681a      	ldr	r2, [r3, #0]
 800afd2:	2300      	movs	r3, #0
 800afd4:	69f9      	ldr	r1, [r7, #28]
 800afd6:	2000      	movs	r0, #0
 800afd8:	f7ff f952 	bl	800a280 <tcp_recv_null>
 800afdc:	4603      	mov	r3, r0
 800afde:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800afe0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800afe4:	f113 0f0d 	cmn.w	r3, #13
 800afe8:	d053      	beq.n	800b092 <tcp_input+0x732>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800afea:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800afee:	2b00      	cmp	r3, #0
 800aff0:	d003      	beq.n	800affa <tcp_input+0x69a>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800aff2:	4b54      	ldr	r3, [pc, #336]	; (800b144 <tcp_input+0x7e4>)
 800aff4:	681a      	ldr	r2, [r3, #0]
 800aff6:	69fb      	ldr	r3, [r7, #28]
 800aff8:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800affa:	4b4f      	ldr	r3, [pc, #316]	; (800b138 <tcp_input+0x7d8>)
 800affc:	781b      	ldrb	r3, [r3, #0]
 800affe:	f003 0320 	and.w	r3, r3, #32
 800b002:	2b00      	cmp	r3, #0
 800b004:	d030      	beq.n	800b068 <tcp_input+0x708>
          if (pcb->refused_data != NULL) {
 800b006:	69fb      	ldr	r3, [r7, #28]
 800b008:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b00a:	2b00      	cmp	r3, #0
 800b00c:	d009      	beq.n	800b022 <tcp_input+0x6c2>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800b00e:	69fb      	ldr	r3, [r7, #28]
 800b010:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b012:	7b5a      	ldrb	r2, [r3, #13]
 800b014:	69fb      	ldr	r3, [r7, #28]
 800b016:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b018:	f042 0220 	orr.w	r2, r2, #32
 800b01c:	b2d2      	uxtb	r2, r2
 800b01e:	735a      	strb	r2, [r3, #13]
 800b020:	e022      	b.n	800b068 <tcp_input+0x708>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800b022:	69fb      	ldr	r3, [r7, #28]
 800b024:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b026:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800b02a:	d005      	beq.n	800b038 <tcp_input+0x6d8>
              pcb->rcv_wnd++;
 800b02c:	69fb      	ldr	r3, [r7, #28]
 800b02e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b030:	3301      	adds	r3, #1
 800b032:	b29a      	uxth	r2, r3
 800b034:	69fb      	ldr	r3, [r7, #28]
 800b036:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800b038:	69fb      	ldr	r3, [r7, #28]
 800b03a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b03e:	2b00      	cmp	r3, #0
 800b040:	d00b      	beq.n	800b05a <tcp_input+0x6fa>
 800b042:	69fb      	ldr	r3, [r7, #28]
 800b044:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800b048:	69fb      	ldr	r3, [r7, #28]
 800b04a:	6918      	ldr	r0, [r3, #16]
 800b04c:	2300      	movs	r3, #0
 800b04e:	2200      	movs	r2, #0
 800b050:	69f9      	ldr	r1, [r7, #28]
 800b052:	47a0      	blx	r4
 800b054:	4603      	mov	r3, r0
 800b056:	74fb      	strb	r3, [r7, #19]
 800b058:	e001      	b.n	800b05e <tcp_input+0x6fe>
 800b05a:	2300      	movs	r3, #0
 800b05c:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800b05e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b062:	f113 0f0d 	cmn.w	r3, #13
 800b066:	d016      	beq.n	800b096 <tcp_input+0x736>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800b068:	4b32      	ldr	r3, [pc, #200]	; (800b134 <tcp_input+0x7d4>)
 800b06a:	2200      	movs	r2, #0
 800b06c:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800b06e:	69f8      	ldr	r0, [r7, #28]
 800b070:	f000 f87e 	bl	800b170 <tcp_input_delayed_close>
 800b074:	4603      	mov	r3, r0
 800b076:	2b00      	cmp	r3, #0
 800b078:	d10f      	bne.n	800b09a <tcp_input+0x73a>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800b07a:	69f8      	ldr	r0, [r7, #28]
 800b07c:	f002 fab6 	bl	800d5ec <tcp_output>
 800b080:	e00c      	b.n	800b09c <tcp_input+0x73c>
        goto aborted;
 800b082:	bf00      	nop
 800b084:	e00a      	b.n	800b09c <tcp_input+0x73c>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800b086:	bf00      	nop
 800b088:	e008      	b.n	800b09c <tcp_input+0x73c>
              goto aborted;
 800b08a:	bf00      	nop
 800b08c:	e006      	b.n	800b09c <tcp_input+0x73c>
          goto aborted;
 800b08e:	bf00      	nop
 800b090:	e004      	b.n	800b09c <tcp_input+0x73c>
            goto aborted;
 800b092:	bf00      	nop
 800b094:	e002      	b.n	800b09c <tcp_input+0x73c>
              goto aborted;
 800b096:	bf00      	nop
 800b098:	e000      	b.n	800b09c <tcp_input+0x73c>
          goto aborted;
 800b09a:	bf00      	nop
    tcp_input_pcb = NULL;
 800b09c:	4b25      	ldr	r3, [pc, #148]	; (800b134 <tcp_input+0x7d4>)
 800b09e:	2200      	movs	r2, #0
 800b0a0:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800b0a2:	4b28      	ldr	r3, [pc, #160]	; (800b144 <tcp_input+0x7e4>)
 800b0a4:	2200      	movs	r2, #0
 800b0a6:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800b0a8:	4b2a      	ldr	r3, [pc, #168]	; (800b154 <tcp_input+0x7f4>)
 800b0aa:	685b      	ldr	r3, [r3, #4]
 800b0ac:	2b00      	cmp	r3, #0
 800b0ae:	d03d      	beq.n	800b12c <tcp_input+0x7cc>
      pbuf_free(inseg.p);
 800b0b0:	4b28      	ldr	r3, [pc, #160]	; (800b154 <tcp_input+0x7f4>)
 800b0b2:	685b      	ldr	r3, [r3, #4]
 800b0b4:	4618      	mov	r0, r3
 800b0b6:	f7fd fe1b 	bl	8008cf0 <pbuf_free>
      inseg.p = NULL;
 800b0ba:	4b26      	ldr	r3, [pc, #152]	; (800b154 <tcp_input+0x7f4>)
 800b0bc:	2200      	movs	r2, #0
 800b0be:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800b0c0:	e034      	b.n	800b12c <tcp_input+0x7cc>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800b0c2:	4b25      	ldr	r3, [pc, #148]	; (800b158 <tcp_input+0x7f8>)
 800b0c4:	681b      	ldr	r3, [r3, #0]
 800b0c6:	899b      	ldrh	r3, [r3, #12]
 800b0c8:	b29b      	uxth	r3, r3
 800b0ca:	4618      	mov	r0, r3
 800b0cc:	f7fc fa5c 	bl	8007588 <lwip_htons>
 800b0d0:	4603      	mov	r3, r0
 800b0d2:	b2db      	uxtb	r3, r3
 800b0d4:	f003 0304 	and.w	r3, r3, #4
 800b0d8:	2b00      	cmp	r3, #0
 800b0da:	d118      	bne.n	800b10e <tcp_input+0x7ae>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b0dc:	4b1f      	ldr	r3, [pc, #124]	; (800b15c <tcp_input+0x7fc>)
 800b0de:	6819      	ldr	r1, [r3, #0]
 800b0e0:	4b1f      	ldr	r3, [pc, #124]	; (800b160 <tcp_input+0x800>)
 800b0e2:	881b      	ldrh	r3, [r3, #0]
 800b0e4:	461a      	mov	r2, r3
 800b0e6:	4b1f      	ldr	r3, [pc, #124]	; (800b164 <tcp_input+0x804>)
 800b0e8:	681b      	ldr	r3, [r3, #0]
 800b0ea:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b0ec:	4b1a      	ldr	r3, [pc, #104]	; (800b158 <tcp_input+0x7f8>)
 800b0ee:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b0f0:	885b      	ldrh	r3, [r3, #2]
 800b0f2:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b0f4:	4a18      	ldr	r2, [pc, #96]	; (800b158 <tcp_input+0x7f8>)
 800b0f6:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b0f8:	8812      	ldrh	r2, [r2, #0]
 800b0fa:	b292      	uxth	r2, r2
 800b0fc:	9202      	str	r2, [sp, #8]
 800b0fe:	9301      	str	r3, [sp, #4]
 800b100:	4b19      	ldr	r3, [pc, #100]	; (800b168 <tcp_input+0x808>)
 800b102:	9300      	str	r3, [sp, #0]
 800b104:	4b19      	ldr	r3, [pc, #100]	; (800b16c <tcp_input+0x80c>)
 800b106:	4602      	mov	r2, r0
 800b108:	2000      	movs	r0, #0
 800b10a:	f003 f833 	bl	800e174 <tcp_rst>
    pbuf_free(p);
 800b10e:	6878      	ldr	r0, [r7, #4]
 800b110:	f7fd fdee 	bl	8008cf0 <pbuf_free>
  return;
 800b114:	e00a      	b.n	800b12c <tcp_input+0x7cc>
    goto dropped;
 800b116:	bf00      	nop
 800b118:	e004      	b.n	800b124 <tcp_input+0x7c4>
dropped:
 800b11a:	bf00      	nop
 800b11c:	e002      	b.n	800b124 <tcp_input+0x7c4>
      goto dropped;
 800b11e:	bf00      	nop
 800b120:	e000      	b.n	800b124 <tcp_input+0x7c4>
      goto dropped;
 800b122:	bf00      	nop
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800b124:	6878      	ldr	r0, [r7, #4]
 800b126:	f7fd fde3 	bl	8008cf0 <pbuf_free>
 800b12a:	e000      	b.n	800b12e <tcp_input+0x7ce>
  return;
 800b12c:	bf00      	nop
}
 800b12e:	3724      	adds	r7, #36	; 0x24
 800b130:	46bd      	mov	sp, r7
 800b132:	bd90      	pop	{r4, r7, pc}
 800b134:	2000eef8 	.word	0x2000eef8
 800b138:	200084cd 	.word	0x200084cd
 800b13c:	2000eee4 	.word	0x2000eee4
 800b140:	200084c8 	.word	0x200084c8
 800b144:	200084d0 	.word	0x200084d0
 800b148:	08015914 	.word	0x08015914
 800b14c:	08015ac8 	.word	0x08015ac8
 800b150:	08015960 	.word	0x08015960
 800b154:	200084a0 	.word	0x200084a0
 800b158:	200084b0 	.word	0x200084b0
 800b15c:	200084c4 	.word	0x200084c4
 800b160:	200084ca 	.word	0x200084ca
 800b164:	200084c0 	.word	0x200084c0
 800b168:	2000b7c0 	.word	0x2000b7c0
 800b16c:	2000b7c4 	.word	0x2000b7c4

0800b170 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800b170:	b580      	push	{r7, lr}
 800b172:	b082      	sub	sp, #8
 800b174:	af00      	add	r7, sp, #0
 800b176:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	2b00      	cmp	r3, #0
 800b17c:	d106      	bne.n	800b18c <tcp_input_delayed_close+0x1c>
 800b17e:	4b17      	ldr	r3, [pc, #92]	; (800b1dc <tcp_input_delayed_close+0x6c>)
 800b180:	f240 225a 	movw	r2, #602	; 0x25a
 800b184:	4916      	ldr	r1, [pc, #88]	; (800b1e0 <tcp_input_delayed_close+0x70>)
 800b186:	4817      	ldr	r0, [pc, #92]	; (800b1e4 <tcp_input_delayed_close+0x74>)
 800b188:	f008 fac4 	bl	8013714 <iprintf>

  if (recv_flags & TF_CLOSED) {
 800b18c:	4b16      	ldr	r3, [pc, #88]	; (800b1e8 <tcp_input_delayed_close+0x78>)
 800b18e:	781b      	ldrb	r3, [r3, #0]
 800b190:	f003 0310 	and.w	r3, r3, #16
 800b194:	2b00      	cmp	r3, #0
 800b196:	d01c      	beq.n	800b1d2 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	8b5b      	ldrh	r3, [r3, #26]
 800b19c:	f003 0310 	and.w	r3, r3, #16
 800b1a0:	2b00      	cmp	r3, #0
 800b1a2:	d10d      	bne.n	800b1c0 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b1aa:	2b00      	cmp	r3, #0
 800b1ac:	d008      	beq.n	800b1c0 <tcp_input_delayed_close+0x50>
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b1b4:	687a      	ldr	r2, [r7, #4]
 800b1b6:	6912      	ldr	r2, [r2, #16]
 800b1b8:	f06f 010e 	mvn.w	r1, #14
 800b1bc:	4610      	mov	r0, r2
 800b1be:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800b1c0:	6879      	ldr	r1, [r7, #4]
 800b1c2:	480a      	ldr	r0, [pc, #40]	; (800b1ec <tcp_input_delayed_close+0x7c>)
 800b1c4:	f7ff fa54 	bl	800a670 <tcp_pcb_remove>
    tcp_free(pcb);
 800b1c8:	6878      	ldr	r0, [r7, #4]
 800b1ca:	f7fe f84d 	bl	8009268 <tcp_free>
    return 1;
 800b1ce:	2301      	movs	r3, #1
 800b1d0:	e000      	b.n	800b1d4 <tcp_input_delayed_close+0x64>
  }
  return 0;
 800b1d2:	2300      	movs	r3, #0
}
 800b1d4:	4618      	mov	r0, r3
 800b1d6:	3708      	adds	r7, #8
 800b1d8:	46bd      	mov	sp, r7
 800b1da:	bd80      	pop	{r7, pc}
 800b1dc:	08015914 	.word	0x08015914
 800b1e0:	08015ae4 	.word	0x08015ae4
 800b1e4:	08015960 	.word	0x08015960
 800b1e8:	200084cd 	.word	0x200084cd
 800b1ec:	2000eee4 	.word	0x2000eee4

0800b1f0 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800b1f0:	b590      	push	{r4, r7, lr}
 800b1f2:	b08b      	sub	sp, #44	; 0x2c
 800b1f4:	af04      	add	r7, sp, #16
 800b1f6:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800b1f8:	4b6f      	ldr	r3, [pc, #444]	; (800b3b8 <tcp_listen_input+0x1c8>)
 800b1fa:	781b      	ldrb	r3, [r3, #0]
 800b1fc:	f003 0304 	and.w	r3, r3, #4
 800b200:	2b00      	cmp	r3, #0
 800b202:	f040 80d3 	bne.w	800b3ac <tcp_listen_input+0x1bc>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	2b00      	cmp	r3, #0
 800b20a:	d106      	bne.n	800b21a <tcp_listen_input+0x2a>
 800b20c:	4b6b      	ldr	r3, [pc, #428]	; (800b3bc <tcp_listen_input+0x1cc>)
 800b20e:	f240 2281 	movw	r2, #641	; 0x281
 800b212:	496b      	ldr	r1, [pc, #428]	; (800b3c0 <tcp_listen_input+0x1d0>)
 800b214:	486b      	ldr	r0, [pc, #428]	; (800b3c4 <tcp_listen_input+0x1d4>)
 800b216:	f008 fa7d 	bl	8013714 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800b21a:	4b67      	ldr	r3, [pc, #412]	; (800b3b8 <tcp_listen_input+0x1c8>)
 800b21c:	781b      	ldrb	r3, [r3, #0]
 800b21e:	f003 0310 	and.w	r3, r3, #16
 800b222:	2b00      	cmp	r3, #0
 800b224:	d019      	beq.n	800b25a <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b226:	4b68      	ldr	r3, [pc, #416]	; (800b3c8 <tcp_listen_input+0x1d8>)
 800b228:	6819      	ldr	r1, [r3, #0]
 800b22a:	4b68      	ldr	r3, [pc, #416]	; (800b3cc <tcp_listen_input+0x1dc>)
 800b22c:	881b      	ldrh	r3, [r3, #0]
 800b22e:	461a      	mov	r2, r3
 800b230:	4b67      	ldr	r3, [pc, #412]	; (800b3d0 <tcp_listen_input+0x1e0>)
 800b232:	681b      	ldr	r3, [r3, #0]
 800b234:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b236:	4b67      	ldr	r3, [pc, #412]	; (800b3d4 <tcp_listen_input+0x1e4>)
 800b238:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b23a:	885b      	ldrh	r3, [r3, #2]
 800b23c:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b23e:	4a65      	ldr	r2, [pc, #404]	; (800b3d4 <tcp_listen_input+0x1e4>)
 800b240:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b242:	8812      	ldrh	r2, [r2, #0]
 800b244:	b292      	uxth	r2, r2
 800b246:	9202      	str	r2, [sp, #8]
 800b248:	9301      	str	r3, [sp, #4]
 800b24a:	4b63      	ldr	r3, [pc, #396]	; (800b3d8 <tcp_listen_input+0x1e8>)
 800b24c:	9300      	str	r3, [sp, #0]
 800b24e:	4b63      	ldr	r3, [pc, #396]	; (800b3dc <tcp_listen_input+0x1ec>)
 800b250:	4602      	mov	r2, r0
 800b252:	6878      	ldr	r0, [r7, #4]
 800b254:	f002 ff8e 	bl	800e174 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800b258:	e0aa      	b.n	800b3b0 <tcp_listen_input+0x1c0>
  } else if (flags & TCP_SYN) {
 800b25a:	4b57      	ldr	r3, [pc, #348]	; (800b3b8 <tcp_listen_input+0x1c8>)
 800b25c:	781b      	ldrb	r3, [r3, #0]
 800b25e:	f003 0302 	and.w	r3, r3, #2
 800b262:	2b00      	cmp	r3, #0
 800b264:	f000 80a4 	beq.w	800b3b0 <tcp_listen_input+0x1c0>
    npcb = tcp_alloc(pcb->prio);
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	7d5b      	ldrb	r3, [r3, #21]
 800b26c:	4618      	mov	r0, r3
 800b26e:	f7ff f92b 	bl	800a4c8 <tcp_alloc>
 800b272:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800b274:	697b      	ldr	r3, [r7, #20]
 800b276:	2b00      	cmp	r3, #0
 800b278:	d111      	bne.n	800b29e <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	699b      	ldr	r3, [r3, #24]
 800b27e:	2b00      	cmp	r3, #0
 800b280:	d00a      	beq.n	800b298 <tcp_listen_input+0xa8>
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	699b      	ldr	r3, [r3, #24]
 800b286:	687a      	ldr	r2, [r7, #4]
 800b288:	6910      	ldr	r0, [r2, #16]
 800b28a:	f04f 32ff 	mov.w	r2, #4294967295
 800b28e:	2100      	movs	r1, #0
 800b290:	4798      	blx	r3
 800b292:	4603      	mov	r3, r0
 800b294:	73bb      	strb	r3, [r7, #14]
      return;
 800b296:	e08c      	b.n	800b3b2 <tcp_listen_input+0x1c2>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800b298:	23f0      	movs	r3, #240	; 0xf0
 800b29a:	73bb      	strb	r3, [r7, #14]
      return;
 800b29c:	e089      	b.n	800b3b2 <tcp_listen_input+0x1c2>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800b29e:	4b50      	ldr	r3, [pc, #320]	; (800b3e0 <tcp_listen_input+0x1f0>)
 800b2a0:	695a      	ldr	r2, [r3, #20]
 800b2a2:	697b      	ldr	r3, [r7, #20]
 800b2a4:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800b2a6:	4b4e      	ldr	r3, [pc, #312]	; (800b3e0 <tcp_listen_input+0x1f0>)
 800b2a8:	691a      	ldr	r2, [r3, #16]
 800b2aa:	697b      	ldr	r3, [r7, #20]
 800b2ac:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	8ada      	ldrh	r2, [r3, #22]
 800b2b2:	697b      	ldr	r3, [r7, #20]
 800b2b4:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800b2b6:	4b47      	ldr	r3, [pc, #284]	; (800b3d4 <tcp_listen_input+0x1e4>)
 800b2b8:	681b      	ldr	r3, [r3, #0]
 800b2ba:	881b      	ldrh	r3, [r3, #0]
 800b2bc:	b29a      	uxth	r2, r3
 800b2be:	697b      	ldr	r3, [r7, #20]
 800b2c0:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800b2c2:	697b      	ldr	r3, [r7, #20]
 800b2c4:	2203      	movs	r2, #3
 800b2c6:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800b2c8:	4b41      	ldr	r3, [pc, #260]	; (800b3d0 <tcp_listen_input+0x1e0>)
 800b2ca:	681b      	ldr	r3, [r3, #0]
 800b2cc:	1c5a      	adds	r2, r3, #1
 800b2ce:	697b      	ldr	r3, [r7, #20]
 800b2d0:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800b2d2:	697b      	ldr	r3, [r7, #20]
 800b2d4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b2d6:	697b      	ldr	r3, [r7, #20]
 800b2d8:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800b2da:	6978      	ldr	r0, [r7, #20]
 800b2dc:	f7ff fa5c 	bl	800a798 <tcp_next_iss>
 800b2e0:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800b2e2:	697b      	ldr	r3, [r7, #20]
 800b2e4:	693a      	ldr	r2, [r7, #16]
 800b2e6:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 800b2e8:	697b      	ldr	r3, [r7, #20]
 800b2ea:	693a      	ldr	r2, [r7, #16]
 800b2ec:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 800b2ee:	697b      	ldr	r3, [r7, #20]
 800b2f0:	693a      	ldr	r2, [r7, #16]
 800b2f2:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 800b2f4:	697b      	ldr	r3, [r7, #20]
 800b2f6:	693a      	ldr	r2, [r7, #16]
 800b2f8:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800b2fa:	4b35      	ldr	r3, [pc, #212]	; (800b3d0 <tcp_listen_input+0x1e0>)
 800b2fc:	681b      	ldr	r3, [r3, #0]
 800b2fe:	1e5a      	subs	r2, r3, #1
 800b300:	697b      	ldr	r3, [r7, #20]
 800b302:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	691a      	ldr	r2, [r3, #16]
 800b308:	697b      	ldr	r3, [r7, #20]
 800b30a:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800b30c:	697b      	ldr	r3, [r7, #20]
 800b30e:	687a      	ldr	r2, [r7, #4]
 800b310:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	7a5b      	ldrb	r3, [r3, #9]
 800b316:	f003 030c 	and.w	r3, r3, #12
 800b31a:	b2da      	uxtb	r2, r3
 800b31c:	697b      	ldr	r3, [r7, #20]
 800b31e:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	7a1a      	ldrb	r2, [r3, #8]
 800b324:	697b      	ldr	r3, [r7, #20]
 800b326:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800b328:	4b2e      	ldr	r3, [pc, #184]	; (800b3e4 <tcp_listen_input+0x1f4>)
 800b32a:	681a      	ldr	r2, [r3, #0]
 800b32c:	697b      	ldr	r3, [r7, #20]
 800b32e:	60da      	str	r2, [r3, #12]
 800b330:	4a2c      	ldr	r2, [pc, #176]	; (800b3e4 <tcp_listen_input+0x1f4>)
 800b332:	697b      	ldr	r3, [r7, #20]
 800b334:	6013      	str	r3, [r2, #0]
 800b336:	f003 f8df 	bl	800e4f8 <tcp_timer_needed>
 800b33a:	4b2b      	ldr	r3, [pc, #172]	; (800b3e8 <tcp_listen_input+0x1f8>)
 800b33c:	2201      	movs	r2, #1
 800b33e:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800b340:	6978      	ldr	r0, [r7, #20]
 800b342:	f001 fd8f 	bl	800ce64 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800b346:	4b23      	ldr	r3, [pc, #140]	; (800b3d4 <tcp_listen_input+0x1e4>)
 800b348:	681b      	ldr	r3, [r3, #0]
 800b34a:	89db      	ldrh	r3, [r3, #14]
 800b34c:	b29a      	uxth	r2, r3
 800b34e:	697b      	ldr	r3, [r7, #20]
 800b350:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800b354:	697b      	ldr	r3, [r7, #20]
 800b356:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800b35a:	697b      	ldr	r3, [r7, #20]
 800b35c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800b360:	697b      	ldr	r3, [r7, #20]
 800b362:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800b364:	697b      	ldr	r3, [r7, #20]
 800b366:	3304      	adds	r3, #4
 800b368:	4618      	mov	r0, r3
 800b36a:	f006 fe79 	bl	8012060 <ip4_route>
 800b36e:	4601      	mov	r1, r0
 800b370:	697b      	ldr	r3, [r7, #20]
 800b372:	3304      	adds	r3, #4
 800b374:	461a      	mov	r2, r3
 800b376:	4620      	mov	r0, r4
 800b378:	f7ff fa34 	bl	800a7e4 <tcp_eff_send_mss_netif>
 800b37c:	4603      	mov	r3, r0
 800b37e:	461a      	mov	r2, r3
 800b380:	697b      	ldr	r3, [r7, #20]
 800b382:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800b384:	2112      	movs	r1, #18
 800b386:	6978      	ldr	r0, [r7, #20]
 800b388:	f002 f842 	bl	800d410 <tcp_enqueue_flags>
 800b38c:	4603      	mov	r3, r0
 800b38e:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800b390:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b394:	2b00      	cmp	r3, #0
 800b396:	d004      	beq.n	800b3a2 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800b398:	2100      	movs	r1, #0
 800b39a:	6978      	ldr	r0, [r7, #20]
 800b39c:	f7fe f986 	bl	80096ac <tcp_abandon>
      return;
 800b3a0:	e007      	b.n	800b3b2 <tcp_listen_input+0x1c2>
    tcp_output(npcb);
 800b3a2:	6978      	ldr	r0, [r7, #20]
 800b3a4:	f002 f922 	bl	800d5ec <tcp_output>
  return;
 800b3a8:	bf00      	nop
 800b3aa:	e001      	b.n	800b3b0 <tcp_listen_input+0x1c0>
    return;
 800b3ac:	bf00      	nop
 800b3ae:	e000      	b.n	800b3b2 <tcp_listen_input+0x1c2>
  return;
 800b3b0:	bf00      	nop
}
 800b3b2:	371c      	adds	r7, #28
 800b3b4:	46bd      	mov	sp, r7
 800b3b6:	bd90      	pop	{r4, r7, pc}
 800b3b8:	200084cc 	.word	0x200084cc
 800b3bc:	08015914 	.word	0x08015914
 800b3c0:	08015b0c 	.word	0x08015b0c
 800b3c4:	08015960 	.word	0x08015960
 800b3c8:	200084c4 	.word	0x200084c4
 800b3cc:	200084ca 	.word	0x200084ca
 800b3d0:	200084c0 	.word	0x200084c0
 800b3d4:	200084b0 	.word	0x200084b0
 800b3d8:	2000b7c0 	.word	0x2000b7c0
 800b3dc:	2000b7c4 	.word	0x2000b7c4
 800b3e0:	2000b7b0 	.word	0x2000b7b0
 800b3e4:	2000eee4 	.word	0x2000eee4
 800b3e8:	2000eee0 	.word	0x2000eee0

0800b3ec <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800b3ec:	b580      	push	{r7, lr}
 800b3ee:	b086      	sub	sp, #24
 800b3f0:	af04      	add	r7, sp, #16
 800b3f2:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800b3f4:	4b30      	ldr	r3, [pc, #192]	; (800b4b8 <tcp_timewait_input+0xcc>)
 800b3f6:	781b      	ldrb	r3, [r3, #0]
 800b3f8:	f003 0304 	and.w	r3, r3, #4
 800b3fc:	2b00      	cmp	r3, #0
 800b3fe:	d154      	bne.n	800b4aa <tcp_timewait_input+0xbe>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	2b00      	cmp	r3, #0
 800b404:	d106      	bne.n	800b414 <tcp_timewait_input+0x28>
 800b406:	4b2d      	ldr	r3, [pc, #180]	; (800b4bc <tcp_timewait_input+0xd0>)
 800b408:	f240 22ee 	movw	r2, #750	; 0x2ee
 800b40c:	492c      	ldr	r1, [pc, #176]	; (800b4c0 <tcp_timewait_input+0xd4>)
 800b40e:	482d      	ldr	r0, [pc, #180]	; (800b4c4 <tcp_timewait_input+0xd8>)
 800b410:	f008 f980 	bl	8013714 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800b414:	4b28      	ldr	r3, [pc, #160]	; (800b4b8 <tcp_timewait_input+0xcc>)
 800b416:	781b      	ldrb	r3, [r3, #0]
 800b418:	f003 0302 	and.w	r3, r3, #2
 800b41c:	2b00      	cmp	r3, #0
 800b41e:	d02a      	beq.n	800b476 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800b420:	4b29      	ldr	r3, [pc, #164]	; (800b4c8 <tcp_timewait_input+0xdc>)
 800b422:	681a      	ldr	r2, [r3, #0]
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b428:	1ad3      	subs	r3, r2, r3
 800b42a:	2b00      	cmp	r3, #0
 800b42c:	db2d      	blt.n	800b48a <tcp_timewait_input+0x9e>
 800b42e:	4b26      	ldr	r3, [pc, #152]	; (800b4c8 <tcp_timewait_input+0xdc>)
 800b430:	681a      	ldr	r2, [r3, #0]
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b436:	6879      	ldr	r1, [r7, #4]
 800b438:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800b43a:	440b      	add	r3, r1
 800b43c:	1ad3      	subs	r3, r2, r3
 800b43e:	2b00      	cmp	r3, #0
 800b440:	dc23      	bgt.n	800b48a <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b442:	4b22      	ldr	r3, [pc, #136]	; (800b4cc <tcp_timewait_input+0xe0>)
 800b444:	6819      	ldr	r1, [r3, #0]
 800b446:	4b22      	ldr	r3, [pc, #136]	; (800b4d0 <tcp_timewait_input+0xe4>)
 800b448:	881b      	ldrh	r3, [r3, #0]
 800b44a:	461a      	mov	r2, r3
 800b44c:	4b1e      	ldr	r3, [pc, #120]	; (800b4c8 <tcp_timewait_input+0xdc>)
 800b44e:	681b      	ldr	r3, [r3, #0]
 800b450:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b452:	4b20      	ldr	r3, [pc, #128]	; (800b4d4 <tcp_timewait_input+0xe8>)
 800b454:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b456:	885b      	ldrh	r3, [r3, #2]
 800b458:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b45a:	4a1e      	ldr	r2, [pc, #120]	; (800b4d4 <tcp_timewait_input+0xe8>)
 800b45c:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b45e:	8812      	ldrh	r2, [r2, #0]
 800b460:	b292      	uxth	r2, r2
 800b462:	9202      	str	r2, [sp, #8]
 800b464:	9301      	str	r3, [sp, #4]
 800b466:	4b1c      	ldr	r3, [pc, #112]	; (800b4d8 <tcp_timewait_input+0xec>)
 800b468:	9300      	str	r3, [sp, #0]
 800b46a:	4b1c      	ldr	r3, [pc, #112]	; (800b4dc <tcp_timewait_input+0xf0>)
 800b46c:	4602      	mov	r2, r0
 800b46e:	6878      	ldr	r0, [r7, #4]
 800b470:	f002 fe80 	bl	800e174 <tcp_rst>
      return;
 800b474:	e01c      	b.n	800b4b0 <tcp_timewait_input+0xc4>
    }
  } else if (flags & TCP_FIN) {
 800b476:	4b10      	ldr	r3, [pc, #64]	; (800b4b8 <tcp_timewait_input+0xcc>)
 800b478:	781b      	ldrb	r3, [r3, #0]
 800b47a:	f003 0301 	and.w	r3, r3, #1
 800b47e:	2b00      	cmp	r3, #0
 800b480:	d003      	beq.n	800b48a <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800b482:	4b17      	ldr	r3, [pc, #92]	; (800b4e0 <tcp_timewait_input+0xf4>)
 800b484:	681a      	ldr	r2, [r3, #0]
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800b48a:	4b11      	ldr	r3, [pc, #68]	; (800b4d0 <tcp_timewait_input+0xe4>)
 800b48c:	881b      	ldrh	r3, [r3, #0]
 800b48e:	2b00      	cmp	r3, #0
 800b490:	d00d      	beq.n	800b4ae <tcp_timewait_input+0xc2>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	8b5b      	ldrh	r3, [r3, #26]
 800b496:	f043 0302 	orr.w	r3, r3, #2
 800b49a:	b29a      	uxth	r2, r3
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800b4a0:	6878      	ldr	r0, [r7, #4]
 800b4a2:	f002 f8a3 	bl	800d5ec <tcp_output>
  }
  return;
 800b4a6:	bf00      	nop
 800b4a8:	e001      	b.n	800b4ae <tcp_timewait_input+0xc2>
    return;
 800b4aa:	bf00      	nop
 800b4ac:	e000      	b.n	800b4b0 <tcp_timewait_input+0xc4>
  return;
 800b4ae:	bf00      	nop
}
 800b4b0:	3708      	adds	r7, #8
 800b4b2:	46bd      	mov	sp, r7
 800b4b4:	bd80      	pop	{r7, pc}
 800b4b6:	bf00      	nop
 800b4b8:	200084cc 	.word	0x200084cc
 800b4bc:	08015914 	.word	0x08015914
 800b4c0:	08015b2c 	.word	0x08015b2c
 800b4c4:	08015960 	.word	0x08015960
 800b4c8:	200084c0 	.word	0x200084c0
 800b4cc:	200084c4 	.word	0x200084c4
 800b4d0:	200084ca 	.word	0x200084ca
 800b4d4:	200084b0 	.word	0x200084b0
 800b4d8:	2000b7c0 	.word	0x2000b7c0
 800b4dc:	2000b7c4 	.word	0x2000b7c4
 800b4e0:	2000eee8 	.word	0x2000eee8

0800b4e4 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800b4e4:	b590      	push	{r4, r7, lr}
 800b4e6:	b08d      	sub	sp, #52	; 0x34
 800b4e8:	af04      	add	r7, sp, #16
 800b4ea:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800b4ec:	2300      	movs	r3, #0
 800b4ee:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800b4f0:	2300      	movs	r3, #0
 800b4f2:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	2b00      	cmp	r3, #0
 800b4f8:	d106      	bne.n	800b508 <tcp_process+0x24>
 800b4fa:	4ba5      	ldr	r3, [pc, #660]	; (800b790 <tcp_process+0x2ac>)
 800b4fc:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800b500:	49a4      	ldr	r1, [pc, #656]	; (800b794 <tcp_process+0x2b0>)
 800b502:	48a5      	ldr	r0, [pc, #660]	; (800b798 <tcp_process+0x2b4>)
 800b504:	f008 f906 	bl	8013714 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800b508:	4ba4      	ldr	r3, [pc, #656]	; (800b79c <tcp_process+0x2b8>)
 800b50a:	781b      	ldrb	r3, [r3, #0]
 800b50c:	f003 0304 	and.w	r3, r3, #4
 800b510:	2b00      	cmp	r3, #0
 800b512:	d04e      	beq.n	800b5b2 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	7d1b      	ldrb	r3, [r3, #20]
 800b518:	2b02      	cmp	r3, #2
 800b51a:	d108      	bne.n	800b52e <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b520:	4b9f      	ldr	r3, [pc, #636]	; (800b7a0 <tcp_process+0x2bc>)
 800b522:	681b      	ldr	r3, [r3, #0]
 800b524:	429a      	cmp	r2, r3
 800b526:	d123      	bne.n	800b570 <tcp_process+0x8c>
        acceptable = 1;
 800b528:	2301      	movs	r3, #1
 800b52a:	76fb      	strb	r3, [r7, #27]
 800b52c:	e020      	b.n	800b570 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b532:	4b9c      	ldr	r3, [pc, #624]	; (800b7a4 <tcp_process+0x2c0>)
 800b534:	681b      	ldr	r3, [r3, #0]
 800b536:	429a      	cmp	r2, r3
 800b538:	d102      	bne.n	800b540 <tcp_process+0x5c>
        acceptable = 1;
 800b53a:	2301      	movs	r3, #1
 800b53c:	76fb      	strb	r3, [r7, #27]
 800b53e:	e017      	b.n	800b570 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800b540:	4b98      	ldr	r3, [pc, #608]	; (800b7a4 <tcp_process+0x2c0>)
 800b542:	681a      	ldr	r2, [r3, #0]
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b548:	1ad3      	subs	r3, r2, r3
 800b54a:	2b00      	cmp	r3, #0
 800b54c:	db10      	blt.n	800b570 <tcp_process+0x8c>
 800b54e:	4b95      	ldr	r3, [pc, #596]	; (800b7a4 <tcp_process+0x2c0>)
 800b550:	681a      	ldr	r2, [r3, #0]
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b556:	6879      	ldr	r1, [r7, #4]
 800b558:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800b55a:	440b      	add	r3, r1
 800b55c:	1ad3      	subs	r3, r2, r3
 800b55e:	2b00      	cmp	r3, #0
 800b560:	dc06      	bgt.n	800b570 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	8b5b      	ldrh	r3, [r3, #26]
 800b566:	f043 0302 	orr.w	r3, r3, #2
 800b56a:	b29a      	uxth	r2, r3
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800b570:	7efb      	ldrb	r3, [r7, #27]
 800b572:	2b00      	cmp	r3, #0
 800b574:	d01b      	beq.n	800b5ae <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	7d1b      	ldrb	r3, [r3, #20]
 800b57a:	2b00      	cmp	r3, #0
 800b57c:	d106      	bne.n	800b58c <tcp_process+0xa8>
 800b57e:	4b84      	ldr	r3, [pc, #528]	; (800b790 <tcp_process+0x2ac>)
 800b580:	f44f 724e 	mov.w	r2, #824	; 0x338
 800b584:	4988      	ldr	r1, [pc, #544]	; (800b7a8 <tcp_process+0x2c4>)
 800b586:	4884      	ldr	r0, [pc, #528]	; (800b798 <tcp_process+0x2b4>)
 800b588:	f008 f8c4 	bl	8013714 <iprintf>
      recv_flags |= TF_RESET;
 800b58c:	4b87      	ldr	r3, [pc, #540]	; (800b7ac <tcp_process+0x2c8>)
 800b58e:	781b      	ldrb	r3, [r3, #0]
 800b590:	f043 0308 	orr.w	r3, r3, #8
 800b594:	b2da      	uxtb	r2, r3
 800b596:	4b85      	ldr	r3, [pc, #532]	; (800b7ac <tcp_process+0x2c8>)
 800b598:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	8b5b      	ldrh	r3, [r3, #26]
 800b59e:	f023 0301 	bic.w	r3, r3, #1
 800b5a2:	b29a      	uxth	r2, r3
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800b5a8:	f06f 030d 	mvn.w	r3, #13
 800b5ac:	e37a      	b.n	800bca4 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800b5ae:	2300      	movs	r3, #0
 800b5b0:	e378      	b.n	800bca4 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800b5b2:	4b7a      	ldr	r3, [pc, #488]	; (800b79c <tcp_process+0x2b8>)
 800b5b4:	781b      	ldrb	r3, [r3, #0]
 800b5b6:	f003 0302 	and.w	r3, r3, #2
 800b5ba:	2b00      	cmp	r3, #0
 800b5bc:	d010      	beq.n	800b5e0 <tcp_process+0xfc>
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	7d1b      	ldrb	r3, [r3, #20]
 800b5c2:	2b02      	cmp	r3, #2
 800b5c4:	d00c      	beq.n	800b5e0 <tcp_process+0xfc>
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	7d1b      	ldrb	r3, [r3, #20]
 800b5ca:	2b03      	cmp	r3, #3
 800b5cc:	d008      	beq.n	800b5e0 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	8b5b      	ldrh	r3, [r3, #26]
 800b5d2:	f043 0302 	orr.w	r3, r3, #2
 800b5d6:	b29a      	uxth	r2, r3
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800b5dc:	2300      	movs	r3, #0
 800b5de:	e361      	b.n	800bca4 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	8b5b      	ldrh	r3, [r3, #26]
 800b5e4:	f003 0310 	and.w	r3, r3, #16
 800b5e8:	2b00      	cmp	r3, #0
 800b5ea:	d103      	bne.n	800b5f4 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800b5ec:	4b70      	ldr	r3, [pc, #448]	; (800b7b0 <tcp_process+0x2cc>)
 800b5ee:	681a      	ldr	r2, [r3, #0]
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	2200      	movs	r2, #0
 800b5f8:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	2200      	movs	r2, #0
 800b600:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 800b604:	6878      	ldr	r0, [r7, #4]
 800b606:	f001 fc2d 	bl	800ce64 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	7d1b      	ldrb	r3, [r3, #20]
 800b60e:	3b02      	subs	r3, #2
 800b610:	2b07      	cmp	r3, #7
 800b612:	f200 8337 	bhi.w	800bc84 <tcp_process+0x7a0>
 800b616:	a201      	add	r2, pc, #4	; (adr r2, 800b61c <tcp_process+0x138>)
 800b618:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b61c:	0800b63d 	.word	0x0800b63d
 800b620:	0800b86d 	.word	0x0800b86d
 800b624:	0800b9e5 	.word	0x0800b9e5
 800b628:	0800ba0f 	.word	0x0800ba0f
 800b62c:	0800bb33 	.word	0x0800bb33
 800b630:	0800b9e5 	.word	0x0800b9e5
 800b634:	0800bbbf 	.word	0x0800bbbf
 800b638:	0800bc4f 	.word	0x0800bc4f
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800b63c:	4b57      	ldr	r3, [pc, #348]	; (800b79c <tcp_process+0x2b8>)
 800b63e:	781b      	ldrb	r3, [r3, #0]
 800b640:	f003 0310 	and.w	r3, r3, #16
 800b644:	2b00      	cmp	r3, #0
 800b646:	f000 80e4 	beq.w	800b812 <tcp_process+0x32e>
 800b64a:	4b54      	ldr	r3, [pc, #336]	; (800b79c <tcp_process+0x2b8>)
 800b64c:	781b      	ldrb	r3, [r3, #0]
 800b64e:	f003 0302 	and.w	r3, r3, #2
 800b652:	2b00      	cmp	r3, #0
 800b654:	f000 80dd 	beq.w	800b812 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b65c:	1c5a      	adds	r2, r3, #1
 800b65e:	4b50      	ldr	r3, [pc, #320]	; (800b7a0 <tcp_process+0x2bc>)
 800b660:	681b      	ldr	r3, [r3, #0]
 800b662:	429a      	cmp	r2, r3
 800b664:	f040 80d5 	bne.w	800b812 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 800b668:	4b4e      	ldr	r3, [pc, #312]	; (800b7a4 <tcp_process+0x2c0>)
 800b66a:	681b      	ldr	r3, [r3, #0]
 800b66c:	1c5a      	adds	r2, r3, #1
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 800b67a:	4b49      	ldr	r3, [pc, #292]	; (800b7a0 <tcp_process+0x2bc>)
 800b67c:	681a      	ldr	r2, [r3, #0]
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800b682:	4b4c      	ldr	r3, [pc, #304]	; (800b7b4 <tcp_process+0x2d0>)
 800b684:	681b      	ldr	r3, [r3, #0]
 800b686:	89db      	ldrh	r3, [r3, #14]
 800b688:	b29a      	uxth	r2, r3
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800b69c:	4b41      	ldr	r3, [pc, #260]	; (800b7a4 <tcp_process+0x2c0>)
 800b69e:	681b      	ldr	r3, [r3, #0]
 800b6a0:	1e5a      	subs	r2, r3, #1
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	2204      	movs	r2, #4
 800b6aa:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	3304      	adds	r3, #4
 800b6b4:	4618      	mov	r0, r3
 800b6b6:	f006 fcd3 	bl	8012060 <ip4_route>
 800b6ba:	4601      	mov	r1, r0
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	3304      	adds	r3, #4
 800b6c0:	461a      	mov	r2, r3
 800b6c2:	4620      	mov	r0, r4
 800b6c4:	f7ff f88e 	bl	800a7e4 <tcp_eff_send_mss_netif>
 800b6c8:	4603      	mov	r3, r0
 800b6ca:	461a      	mov	r2, r3
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b6d4:	009a      	lsls	r2, r3, #2
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b6da:	005b      	lsls	r3, r3, #1
 800b6dc:	f241 111c 	movw	r1, #4380	; 0x111c
 800b6e0:	428b      	cmp	r3, r1
 800b6e2:	bf38      	it	cc
 800b6e4:	460b      	movcc	r3, r1
 800b6e6:	429a      	cmp	r2, r3
 800b6e8:	d204      	bcs.n	800b6f4 <tcp_process+0x210>
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b6ee:	009b      	lsls	r3, r3, #2
 800b6f0:	b29b      	uxth	r3, r3
 800b6f2:	e00d      	b.n	800b710 <tcp_process+0x22c>
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b6f8:	005b      	lsls	r3, r3, #1
 800b6fa:	f241 121c 	movw	r2, #4380	; 0x111c
 800b6fe:	4293      	cmp	r3, r2
 800b700:	d904      	bls.n	800b70c <tcp_process+0x228>
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b706:	005b      	lsls	r3, r3, #1
 800b708:	b29b      	uxth	r3, r3
 800b70a:	e001      	b.n	800b710 <tcp_process+0x22c>
 800b70c:	f241 131c 	movw	r3, #4380	; 0x111c
 800b710:	687a      	ldr	r2, [r7, #4]
 800b712:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800b71c:	2b00      	cmp	r3, #0
 800b71e:	d106      	bne.n	800b72e <tcp_process+0x24a>
 800b720:	4b1b      	ldr	r3, [pc, #108]	; (800b790 <tcp_process+0x2ac>)
 800b722:	f44f 725b 	mov.w	r2, #876	; 0x36c
 800b726:	4924      	ldr	r1, [pc, #144]	; (800b7b8 <tcp_process+0x2d4>)
 800b728:	481b      	ldr	r0, [pc, #108]	; (800b798 <tcp_process+0x2b4>)
 800b72a:	f007 fff3 	bl	8013714 <iprintf>
        --pcb->snd_queuelen;
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800b734:	3b01      	subs	r3, #1
 800b736:	b29a      	uxth	r2, r3
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b742:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 800b744:	69fb      	ldr	r3, [r7, #28]
 800b746:	2b00      	cmp	r3, #0
 800b748:	d111      	bne.n	800b76e <tcp_process+0x28a>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b74e:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800b750:	69fb      	ldr	r3, [r7, #28]
 800b752:	2b00      	cmp	r3, #0
 800b754:	d106      	bne.n	800b764 <tcp_process+0x280>
 800b756:	4b0e      	ldr	r3, [pc, #56]	; (800b790 <tcp_process+0x2ac>)
 800b758:	f44f 725d 	mov.w	r2, #884	; 0x374
 800b75c:	4917      	ldr	r1, [pc, #92]	; (800b7bc <tcp_process+0x2d8>)
 800b75e:	480e      	ldr	r0, [pc, #56]	; (800b798 <tcp_process+0x2b4>)
 800b760:	f007 ffd8 	bl	8013714 <iprintf>
          pcb->unsent = rseg->next;
 800b764:	69fb      	ldr	r3, [r7, #28]
 800b766:	681a      	ldr	r2, [r3, #0]
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	66da      	str	r2, [r3, #108]	; 0x6c
 800b76c:	e003      	b.n	800b776 <tcp_process+0x292>
        } else {
          pcb->unacked = rseg->next;
 800b76e:	69fb      	ldr	r3, [r7, #28]
 800b770:	681a      	ldr	r2, [r3, #0]
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 800b776:	69f8      	ldr	r0, [r7, #28]
 800b778:	f7fe fd3e 	bl	800a1f8 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b780:	2b00      	cmp	r3, #0
 800b782:	d11d      	bne.n	800b7c0 <tcp_process+0x2dc>
          pcb->rtime = -1;
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b78a:	861a      	strh	r2, [r3, #48]	; 0x30
 800b78c:	e01f      	b.n	800b7ce <tcp_process+0x2ea>
 800b78e:	bf00      	nop
 800b790:	08015914 	.word	0x08015914
 800b794:	08015b4c 	.word	0x08015b4c
 800b798:	08015960 	.word	0x08015960
 800b79c:	200084cc 	.word	0x200084cc
 800b7a0:	200084c4 	.word	0x200084c4
 800b7a4:	200084c0 	.word	0x200084c0
 800b7a8:	08015b68 	.word	0x08015b68
 800b7ac:	200084cd 	.word	0x200084cd
 800b7b0:	2000eee8 	.word	0x2000eee8
 800b7b4:	200084b0 	.word	0x200084b0
 800b7b8:	08015b88 	.word	0x08015b88
 800b7bc:	08015ba0 	.word	0x08015ba0
        } else {
          pcb->rtime = 0;
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	2200      	movs	r2, #0
 800b7c4:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	2200      	movs	r2, #0
 800b7ca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b7d4:	2b00      	cmp	r3, #0
 800b7d6:	d00a      	beq.n	800b7ee <tcp_process+0x30a>
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b7de:	687a      	ldr	r2, [r7, #4]
 800b7e0:	6910      	ldr	r0, [r2, #16]
 800b7e2:	2200      	movs	r2, #0
 800b7e4:	6879      	ldr	r1, [r7, #4]
 800b7e6:	4798      	blx	r3
 800b7e8:	4603      	mov	r3, r0
 800b7ea:	76bb      	strb	r3, [r7, #26]
 800b7ec:	e001      	b.n	800b7f2 <tcp_process+0x30e>
 800b7ee:	2300      	movs	r3, #0
 800b7f0:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 800b7f2:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800b7f6:	f113 0f0d 	cmn.w	r3, #13
 800b7fa:	d102      	bne.n	800b802 <tcp_process+0x31e>
          return ERR_ABRT;
 800b7fc:	f06f 030c 	mvn.w	r3, #12
 800b800:	e250      	b.n	800bca4 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	8b5b      	ldrh	r3, [r3, #26]
 800b806:	f043 0302 	orr.w	r3, r3, #2
 800b80a:	b29a      	uxth	r2, r3
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 800b810:	e23a      	b.n	800bc88 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 800b812:	4b9d      	ldr	r3, [pc, #628]	; (800ba88 <tcp_process+0x5a4>)
 800b814:	781b      	ldrb	r3, [r3, #0]
 800b816:	f003 0310 	and.w	r3, r3, #16
 800b81a:	2b00      	cmp	r3, #0
 800b81c:	f000 8234 	beq.w	800bc88 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b820:	4b9a      	ldr	r3, [pc, #616]	; (800ba8c <tcp_process+0x5a8>)
 800b822:	6819      	ldr	r1, [r3, #0]
 800b824:	4b9a      	ldr	r3, [pc, #616]	; (800ba90 <tcp_process+0x5ac>)
 800b826:	881b      	ldrh	r3, [r3, #0]
 800b828:	461a      	mov	r2, r3
 800b82a:	4b9a      	ldr	r3, [pc, #616]	; (800ba94 <tcp_process+0x5b0>)
 800b82c:	681b      	ldr	r3, [r3, #0]
 800b82e:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b830:	4b99      	ldr	r3, [pc, #612]	; (800ba98 <tcp_process+0x5b4>)
 800b832:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b834:	885b      	ldrh	r3, [r3, #2]
 800b836:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b838:	4a97      	ldr	r2, [pc, #604]	; (800ba98 <tcp_process+0x5b4>)
 800b83a:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b83c:	8812      	ldrh	r2, [r2, #0]
 800b83e:	b292      	uxth	r2, r2
 800b840:	9202      	str	r2, [sp, #8]
 800b842:	9301      	str	r3, [sp, #4]
 800b844:	4b95      	ldr	r3, [pc, #596]	; (800ba9c <tcp_process+0x5b8>)
 800b846:	9300      	str	r3, [sp, #0]
 800b848:	4b95      	ldr	r3, [pc, #596]	; (800baa0 <tcp_process+0x5bc>)
 800b84a:	4602      	mov	r2, r0
 800b84c:	6878      	ldr	r0, [r7, #4]
 800b84e:	f002 fc91 	bl	800e174 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b858:	2b05      	cmp	r3, #5
 800b85a:	f200 8215 	bhi.w	800bc88 <tcp_process+0x7a4>
          pcb->rtime = 0;
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	2200      	movs	r2, #0
 800b862:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 800b864:	6878      	ldr	r0, [r7, #4]
 800b866:	f002 fa51 	bl	800dd0c <tcp_rexmit_rto>
      break;
 800b86a:	e20d      	b.n	800bc88 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 800b86c:	4b86      	ldr	r3, [pc, #536]	; (800ba88 <tcp_process+0x5a4>)
 800b86e:	781b      	ldrb	r3, [r3, #0]
 800b870:	f003 0310 	and.w	r3, r3, #16
 800b874:	2b00      	cmp	r3, #0
 800b876:	f000 80a1 	beq.w	800b9bc <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800b87a:	4b84      	ldr	r3, [pc, #528]	; (800ba8c <tcp_process+0x5a8>)
 800b87c:	681a      	ldr	r2, [r3, #0]
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b882:	1ad3      	subs	r3, r2, r3
 800b884:	3b01      	subs	r3, #1
 800b886:	2b00      	cmp	r3, #0
 800b888:	db7e      	blt.n	800b988 <tcp_process+0x4a4>
 800b88a:	4b80      	ldr	r3, [pc, #512]	; (800ba8c <tcp_process+0x5a8>)
 800b88c:	681a      	ldr	r2, [r3, #0]
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b892:	1ad3      	subs	r3, r2, r3
 800b894:	2b00      	cmp	r3, #0
 800b896:	dc77      	bgt.n	800b988 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	2204      	movs	r2, #4
 800b89c:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b8a2:	2b00      	cmp	r3, #0
 800b8a4:	d102      	bne.n	800b8ac <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800b8a6:	23fa      	movs	r3, #250	; 0xfa
 800b8a8:	76bb      	strb	r3, [r7, #26]
 800b8aa:	e01d      	b.n	800b8e8 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b8b0:	699b      	ldr	r3, [r3, #24]
 800b8b2:	2b00      	cmp	r3, #0
 800b8b4:	d106      	bne.n	800b8c4 <tcp_process+0x3e0>
 800b8b6:	4b7b      	ldr	r3, [pc, #492]	; (800baa4 <tcp_process+0x5c0>)
 800b8b8:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 800b8bc:	497a      	ldr	r1, [pc, #488]	; (800baa8 <tcp_process+0x5c4>)
 800b8be:	487b      	ldr	r0, [pc, #492]	; (800baac <tcp_process+0x5c8>)
 800b8c0:	f007 ff28 	bl	8013714 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b8c8:	699b      	ldr	r3, [r3, #24]
 800b8ca:	2b00      	cmp	r3, #0
 800b8cc:	d00a      	beq.n	800b8e4 <tcp_process+0x400>
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b8d2:	699b      	ldr	r3, [r3, #24]
 800b8d4:	687a      	ldr	r2, [r7, #4]
 800b8d6:	6910      	ldr	r0, [r2, #16]
 800b8d8:	2200      	movs	r2, #0
 800b8da:	6879      	ldr	r1, [r7, #4]
 800b8dc:	4798      	blx	r3
 800b8de:	4603      	mov	r3, r0
 800b8e0:	76bb      	strb	r3, [r7, #26]
 800b8e2:	e001      	b.n	800b8e8 <tcp_process+0x404>
 800b8e4:	23f0      	movs	r3, #240	; 0xf0
 800b8e6:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 800b8e8:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800b8ec:	2b00      	cmp	r3, #0
 800b8ee:	d00a      	beq.n	800b906 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 800b8f0:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800b8f4:	f113 0f0d 	cmn.w	r3, #13
 800b8f8:	d002      	beq.n	800b900 <tcp_process+0x41c>
              tcp_abort(pcb);
 800b8fa:	6878      	ldr	r0, [r7, #4]
 800b8fc:	f7fd ff94 	bl	8009828 <tcp_abort>
            }
            return ERR_ABRT;
 800b900:	f06f 030c 	mvn.w	r3, #12
 800b904:	e1ce      	b.n	800bca4 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800b906:	6878      	ldr	r0, [r7, #4]
 800b908:	f000 fae0 	bl	800becc <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 800b90c:	4b68      	ldr	r3, [pc, #416]	; (800bab0 <tcp_process+0x5cc>)
 800b90e:	881b      	ldrh	r3, [r3, #0]
 800b910:	2b00      	cmp	r3, #0
 800b912:	d005      	beq.n	800b920 <tcp_process+0x43c>
            recv_acked--;
 800b914:	4b66      	ldr	r3, [pc, #408]	; (800bab0 <tcp_process+0x5cc>)
 800b916:	881b      	ldrh	r3, [r3, #0]
 800b918:	3b01      	subs	r3, #1
 800b91a:	b29a      	uxth	r2, r3
 800b91c:	4b64      	ldr	r3, [pc, #400]	; (800bab0 <tcp_process+0x5cc>)
 800b91e:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b924:	009a      	lsls	r2, r3, #2
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b92a:	005b      	lsls	r3, r3, #1
 800b92c:	f241 111c 	movw	r1, #4380	; 0x111c
 800b930:	428b      	cmp	r3, r1
 800b932:	bf38      	it	cc
 800b934:	460b      	movcc	r3, r1
 800b936:	429a      	cmp	r2, r3
 800b938:	d204      	bcs.n	800b944 <tcp_process+0x460>
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b93e:	009b      	lsls	r3, r3, #2
 800b940:	b29b      	uxth	r3, r3
 800b942:	e00d      	b.n	800b960 <tcp_process+0x47c>
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b948:	005b      	lsls	r3, r3, #1
 800b94a:	f241 121c 	movw	r2, #4380	; 0x111c
 800b94e:	4293      	cmp	r3, r2
 800b950:	d904      	bls.n	800b95c <tcp_process+0x478>
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b956:	005b      	lsls	r3, r3, #1
 800b958:	b29b      	uxth	r3, r3
 800b95a:	e001      	b.n	800b960 <tcp_process+0x47c>
 800b95c:	f241 131c 	movw	r3, #4380	; 0x111c
 800b960:	687a      	ldr	r2, [r7, #4]
 800b962:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800b966:	4b53      	ldr	r3, [pc, #332]	; (800bab4 <tcp_process+0x5d0>)
 800b968:	781b      	ldrb	r3, [r3, #0]
 800b96a:	f003 0320 	and.w	r3, r3, #32
 800b96e:	2b00      	cmp	r3, #0
 800b970:	d037      	beq.n	800b9e2 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	8b5b      	ldrh	r3, [r3, #26]
 800b976:	f043 0302 	orr.w	r3, r3, #2
 800b97a:	b29a      	uxth	r2, r3
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	2207      	movs	r2, #7
 800b984:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800b986:	e02c      	b.n	800b9e2 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b988:	4b40      	ldr	r3, [pc, #256]	; (800ba8c <tcp_process+0x5a8>)
 800b98a:	6819      	ldr	r1, [r3, #0]
 800b98c:	4b40      	ldr	r3, [pc, #256]	; (800ba90 <tcp_process+0x5ac>)
 800b98e:	881b      	ldrh	r3, [r3, #0]
 800b990:	461a      	mov	r2, r3
 800b992:	4b40      	ldr	r3, [pc, #256]	; (800ba94 <tcp_process+0x5b0>)
 800b994:	681b      	ldr	r3, [r3, #0]
 800b996:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b998:	4b3f      	ldr	r3, [pc, #252]	; (800ba98 <tcp_process+0x5b4>)
 800b99a:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b99c:	885b      	ldrh	r3, [r3, #2]
 800b99e:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b9a0:	4a3d      	ldr	r2, [pc, #244]	; (800ba98 <tcp_process+0x5b4>)
 800b9a2:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b9a4:	8812      	ldrh	r2, [r2, #0]
 800b9a6:	b292      	uxth	r2, r2
 800b9a8:	9202      	str	r2, [sp, #8]
 800b9aa:	9301      	str	r3, [sp, #4]
 800b9ac:	4b3b      	ldr	r3, [pc, #236]	; (800ba9c <tcp_process+0x5b8>)
 800b9ae:	9300      	str	r3, [sp, #0]
 800b9b0:	4b3b      	ldr	r3, [pc, #236]	; (800baa0 <tcp_process+0x5bc>)
 800b9b2:	4602      	mov	r2, r0
 800b9b4:	6878      	ldr	r0, [r7, #4]
 800b9b6:	f002 fbdd 	bl	800e174 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 800b9ba:	e167      	b.n	800bc8c <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800b9bc:	4b32      	ldr	r3, [pc, #200]	; (800ba88 <tcp_process+0x5a4>)
 800b9be:	781b      	ldrb	r3, [r3, #0]
 800b9c0:	f003 0302 	and.w	r3, r3, #2
 800b9c4:	2b00      	cmp	r3, #0
 800b9c6:	f000 8161 	beq.w	800bc8c <tcp_process+0x7a8>
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9ce:	1e5a      	subs	r2, r3, #1
 800b9d0:	4b30      	ldr	r3, [pc, #192]	; (800ba94 <tcp_process+0x5b0>)
 800b9d2:	681b      	ldr	r3, [r3, #0]
 800b9d4:	429a      	cmp	r2, r3
 800b9d6:	f040 8159 	bne.w	800bc8c <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 800b9da:	6878      	ldr	r0, [r7, #4]
 800b9dc:	f002 f9b8 	bl	800dd50 <tcp_rexmit>
      break;
 800b9e0:	e154      	b.n	800bc8c <tcp_process+0x7a8>
 800b9e2:	e153      	b.n	800bc8c <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 800b9e4:	6878      	ldr	r0, [r7, #4]
 800b9e6:	f000 fa71 	bl	800becc <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800b9ea:	4b32      	ldr	r3, [pc, #200]	; (800bab4 <tcp_process+0x5d0>)
 800b9ec:	781b      	ldrb	r3, [r3, #0]
 800b9ee:	f003 0320 	and.w	r3, r3, #32
 800b9f2:	2b00      	cmp	r3, #0
 800b9f4:	f000 814c 	beq.w	800bc90 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	8b5b      	ldrh	r3, [r3, #26]
 800b9fc:	f043 0302 	orr.w	r3, r3, #2
 800ba00:	b29a      	uxth	r2, r3
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	2207      	movs	r2, #7
 800ba0a:	751a      	strb	r2, [r3, #20]
      }
      break;
 800ba0c:	e140      	b.n	800bc90 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 800ba0e:	6878      	ldr	r0, [r7, #4]
 800ba10:	f000 fa5c 	bl	800becc <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800ba14:	4b27      	ldr	r3, [pc, #156]	; (800bab4 <tcp_process+0x5d0>)
 800ba16:	781b      	ldrb	r3, [r3, #0]
 800ba18:	f003 0320 	and.w	r3, r3, #32
 800ba1c:	2b00      	cmp	r3, #0
 800ba1e:	d071      	beq.n	800bb04 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800ba20:	4b19      	ldr	r3, [pc, #100]	; (800ba88 <tcp_process+0x5a4>)
 800ba22:	781b      	ldrb	r3, [r3, #0]
 800ba24:	f003 0310 	and.w	r3, r3, #16
 800ba28:	2b00      	cmp	r3, #0
 800ba2a:	d060      	beq.n	800baee <tcp_process+0x60a>
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ba30:	4b16      	ldr	r3, [pc, #88]	; (800ba8c <tcp_process+0x5a8>)
 800ba32:	681b      	ldr	r3, [r3, #0]
 800ba34:	429a      	cmp	r2, r3
 800ba36:	d15a      	bne.n	800baee <tcp_process+0x60a>
            pcb->unsent == NULL) {
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800ba3c:	2b00      	cmp	r3, #0
 800ba3e:	d156      	bne.n	800baee <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	8b5b      	ldrh	r3, [r3, #26]
 800ba44:	f043 0302 	orr.w	r3, r3, #2
 800ba48:	b29a      	uxth	r2, r3
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 800ba4e:	6878      	ldr	r0, [r7, #4]
 800ba50:	f7fe fdbe 	bl	800a5d0 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800ba54:	4b18      	ldr	r3, [pc, #96]	; (800bab8 <tcp_process+0x5d4>)
 800ba56:	681b      	ldr	r3, [r3, #0]
 800ba58:	687a      	ldr	r2, [r7, #4]
 800ba5a:	429a      	cmp	r2, r3
 800ba5c:	d105      	bne.n	800ba6a <tcp_process+0x586>
 800ba5e:	4b16      	ldr	r3, [pc, #88]	; (800bab8 <tcp_process+0x5d4>)
 800ba60:	681b      	ldr	r3, [r3, #0]
 800ba62:	68db      	ldr	r3, [r3, #12]
 800ba64:	4a14      	ldr	r2, [pc, #80]	; (800bab8 <tcp_process+0x5d4>)
 800ba66:	6013      	str	r3, [r2, #0]
 800ba68:	e02e      	b.n	800bac8 <tcp_process+0x5e4>
 800ba6a:	4b13      	ldr	r3, [pc, #76]	; (800bab8 <tcp_process+0x5d4>)
 800ba6c:	681b      	ldr	r3, [r3, #0]
 800ba6e:	617b      	str	r3, [r7, #20]
 800ba70:	e027      	b.n	800bac2 <tcp_process+0x5de>
 800ba72:	697b      	ldr	r3, [r7, #20]
 800ba74:	68db      	ldr	r3, [r3, #12]
 800ba76:	687a      	ldr	r2, [r7, #4]
 800ba78:	429a      	cmp	r2, r3
 800ba7a:	d11f      	bne.n	800babc <tcp_process+0x5d8>
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	68da      	ldr	r2, [r3, #12]
 800ba80:	697b      	ldr	r3, [r7, #20]
 800ba82:	60da      	str	r2, [r3, #12]
 800ba84:	e020      	b.n	800bac8 <tcp_process+0x5e4>
 800ba86:	bf00      	nop
 800ba88:	200084cc 	.word	0x200084cc
 800ba8c:	200084c4 	.word	0x200084c4
 800ba90:	200084ca 	.word	0x200084ca
 800ba94:	200084c0 	.word	0x200084c0
 800ba98:	200084b0 	.word	0x200084b0
 800ba9c:	2000b7c0 	.word	0x2000b7c0
 800baa0:	2000b7c4 	.word	0x2000b7c4
 800baa4:	08015914 	.word	0x08015914
 800baa8:	08015bb4 	.word	0x08015bb4
 800baac:	08015960 	.word	0x08015960
 800bab0:	200084c8 	.word	0x200084c8
 800bab4:	200084cd 	.word	0x200084cd
 800bab8:	2000eee4 	.word	0x2000eee4
 800babc:	697b      	ldr	r3, [r7, #20]
 800babe:	68db      	ldr	r3, [r3, #12]
 800bac0:	617b      	str	r3, [r7, #20]
 800bac2:	697b      	ldr	r3, [r7, #20]
 800bac4:	2b00      	cmp	r3, #0
 800bac6:	d1d4      	bne.n	800ba72 <tcp_process+0x58e>
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	2200      	movs	r2, #0
 800bacc:	60da      	str	r2, [r3, #12]
 800bace:	4b77      	ldr	r3, [pc, #476]	; (800bcac <tcp_process+0x7c8>)
 800bad0:	2201      	movs	r2, #1
 800bad2:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	220a      	movs	r2, #10
 800bad8:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800bada:	4b75      	ldr	r3, [pc, #468]	; (800bcb0 <tcp_process+0x7cc>)
 800badc:	681a      	ldr	r2, [r3, #0]
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	60da      	str	r2, [r3, #12]
 800bae2:	4a73      	ldr	r2, [pc, #460]	; (800bcb0 <tcp_process+0x7cc>)
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	6013      	str	r3, [r2, #0]
 800bae8:	f002 fd06 	bl	800e4f8 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 800baec:	e0d2      	b.n	800bc94 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	8b5b      	ldrh	r3, [r3, #26]
 800baf2:	f043 0302 	orr.w	r3, r3, #2
 800baf6:	b29a      	uxth	r2, r3
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	2208      	movs	r2, #8
 800bb00:	751a      	strb	r2, [r3, #20]
      break;
 800bb02:	e0c7      	b.n	800bc94 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800bb04:	4b6b      	ldr	r3, [pc, #428]	; (800bcb4 <tcp_process+0x7d0>)
 800bb06:	781b      	ldrb	r3, [r3, #0]
 800bb08:	f003 0310 	and.w	r3, r3, #16
 800bb0c:	2b00      	cmp	r3, #0
 800bb0e:	f000 80c1 	beq.w	800bc94 <tcp_process+0x7b0>
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800bb16:	4b68      	ldr	r3, [pc, #416]	; (800bcb8 <tcp_process+0x7d4>)
 800bb18:	681b      	ldr	r3, [r3, #0]
 800bb1a:	429a      	cmp	r2, r3
 800bb1c:	f040 80ba 	bne.w	800bc94 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800bb24:	2b00      	cmp	r3, #0
 800bb26:	f040 80b5 	bne.w	800bc94 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	2206      	movs	r2, #6
 800bb2e:	751a      	strb	r2, [r3, #20]
      break;
 800bb30:	e0b0      	b.n	800bc94 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 800bb32:	6878      	ldr	r0, [r7, #4]
 800bb34:	f000 f9ca 	bl	800becc <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800bb38:	4b60      	ldr	r3, [pc, #384]	; (800bcbc <tcp_process+0x7d8>)
 800bb3a:	781b      	ldrb	r3, [r3, #0]
 800bb3c:	f003 0320 	and.w	r3, r3, #32
 800bb40:	2b00      	cmp	r3, #0
 800bb42:	f000 80a9 	beq.w	800bc98 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	8b5b      	ldrh	r3, [r3, #26]
 800bb4a:	f043 0302 	orr.w	r3, r3, #2
 800bb4e:	b29a      	uxth	r2, r3
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800bb54:	6878      	ldr	r0, [r7, #4]
 800bb56:	f7fe fd3b 	bl	800a5d0 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800bb5a:	4b59      	ldr	r3, [pc, #356]	; (800bcc0 <tcp_process+0x7dc>)
 800bb5c:	681b      	ldr	r3, [r3, #0]
 800bb5e:	687a      	ldr	r2, [r7, #4]
 800bb60:	429a      	cmp	r2, r3
 800bb62:	d105      	bne.n	800bb70 <tcp_process+0x68c>
 800bb64:	4b56      	ldr	r3, [pc, #344]	; (800bcc0 <tcp_process+0x7dc>)
 800bb66:	681b      	ldr	r3, [r3, #0]
 800bb68:	68db      	ldr	r3, [r3, #12]
 800bb6a:	4a55      	ldr	r2, [pc, #340]	; (800bcc0 <tcp_process+0x7dc>)
 800bb6c:	6013      	str	r3, [r2, #0]
 800bb6e:	e013      	b.n	800bb98 <tcp_process+0x6b4>
 800bb70:	4b53      	ldr	r3, [pc, #332]	; (800bcc0 <tcp_process+0x7dc>)
 800bb72:	681b      	ldr	r3, [r3, #0]
 800bb74:	613b      	str	r3, [r7, #16]
 800bb76:	e00c      	b.n	800bb92 <tcp_process+0x6ae>
 800bb78:	693b      	ldr	r3, [r7, #16]
 800bb7a:	68db      	ldr	r3, [r3, #12]
 800bb7c:	687a      	ldr	r2, [r7, #4]
 800bb7e:	429a      	cmp	r2, r3
 800bb80:	d104      	bne.n	800bb8c <tcp_process+0x6a8>
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	68da      	ldr	r2, [r3, #12]
 800bb86:	693b      	ldr	r3, [r7, #16]
 800bb88:	60da      	str	r2, [r3, #12]
 800bb8a:	e005      	b.n	800bb98 <tcp_process+0x6b4>
 800bb8c:	693b      	ldr	r3, [r7, #16]
 800bb8e:	68db      	ldr	r3, [r3, #12]
 800bb90:	613b      	str	r3, [r7, #16]
 800bb92:	693b      	ldr	r3, [r7, #16]
 800bb94:	2b00      	cmp	r3, #0
 800bb96:	d1ef      	bne.n	800bb78 <tcp_process+0x694>
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	2200      	movs	r2, #0
 800bb9c:	60da      	str	r2, [r3, #12]
 800bb9e:	4b43      	ldr	r3, [pc, #268]	; (800bcac <tcp_process+0x7c8>)
 800bba0:	2201      	movs	r2, #1
 800bba2:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	220a      	movs	r2, #10
 800bba8:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800bbaa:	4b41      	ldr	r3, [pc, #260]	; (800bcb0 <tcp_process+0x7cc>)
 800bbac:	681a      	ldr	r2, [r3, #0]
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	60da      	str	r2, [r3, #12]
 800bbb2:	4a3f      	ldr	r2, [pc, #252]	; (800bcb0 <tcp_process+0x7cc>)
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	6013      	str	r3, [r2, #0]
 800bbb8:	f002 fc9e 	bl	800e4f8 <tcp_timer_needed>
      }
      break;
 800bbbc:	e06c      	b.n	800bc98 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 800bbbe:	6878      	ldr	r0, [r7, #4]
 800bbc0:	f000 f984 	bl	800becc <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800bbc4:	4b3b      	ldr	r3, [pc, #236]	; (800bcb4 <tcp_process+0x7d0>)
 800bbc6:	781b      	ldrb	r3, [r3, #0]
 800bbc8:	f003 0310 	and.w	r3, r3, #16
 800bbcc:	2b00      	cmp	r3, #0
 800bbce:	d065      	beq.n	800bc9c <tcp_process+0x7b8>
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800bbd4:	4b38      	ldr	r3, [pc, #224]	; (800bcb8 <tcp_process+0x7d4>)
 800bbd6:	681b      	ldr	r3, [r3, #0]
 800bbd8:	429a      	cmp	r2, r3
 800bbda:	d15f      	bne.n	800bc9c <tcp_process+0x7b8>
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bbe0:	2b00      	cmp	r3, #0
 800bbe2:	d15b      	bne.n	800bc9c <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 800bbe4:	6878      	ldr	r0, [r7, #4]
 800bbe6:	f7fe fcf3 	bl	800a5d0 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800bbea:	4b35      	ldr	r3, [pc, #212]	; (800bcc0 <tcp_process+0x7dc>)
 800bbec:	681b      	ldr	r3, [r3, #0]
 800bbee:	687a      	ldr	r2, [r7, #4]
 800bbf0:	429a      	cmp	r2, r3
 800bbf2:	d105      	bne.n	800bc00 <tcp_process+0x71c>
 800bbf4:	4b32      	ldr	r3, [pc, #200]	; (800bcc0 <tcp_process+0x7dc>)
 800bbf6:	681b      	ldr	r3, [r3, #0]
 800bbf8:	68db      	ldr	r3, [r3, #12]
 800bbfa:	4a31      	ldr	r2, [pc, #196]	; (800bcc0 <tcp_process+0x7dc>)
 800bbfc:	6013      	str	r3, [r2, #0]
 800bbfe:	e013      	b.n	800bc28 <tcp_process+0x744>
 800bc00:	4b2f      	ldr	r3, [pc, #188]	; (800bcc0 <tcp_process+0x7dc>)
 800bc02:	681b      	ldr	r3, [r3, #0]
 800bc04:	60fb      	str	r3, [r7, #12]
 800bc06:	e00c      	b.n	800bc22 <tcp_process+0x73e>
 800bc08:	68fb      	ldr	r3, [r7, #12]
 800bc0a:	68db      	ldr	r3, [r3, #12]
 800bc0c:	687a      	ldr	r2, [r7, #4]
 800bc0e:	429a      	cmp	r2, r3
 800bc10:	d104      	bne.n	800bc1c <tcp_process+0x738>
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	68da      	ldr	r2, [r3, #12]
 800bc16:	68fb      	ldr	r3, [r7, #12]
 800bc18:	60da      	str	r2, [r3, #12]
 800bc1a:	e005      	b.n	800bc28 <tcp_process+0x744>
 800bc1c:	68fb      	ldr	r3, [r7, #12]
 800bc1e:	68db      	ldr	r3, [r3, #12]
 800bc20:	60fb      	str	r3, [r7, #12]
 800bc22:	68fb      	ldr	r3, [r7, #12]
 800bc24:	2b00      	cmp	r3, #0
 800bc26:	d1ef      	bne.n	800bc08 <tcp_process+0x724>
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	2200      	movs	r2, #0
 800bc2c:	60da      	str	r2, [r3, #12]
 800bc2e:	4b1f      	ldr	r3, [pc, #124]	; (800bcac <tcp_process+0x7c8>)
 800bc30:	2201      	movs	r2, #1
 800bc32:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	220a      	movs	r2, #10
 800bc38:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800bc3a:	4b1d      	ldr	r3, [pc, #116]	; (800bcb0 <tcp_process+0x7cc>)
 800bc3c:	681a      	ldr	r2, [r3, #0]
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	60da      	str	r2, [r3, #12]
 800bc42:	4a1b      	ldr	r2, [pc, #108]	; (800bcb0 <tcp_process+0x7cc>)
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	6013      	str	r3, [r2, #0]
 800bc48:	f002 fc56 	bl	800e4f8 <tcp_timer_needed>
      }
      break;
 800bc4c:	e026      	b.n	800bc9c <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 800bc4e:	6878      	ldr	r0, [r7, #4]
 800bc50:	f000 f93c 	bl	800becc <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800bc54:	4b17      	ldr	r3, [pc, #92]	; (800bcb4 <tcp_process+0x7d0>)
 800bc56:	781b      	ldrb	r3, [r3, #0]
 800bc58:	f003 0310 	and.w	r3, r3, #16
 800bc5c:	2b00      	cmp	r3, #0
 800bc5e:	d01f      	beq.n	800bca0 <tcp_process+0x7bc>
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800bc64:	4b14      	ldr	r3, [pc, #80]	; (800bcb8 <tcp_process+0x7d4>)
 800bc66:	681b      	ldr	r3, [r3, #0]
 800bc68:	429a      	cmp	r2, r3
 800bc6a:	d119      	bne.n	800bca0 <tcp_process+0x7bc>
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bc70:	2b00      	cmp	r3, #0
 800bc72:	d115      	bne.n	800bca0 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 800bc74:	4b11      	ldr	r3, [pc, #68]	; (800bcbc <tcp_process+0x7d8>)
 800bc76:	781b      	ldrb	r3, [r3, #0]
 800bc78:	f043 0310 	orr.w	r3, r3, #16
 800bc7c:	b2da      	uxtb	r2, r3
 800bc7e:	4b0f      	ldr	r3, [pc, #60]	; (800bcbc <tcp_process+0x7d8>)
 800bc80:	701a      	strb	r2, [r3, #0]
      }
      break;
 800bc82:	e00d      	b.n	800bca0 <tcp_process+0x7bc>
    default:
      break;
 800bc84:	bf00      	nop
 800bc86:	e00c      	b.n	800bca2 <tcp_process+0x7be>
      break;
 800bc88:	bf00      	nop
 800bc8a:	e00a      	b.n	800bca2 <tcp_process+0x7be>
      break;
 800bc8c:	bf00      	nop
 800bc8e:	e008      	b.n	800bca2 <tcp_process+0x7be>
      break;
 800bc90:	bf00      	nop
 800bc92:	e006      	b.n	800bca2 <tcp_process+0x7be>
      break;
 800bc94:	bf00      	nop
 800bc96:	e004      	b.n	800bca2 <tcp_process+0x7be>
      break;
 800bc98:	bf00      	nop
 800bc9a:	e002      	b.n	800bca2 <tcp_process+0x7be>
      break;
 800bc9c:	bf00      	nop
 800bc9e:	e000      	b.n	800bca2 <tcp_process+0x7be>
      break;
 800bca0:	bf00      	nop
  }
  return ERR_OK;
 800bca2:	2300      	movs	r3, #0
}
 800bca4:	4618      	mov	r0, r3
 800bca6:	3724      	adds	r7, #36	; 0x24
 800bca8:	46bd      	mov	sp, r7
 800bcaa:	bd90      	pop	{r4, r7, pc}
 800bcac:	2000eee0 	.word	0x2000eee0
 800bcb0:	2000eef4 	.word	0x2000eef4
 800bcb4:	200084cc 	.word	0x200084cc
 800bcb8:	200084c4 	.word	0x200084c4
 800bcbc:	200084cd 	.word	0x200084cd
 800bcc0:	2000eee4 	.word	0x2000eee4

0800bcc4 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800bcc4:	b590      	push	{r4, r7, lr}
 800bcc6:	b085      	sub	sp, #20
 800bcc8:	af00      	add	r7, sp, #0
 800bcca:	6078      	str	r0, [r7, #4]
 800bccc:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	2b00      	cmp	r3, #0
 800bcd2:	d106      	bne.n	800bce2 <tcp_oos_insert_segment+0x1e>
 800bcd4:	4b3b      	ldr	r3, [pc, #236]	; (800bdc4 <tcp_oos_insert_segment+0x100>)
 800bcd6:	f240 421f 	movw	r2, #1055	; 0x41f
 800bcda:	493b      	ldr	r1, [pc, #236]	; (800bdc8 <tcp_oos_insert_segment+0x104>)
 800bcdc:	483b      	ldr	r0, [pc, #236]	; (800bdcc <tcp_oos_insert_segment+0x108>)
 800bcde:	f007 fd19 	bl	8013714 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	68db      	ldr	r3, [r3, #12]
 800bce6:	899b      	ldrh	r3, [r3, #12]
 800bce8:	b29b      	uxth	r3, r3
 800bcea:	4618      	mov	r0, r3
 800bcec:	f7fb fc4c 	bl	8007588 <lwip_htons>
 800bcf0:	4603      	mov	r3, r0
 800bcf2:	b2db      	uxtb	r3, r3
 800bcf4:	f003 0301 	and.w	r3, r3, #1
 800bcf8:	2b00      	cmp	r3, #0
 800bcfa:	d028      	beq.n	800bd4e <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800bcfc:	6838      	ldr	r0, [r7, #0]
 800bcfe:	f7fe fa67 	bl	800a1d0 <tcp_segs_free>
    next = NULL;
 800bd02:	2300      	movs	r3, #0
 800bd04:	603b      	str	r3, [r7, #0]
 800bd06:	e056      	b.n	800bdb6 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800bd08:	683b      	ldr	r3, [r7, #0]
 800bd0a:	68db      	ldr	r3, [r3, #12]
 800bd0c:	899b      	ldrh	r3, [r3, #12]
 800bd0e:	b29b      	uxth	r3, r3
 800bd10:	4618      	mov	r0, r3
 800bd12:	f7fb fc39 	bl	8007588 <lwip_htons>
 800bd16:	4603      	mov	r3, r0
 800bd18:	b2db      	uxtb	r3, r3
 800bd1a:	f003 0301 	and.w	r3, r3, #1
 800bd1e:	2b00      	cmp	r3, #0
 800bd20:	d00d      	beq.n	800bd3e <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	68db      	ldr	r3, [r3, #12]
 800bd26:	899b      	ldrh	r3, [r3, #12]
 800bd28:	b29c      	uxth	r4, r3
 800bd2a:	2001      	movs	r0, #1
 800bd2c:	f7fb fc2c 	bl	8007588 <lwip_htons>
 800bd30:	4603      	mov	r3, r0
 800bd32:	461a      	mov	r2, r3
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	68db      	ldr	r3, [r3, #12]
 800bd38:	4322      	orrs	r2, r4
 800bd3a:	b292      	uxth	r2, r2
 800bd3c:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800bd3e:	683b      	ldr	r3, [r7, #0]
 800bd40:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800bd42:	683b      	ldr	r3, [r7, #0]
 800bd44:	681b      	ldr	r3, [r3, #0]
 800bd46:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800bd48:	68f8      	ldr	r0, [r7, #12]
 800bd4a:	f7fe fa55 	bl	800a1f8 <tcp_seg_free>
    while (next &&
 800bd4e:	683b      	ldr	r3, [r7, #0]
 800bd50:	2b00      	cmp	r3, #0
 800bd52:	d00e      	beq.n	800bd72 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	891b      	ldrh	r3, [r3, #8]
 800bd58:	461a      	mov	r2, r3
 800bd5a:	4b1d      	ldr	r3, [pc, #116]	; (800bdd0 <tcp_oos_insert_segment+0x10c>)
 800bd5c:	681b      	ldr	r3, [r3, #0]
 800bd5e:	441a      	add	r2, r3
 800bd60:	683b      	ldr	r3, [r7, #0]
 800bd62:	68db      	ldr	r3, [r3, #12]
 800bd64:	685b      	ldr	r3, [r3, #4]
 800bd66:	6839      	ldr	r1, [r7, #0]
 800bd68:	8909      	ldrh	r1, [r1, #8]
 800bd6a:	440b      	add	r3, r1
 800bd6c:	1ad3      	subs	r3, r2, r3
    while (next &&
 800bd6e:	2b00      	cmp	r3, #0
 800bd70:	daca      	bge.n	800bd08 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 800bd72:	683b      	ldr	r3, [r7, #0]
 800bd74:	2b00      	cmp	r3, #0
 800bd76:	d01e      	beq.n	800bdb6 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	891b      	ldrh	r3, [r3, #8]
 800bd7c:	461a      	mov	r2, r3
 800bd7e:	4b14      	ldr	r3, [pc, #80]	; (800bdd0 <tcp_oos_insert_segment+0x10c>)
 800bd80:	681b      	ldr	r3, [r3, #0]
 800bd82:	441a      	add	r2, r3
 800bd84:	683b      	ldr	r3, [r7, #0]
 800bd86:	68db      	ldr	r3, [r3, #12]
 800bd88:	685b      	ldr	r3, [r3, #4]
 800bd8a:	1ad3      	subs	r3, r2, r3
    if (next &&
 800bd8c:	2b00      	cmp	r3, #0
 800bd8e:	dd12      	ble.n	800bdb6 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800bd90:	683b      	ldr	r3, [r7, #0]
 800bd92:	68db      	ldr	r3, [r3, #12]
 800bd94:	685b      	ldr	r3, [r3, #4]
 800bd96:	b29a      	uxth	r2, r3
 800bd98:	4b0d      	ldr	r3, [pc, #52]	; (800bdd0 <tcp_oos_insert_segment+0x10c>)
 800bd9a:	681b      	ldr	r3, [r3, #0]
 800bd9c:	b29b      	uxth	r3, r3
 800bd9e:	1ad3      	subs	r3, r2, r3
 800bda0:	b29a      	uxth	r2, r3
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	685a      	ldr	r2, [r3, #4]
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	891b      	ldrh	r3, [r3, #8]
 800bdae:	4619      	mov	r1, r3
 800bdb0:	4610      	mov	r0, r2
 800bdb2:	f7fc fe17 	bl	80089e4 <pbuf_realloc>
    }
  }
  cseg->next = next;
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	683a      	ldr	r2, [r7, #0]
 800bdba:	601a      	str	r2, [r3, #0]
}
 800bdbc:	bf00      	nop
 800bdbe:	3714      	adds	r7, #20
 800bdc0:	46bd      	mov	sp, r7
 800bdc2:	bd90      	pop	{r4, r7, pc}
 800bdc4:	08015914 	.word	0x08015914
 800bdc8:	08015bd4 	.word	0x08015bd4
 800bdcc:	08015960 	.word	0x08015960
 800bdd0:	200084c0 	.word	0x200084c0

0800bdd4 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 800bdd4:	b5b0      	push	{r4, r5, r7, lr}
 800bdd6:	b086      	sub	sp, #24
 800bdd8:	af00      	add	r7, sp, #0
 800bdda:	60f8      	str	r0, [r7, #12]
 800bddc:	60b9      	str	r1, [r7, #8]
 800bdde:	607a      	str	r2, [r7, #4]
 800bde0:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800bde2:	e03e      	b.n	800be62 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 800bde4:	68bb      	ldr	r3, [r7, #8]
 800bde6:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 800bde8:	68bb      	ldr	r3, [r7, #8]
 800bdea:	681b      	ldr	r3, [r3, #0]
 800bdec:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 800bdee:	697b      	ldr	r3, [r7, #20]
 800bdf0:	685b      	ldr	r3, [r3, #4]
 800bdf2:	4618      	mov	r0, r3
 800bdf4:	f7fd f80a 	bl	8008e0c <pbuf_clen>
 800bdf8:	4603      	mov	r3, r0
 800bdfa:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800bdfc:	68fb      	ldr	r3, [r7, #12]
 800bdfe:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800be02:	8a7a      	ldrh	r2, [r7, #18]
 800be04:	429a      	cmp	r2, r3
 800be06:	d906      	bls.n	800be16 <tcp_free_acked_segments+0x42>
 800be08:	4b2a      	ldr	r3, [pc, #168]	; (800beb4 <tcp_free_acked_segments+0xe0>)
 800be0a:	f240 4257 	movw	r2, #1111	; 0x457
 800be0e:	492a      	ldr	r1, [pc, #168]	; (800beb8 <tcp_free_acked_segments+0xe4>)
 800be10:	482a      	ldr	r0, [pc, #168]	; (800bebc <tcp_free_acked_segments+0xe8>)
 800be12:	f007 fc7f 	bl	8013714 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800be16:	68fb      	ldr	r3, [r7, #12]
 800be18:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 800be1c:	8a7b      	ldrh	r3, [r7, #18]
 800be1e:	1ad3      	subs	r3, r2, r3
 800be20:	b29a      	uxth	r2, r3
 800be22:	68fb      	ldr	r3, [r7, #12]
 800be24:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800be28:	697b      	ldr	r3, [r7, #20]
 800be2a:	891a      	ldrh	r2, [r3, #8]
 800be2c:	4b24      	ldr	r3, [pc, #144]	; (800bec0 <tcp_free_acked_segments+0xec>)
 800be2e:	881b      	ldrh	r3, [r3, #0]
 800be30:	4413      	add	r3, r2
 800be32:	b29a      	uxth	r2, r3
 800be34:	4b22      	ldr	r3, [pc, #136]	; (800bec0 <tcp_free_acked_segments+0xec>)
 800be36:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 800be38:	6978      	ldr	r0, [r7, #20]
 800be3a:	f7fe f9dd 	bl	800a1f8 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 800be3e:	68fb      	ldr	r3, [r7, #12]
 800be40:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800be44:	2b00      	cmp	r3, #0
 800be46:	d00c      	beq.n	800be62 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800be48:	68bb      	ldr	r3, [r7, #8]
 800be4a:	2b00      	cmp	r3, #0
 800be4c:	d109      	bne.n	800be62 <tcp_free_acked_segments+0x8e>
 800be4e:	683b      	ldr	r3, [r7, #0]
 800be50:	2b00      	cmp	r3, #0
 800be52:	d106      	bne.n	800be62 <tcp_free_acked_segments+0x8e>
 800be54:	4b17      	ldr	r3, [pc, #92]	; (800beb4 <tcp_free_acked_segments+0xe0>)
 800be56:	f240 4262 	movw	r2, #1122	; 0x462
 800be5a:	491a      	ldr	r1, [pc, #104]	; (800bec4 <tcp_free_acked_segments+0xf0>)
 800be5c:	4817      	ldr	r0, [pc, #92]	; (800bebc <tcp_free_acked_segments+0xe8>)
 800be5e:	f007 fc59 	bl	8013714 <iprintf>
  while (seg_list != NULL &&
 800be62:	68bb      	ldr	r3, [r7, #8]
 800be64:	2b00      	cmp	r3, #0
 800be66:	d020      	beq.n	800beaa <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800be68:	68bb      	ldr	r3, [r7, #8]
 800be6a:	68db      	ldr	r3, [r3, #12]
 800be6c:	685b      	ldr	r3, [r3, #4]
 800be6e:	4618      	mov	r0, r3
 800be70:	f7fb fb9f 	bl	80075b2 <lwip_htonl>
 800be74:	4604      	mov	r4, r0
 800be76:	68bb      	ldr	r3, [r7, #8]
 800be78:	891b      	ldrh	r3, [r3, #8]
 800be7a:	461d      	mov	r5, r3
 800be7c:	68bb      	ldr	r3, [r7, #8]
 800be7e:	68db      	ldr	r3, [r3, #12]
 800be80:	899b      	ldrh	r3, [r3, #12]
 800be82:	b29b      	uxth	r3, r3
 800be84:	4618      	mov	r0, r3
 800be86:	f7fb fb7f 	bl	8007588 <lwip_htons>
 800be8a:	4603      	mov	r3, r0
 800be8c:	b2db      	uxtb	r3, r3
 800be8e:	f003 0303 	and.w	r3, r3, #3
 800be92:	2b00      	cmp	r3, #0
 800be94:	d001      	beq.n	800be9a <tcp_free_acked_segments+0xc6>
 800be96:	2301      	movs	r3, #1
 800be98:	e000      	b.n	800be9c <tcp_free_acked_segments+0xc8>
 800be9a:	2300      	movs	r3, #0
 800be9c:	442b      	add	r3, r5
 800be9e:	18e2      	adds	r2, r4, r3
 800bea0:	4b09      	ldr	r3, [pc, #36]	; (800bec8 <tcp_free_acked_segments+0xf4>)
 800bea2:	681b      	ldr	r3, [r3, #0]
 800bea4:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 800bea6:	2b00      	cmp	r3, #0
 800bea8:	dd9c      	ble.n	800bde4 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 800beaa:	68bb      	ldr	r3, [r7, #8]
}
 800beac:	4618      	mov	r0, r3
 800beae:	3718      	adds	r7, #24
 800beb0:	46bd      	mov	sp, r7
 800beb2:	bdb0      	pop	{r4, r5, r7, pc}
 800beb4:	08015914 	.word	0x08015914
 800beb8:	08015bfc 	.word	0x08015bfc
 800bebc:	08015960 	.word	0x08015960
 800bec0:	200084c8 	.word	0x200084c8
 800bec4:	08015c24 	.word	0x08015c24
 800bec8:	200084c4 	.word	0x200084c4

0800becc <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800becc:	b5b0      	push	{r4, r5, r7, lr}
 800bece:	b094      	sub	sp, #80	; 0x50
 800bed0:	af00      	add	r7, sp, #0
 800bed2:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 800bed4:	2300      	movs	r3, #0
 800bed6:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	2b00      	cmp	r3, #0
 800bedc:	d106      	bne.n	800beec <tcp_receive+0x20>
 800bede:	4ba6      	ldr	r3, [pc, #664]	; (800c178 <tcp_receive+0x2ac>)
 800bee0:	f240 427b 	movw	r2, #1147	; 0x47b
 800bee4:	49a5      	ldr	r1, [pc, #660]	; (800c17c <tcp_receive+0x2b0>)
 800bee6:	48a6      	ldr	r0, [pc, #664]	; (800c180 <tcp_receive+0x2b4>)
 800bee8:	f007 fc14 	bl	8013714 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	7d1b      	ldrb	r3, [r3, #20]
 800bef0:	2b03      	cmp	r3, #3
 800bef2:	d806      	bhi.n	800bf02 <tcp_receive+0x36>
 800bef4:	4ba0      	ldr	r3, [pc, #640]	; (800c178 <tcp_receive+0x2ac>)
 800bef6:	f240 427c 	movw	r2, #1148	; 0x47c
 800befa:	49a2      	ldr	r1, [pc, #648]	; (800c184 <tcp_receive+0x2b8>)
 800befc:	48a0      	ldr	r0, [pc, #640]	; (800c180 <tcp_receive+0x2b4>)
 800befe:	f007 fc09 	bl	8013714 <iprintf>

  if (flags & TCP_ACK) {
 800bf02:	4ba1      	ldr	r3, [pc, #644]	; (800c188 <tcp_receive+0x2bc>)
 800bf04:	781b      	ldrb	r3, [r3, #0]
 800bf06:	f003 0310 	and.w	r3, r3, #16
 800bf0a:	2b00      	cmp	r3, #0
 800bf0c:	f000 8263 	beq.w	800c3d6 <tcp_receive+0x50a>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800bf16:	461a      	mov	r2, r3
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bf1c:	4413      	add	r3, r2
 800bf1e:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800bf24:	4b99      	ldr	r3, [pc, #612]	; (800c18c <tcp_receive+0x2c0>)
 800bf26:	681b      	ldr	r3, [r3, #0]
 800bf28:	1ad3      	subs	r3, r2, r3
 800bf2a:	2b00      	cmp	r3, #0
 800bf2c:	db1b      	blt.n	800bf66 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800bf32:	4b96      	ldr	r3, [pc, #600]	; (800c18c <tcp_receive+0x2c0>)
 800bf34:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800bf36:	429a      	cmp	r2, r3
 800bf38:	d106      	bne.n	800bf48 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800bf3e:	4b94      	ldr	r3, [pc, #592]	; (800c190 <tcp_receive+0x2c4>)
 800bf40:	681b      	ldr	r3, [r3, #0]
 800bf42:	1ad3      	subs	r3, r2, r3
 800bf44:	2b00      	cmp	r3, #0
 800bf46:	db0e      	blt.n	800bf66 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800bf4c:	4b90      	ldr	r3, [pc, #576]	; (800c190 <tcp_receive+0x2c4>)
 800bf4e:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800bf50:	429a      	cmp	r2, r3
 800bf52:	d125      	bne.n	800bfa0 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800bf54:	4b8f      	ldr	r3, [pc, #572]	; (800c194 <tcp_receive+0x2c8>)
 800bf56:	681b      	ldr	r3, [r3, #0]
 800bf58:	89db      	ldrh	r3, [r3, #14]
 800bf5a:	b29a      	uxth	r2, r3
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800bf62:	429a      	cmp	r2, r3
 800bf64:	d91c      	bls.n	800bfa0 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800bf66:	4b8b      	ldr	r3, [pc, #556]	; (800c194 <tcp_receive+0x2c8>)
 800bf68:	681b      	ldr	r3, [r3, #0]
 800bf6a:	89db      	ldrh	r3, [r3, #14]
 800bf6c:	b29a      	uxth	r2, r3
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800bf80:	429a      	cmp	r2, r3
 800bf82:	d205      	bcs.n	800bf90 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 800bf90:	4b7e      	ldr	r3, [pc, #504]	; (800c18c <tcp_receive+0x2c0>)
 800bf92:	681a      	ldr	r2, [r3, #0]
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 800bf98:	4b7d      	ldr	r3, [pc, #500]	; (800c190 <tcp_receive+0x2c4>)
 800bf9a:	681a      	ldr	r2, [r3, #0]
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800bfa0:	4b7b      	ldr	r3, [pc, #492]	; (800c190 <tcp_receive+0x2c4>)
 800bfa2:	681a      	ldr	r2, [r3, #0]
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bfa8:	1ad3      	subs	r3, r2, r3
 800bfaa:	2b00      	cmp	r3, #0
 800bfac:	dc58      	bgt.n	800c060 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 800bfae:	4b7a      	ldr	r3, [pc, #488]	; (800c198 <tcp_receive+0x2cc>)
 800bfb0:	881b      	ldrh	r3, [r3, #0]
 800bfb2:	2b00      	cmp	r3, #0
 800bfb4:	d14b      	bne.n	800c04e <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bfba:	687a      	ldr	r2, [r7, #4]
 800bfbc:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 800bfc0:	4413      	add	r3, r2
 800bfc2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bfc4:	429a      	cmp	r2, r3
 800bfc6:	d142      	bne.n	800c04e <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800bfce:	2b00      	cmp	r3, #0
 800bfd0:	db3d      	blt.n	800c04e <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bfd6:	4b6e      	ldr	r3, [pc, #440]	; (800c190 <tcp_receive+0x2c4>)
 800bfd8:	681b      	ldr	r3, [r3, #0]
 800bfda:	429a      	cmp	r2, r3
 800bfdc:	d137      	bne.n	800c04e <tcp_receive+0x182>
              found_dupack = 1;
 800bfde:	2301      	movs	r3, #1
 800bfe0:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800bfe8:	2bff      	cmp	r3, #255	; 0xff
 800bfea:	d007      	beq.n	800bffc <tcp_receive+0x130>
                ++pcb->dupacks;
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800bff2:	3301      	adds	r3, #1
 800bff4:	b2da      	uxtb	r2, r3
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800c002:	2b03      	cmp	r3, #3
 800c004:	d91b      	bls.n	800c03e <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c010:	4413      	add	r3, r2
 800c012:	b29a      	uxth	r2, r3
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800c01a:	429a      	cmp	r2, r3
 800c01c:	d30a      	bcc.n	800c034 <tcp_receive+0x168>
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c028:	4413      	add	r3, r2
 800c02a:	b29a      	uxth	r2, r3
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800c032:	e004      	b.n	800c03e <tcp_receive+0x172>
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c03a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800c044:	2b02      	cmp	r3, #2
 800c046:	d902      	bls.n	800c04e <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 800c048:	6878      	ldr	r0, [r7, #4]
 800c04a:	f001 feed 	bl	800de28 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800c04e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c050:	2b00      	cmp	r3, #0
 800c052:	f040 8160 	bne.w	800c316 <tcp_receive+0x44a>
        pcb->dupacks = 0;
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	2200      	movs	r2, #0
 800c05a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800c05e:	e15a      	b.n	800c316 <tcp_receive+0x44a>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800c060:	4b4b      	ldr	r3, [pc, #300]	; (800c190 <tcp_receive+0x2c4>)
 800c062:	681a      	ldr	r2, [r3, #0]
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c068:	1ad3      	subs	r3, r2, r3
 800c06a:	3b01      	subs	r3, #1
 800c06c:	2b00      	cmp	r3, #0
 800c06e:	f2c0 814d 	blt.w	800c30c <tcp_receive+0x440>
 800c072:	4b47      	ldr	r3, [pc, #284]	; (800c190 <tcp_receive+0x2c4>)
 800c074:	681a      	ldr	r2, [r3, #0]
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c07a:	1ad3      	subs	r3, r2, r3
 800c07c:	2b00      	cmp	r3, #0
 800c07e:	f300 8145 	bgt.w	800c30c <tcp_receive+0x440>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	8b5b      	ldrh	r3, [r3, #26]
 800c086:	f003 0304 	and.w	r3, r3, #4
 800c08a:	2b00      	cmp	r3, #0
 800c08c:	d010      	beq.n	800c0b0 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	8b5b      	ldrh	r3, [r3, #26]
 800c092:	f023 0304 	bic.w	r3, r3, #4
 800c096:	b29a      	uxth	r2, r3
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	2200      	movs	r2, #0
 800c0ac:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	2200      	movs	r2, #0
 800c0b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800c0be:	10db      	asrs	r3, r3, #3
 800c0c0:	b21b      	sxth	r3, r3
 800c0c2:	b29a      	uxth	r2, r3
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800c0ca:	b29b      	uxth	r3, r3
 800c0cc:	4413      	add	r3, r2
 800c0ce:	b29b      	uxth	r3, r3
 800c0d0:	b21a      	sxth	r2, r3
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800c0d8:	4b2d      	ldr	r3, [pc, #180]	; (800c190 <tcp_receive+0x2c4>)
 800c0da:	681b      	ldr	r3, [r3, #0]
 800c0dc:	b29a      	uxth	r2, r3
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c0e2:	b29b      	uxth	r3, r3
 800c0e4:	1ad3      	subs	r3, r2, r3
 800c0e6:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	2200      	movs	r2, #0
 800c0ec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 800c0f0:	4b27      	ldr	r3, [pc, #156]	; (800c190 <tcp_receive+0x2c4>)
 800c0f2:	681a      	ldr	r2, [r3, #0]
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	7d1b      	ldrb	r3, [r3, #20]
 800c0fc:	2b03      	cmp	r3, #3
 800c0fe:	f240 8096 	bls.w	800c22e <tcp_receive+0x362>
        if (pcb->cwnd < pcb->ssthresh) {
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800c10e:	429a      	cmp	r2, r3
 800c110:	d244      	bcs.n	800c19c <tcp_receive+0x2d0>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	8b5b      	ldrh	r3, [r3, #26]
 800c116:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c11a:	2b00      	cmp	r3, #0
 800c11c:	d001      	beq.n	800c122 <tcp_receive+0x256>
 800c11e:	2301      	movs	r3, #1
 800c120:	e000      	b.n	800c124 <tcp_receive+0x258>
 800c122:	2302      	movs	r3, #2
 800c124:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800c128:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800c12c:	b29a      	uxth	r2, r3
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c132:	fb12 f303 	smulbb	r3, r2, r3
 800c136:	b29b      	uxth	r3, r3
 800c138:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800c13a:	4293      	cmp	r3, r2
 800c13c:	bf28      	it	cs
 800c13e:	4613      	movcs	r3, r2
 800c140:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800c148:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800c14a:	4413      	add	r3, r2
 800c14c:	b29a      	uxth	r2, r3
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800c154:	429a      	cmp	r2, r3
 800c156:	d309      	bcc.n	800c16c <tcp_receive+0x2a0>
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800c15e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800c160:	4413      	add	r3, r2
 800c162:	b29a      	uxth	r2, r3
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800c16a:	e060      	b.n	800c22e <tcp_receive+0x362>
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c172:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800c176:	e05a      	b.n	800c22e <tcp_receive+0x362>
 800c178:	08015914 	.word	0x08015914
 800c17c:	08015c44 	.word	0x08015c44
 800c180:	08015960 	.word	0x08015960
 800c184:	08015c60 	.word	0x08015c60
 800c188:	200084cc 	.word	0x200084cc
 800c18c:	200084c0 	.word	0x200084c0
 800c190:	200084c4 	.word	0x200084c4
 800c194:	200084b0 	.word	0x200084b0
 800c198:	200084ca 	.word	0x200084ca
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800c1a2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800c1a4:	4413      	add	r3, r2
 800c1a6:	b29a      	uxth	r2, r3
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c1ae:	429a      	cmp	r2, r3
 800c1b0:	d309      	bcc.n	800c1c6 <tcp_receive+0x2fa>
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800c1b8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800c1ba:	4413      	add	r3, r2
 800c1bc:	b29a      	uxth	r2, r3
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800c1c4:	e004      	b.n	800c1d0 <tcp_receive+0x304>
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c1cc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800c1d6:	687b      	ldr	r3, [r7, #4]
 800c1d8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800c1dc:	429a      	cmp	r2, r3
 800c1de:	d326      	bcc.n	800c22e <tcp_receive+0x362>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800c1ec:	1ad3      	subs	r3, r2, r3
 800c1ee:	b29a      	uxth	r2, r3
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c200:	4413      	add	r3, r2
 800c202:	b29a      	uxth	r2, r3
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800c20a:	429a      	cmp	r2, r3
 800c20c:	d30a      	bcc.n	800c224 <tcp_receive+0x358>
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c218:	4413      	add	r3, r2
 800c21a:	b29a      	uxth	r2, r3
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800c222:	e004      	b.n	800c22e <tcp_receive+0x362>
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c22a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c236:	4a98      	ldr	r2, [pc, #608]	; (800c498 <tcp_receive+0x5cc>)
 800c238:	6878      	ldr	r0, [r7, #4]
 800c23a:	f7ff fdcb 	bl	800bdd4 <tcp_free_acked_segments>
 800c23e:	4602      	mov	r2, r0
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c24c:	4a93      	ldr	r2, [pc, #588]	; (800c49c <tcp_receive+0x5d0>)
 800c24e:	6878      	ldr	r0, [r7, #4]
 800c250:	f7ff fdc0 	bl	800bdd4 <tcp_free_acked_segments>
 800c254:	4602      	mov	r2, r0
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c25e:	2b00      	cmp	r3, #0
 800c260:	d104      	bne.n	800c26c <tcp_receive+0x3a0>
        pcb->rtime = -1;
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c268:	861a      	strh	r2, [r3, #48]	; 0x30
 800c26a:	e002      	b.n	800c272 <tcp_receive+0x3a6>
      } else {
        pcb->rtime = 0;
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	2200      	movs	r2, #0
 800c270:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	2200      	movs	r2, #0
 800c276:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c27c:	2b00      	cmp	r3, #0
 800c27e:	d103      	bne.n	800c288 <tcp_receive+0x3bc>
        pcb->unsent_oversize = 0;
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	2200      	movs	r2, #0
 800c284:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 800c28e:	4b84      	ldr	r3, [pc, #528]	; (800c4a0 <tcp_receive+0x5d4>)
 800c290:	881b      	ldrh	r3, [r3, #0]
 800c292:	4413      	add	r3, r2
 800c294:	b29a      	uxth	r2, r3
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	8b5b      	ldrh	r3, [r3, #26]
 800c2a0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c2a4:	2b00      	cmp	r3, #0
 800c2a6:	d035      	beq.n	800c314 <tcp_receive+0x448>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c2ac:	2b00      	cmp	r3, #0
 800c2ae:	d118      	bne.n	800c2e2 <tcp_receive+0x416>
          if ((pcb->unsent == NULL) ||
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c2b4:	2b00      	cmp	r3, #0
 800c2b6:	d00c      	beq.n	800c2d2 <tcp_receive+0x406>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c2c0:	68db      	ldr	r3, [r3, #12]
 800c2c2:	685b      	ldr	r3, [r3, #4]
 800c2c4:	4618      	mov	r0, r3
 800c2c6:	f7fb f974 	bl	80075b2 <lwip_htonl>
 800c2ca:	4603      	mov	r3, r0
 800c2cc:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 800c2ce:	2b00      	cmp	r3, #0
 800c2d0:	dc20      	bgt.n	800c314 <tcp_receive+0x448>
            tcp_clear_flags(pcb, TF_RTO);
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	8b5b      	ldrh	r3, [r3, #26]
 800c2d6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c2da:	b29a      	uxth	r2, r3
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800c2e0:	e018      	b.n	800c314 <tcp_receive+0x448>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c2ea:	68db      	ldr	r3, [r3, #12]
 800c2ec:	685b      	ldr	r3, [r3, #4]
 800c2ee:	4618      	mov	r0, r3
 800c2f0:	f7fb f95f 	bl	80075b2 <lwip_htonl>
 800c2f4:	4603      	mov	r3, r0
 800c2f6:	1ae3      	subs	r3, r4, r3
 800c2f8:	2b00      	cmp	r3, #0
 800c2fa:	dc0b      	bgt.n	800c314 <tcp_receive+0x448>
          tcp_clear_flags(pcb, TF_RTO);
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	8b5b      	ldrh	r3, [r3, #26]
 800c300:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c304:	b29a      	uxth	r2, r3
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800c30a:	e003      	b.n	800c314 <tcp_receive+0x448>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800c30c:	6878      	ldr	r0, [r7, #4]
 800c30e:	f001 ff83 	bl	800e218 <tcp_send_empty_ack>
 800c312:	e000      	b.n	800c316 <tcp_receive+0x44a>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800c314:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c31a:	2b00      	cmp	r3, #0
 800c31c:	d05b      	beq.n	800c3d6 <tcp_receive+0x50a>
 800c31e:	687b      	ldr	r3, [r7, #4]
 800c320:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c322:	4b60      	ldr	r3, [pc, #384]	; (800c4a4 <tcp_receive+0x5d8>)
 800c324:	681b      	ldr	r3, [r3, #0]
 800c326:	1ad3      	subs	r3, r2, r3
 800c328:	2b00      	cmp	r3, #0
 800c32a:	da54      	bge.n	800c3d6 <tcp_receive+0x50a>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800c32c:	4b5e      	ldr	r3, [pc, #376]	; (800c4a8 <tcp_receive+0x5dc>)
 800c32e:	681b      	ldr	r3, [r3, #0]
 800c330:	b29a      	uxth	r2, r3
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c336:	b29b      	uxth	r3, r3
 800c338:	1ad3      	subs	r3, r2, r3
 800c33a:	b29b      	uxth	r3, r3
 800c33c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 800c340:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800c34a:	10db      	asrs	r3, r3, #3
 800c34c:	b21b      	sxth	r3, r3
 800c34e:	b29b      	uxth	r3, r3
 800c350:	1ad3      	subs	r3, r2, r3
 800c352:	b29b      	uxth	r3, r3
 800c354:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800c35e:	b29a      	uxth	r2, r3
 800c360:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800c364:	4413      	add	r3, r2
 800c366:	b29b      	uxth	r3, r3
 800c368:	b21a      	sxth	r2, r3
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 800c36e:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800c372:	2b00      	cmp	r3, #0
 800c374:	da05      	bge.n	800c382 <tcp_receive+0x4b6>
        m = (s16_t) - m;
 800c376:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800c37a:	425b      	negs	r3, r3
 800c37c:	b29b      	uxth	r3, r3
 800c37e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 800c382:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800c38c:	109b      	asrs	r3, r3, #2
 800c38e:	b21b      	sxth	r3, r3
 800c390:	b29b      	uxth	r3, r3
 800c392:	1ad3      	subs	r3, r2, r3
 800c394:	b29b      	uxth	r3, r3
 800c396:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800c3a0:	b29a      	uxth	r2, r3
 800c3a2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800c3a6:	4413      	add	r3, r2
 800c3a8:	b29b      	uxth	r3, r3
 800c3aa:	b21a      	sxth	r2, r3
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800c3b6:	10db      	asrs	r3, r3, #3
 800c3b8:	b21b      	sxth	r3, r3
 800c3ba:	b29a      	uxth	r2, r3
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800c3c2:	b29b      	uxth	r3, r3
 800c3c4:	4413      	add	r3, r2
 800c3c6:	b29b      	uxth	r3, r3
 800c3c8:	b21a      	sxth	r2, r3
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	2200      	movs	r2, #0
 800c3d4:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800c3d6:	4b35      	ldr	r3, [pc, #212]	; (800c4ac <tcp_receive+0x5e0>)
 800c3d8:	881b      	ldrh	r3, [r3, #0]
 800c3da:	2b00      	cmp	r3, #0
 800c3dc:	f000 84e1 	beq.w	800cda2 <tcp_receive+0xed6>
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	7d1b      	ldrb	r3, [r3, #20]
 800c3e4:	2b06      	cmp	r3, #6
 800c3e6:	f200 84dc 	bhi.w	800cda2 <tcp_receive+0xed6>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c3ee:	4b30      	ldr	r3, [pc, #192]	; (800c4b0 <tcp_receive+0x5e4>)
 800c3f0:	681b      	ldr	r3, [r3, #0]
 800c3f2:	1ad3      	subs	r3, r2, r3
 800c3f4:	3b01      	subs	r3, #1
 800c3f6:	2b00      	cmp	r3, #0
 800c3f8:	f2c0 808e 	blt.w	800c518 <tcp_receive+0x64c>
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c400:	4b2a      	ldr	r3, [pc, #168]	; (800c4ac <tcp_receive+0x5e0>)
 800c402:	881b      	ldrh	r3, [r3, #0]
 800c404:	4619      	mov	r1, r3
 800c406:	4b2a      	ldr	r3, [pc, #168]	; (800c4b0 <tcp_receive+0x5e4>)
 800c408:	681b      	ldr	r3, [r3, #0]
 800c40a:	440b      	add	r3, r1
 800c40c:	1ad3      	subs	r3, r2, r3
 800c40e:	3301      	adds	r3, #1
 800c410:	2b00      	cmp	r3, #0
 800c412:	f300 8081 	bgt.w	800c518 <tcp_receive+0x64c>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800c416:	4b27      	ldr	r3, [pc, #156]	; (800c4b4 <tcp_receive+0x5e8>)
 800c418:	685b      	ldr	r3, [r3, #4]
 800c41a:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c420:	4b23      	ldr	r3, [pc, #140]	; (800c4b0 <tcp_receive+0x5e4>)
 800c422:	681b      	ldr	r3, [r3, #0]
 800c424:	1ad3      	subs	r3, r2, r3
 800c426:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800c428:	4b22      	ldr	r3, [pc, #136]	; (800c4b4 <tcp_receive+0x5e8>)
 800c42a:	685b      	ldr	r3, [r3, #4]
 800c42c:	2b00      	cmp	r3, #0
 800c42e:	d106      	bne.n	800c43e <tcp_receive+0x572>
 800c430:	4b21      	ldr	r3, [pc, #132]	; (800c4b8 <tcp_receive+0x5ec>)
 800c432:	f240 5294 	movw	r2, #1428	; 0x594
 800c436:	4921      	ldr	r1, [pc, #132]	; (800c4bc <tcp_receive+0x5f0>)
 800c438:	4821      	ldr	r0, [pc, #132]	; (800c4c0 <tcp_receive+0x5f4>)
 800c43a:	f007 f96b 	bl	8013714 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800c43e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c440:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800c444:	4293      	cmp	r3, r2
 800c446:	d906      	bls.n	800c456 <tcp_receive+0x58a>
 800c448:	4b1b      	ldr	r3, [pc, #108]	; (800c4b8 <tcp_receive+0x5ec>)
 800c44a:	f240 5295 	movw	r2, #1429	; 0x595
 800c44e:	491d      	ldr	r1, [pc, #116]	; (800c4c4 <tcp_receive+0x5f8>)
 800c450:	481b      	ldr	r0, [pc, #108]	; (800c4c0 <tcp_receive+0x5f4>)
 800c452:	f007 f95f 	bl	8013714 <iprintf>
      off = (u16_t)off32;
 800c456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c458:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800c45c:	4b15      	ldr	r3, [pc, #84]	; (800c4b4 <tcp_receive+0x5e8>)
 800c45e:	685b      	ldr	r3, [r3, #4]
 800c460:	891b      	ldrh	r3, [r3, #8]
 800c462:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800c466:	429a      	cmp	r2, r3
 800c468:	d906      	bls.n	800c478 <tcp_receive+0x5ac>
 800c46a:	4b13      	ldr	r3, [pc, #76]	; (800c4b8 <tcp_receive+0x5ec>)
 800c46c:	f240 5297 	movw	r2, #1431	; 0x597
 800c470:	4915      	ldr	r1, [pc, #84]	; (800c4c8 <tcp_receive+0x5fc>)
 800c472:	4813      	ldr	r0, [pc, #76]	; (800c4c0 <tcp_receive+0x5f4>)
 800c474:	f007 f94e 	bl	8013714 <iprintf>
      inseg.len -= off;
 800c478:	4b0e      	ldr	r3, [pc, #56]	; (800c4b4 <tcp_receive+0x5e8>)
 800c47a:	891a      	ldrh	r2, [r3, #8]
 800c47c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800c480:	1ad3      	subs	r3, r2, r3
 800c482:	b29a      	uxth	r2, r3
 800c484:	4b0b      	ldr	r3, [pc, #44]	; (800c4b4 <tcp_receive+0x5e8>)
 800c486:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800c488:	4b0a      	ldr	r3, [pc, #40]	; (800c4b4 <tcp_receive+0x5e8>)
 800c48a:	685b      	ldr	r3, [r3, #4]
 800c48c:	891a      	ldrh	r2, [r3, #8]
 800c48e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800c492:	1ad3      	subs	r3, r2, r3
 800c494:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 800c496:	e029      	b.n	800c4ec <tcp_receive+0x620>
 800c498:	08015c7c 	.word	0x08015c7c
 800c49c:	08015c84 	.word	0x08015c84
 800c4a0:	200084c8 	.word	0x200084c8
 800c4a4:	200084c4 	.word	0x200084c4
 800c4a8:	2000eee8 	.word	0x2000eee8
 800c4ac:	200084ca 	.word	0x200084ca
 800c4b0:	200084c0 	.word	0x200084c0
 800c4b4:	200084a0 	.word	0x200084a0
 800c4b8:	08015914 	.word	0x08015914
 800c4bc:	08015c8c 	.word	0x08015c8c
 800c4c0:	08015960 	.word	0x08015960
 800c4c4:	08015c9c 	.word	0x08015c9c
 800c4c8:	08015cac 	.word	0x08015cac
        off -= p->len;
 800c4cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c4ce:	895b      	ldrh	r3, [r3, #10]
 800c4d0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800c4d4:	1ad3      	subs	r3, r2, r3
 800c4d6:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 800c4da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c4dc:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800c4de:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 800c4e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c4e2:	2200      	movs	r2, #0
 800c4e4:	815a      	strh	r2, [r3, #10]
        p = p->next;
 800c4e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c4e8:	681b      	ldr	r3, [r3, #0]
 800c4ea:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 800c4ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c4ee:	895b      	ldrh	r3, [r3, #10]
 800c4f0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800c4f4:	429a      	cmp	r2, r3
 800c4f6:	d8e9      	bhi.n	800c4cc <tcp_receive+0x600>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 800c4f8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800c4fc:	4619      	mov	r1, r3
 800c4fe:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800c500:	f7fc fb70 	bl	8008be4 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c508:	4a91      	ldr	r2, [pc, #580]	; (800c750 <tcp_receive+0x884>)
 800c50a:	6013      	str	r3, [r2, #0]
 800c50c:	4b91      	ldr	r3, [pc, #580]	; (800c754 <tcp_receive+0x888>)
 800c50e:	68db      	ldr	r3, [r3, #12]
 800c510:	4a8f      	ldr	r2, [pc, #572]	; (800c750 <tcp_receive+0x884>)
 800c512:	6812      	ldr	r2, [r2, #0]
 800c514:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800c516:	e00d      	b.n	800c534 <tcp_receive+0x668>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800c518:	4b8d      	ldr	r3, [pc, #564]	; (800c750 <tcp_receive+0x884>)
 800c51a:	681a      	ldr	r2, [r3, #0]
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c520:	1ad3      	subs	r3, r2, r3
 800c522:	2b00      	cmp	r3, #0
 800c524:	da06      	bge.n	800c534 <tcp_receive+0x668>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	8b5b      	ldrh	r3, [r3, #26]
 800c52a:	f043 0302 	orr.w	r3, r3, #2
 800c52e:	b29a      	uxth	r2, r3
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800c534:	4b86      	ldr	r3, [pc, #536]	; (800c750 <tcp_receive+0x884>)
 800c536:	681a      	ldr	r2, [r3, #0]
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c53c:	1ad3      	subs	r3, r2, r3
 800c53e:	2b00      	cmp	r3, #0
 800c540:	f2c0 842a 	blt.w	800cd98 <tcp_receive+0xecc>
 800c544:	4b82      	ldr	r3, [pc, #520]	; (800c750 <tcp_receive+0x884>)
 800c546:	681a      	ldr	r2, [r3, #0]
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c54c:	6879      	ldr	r1, [r7, #4]
 800c54e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800c550:	440b      	add	r3, r1
 800c552:	1ad3      	subs	r3, r2, r3
 800c554:	3301      	adds	r3, #1
 800c556:	2b00      	cmp	r3, #0
 800c558:	f300 841e 	bgt.w	800cd98 <tcp_receive+0xecc>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c560:	4b7b      	ldr	r3, [pc, #492]	; (800c750 <tcp_receive+0x884>)
 800c562:	681b      	ldr	r3, [r3, #0]
 800c564:	429a      	cmp	r2, r3
 800c566:	f040 829a 	bne.w	800ca9e <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800c56a:	4b7a      	ldr	r3, [pc, #488]	; (800c754 <tcp_receive+0x888>)
 800c56c:	891c      	ldrh	r4, [r3, #8]
 800c56e:	4b79      	ldr	r3, [pc, #484]	; (800c754 <tcp_receive+0x888>)
 800c570:	68db      	ldr	r3, [r3, #12]
 800c572:	899b      	ldrh	r3, [r3, #12]
 800c574:	b29b      	uxth	r3, r3
 800c576:	4618      	mov	r0, r3
 800c578:	f7fb f806 	bl	8007588 <lwip_htons>
 800c57c:	4603      	mov	r3, r0
 800c57e:	b2db      	uxtb	r3, r3
 800c580:	f003 0303 	and.w	r3, r3, #3
 800c584:	2b00      	cmp	r3, #0
 800c586:	d001      	beq.n	800c58c <tcp_receive+0x6c0>
 800c588:	2301      	movs	r3, #1
 800c58a:	e000      	b.n	800c58e <tcp_receive+0x6c2>
 800c58c:	2300      	movs	r3, #0
 800c58e:	4423      	add	r3, r4
 800c590:	b29a      	uxth	r2, r3
 800c592:	4b71      	ldr	r3, [pc, #452]	; (800c758 <tcp_receive+0x88c>)
 800c594:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800c596:	687b      	ldr	r3, [r7, #4]
 800c598:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800c59a:	4b6f      	ldr	r3, [pc, #444]	; (800c758 <tcp_receive+0x88c>)
 800c59c:	881b      	ldrh	r3, [r3, #0]
 800c59e:	429a      	cmp	r2, r3
 800c5a0:	d275      	bcs.n	800c68e <tcp_receive+0x7c2>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800c5a2:	4b6c      	ldr	r3, [pc, #432]	; (800c754 <tcp_receive+0x888>)
 800c5a4:	68db      	ldr	r3, [r3, #12]
 800c5a6:	899b      	ldrh	r3, [r3, #12]
 800c5a8:	b29b      	uxth	r3, r3
 800c5aa:	4618      	mov	r0, r3
 800c5ac:	f7fa ffec 	bl	8007588 <lwip_htons>
 800c5b0:	4603      	mov	r3, r0
 800c5b2:	b2db      	uxtb	r3, r3
 800c5b4:	f003 0301 	and.w	r3, r3, #1
 800c5b8:	2b00      	cmp	r3, #0
 800c5ba:	d01f      	beq.n	800c5fc <tcp_receive+0x730>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800c5bc:	4b65      	ldr	r3, [pc, #404]	; (800c754 <tcp_receive+0x888>)
 800c5be:	68db      	ldr	r3, [r3, #12]
 800c5c0:	899b      	ldrh	r3, [r3, #12]
 800c5c2:	b29b      	uxth	r3, r3
 800c5c4:	b21b      	sxth	r3, r3
 800c5c6:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800c5ca:	b21c      	sxth	r4, r3
 800c5cc:	4b61      	ldr	r3, [pc, #388]	; (800c754 <tcp_receive+0x888>)
 800c5ce:	68db      	ldr	r3, [r3, #12]
 800c5d0:	899b      	ldrh	r3, [r3, #12]
 800c5d2:	b29b      	uxth	r3, r3
 800c5d4:	4618      	mov	r0, r3
 800c5d6:	f7fa ffd7 	bl	8007588 <lwip_htons>
 800c5da:	4603      	mov	r3, r0
 800c5dc:	b2db      	uxtb	r3, r3
 800c5de:	b29b      	uxth	r3, r3
 800c5e0:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800c5e4:	b29b      	uxth	r3, r3
 800c5e6:	4618      	mov	r0, r3
 800c5e8:	f7fa ffce 	bl	8007588 <lwip_htons>
 800c5ec:	4603      	mov	r3, r0
 800c5ee:	b21b      	sxth	r3, r3
 800c5f0:	4323      	orrs	r3, r4
 800c5f2:	b21a      	sxth	r2, r3
 800c5f4:	4b57      	ldr	r3, [pc, #348]	; (800c754 <tcp_receive+0x888>)
 800c5f6:	68db      	ldr	r3, [r3, #12]
 800c5f8:	b292      	uxth	r2, r2
 800c5fa:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800c600:	4b54      	ldr	r3, [pc, #336]	; (800c754 <tcp_receive+0x888>)
 800c602:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800c604:	4b53      	ldr	r3, [pc, #332]	; (800c754 <tcp_receive+0x888>)
 800c606:	68db      	ldr	r3, [r3, #12]
 800c608:	899b      	ldrh	r3, [r3, #12]
 800c60a:	b29b      	uxth	r3, r3
 800c60c:	4618      	mov	r0, r3
 800c60e:	f7fa ffbb 	bl	8007588 <lwip_htons>
 800c612:	4603      	mov	r3, r0
 800c614:	b2db      	uxtb	r3, r3
 800c616:	f003 0302 	and.w	r3, r3, #2
 800c61a:	2b00      	cmp	r3, #0
 800c61c:	d005      	beq.n	800c62a <tcp_receive+0x75e>
            inseg.len -= 1;
 800c61e:	4b4d      	ldr	r3, [pc, #308]	; (800c754 <tcp_receive+0x888>)
 800c620:	891b      	ldrh	r3, [r3, #8]
 800c622:	3b01      	subs	r3, #1
 800c624:	b29a      	uxth	r2, r3
 800c626:	4b4b      	ldr	r3, [pc, #300]	; (800c754 <tcp_receive+0x888>)
 800c628:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800c62a:	4b4a      	ldr	r3, [pc, #296]	; (800c754 <tcp_receive+0x888>)
 800c62c:	685a      	ldr	r2, [r3, #4]
 800c62e:	4b49      	ldr	r3, [pc, #292]	; (800c754 <tcp_receive+0x888>)
 800c630:	891b      	ldrh	r3, [r3, #8]
 800c632:	4619      	mov	r1, r3
 800c634:	4610      	mov	r0, r2
 800c636:	f7fc f9d5 	bl	80089e4 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800c63a:	4b46      	ldr	r3, [pc, #280]	; (800c754 <tcp_receive+0x888>)
 800c63c:	891c      	ldrh	r4, [r3, #8]
 800c63e:	4b45      	ldr	r3, [pc, #276]	; (800c754 <tcp_receive+0x888>)
 800c640:	68db      	ldr	r3, [r3, #12]
 800c642:	899b      	ldrh	r3, [r3, #12]
 800c644:	b29b      	uxth	r3, r3
 800c646:	4618      	mov	r0, r3
 800c648:	f7fa ff9e 	bl	8007588 <lwip_htons>
 800c64c:	4603      	mov	r3, r0
 800c64e:	b2db      	uxtb	r3, r3
 800c650:	f003 0303 	and.w	r3, r3, #3
 800c654:	2b00      	cmp	r3, #0
 800c656:	d001      	beq.n	800c65c <tcp_receive+0x790>
 800c658:	2301      	movs	r3, #1
 800c65a:	e000      	b.n	800c65e <tcp_receive+0x792>
 800c65c:	2300      	movs	r3, #0
 800c65e:	4423      	add	r3, r4
 800c660:	b29a      	uxth	r2, r3
 800c662:	4b3d      	ldr	r3, [pc, #244]	; (800c758 <tcp_receive+0x88c>)
 800c664:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800c666:	4b3c      	ldr	r3, [pc, #240]	; (800c758 <tcp_receive+0x88c>)
 800c668:	881b      	ldrh	r3, [r3, #0]
 800c66a:	461a      	mov	r2, r3
 800c66c:	4b38      	ldr	r3, [pc, #224]	; (800c750 <tcp_receive+0x884>)
 800c66e:	681b      	ldr	r3, [r3, #0]
 800c670:	441a      	add	r2, r3
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c676:	6879      	ldr	r1, [r7, #4]
 800c678:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800c67a:	440b      	add	r3, r1
 800c67c:	429a      	cmp	r2, r3
 800c67e:	d006      	beq.n	800c68e <tcp_receive+0x7c2>
 800c680:	4b36      	ldr	r3, [pc, #216]	; (800c75c <tcp_receive+0x890>)
 800c682:	f240 52cc 	movw	r2, #1484	; 0x5cc
 800c686:	4936      	ldr	r1, [pc, #216]	; (800c760 <tcp_receive+0x894>)
 800c688:	4836      	ldr	r0, [pc, #216]	; (800c764 <tcp_receive+0x898>)
 800c68a:	f007 f843 	bl	8013714 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c692:	2b00      	cmp	r3, #0
 800c694:	f000 80e7 	beq.w	800c866 <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800c698:	4b2e      	ldr	r3, [pc, #184]	; (800c754 <tcp_receive+0x888>)
 800c69a:	68db      	ldr	r3, [r3, #12]
 800c69c:	899b      	ldrh	r3, [r3, #12]
 800c69e:	b29b      	uxth	r3, r3
 800c6a0:	4618      	mov	r0, r3
 800c6a2:	f7fa ff71 	bl	8007588 <lwip_htons>
 800c6a6:	4603      	mov	r3, r0
 800c6a8:	b2db      	uxtb	r3, r3
 800c6aa:	f003 0301 	and.w	r3, r3, #1
 800c6ae:	2b00      	cmp	r3, #0
 800c6b0:	d010      	beq.n	800c6d4 <tcp_receive+0x808>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800c6b2:	e00a      	b.n	800c6ca <tcp_receive+0x7fe>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c6b8:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c6be:	681a      	ldr	r2, [r3, #0]
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 800c6c4:	68f8      	ldr	r0, [r7, #12]
 800c6c6:	f7fd fd97 	bl	800a1f8 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c6ce:	2b00      	cmp	r3, #0
 800c6d0:	d1f0      	bne.n	800c6b4 <tcp_receive+0x7e8>
 800c6d2:	e0c8      	b.n	800c866 <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c6d8:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800c6da:	e052      	b.n	800c782 <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800c6dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c6de:	68db      	ldr	r3, [r3, #12]
 800c6e0:	899b      	ldrh	r3, [r3, #12]
 800c6e2:	b29b      	uxth	r3, r3
 800c6e4:	4618      	mov	r0, r3
 800c6e6:	f7fa ff4f 	bl	8007588 <lwip_htons>
 800c6ea:	4603      	mov	r3, r0
 800c6ec:	b2db      	uxtb	r3, r3
 800c6ee:	f003 0301 	and.w	r3, r3, #1
 800c6f2:	2b00      	cmp	r3, #0
 800c6f4:	d03d      	beq.n	800c772 <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800c6f6:	4b17      	ldr	r3, [pc, #92]	; (800c754 <tcp_receive+0x888>)
 800c6f8:	68db      	ldr	r3, [r3, #12]
 800c6fa:	899b      	ldrh	r3, [r3, #12]
 800c6fc:	b29b      	uxth	r3, r3
 800c6fe:	4618      	mov	r0, r3
 800c700:	f7fa ff42 	bl	8007588 <lwip_htons>
 800c704:	4603      	mov	r3, r0
 800c706:	b2db      	uxtb	r3, r3
 800c708:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800c70c:	2b00      	cmp	r3, #0
 800c70e:	d130      	bne.n	800c772 <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800c710:	4b10      	ldr	r3, [pc, #64]	; (800c754 <tcp_receive+0x888>)
 800c712:	68db      	ldr	r3, [r3, #12]
 800c714:	899b      	ldrh	r3, [r3, #12]
 800c716:	b29c      	uxth	r4, r3
 800c718:	2001      	movs	r0, #1
 800c71a:	f7fa ff35 	bl	8007588 <lwip_htons>
 800c71e:	4603      	mov	r3, r0
 800c720:	461a      	mov	r2, r3
 800c722:	4b0c      	ldr	r3, [pc, #48]	; (800c754 <tcp_receive+0x888>)
 800c724:	68db      	ldr	r3, [r3, #12]
 800c726:	4322      	orrs	r2, r4
 800c728:	b292      	uxth	r2, r2
 800c72a:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800c72c:	4b09      	ldr	r3, [pc, #36]	; (800c754 <tcp_receive+0x888>)
 800c72e:	891c      	ldrh	r4, [r3, #8]
 800c730:	4b08      	ldr	r3, [pc, #32]	; (800c754 <tcp_receive+0x888>)
 800c732:	68db      	ldr	r3, [r3, #12]
 800c734:	899b      	ldrh	r3, [r3, #12]
 800c736:	b29b      	uxth	r3, r3
 800c738:	4618      	mov	r0, r3
 800c73a:	f7fa ff25 	bl	8007588 <lwip_htons>
 800c73e:	4603      	mov	r3, r0
 800c740:	b2db      	uxtb	r3, r3
 800c742:	f003 0303 	and.w	r3, r3, #3
 800c746:	2b00      	cmp	r3, #0
 800c748:	d00e      	beq.n	800c768 <tcp_receive+0x89c>
 800c74a:	2301      	movs	r3, #1
 800c74c:	e00d      	b.n	800c76a <tcp_receive+0x89e>
 800c74e:	bf00      	nop
 800c750:	200084c0 	.word	0x200084c0
 800c754:	200084a0 	.word	0x200084a0
 800c758:	200084ca 	.word	0x200084ca
 800c75c:	08015914 	.word	0x08015914
 800c760:	08015cbc 	.word	0x08015cbc
 800c764:	08015960 	.word	0x08015960
 800c768:	2300      	movs	r3, #0
 800c76a:	4423      	add	r3, r4
 800c76c:	b29a      	uxth	r2, r3
 800c76e:	4b98      	ldr	r3, [pc, #608]	; (800c9d0 <tcp_receive+0xb04>)
 800c770:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 800c772:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c774:	613b      	str	r3, [r7, #16]
              next = next->next;
 800c776:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c778:	681b      	ldr	r3, [r3, #0]
 800c77a:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 800c77c:	6938      	ldr	r0, [r7, #16]
 800c77e:	f7fd fd3b 	bl	800a1f8 <tcp_seg_free>
            while (next &&
 800c782:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c784:	2b00      	cmp	r3, #0
 800c786:	d00e      	beq.n	800c7a6 <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800c788:	4b91      	ldr	r3, [pc, #580]	; (800c9d0 <tcp_receive+0xb04>)
 800c78a:	881b      	ldrh	r3, [r3, #0]
 800c78c:	461a      	mov	r2, r3
 800c78e:	4b91      	ldr	r3, [pc, #580]	; (800c9d4 <tcp_receive+0xb08>)
 800c790:	681b      	ldr	r3, [r3, #0]
 800c792:	441a      	add	r2, r3
 800c794:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c796:	68db      	ldr	r3, [r3, #12]
 800c798:	685b      	ldr	r3, [r3, #4]
 800c79a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800c79c:	8909      	ldrh	r1, [r1, #8]
 800c79e:	440b      	add	r3, r1
 800c7a0:	1ad3      	subs	r3, r2, r3
            while (next &&
 800c7a2:	2b00      	cmp	r3, #0
 800c7a4:	da9a      	bge.n	800c6dc <tcp_receive+0x810>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800c7a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c7a8:	2b00      	cmp	r3, #0
 800c7aa:	d059      	beq.n	800c860 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 800c7ac:	4b88      	ldr	r3, [pc, #544]	; (800c9d0 <tcp_receive+0xb04>)
 800c7ae:	881b      	ldrh	r3, [r3, #0]
 800c7b0:	461a      	mov	r2, r3
 800c7b2:	4b88      	ldr	r3, [pc, #544]	; (800c9d4 <tcp_receive+0xb08>)
 800c7b4:	681b      	ldr	r3, [r3, #0]
 800c7b6:	441a      	add	r2, r3
 800c7b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c7ba:	68db      	ldr	r3, [r3, #12]
 800c7bc:	685b      	ldr	r3, [r3, #4]
 800c7be:	1ad3      	subs	r3, r2, r3
            if (next &&
 800c7c0:	2b00      	cmp	r3, #0
 800c7c2:	dd4d      	ble.n	800c860 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800c7c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c7c6:	68db      	ldr	r3, [r3, #12]
 800c7c8:	685b      	ldr	r3, [r3, #4]
 800c7ca:	b29a      	uxth	r2, r3
 800c7cc:	4b81      	ldr	r3, [pc, #516]	; (800c9d4 <tcp_receive+0xb08>)
 800c7ce:	681b      	ldr	r3, [r3, #0]
 800c7d0:	b29b      	uxth	r3, r3
 800c7d2:	1ad3      	subs	r3, r2, r3
 800c7d4:	b29a      	uxth	r2, r3
 800c7d6:	4b80      	ldr	r3, [pc, #512]	; (800c9d8 <tcp_receive+0xb0c>)
 800c7d8:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800c7da:	4b7f      	ldr	r3, [pc, #508]	; (800c9d8 <tcp_receive+0xb0c>)
 800c7dc:	68db      	ldr	r3, [r3, #12]
 800c7de:	899b      	ldrh	r3, [r3, #12]
 800c7e0:	b29b      	uxth	r3, r3
 800c7e2:	4618      	mov	r0, r3
 800c7e4:	f7fa fed0 	bl	8007588 <lwip_htons>
 800c7e8:	4603      	mov	r3, r0
 800c7ea:	b2db      	uxtb	r3, r3
 800c7ec:	f003 0302 	and.w	r3, r3, #2
 800c7f0:	2b00      	cmp	r3, #0
 800c7f2:	d005      	beq.n	800c800 <tcp_receive+0x934>
                inseg.len -= 1;
 800c7f4:	4b78      	ldr	r3, [pc, #480]	; (800c9d8 <tcp_receive+0xb0c>)
 800c7f6:	891b      	ldrh	r3, [r3, #8]
 800c7f8:	3b01      	subs	r3, #1
 800c7fa:	b29a      	uxth	r2, r3
 800c7fc:	4b76      	ldr	r3, [pc, #472]	; (800c9d8 <tcp_receive+0xb0c>)
 800c7fe:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800c800:	4b75      	ldr	r3, [pc, #468]	; (800c9d8 <tcp_receive+0xb0c>)
 800c802:	685a      	ldr	r2, [r3, #4]
 800c804:	4b74      	ldr	r3, [pc, #464]	; (800c9d8 <tcp_receive+0xb0c>)
 800c806:	891b      	ldrh	r3, [r3, #8]
 800c808:	4619      	mov	r1, r3
 800c80a:	4610      	mov	r0, r2
 800c80c:	f7fc f8ea 	bl	80089e4 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800c810:	4b71      	ldr	r3, [pc, #452]	; (800c9d8 <tcp_receive+0xb0c>)
 800c812:	891c      	ldrh	r4, [r3, #8]
 800c814:	4b70      	ldr	r3, [pc, #448]	; (800c9d8 <tcp_receive+0xb0c>)
 800c816:	68db      	ldr	r3, [r3, #12]
 800c818:	899b      	ldrh	r3, [r3, #12]
 800c81a:	b29b      	uxth	r3, r3
 800c81c:	4618      	mov	r0, r3
 800c81e:	f7fa feb3 	bl	8007588 <lwip_htons>
 800c822:	4603      	mov	r3, r0
 800c824:	b2db      	uxtb	r3, r3
 800c826:	f003 0303 	and.w	r3, r3, #3
 800c82a:	2b00      	cmp	r3, #0
 800c82c:	d001      	beq.n	800c832 <tcp_receive+0x966>
 800c82e:	2301      	movs	r3, #1
 800c830:	e000      	b.n	800c834 <tcp_receive+0x968>
 800c832:	2300      	movs	r3, #0
 800c834:	4423      	add	r3, r4
 800c836:	b29a      	uxth	r2, r3
 800c838:	4b65      	ldr	r3, [pc, #404]	; (800c9d0 <tcp_receive+0xb04>)
 800c83a:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800c83c:	4b64      	ldr	r3, [pc, #400]	; (800c9d0 <tcp_receive+0xb04>)
 800c83e:	881b      	ldrh	r3, [r3, #0]
 800c840:	461a      	mov	r2, r3
 800c842:	4b64      	ldr	r3, [pc, #400]	; (800c9d4 <tcp_receive+0xb08>)
 800c844:	681b      	ldr	r3, [r3, #0]
 800c846:	441a      	add	r2, r3
 800c848:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c84a:	68db      	ldr	r3, [r3, #12]
 800c84c:	685b      	ldr	r3, [r3, #4]
 800c84e:	429a      	cmp	r2, r3
 800c850:	d006      	beq.n	800c860 <tcp_receive+0x994>
 800c852:	4b62      	ldr	r3, [pc, #392]	; (800c9dc <tcp_receive+0xb10>)
 800c854:	f240 52fd 	movw	r2, #1533	; 0x5fd
 800c858:	4961      	ldr	r1, [pc, #388]	; (800c9e0 <tcp_receive+0xb14>)
 800c85a:	4862      	ldr	r0, [pc, #392]	; (800c9e4 <tcp_receive+0xb18>)
 800c85c:	f006 ff5a 	bl	8013714 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c864:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800c866:	4b5a      	ldr	r3, [pc, #360]	; (800c9d0 <tcp_receive+0xb04>)
 800c868:	881b      	ldrh	r3, [r3, #0]
 800c86a:	461a      	mov	r2, r3
 800c86c:	4b59      	ldr	r3, [pc, #356]	; (800c9d4 <tcp_receive+0xb08>)
 800c86e:	681b      	ldr	r3, [r3, #0]
 800c870:	441a      	add	r2, r3
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800c87a:	4b55      	ldr	r3, [pc, #340]	; (800c9d0 <tcp_receive+0xb04>)
 800c87c:	881b      	ldrh	r3, [r3, #0]
 800c87e:	429a      	cmp	r2, r3
 800c880:	d206      	bcs.n	800c890 <tcp_receive+0x9c4>
 800c882:	4b56      	ldr	r3, [pc, #344]	; (800c9dc <tcp_receive+0xb10>)
 800c884:	f240 6207 	movw	r2, #1543	; 0x607
 800c888:	4957      	ldr	r1, [pc, #348]	; (800c9e8 <tcp_receive+0xb1c>)
 800c88a:	4856      	ldr	r0, [pc, #344]	; (800c9e4 <tcp_receive+0xb18>)
 800c88c:	f006 ff42 	bl	8013714 <iprintf>
        pcb->rcv_wnd -= tcplen;
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800c894:	4b4e      	ldr	r3, [pc, #312]	; (800c9d0 <tcp_receive+0xb04>)
 800c896:	881b      	ldrh	r3, [r3, #0]
 800c898:	1ad3      	subs	r3, r2, r3
 800c89a:	b29a      	uxth	r2, r3
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800c8a0:	6878      	ldr	r0, [r7, #4]
 800c8a2:	f7fc ffcd 	bl	8009840 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800c8a6:	4b4c      	ldr	r3, [pc, #304]	; (800c9d8 <tcp_receive+0xb0c>)
 800c8a8:	685b      	ldr	r3, [r3, #4]
 800c8aa:	891b      	ldrh	r3, [r3, #8]
 800c8ac:	2b00      	cmp	r3, #0
 800c8ae:	d006      	beq.n	800c8be <tcp_receive+0x9f2>
          recv_data = inseg.p;
 800c8b0:	4b49      	ldr	r3, [pc, #292]	; (800c9d8 <tcp_receive+0xb0c>)
 800c8b2:	685b      	ldr	r3, [r3, #4]
 800c8b4:	4a4d      	ldr	r2, [pc, #308]	; (800c9ec <tcp_receive+0xb20>)
 800c8b6:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800c8b8:	4b47      	ldr	r3, [pc, #284]	; (800c9d8 <tcp_receive+0xb0c>)
 800c8ba:	2200      	movs	r2, #0
 800c8bc:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800c8be:	4b46      	ldr	r3, [pc, #280]	; (800c9d8 <tcp_receive+0xb0c>)
 800c8c0:	68db      	ldr	r3, [r3, #12]
 800c8c2:	899b      	ldrh	r3, [r3, #12]
 800c8c4:	b29b      	uxth	r3, r3
 800c8c6:	4618      	mov	r0, r3
 800c8c8:	f7fa fe5e 	bl	8007588 <lwip_htons>
 800c8cc:	4603      	mov	r3, r0
 800c8ce:	b2db      	uxtb	r3, r3
 800c8d0:	f003 0301 	and.w	r3, r3, #1
 800c8d4:	2b00      	cmp	r3, #0
 800c8d6:	f000 80b8 	beq.w	800ca4a <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800c8da:	4b45      	ldr	r3, [pc, #276]	; (800c9f0 <tcp_receive+0xb24>)
 800c8dc:	781b      	ldrb	r3, [r3, #0]
 800c8de:	f043 0320 	orr.w	r3, r3, #32
 800c8e2:	b2da      	uxtb	r2, r3
 800c8e4:	4b42      	ldr	r3, [pc, #264]	; (800c9f0 <tcp_receive+0xb24>)
 800c8e6:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800c8e8:	e0af      	b.n	800ca4a <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c8ee:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c8f4:	68db      	ldr	r3, [r3, #12]
 800c8f6:	685b      	ldr	r3, [r3, #4]
 800c8f8:	4a36      	ldr	r2, [pc, #216]	; (800c9d4 <tcp_receive+0xb08>)
 800c8fa:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800c8fc:	68bb      	ldr	r3, [r7, #8]
 800c8fe:	891b      	ldrh	r3, [r3, #8]
 800c900:	461c      	mov	r4, r3
 800c902:	68bb      	ldr	r3, [r7, #8]
 800c904:	68db      	ldr	r3, [r3, #12]
 800c906:	899b      	ldrh	r3, [r3, #12]
 800c908:	b29b      	uxth	r3, r3
 800c90a:	4618      	mov	r0, r3
 800c90c:	f7fa fe3c 	bl	8007588 <lwip_htons>
 800c910:	4603      	mov	r3, r0
 800c912:	b2db      	uxtb	r3, r3
 800c914:	f003 0303 	and.w	r3, r3, #3
 800c918:	2b00      	cmp	r3, #0
 800c91a:	d001      	beq.n	800c920 <tcp_receive+0xa54>
 800c91c:	2301      	movs	r3, #1
 800c91e:	e000      	b.n	800c922 <tcp_receive+0xa56>
 800c920:	2300      	movs	r3, #0
 800c922:	191a      	adds	r2, r3, r4
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c928:	441a      	add	r2, r3
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800c92e:	687b      	ldr	r3, [r7, #4]
 800c930:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c932:	461c      	mov	r4, r3
 800c934:	68bb      	ldr	r3, [r7, #8]
 800c936:	891b      	ldrh	r3, [r3, #8]
 800c938:	461d      	mov	r5, r3
 800c93a:	68bb      	ldr	r3, [r7, #8]
 800c93c:	68db      	ldr	r3, [r3, #12]
 800c93e:	899b      	ldrh	r3, [r3, #12]
 800c940:	b29b      	uxth	r3, r3
 800c942:	4618      	mov	r0, r3
 800c944:	f7fa fe20 	bl	8007588 <lwip_htons>
 800c948:	4603      	mov	r3, r0
 800c94a:	b2db      	uxtb	r3, r3
 800c94c:	f003 0303 	and.w	r3, r3, #3
 800c950:	2b00      	cmp	r3, #0
 800c952:	d001      	beq.n	800c958 <tcp_receive+0xa8c>
 800c954:	2301      	movs	r3, #1
 800c956:	e000      	b.n	800c95a <tcp_receive+0xa8e>
 800c958:	2300      	movs	r3, #0
 800c95a:	442b      	add	r3, r5
 800c95c:	429c      	cmp	r4, r3
 800c95e:	d206      	bcs.n	800c96e <tcp_receive+0xaa2>
 800c960:	4b1e      	ldr	r3, [pc, #120]	; (800c9dc <tcp_receive+0xb10>)
 800c962:	f240 622c 	movw	r2, #1580	; 0x62c
 800c966:	4923      	ldr	r1, [pc, #140]	; (800c9f4 <tcp_receive+0xb28>)
 800c968:	481e      	ldr	r0, [pc, #120]	; (800c9e4 <tcp_receive+0xb18>)
 800c96a:	f006 fed3 	bl	8013714 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800c96e:	68bb      	ldr	r3, [r7, #8]
 800c970:	891b      	ldrh	r3, [r3, #8]
 800c972:	461c      	mov	r4, r3
 800c974:	68bb      	ldr	r3, [r7, #8]
 800c976:	68db      	ldr	r3, [r3, #12]
 800c978:	899b      	ldrh	r3, [r3, #12]
 800c97a:	b29b      	uxth	r3, r3
 800c97c:	4618      	mov	r0, r3
 800c97e:	f7fa fe03 	bl	8007588 <lwip_htons>
 800c982:	4603      	mov	r3, r0
 800c984:	b2db      	uxtb	r3, r3
 800c986:	f003 0303 	and.w	r3, r3, #3
 800c98a:	2b00      	cmp	r3, #0
 800c98c:	d001      	beq.n	800c992 <tcp_receive+0xac6>
 800c98e:	2301      	movs	r3, #1
 800c990:	e000      	b.n	800c994 <tcp_receive+0xac8>
 800c992:	2300      	movs	r3, #0
 800c994:	1919      	adds	r1, r3, r4
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800c99a:	b28b      	uxth	r3, r1
 800c99c:	1ad3      	subs	r3, r2, r3
 800c99e:	b29a      	uxth	r2, r3
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800c9a4:	6878      	ldr	r0, [r7, #4]
 800c9a6:	f7fc ff4b 	bl	8009840 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800c9aa:	68bb      	ldr	r3, [r7, #8]
 800c9ac:	685b      	ldr	r3, [r3, #4]
 800c9ae:	891b      	ldrh	r3, [r3, #8]
 800c9b0:	2b00      	cmp	r3, #0
 800c9b2:	d028      	beq.n	800ca06 <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800c9b4:	4b0d      	ldr	r3, [pc, #52]	; (800c9ec <tcp_receive+0xb20>)
 800c9b6:	681b      	ldr	r3, [r3, #0]
 800c9b8:	2b00      	cmp	r3, #0
 800c9ba:	d01d      	beq.n	800c9f8 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 800c9bc:	4b0b      	ldr	r3, [pc, #44]	; (800c9ec <tcp_receive+0xb20>)
 800c9be:	681a      	ldr	r2, [r3, #0]
 800c9c0:	68bb      	ldr	r3, [r7, #8]
 800c9c2:	685b      	ldr	r3, [r3, #4]
 800c9c4:	4619      	mov	r1, r3
 800c9c6:	4610      	mov	r0, r2
 800c9c8:	f7fc fa60 	bl	8008e8c <pbuf_cat>
 800c9cc:	e018      	b.n	800ca00 <tcp_receive+0xb34>
 800c9ce:	bf00      	nop
 800c9d0:	200084ca 	.word	0x200084ca
 800c9d4:	200084c0 	.word	0x200084c0
 800c9d8:	200084a0 	.word	0x200084a0
 800c9dc:	08015914 	.word	0x08015914
 800c9e0:	08015cf4 	.word	0x08015cf4
 800c9e4:	08015960 	.word	0x08015960
 800c9e8:	08015d30 	.word	0x08015d30
 800c9ec:	200084d0 	.word	0x200084d0
 800c9f0:	200084cd 	.word	0x200084cd
 800c9f4:	08015d50 	.word	0x08015d50
            } else {
              recv_data = cseg->p;
 800c9f8:	68bb      	ldr	r3, [r7, #8]
 800c9fa:	685b      	ldr	r3, [r3, #4]
 800c9fc:	4a70      	ldr	r2, [pc, #448]	; (800cbc0 <tcp_receive+0xcf4>)
 800c9fe:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800ca00:	68bb      	ldr	r3, [r7, #8]
 800ca02:	2200      	movs	r2, #0
 800ca04:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800ca06:	68bb      	ldr	r3, [r7, #8]
 800ca08:	68db      	ldr	r3, [r3, #12]
 800ca0a:	899b      	ldrh	r3, [r3, #12]
 800ca0c:	b29b      	uxth	r3, r3
 800ca0e:	4618      	mov	r0, r3
 800ca10:	f7fa fdba 	bl	8007588 <lwip_htons>
 800ca14:	4603      	mov	r3, r0
 800ca16:	b2db      	uxtb	r3, r3
 800ca18:	f003 0301 	and.w	r3, r3, #1
 800ca1c:	2b00      	cmp	r3, #0
 800ca1e:	d00d      	beq.n	800ca3c <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800ca20:	4b68      	ldr	r3, [pc, #416]	; (800cbc4 <tcp_receive+0xcf8>)
 800ca22:	781b      	ldrb	r3, [r3, #0]
 800ca24:	f043 0320 	orr.w	r3, r3, #32
 800ca28:	b2da      	uxtb	r2, r3
 800ca2a:	4b66      	ldr	r3, [pc, #408]	; (800cbc4 <tcp_receive+0xcf8>)
 800ca2c:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800ca2e:	687b      	ldr	r3, [r7, #4]
 800ca30:	7d1b      	ldrb	r3, [r3, #20]
 800ca32:	2b04      	cmp	r3, #4
 800ca34:	d102      	bne.n	800ca3c <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 800ca36:	687b      	ldr	r3, [r7, #4]
 800ca38:	2207      	movs	r2, #7
 800ca3a:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800ca3c:	68bb      	ldr	r3, [r7, #8]
 800ca3e:	681a      	ldr	r2, [r3, #0]
 800ca40:	687b      	ldr	r3, [r7, #4]
 800ca42:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 800ca44:	68b8      	ldr	r0, [r7, #8]
 800ca46:	f7fd fbd7 	bl	800a1f8 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ca4e:	2b00      	cmp	r3, #0
 800ca50:	d008      	beq.n	800ca64 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ca56:	68db      	ldr	r3, [r3, #12]
 800ca58:	685a      	ldr	r2, [r3, #4]
 800ca5a:	687b      	ldr	r3, [r7, #4]
 800ca5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 800ca5e:	429a      	cmp	r2, r3
 800ca60:	f43f af43 	beq.w	800c8ea <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	8b5b      	ldrh	r3, [r3, #26]
 800ca68:	f003 0301 	and.w	r3, r3, #1
 800ca6c:	2b00      	cmp	r3, #0
 800ca6e:	d00e      	beq.n	800ca8e <tcp_receive+0xbc2>
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	8b5b      	ldrh	r3, [r3, #26]
 800ca74:	f023 0301 	bic.w	r3, r3, #1
 800ca78:	b29a      	uxth	r2, r3
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	835a      	strh	r2, [r3, #26]
 800ca7e:	687b      	ldr	r3, [r7, #4]
 800ca80:	8b5b      	ldrh	r3, [r3, #26]
 800ca82:	f043 0302 	orr.w	r3, r3, #2
 800ca86:	b29a      	uxth	r2, r3
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800ca8c:	e188      	b.n	800cda0 <tcp_receive+0xed4>
        tcp_ack(pcb);
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	8b5b      	ldrh	r3, [r3, #26]
 800ca92:	f043 0301 	orr.w	r3, r3, #1
 800ca96:	b29a      	uxth	r2, r3
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800ca9c:	e180      	b.n	800cda0 <tcp_receive+0xed4>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800caa2:	2b00      	cmp	r3, #0
 800caa4:	d106      	bne.n	800cab4 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800caa6:	4848      	ldr	r0, [pc, #288]	; (800cbc8 <tcp_receive+0xcfc>)
 800caa8:	f7fd fbbe 	bl	800a228 <tcp_seg_copy>
 800caac:	4602      	mov	r2, r0
 800caae:	687b      	ldr	r3, [r7, #4]
 800cab0:	675a      	str	r2, [r3, #116]	; 0x74
 800cab2:	e16d      	b.n	800cd90 <tcp_receive+0xec4>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 800cab4:	2300      	movs	r3, #0
 800cab6:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cabc:	63bb      	str	r3, [r7, #56]	; 0x38
 800cabe:	e157      	b.n	800cd70 <tcp_receive+0xea4>
            if (seqno == next->tcphdr->seqno) {
 800cac0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cac2:	68db      	ldr	r3, [r3, #12]
 800cac4:	685a      	ldr	r2, [r3, #4]
 800cac6:	4b41      	ldr	r3, [pc, #260]	; (800cbcc <tcp_receive+0xd00>)
 800cac8:	681b      	ldr	r3, [r3, #0]
 800caca:	429a      	cmp	r2, r3
 800cacc:	d11d      	bne.n	800cb0a <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800cace:	4b3e      	ldr	r3, [pc, #248]	; (800cbc8 <tcp_receive+0xcfc>)
 800cad0:	891a      	ldrh	r2, [r3, #8]
 800cad2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cad4:	891b      	ldrh	r3, [r3, #8]
 800cad6:	429a      	cmp	r2, r3
 800cad8:	f240 814f 	bls.w	800cd7a <tcp_receive+0xeae>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800cadc:	483a      	ldr	r0, [pc, #232]	; (800cbc8 <tcp_receive+0xcfc>)
 800cade:	f7fd fba3 	bl	800a228 <tcp_seg_copy>
 800cae2:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 800cae4:	697b      	ldr	r3, [r7, #20]
 800cae6:	2b00      	cmp	r3, #0
 800cae8:	f000 8149 	beq.w	800cd7e <tcp_receive+0xeb2>
                  if (prev != NULL) {
 800caec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800caee:	2b00      	cmp	r3, #0
 800caf0:	d003      	beq.n	800cafa <tcp_receive+0xc2e>
                    prev->next = cseg;
 800caf2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800caf4:	697a      	ldr	r2, [r7, #20]
 800caf6:	601a      	str	r2, [r3, #0]
 800caf8:	e002      	b.n	800cb00 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	697a      	ldr	r2, [r7, #20]
 800cafe:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 800cb00:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800cb02:	6978      	ldr	r0, [r7, #20]
 800cb04:	f7ff f8de 	bl	800bcc4 <tcp_oos_insert_segment>
                }
                break;
 800cb08:	e139      	b.n	800cd7e <tcp_receive+0xeb2>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800cb0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cb0c:	2b00      	cmp	r3, #0
 800cb0e:	d117      	bne.n	800cb40 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800cb10:	4b2e      	ldr	r3, [pc, #184]	; (800cbcc <tcp_receive+0xd00>)
 800cb12:	681a      	ldr	r2, [r3, #0]
 800cb14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb16:	68db      	ldr	r3, [r3, #12]
 800cb18:	685b      	ldr	r3, [r3, #4]
 800cb1a:	1ad3      	subs	r3, r2, r3
 800cb1c:	2b00      	cmp	r3, #0
 800cb1e:	da57      	bge.n	800cbd0 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800cb20:	4829      	ldr	r0, [pc, #164]	; (800cbc8 <tcp_receive+0xcfc>)
 800cb22:	f7fd fb81 	bl	800a228 <tcp_seg_copy>
 800cb26:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 800cb28:	69bb      	ldr	r3, [r7, #24]
 800cb2a:	2b00      	cmp	r3, #0
 800cb2c:	f000 8129 	beq.w	800cd82 <tcp_receive+0xeb6>
                    pcb->ooseq = cseg;
 800cb30:	687b      	ldr	r3, [r7, #4]
 800cb32:	69ba      	ldr	r2, [r7, #24]
 800cb34:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 800cb36:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800cb38:	69b8      	ldr	r0, [r7, #24]
 800cb3a:	f7ff f8c3 	bl	800bcc4 <tcp_oos_insert_segment>
                  }
                  break;
 800cb3e:	e120      	b.n	800cd82 <tcp_receive+0xeb6>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800cb40:	4b22      	ldr	r3, [pc, #136]	; (800cbcc <tcp_receive+0xd00>)
 800cb42:	681a      	ldr	r2, [r3, #0]
 800cb44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cb46:	68db      	ldr	r3, [r3, #12]
 800cb48:	685b      	ldr	r3, [r3, #4]
 800cb4a:	1ad3      	subs	r3, r2, r3
 800cb4c:	3b01      	subs	r3, #1
 800cb4e:	2b00      	cmp	r3, #0
 800cb50:	db3e      	blt.n	800cbd0 <tcp_receive+0xd04>
 800cb52:	4b1e      	ldr	r3, [pc, #120]	; (800cbcc <tcp_receive+0xd00>)
 800cb54:	681a      	ldr	r2, [r3, #0]
 800cb56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb58:	68db      	ldr	r3, [r3, #12]
 800cb5a:	685b      	ldr	r3, [r3, #4]
 800cb5c:	1ad3      	subs	r3, r2, r3
 800cb5e:	3301      	adds	r3, #1
 800cb60:	2b00      	cmp	r3, #0
 800cb62:	dc35      	bgt.n	800cbd0 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800cb64:	4818      	ldr	r0, [pc, #96]	; (800cbc8 <tcp_receive+0xcfc>)
 800cb66:	f7fd fb5f 	bl	800a228 <tcp_seg_copy>
 800cb6a:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 800cb6c:	69fb      	ldr	r3, [r7, #28]
 800cb6e:	2b00      	cmp	r3, #0
 800cb70:	f000 8109 	beq.w	800cd86 <tcp_receive+0xeba>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800cb74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cb76:	68db      	ldr	r3, [r3, #12]
 800cb78:	685b      	ldr	r3, [r3, #4]
 800cb7a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cb7c:	8912      	ldrh	r2, [r2, #8]
 800cb7e:	441a      	add	r2, r3
 800cb80:	4b12      	ldr	r3, [pc, #72]	; (800cbcc <tcp_receive+0xd00>)
 800cb82:	681b      	ldr	r3, [r3, #0]
 800cb84:	1ad3      	subs	r3, r2, r3
 800cb86:	2b00      	cmp	r3, #0
 800cb88:	dd12      	ble.n	800cbb0 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800cb8a:	4b10      	ldr	r3, [pc, #64]	; (800cbcc <tcp_receive+0xd00>)
 800cb8c:	681b      	ldr	r3, [r3, #0]
 800cb8e:	b29a      	uxth	r2, r3
 800cb90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cb92:	68db      	ldr	r3, [r3, #12]
 800cb94:	685b      	ldr	r3, [r3, #4]
 800cb96:	b29b      	uxth	r3, r3
 800cb98:	1ad3      	subs	r3, r2, r3
 800cb9a:	b29a      	uxth	r2, r3
 800cb9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cb9e:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800cba0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cba2:	685a      	ldr	r2, [r3, #4]
 800cba4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cba6:	891b      	ldrh	r3, [r3, #8]
 800cba8:	4619      	mov	r1, r3
 800cbaa:	4610      	mov	r0, r2
 800cbac:	f7fb ff1a 	bl	80089e4 <pbuf_realloc>
                    }
                    prev->next = cseg;
 800cbb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cbb2:	69fa      	ldr	r2, [r7, #28]
 800cbb4:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800cbb6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800cbb8:	69f8      	ldr	r0, [r7, #28]
 800cbba:	f7ff f883 	bl	800bcc4 <tcp_oos_insert_segment>
                  }
                  break;
 800cbbe:	e0e2      	b.n	800cd86 <tcp_receive+0xeba>
 800cbc0:	200084d0 	.word	0x200084d0
 800cbc4:	200084cd 	.word	0x200084cd
 800cbc8:	200084a0 	.word	0x200084a0
 800cbcc:	200084c0 	.word	0x200084c0
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 800cbd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbd2:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800cbd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbd6:	681b      	ldr	r3, [r3, #0]
 800cbd8:	2b00      	cmp	r3, #0
 800cbda:	f040 80c6 	bne.w	800cd6a <tcp_receive+0xe9e>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800cbde:	4b80      	ldr	r3, [pc, #512]	; (800cde0 <tcp_receive+0xf14>)
 800cbe0:	681a      	ldr	r2, [r3, #0]
 800cbe2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbe4:	68db      	ldr	r3, [r3, #12]
 800cbe6:	685b      	ldr	r3, [r3, #4]
 800cbe8:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800cbea:	2b00      	cmp	r3, #0
 800cbec:	f340 80bd 	ble.w	800cd6a <tcp_receive+0xe9e>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800cbf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbf2:	68db      	ldr	r3, [r3, #12]
 800cbf4:	899b      	ldrh	r3, [r3, #12]
 800cbf6:	b29b      	uxth	r3, r3
 800cbf8:	4618      	mov	r0, r3
 800cbfa:	f7fa fcc5 	bl	8007588 <lwip_htons>
 800cbfe:	4603      	mov	r3, r0
 800cc00:	b2db      	uxtb	r3, r3
 800cc02:	f003 0301 	and.w	r3, r3, #1
 800cc06:	2b00      	cmp	r3, #0
 800cc08:	f040 80bf 	bne.w	800cd8a <tcp_receive+0xebe>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800cc0c:	4875      	ldr	r0, [pc, #468]	; (800cde4 <tcp_receive+0xf18>)
 800cc0e:	f7fd fb0b 	bl	800a228 <tcp_seg_copy>
 800cc12:	4602      	mov	r2, r0
 800cc14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc16:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800cc18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc1a:	681b      	ldr	r3, [r3, #0]
 800cc1c:	2b00      	cmp	r3, #0
 800cc1e:	f000 80b6 	beq.w	800cd8e <tcp_receive+0xec2>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800cc22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc24:	68db      	ldr	r3, [r3, #12]
 800cc26:	685b      	ldr	r3, [r3, #4]
 800cc28:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cc2a:	8912      	ldrh	r2, [r2, #8]
 800cc2c:	441a      	add	r2, r3
 800cc2e:	4b6c      	ldr	r3, [pc, #432]	; (800cde0 <tcp_receive+0xf14>)
 800cc30:	681b      	ldr	r3, [r3, #0]
 800cc32:	1ad3      	subs	r3, r2, r3
 800cc34:	2b00      	cmp	r3, #0
 800cc36:	dd12      	ble.n	800cc5e <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800cc38:	4b69      	ldr	r3, [pc, #420]	; (800cde0 <tcp_receive+0xf14>)
 800cc3a:	681b      	ldr	r3, [r3, #0]
 800cc3c:	b29a      	uxth	r2, r3
 800cc3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc40:	68db      	ldr	r3, [r3, #12]
 800cc42:	685b      	ldr	r3, [r3, #4]
 800cc44:	b29b      	uxth	r3, r3
 800cc46:	1ad3      	subs	r3, r2, r3
 800cc48:	b29a      	uxth	r2, r3
 800cc4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc4c:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800cc4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc50:	685a      	ldr	r2, [r3, #4]
 800cc52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc54:	891b      	ldrh	r3, [r3, #8]
 800cc56:	4619      	mov	r1, r3
 800cc58:	4610      	mov	r0, r2
 800cc5a:	f7fb fec3 	bl	80089e4 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800cc5e:	4b62      	ldr	r3, [pc, #392]	; (800cde8 <tcp_receive+0xf1c>)
 800cc60:	881b      	ldrh	r3, [r3, #0]
 800cc62:	461a      	mov	r2, r3
 800cc64:	4b5e      	ldr	r3, [pc, #376]	; (800cde0 <tcp_receive+0xf14>)
 800cc66:	681b      	ldr	r3, [r3, #0]
 800cc68:	441a      	add	r2, r3
 800cc6a:	687b      	ldr	r3, [r7, #4]
 800cc6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc6e:	6879      	ldr	r1, [r7, #4]
 800cc70:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800cc72:	440b      	add	r3, r1
 800cc74:	1ad3      	subs	r3, r2, r3
 800cc76:	2b00      	cmp	r3, #0
 800cc78:	f340 8089 	ble.w	800cd8e <tcp_receive+0xec2>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800cc7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc7e:	681b      	ldr	r3, [r3, #0]
 800cc80:	68db      	ldr	r3, [r3, #12]
 800cc82:	899b      	ldrh	r3, [r3, #12]
 800cc84:	b29b      	uxth	r3, r3
 800cc86:	4618      	mov	r0, r3
 800cc88:	f7fa fc7e 	bl	8007588 <lwip_htons>
 800cc8c:	4603      	mov	r3, r0
 800cc8e:	b2db      	uxtb	r3, r3
 800cc90:	f003 0301 	and.w	r3, r3, #1
 800cc94:	2b00      	cmp	r3, #0
 800cc96:	d022      	beq.n	800ccde <tcp_receive+0xe12>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800cc98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc9a:	681b      	ldr	r3, [r3, #0]
 800cc9c:	68db      	ldr	r3, [r3, #12]
 800cc9e:	899b      	ldrh	r3, [r3, #12]
 800cca0:	b29b      	uxth	r3, r3
 800cca2:	b21b      	sxth	r3, r3
 800cca4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800cca8:	b21c      	sxth	r4, r3
 800ccaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ccac:	681b      	ldr	r3, [r3, #0]
 800ccae:	68db      	ldr	r3, [r3, #12]
 800ccb0:	899b      	ldrh	r3, [r3, #12]
 800ccb2:	b29b      	uxth	r3, r3
 800ccb4:	4618      	mov	r0, r3
 800ccb6:	f7fa fc67 	bl	8007588 <lwip_htons>
 800ccba:	4603      	mov	r3, r0
 800ccbc:	b2db      	uxtb	r3, r3
 800ccbe:	b29b      	uxth	r3, r3
 800ccc0:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800ccc4:	b29b      	uxth	r3, r3
 800ccc6:	4618      	mov	r0, r3
 800ccc8:	f7fa fc5e 	bl	8007588 <lwip_htons>
 800cccc:	4603      	mov	r3, r0
 800ccce:	b21b      	sxth	r3, r3
 800ccd0:	4323      	orrs	r3, r4
 800ccd2:	b21a      	sxth	r2, r3
 800ccd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ccd6:	681b      	ldr	r3, [r3, #0]
 800ccd8:	68db      	ldr	r3, [r3, #12]
 800ccda:	b292      	uxth	r2, r2
 800ccdc:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800ccde:	687b      	ldr	r3, [r7, #4]
 800cce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cce2:	b29a      	uxth	r2, r3
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cce8:	4413      	add	r3, r2
 800ccea:	b299      	uxth	r1, r3
 800ccec:	4b3c      	ldr	r3, [pc, #240]	; (800cde0 <tcp_receive+0xf14>)
 800ccee:	681b      	ldr	r3, [r3, #0]
 800ccf0:	b29a      	uxth	r2, r3
 800ccf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ccf4:	681b      	ldr	r3, [r3, #0]
 800ccf6:	1a8a      	subs	r2, r1, r2
 800ccf8:	b292      	uxth	r2, r2
 800ccfa:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800ccfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ccfe:	681b      	ldr	r3, [r3, #0]
 800cd00:	685a      	ldr	r2, [r3, #4]
 800cd02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd04:	681b      	ldr	r3, [r3, #0]
 800cd06:	891b      	ldrh	r3, [r3, #8]
 800cd08:	4619      	mov	r1, r3
 800cd0a:	4610      	mov	r0, r2
 800cd0c:	f7fb fe6a 	bl	80089e4 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800cd10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd12:	681b      	ldr	r3, [r3, #0]
 800cd14:	891c      	ldrh	r4, [r3, #8]
 800cd16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd18:	681b      	ldr	r3, [r3, #0]
 800cd1a:	68db      	ldr	r3, [r3, #12]
 800cd1c:	899b      	ldrh	r3, [r3, #12]
 800cd1e:	b29b      	uxth	r3, r3
 800cd20:	4618      	mov	r0, r3
 800cd22:	f7fa fc31 	bl	8007588 <lwip_htons>
 800cd26:	4603      	mov	r3, r0
 800cd28:	b2db      	uxtb	r3, r3
 800cd2a:	f003 0303 	and.w	r3, r3, #3
 800cd2e:	2b00      	cmp	r3, #0
 800cd30:	d001      	beq.n	800cd36 <tcp_receive+0xe6a>
 800cd32:	2301      	movs	r3, #1
 800cd34:	e000      	b.n	800cd38 <tcp_receive+0xe6c>
 800cd36:	2300      	movs	r3, #0
 800cd38:	4423      	add	r3, r4
 800cd3a:	b29a      	uxth	r2, r3
 800cd3c:	4b2a      	ldr	r3, [pc, #168]	; (800cde8 <tcp_receive+0xf1c>)
 800cd3e:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800cd40:	4b29      	ldr	r3, [pc, #164]	; (800cde8 <tcp_receive+0xf1c>)
 800cd42:	881b      	ldrh	r3, [r3, #0]
 800cd44:	461a      	mov	r2, r3
 800cd46:	4b26      	ldr	r3, [pc, #152]	; (800cde0 <tcp_receive+0xf14>)
 800cd48:	681b      	ldr	r3, [r3, #0]
 800cd4a:	441a      	add	r2, r3
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd50:	6879      	ldr	r1, [r7, #4]
 800cd52:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800cd54:	440b      	add	r3, r1
 800cd56:	429a      	cmp	r2, r3
 800cd58:	d019      	beq.n	800cd8e <tcp_receive+0xec2>
 800cd5a:	4b24      	ldr	r3, [pc, #144]	; (800cdec <tcp_receive+0xf20>)
 800cd5c:	f240 62f9 	movw	r2, #1785	; 0x6f9
 800cd60:	4923      	ldr	r1, [pc, #140]	; (800cdf0 <tcp_receive+0xf24>)
 800cd62:	4824      	ldr	r0, [pc, #144]	; (800cdf4 <tcp_receive+0xf28>)
 800cd64:	f006 fcd6 	bl	8013714 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800cd68:	e011      	b.n	800cd8e <tcp_receive+0xec2>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800cd6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd6c:	681b      	ldr	r3, [r3, #0]
 800cd6e:	63bb      	str	r3, [r7, #56]	; 0x38
 800cd70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd72:	2b00      	cmp	r3, #0
 800cd74:	f47f aea4 	bne.w	800cac0 <tcp_receive+0xbf4>
 800cd78:	e00a      	b.n	800cd90 <tcp_receive+0xec4>
                break;
 800cd7a:	bf00      	nop
 800cd7c:	e008      	b.n	800cd90 <tcp_receive+0xec4>
                break;
 800cd7e:	bf00      	nop
 800cd80:	e006      	b.n	800cd90 <tcp_receive+0xec4>
                  break;
 800cd82:	bf00      	nop
 800cd84:	e004      	b.n	800cd90 <tcp_receive+0xec4>
                  break;
 800cd86:	bf00      	nop
 800cd88:	e002      	b.n	800cd90 <tcp_receive+0xec4>
                  break;
 800cd8a:	bf00      	nop
 800cd8c:	e000      	b.n	800cd90 <tcp_receive+0xec4>
                break;
 800cd8e:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 800cd90:	6878      	ldr	r0, [r7, #4]
 800cd92:	f001 fa41 	bl	800e218 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 800cd96:	e003      	b.n	800cda0 <tcp_receive+0xed4>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800cd98:	6878      	ldr	r0, [r7, #4]
 800cd9a:	f001 fa3d 	bl	800e218 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800cd9e:	e01a      	b.n	800cdd6 <tcp_receive+0xf0a>
 800cda0:	e019      	b.n	800cdd6 <tcp_receive+0xf0a>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800cda2:	4b0f      	ldr	r3, [pc, #60]	; (800cde0 <tcp_receive+0xf14>)
 800cda4:	681a      	ldr	r2, [r3, #0]
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cdaa:	1ad3      	subs	r3, r2, r3
 800cdac:	2b00      	cmp	r3, #0
 800cdae:	db0a      	blt.n	800cdc6 <tcp_receive+0xefa>
 800cdb0:	4b0b      	ldr	r3, [pc, #44]	; (800cde0 <tcp_receive+0xf14>)
 800cdb2:	681a      	ldr	r2, [r3, #0]
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cdb8:	6879      	ldr	r1, [r7, #4]
 800cdba:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800cdbc:	440b      	add	r3, r1
 800cdbe:	1ad3      	subs	r3, r2, r3
 800cdc0:	3301      	adds	r3, #1
 800cdc2:	2b00      	cmp	r3, #0
 800cdc4:	dd07      	ble.n	800cdd6 <tcp_receive+0xf0a>
      tcp_ack_now(pcb);
 800cdc6:	687b      	ldr	r3, [r7, #4]
 800cdc8:	8b5b      	ldrh	r3, [r3, #26]
 800cdca:	f043 0302 	orr.w	r3, r3, #2
 800cdce:	b29a      	uxth	r2, r3
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	835a      	strh	r2, [r3, #26]
    }
  }
}
 800cdd4:	e7ff      	b.n	800cdd6 <tcp_receive+0xf0a>
 800cdd6:	bf00      	nop
 800cdd8:	3750      	adds	r7, #80	; 0x50
 800cdda:	46bd      	mov	sp, r7
 800cddc:	bdb0      	pop	{r4, r5, r7, pc}
 800cdde:	bf00      	nop
 800cde0:	200084c0 	.word	0x200084c0
 800cde4:	200084a0 	.word	0x200084a0
 800cde8:	200084ca 	.word	0x200084ca
 800cdec:	08015914 	.word	0x08015914
 800cdf0:	08015cbc 	.word	0x08015cbc
 800cdf4:	08015960 	.word	0x08015960

0800cdf8 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 800cdf8:	b480      	push	{r7}
 800cdfa:	b083      	sub	sp, #12
 800cdfc:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 800cdfe:	4b15      	ldr	r3, [pc, #84]	; (800ce54 <tcp_get_next_optbyte+0x5c>)
 800ce00:	881b      	ldrh	r3, [r3, #0]
 800ce02:	1c5a      	adds	r2, r3, #1
 800ce04:	b291      	uxth	r1, r2
 800ce06:	4a13      	ldr	r2, [pc, #76]	; (800ce54 <tcp_get_next_optbyte+0x5c>)
 800ce08:	8011      	strh	r1, [r2, #0]
 800ce0a:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800ce0c:	4b12      	ldr	r3, [pc, #72]	; (800ce58 <tcp_get_next_optbyte+0x60>)
 800ce0e:	681b      	ldr	r3, [r3, #0]
 800ce10:	2b00      	cmp	r3, #0
 800ce12:	d004      	beq.n	800ce1e <tcp_get_next_optbyte+0x26>
 800ce14:	4b11      	ldr	r3, [pc, #68]	; (800ce5c <tcp_get_next_optbyte+0x64>)
 800ce16:	881b      	ldrh	r3, [r3, #0]
 800ce18:	88fa      	ldrh	r2, [r7, #6]
 800ce1a:	429a      	cmp	r2, r3
 800ce1c:	d208      	bcs.n	800ce30 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800ce1e:	4b10      	ldr	r3, [pc, #64]	; (800ce60 <tcp_get_next_optbyte+0x68>)
 800ce20:	681b      	ldr	r3, [r3, #0]
 800ce22:	3314      	adds	r3, #20
 800ce24:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 800ce26:	88fb      	ldrh	r3, [r7, #6]
 800ce28:	683a      	ldr	r2, [r7, #0]
 800ce2a:	4413      	add	r3, r2
 800ce2c:	781b      	ldrb	r3, [r3, #0]
 800ce2e:	e00b      	b.n	800ce48 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800ce30:	88fb      	ldrh	r3, [r7, #6]
 800ce32:	b2da      	uxtb	r2, r3
 800ce34:	4b09      	ldr	r3, [pc, #36]	; (800ce5c <tcp_get_next_optbyte+0x64>)
 800ce36:	881b      	ldrh	r3, [r3, #0]
 800ce38:	b2db      	uxtb	r3, r3
 800ce3a:	1ad3      	subs	r3, r2, r3
 800ce3c:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 800ce3e:	4b06      	ldr	r3, [pc, #24]	; (800ce58 <tcp_get_next_optbyte+0x60>)
 800ce40:	681a      	ldr	r2, [r3, #0]
 800ce42:	797b      	ldrb	r3, [r7, #5]
 800ce44:	4413      	add	r3, r2
 800ce46:	781b      	ldrb	r3, [r3, #0]
  }
}
 800ce48:	4618      	mov	r0, r3
 800ce4a:	370c      	adds	r7, #12
 800ce4c:	46bd      	mov	sp, r7
 800ce4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce52:	4770      	bx	lr
 800ce54:	200084bc 	.word	0x200084bc
 800ce58:	200084b8 	.word	0x200084b8
 800ce5c:	200084b6 	.word	0x200084b6
 800ce60:	200084b0 	.word	0x200084b0

0800ce64 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800ce64:	b580      	push	{r7, lr}
 800ce66:	b084      	sub	sp, #16
 800ce68:	af00      	add	r7, sp, #0
 800ce6a:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800ce6c:	687b      	ldr	r3, [r7, #4]
 800ce6e:	2b00      	cmp	r3, #0
 800ce70:	d106      	bne.n	800ce80 <tcp_parseopt+0x1c>
 800ce72:	4b31      	ldr	r3, [pc, #196]	; (800cf38 <tcp_parseopt+0xd4>)
 800ce74:	f240 727d 	movw	r2, #1917	; 0x77d
 800ce78:	4930      	ldr	r1, [pc, #192]	; (800cf3c <tcp_parseopt+0xd8>)
 800ce7a:	4831      	ldr	r0, [pc, #196]	; (800cf40 <tcp_parseopt+0xdc>)
 800ce7c:	f006 fc4a 	bl	8013714 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800ce80:	4b30      	ldr	r3, [pc, #192]	; (800cf44 <tcp_parseopt+0xe0>)
 800ce82:	881b      	ldrh	r3, [r3, #0]
 800ce84:	2b00      	cmp	r3, #0
 800ce86:	d053      	beq.n	800cf30 <tcp_parseopt+0xcc>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800ce88:	4b2f      	ldr	r3, [pc, #188]	; (800cf48 <tcp_parseopt+0xe4>)
 800ce8a:	2200      	movs	r2, #0
 800ce8c:	801a      	strh	r2, [r3, #0]
 800ce8e:	e043      	b.n	800cf18 <tcp_parseopt+0xb4>
      u8_t opt = tcp_get_next_optbyte();
 800ce90:	f7ff ffb2 	bl	800cdf8 <tcp_get_next_optbyte>
 800ce94:	4603      	mov	r3, r0
 800ce96:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800ce98:	7bfb      	ldrb	r3, [r7, #15]
 800ce9a:	2b01      	cmp	r3, #1
 800ce9c:	d03c      	beq.n	800cf18 <tcp_parseopt+0xb4>
 800ce9e:	2b02      	cmp	r3, #2
 800cea0:	d002      	beq.n	800cea8 <tcp_parseopt+0x44>
 800cea2:	2b00      	cmp	r3, #0
 800cea4:	d03f      	beq.n	800cf26 <tcp_parseopt+0xc2>
 800cea6:	e026      	b.n	800cef6 <tcp_parseopt+0x92>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800cea8:	f7ff ffa6 	bl	800cdf8 <tcp_get_next_optbyte>
 800ceac:	4603      	mov	r3, r0
 800ceae:	2b04      	cmp	r3, #4
 800ceb0:	d13b      	bne.n	800cf2a <tcp_parseopt+0xc6>
 800ceb2:	4b25      	ldr	r3, [pc, #148]	; (800cf48 <tcp_parseopt+0xe4>)
 800ceb4:	881b      	ldrh	r3, [r3, #0]
 800ceb6:	3302      	adds	r3, #2
 800ceb8:	4a22      	ldr	r2, [pc, #136]	; (800cf44 <tcp_parseopt+0xe0>)
 800ceba:	8812      	ldrh	r2, [r2, #0]
 800cebc:	4293      	cmp	r3, r2
 800cebe:	dc34      	bgt.n	800cf2a <tcp_parseopt+0xc6>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800cec0:	f7ff ff9a 	bl	800cdf8 <tcp_get_next_optbyte>
 800cec4:	4603      	mov	r3, r0
 800cec6:	b29b      	uxth	r3, r3
 800cec8:	021b      	lsls	r3, r3, #8
 800ceca:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 800cecc:	f7ff ff94 	bl	800cdf8 <tcp_get_next_optbyte>
 800ced0:	4603      	mov	r3, r0
 800ced2:	b29a      	uxth	r2, r3
 800ced4:	89bb      	ldrh	r3, [r7, #12]
 800ced6:	4313      	orrs	r3, r2
 800ced8:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800ceda:	89bb      	ldrh	r3, [r7, #12]
 800cedc:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800cee0:	d804      	bhi.n	800ceec <tcp_parseopt+0x88>
 800cee2:	89bb      	ldrh	r3, [r7, #12]
 800cee4:	2b00      	cmp	r3, #0
 800cee6:	d001      	beq.n	800ceec <tcp_parseopt+0x88>
 800cee8:	89ba      	ldrh	r2, [r7, #12]
 800ceea:	e001      	b.n	800cef0 <tcp_parseopt+0x8c>
 800ceec:	f44f 7206 	mov.w	r2, #536	; 0x218
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 800cef4:	e010      	b.n	800cf18 <tcp_parseopt+0xb4>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 800cef6:	f7ff ff7f 	bl	800cdf8 <tcp_get_next_optbyte>
 800cefa:	4603      	mov	r3, r0
 800cefc:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 800cefe:	7afb      	ldrb	r3, [r7, #11]
 800cf00:	2b01      	cmp	r3, #1
 800cf02:	d914      	bls.n	800cf2e <tcp_parseopt+0xca>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800cf04:	7afb      	ldrb	r3, [r7, #11]
 800cf06:	b29a      	uxth	r2, r3
 800cf08:	4b0f      	ldr	r3, [pc, #60]	; (800cf48 <tcp_parseopt+0xe4>)
 800cf0a:	881b      	ldrh	r3, [r3, #0]
 800cf0c:	4413      	add	r3, r2
 800cf0e:	b29b      	uxth	r3, r3
 800cf10:	3b02      	subs	r3, #2
 800cf12:	b29a      	uxth	r2, r3
 800cf14:	4b0c      	ldr	r3, [pc, #48]	; (800cf48 <tcp_parseopt+0xe4>)
 800cf16:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800cf18:	4b0b      	ldr	r3, [pc, #44]	; (800cf48 <tcp_parseopt+0xe4>)
 800cf1a:	881a      	ldrh	r2, [r3, #0]
 800cf1c:	4b09      	ldr	r3, [pc, #36]	; (800cf44 <tcp_parseopt+0xe0>)
 800cf1e:	881b      	ldrh	r3, [r3, #0]
 800cf20:	429a      	cmp	r2, r3
 800cf22:	d3b5      	bcc.n	800ce90 <tcp_parseopt+0x2c>
 800cf24:	e004      	b.n	800cf30 <tcp_parseopt+0xcc>
          return;
 800cf26:	bf00      	nop
 800cf28:	e002      	b.n	800cf30 <tcp_parseopt+0xcc>
            return;
 800cf2a:	bf00      	nop
 800cf2c:	e000      	b.n	800cf30 <tcp_parseopt+0xcc>
            return;
 800cf2e:	bf00      	nop
      }
    }
  }
}
 800cf30:	3710      	adds	r7, #16
 800cf32:	46bd      	mov	sp, r7
 800cf34:	bd80      	pop	{r7, pc}
 800cf36:	bf00      	nop
 800cf38:	08015914 	.word	0x08015914
 800cf3c:	08015d78 	.word	0x08015d78
 800cf40:	08015960 	.word	0x08015960
 800cf44:	200084b4 	.word	0x200084b4
 800cf48:	200084bc 	.word	0x200084bc

0800cf4c <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800cf4c:	b480      	push	{r7}
 800cf4e:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800cf50:	4b05      	ldr	r3, [pc, #20]	; (800cf68 <tcp_trigger_input_pcb_close+0x1c>)
 800cf52:	781b      	ldrb	r3, [r3, #0]
 800cf54:	f043 0310 	orr.w	r3, r3, #16
 800cf58:	b2da      	uxtb	r2, r3
 800cf5a:	4b03      	ldr	r3, [pc, #12]	; (800cf68 <tcp_trigger_input_pcb_close+0x1c>)
 800cf5c:	701a      	strb	r2, [r3, #0]
}
 800cf5e:	bf00      	nop
 800cf60:	46bd      	mov	sp, r7
 800cf62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf66:	4770      	bx	lr
 800cf68:	200084cd 	.word	0x200084cd

0800cf6c <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 800cf6c:	b580      	push	{r7, lr}
 800cf6e:	b084      	sub	sp, #16
 800cf70:	af00      	add	r7, sp, #0
 800cf72:	60f8      	str	r0, [r7, #12]
 800cf74:	60b9      	str	r1, [r7, #8]
 800cf76:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800cf78:	68fb      	ldr	r3, [r7, #12]
 800cf7a:	2b00      	cmp	r3, #0
 800cf7c:	d00a      	beq.n	800cf94 <tcp_route+0x28>
 800cf7e:	68fb      	ldr	r3, [r7, #12]
 800cf80:	7a1b      	ldrb	r3, [r3, #8]
 800cf82:	2b00      	cmp	r3, #0
 800cf84:	d006      	beq.n	800cf94 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 800cf86:	68fb      	ldr	r3, [r7, #12]
 800cf88:	7a1b      	ldrb	r3, [r3, #8]
 800cf8a:	4618      	mov	r0, r3
 800cf8c:	f7fb fb26 	bl	80085dc <netif_get_by_index>
 800cf90:	4603      	mov	r3, r0
 800cf92:	e003      	b.n	800cf9c <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 800cf94:	6878      	ldr	r0, [r7, #4]
 800cf96:	f005 f863 	bl	8012060 <ip4_route>
 800cf9a:	4603      	mov	r3, r0
  }
}
 800cf9c:	4618      	mov	r0, r3
 800cf9e:	3710      	adds	r7, #16
 800cfa0:	46bd      	mov	sp, r7
 800cfa2:	bd80      	pop	{r7, pc}

0800cfa4 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 800cfa4:	b590      	push	{r4, r7, lr}
 800cfa6:	b087      	sub	sp, #28
 800cfa8:	af00      	add	r7, sp, #0
 800cfaa:	60f8      	str	r0, [r7, #12]
 800cfac:	60b9      	str	r1, [r7, #8]
 800cfae:	603b      	str	r3, [r7, #0]
 800cfb0:	4613      	mov	r3, r2
 800cfb2:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800cfb4:	68fb      	ldr	r3, [r7, #12]
 800cfb6:	2b00      	cmp	r3, #0
 800cfb8:	d105      	bne.n	800cfc6 <tcp_create_segment+0x22>
 800cfba:	4b44      	ldr	r3, [pc, #272]	; (800d0cc <tcp_create_segment+0x128>)
 800cfbc:	22a3      	movs	r2, #163	; 0xa3
 800cfbe:	4944      	ldr	r1, [pc, #272]	; (800d0d0 <tcp_create_segment+0x12c>)
 800cfc0:	4844      	ldr	r0, [pc, #272]	; (800d0d4 <tcp_create_segment+0x130>)
 800cfc2:	f006 fba7 	bl	8013714 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800cfc6:	68bb      	ldr	r3, [r7, #8]
 800cfc8:	2b00      	cmp	r3, #0
 800cfca:	d105      	bne.n	800cfd8 <tcp_create_segment+0x34>
 800cfcc:	4b3f      	ldr	r3, [pc, #252]	; (800d0cc <tcp_create_segment+0x128>)
 800cfce:	22a4      	movs	r2, #164	; 0xa4
 800cfd0:	4941      	ldr	r1, [pc, #260]	; (800d0d8 <tcp_create_segment+0x134>)
 800cfd2:	4840      	ldr	r0, [pc, #256]	; (800d0d4 <tcp_create_segment+0x130>)
 800cfd4:	f006 fb9e 	bl	8013714 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800cfd8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800cfdc:	009b      	lsls	r3, r3, #2
 800cfde:	b2db      	uxtb	r3, r3
 800cfe0:	f003 0304 	and.w	r3, r3, #4
 800cfe4:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800cfe6:	2003      	movs	r0, #3
 800cfe8:	f7fa ff84 	bl	8007ef4 <memp_malloc>
 800cfec:	6138      	str	r0, [r7, #16]
 800cfee:	693b      	ldr	r3, [r7, #16]
 800cff0:	2b00      	cmp	r3, #0
 800cff2:	d104      	bne.n	800cffe <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800cff4:	68b8      	ldr	r0, [r7, #8]
 800cff6:	f7fb fe7b 	bl	8008cf0 <pbuf_free>
    return NULL;
 800cffa:	2300      	movs	r3, #0
 800cffc:	e061      	b.n	800d0c2 <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 800cffe:	693b      	ldr	r3, [r7, #16]
 800d000:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800d004:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 800d006:	693b      	ldr	r3, [r7, #16]
 800d008:	2200      	movs	r2, #0
 800d00a:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800d00c:	693b      	ldr	r3, [r7, #16]
 800d00e:	68ba      	ldr	r2, [r7, #8]
 800d010:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800d012:	68bb      	ldr	r3, [r7, #8]
 800d014:	891a      	ldrh	r2, [r3, #8]
 800d016:	7dfb      	ldrb	r3, [r7, #23]
 800d018:	b29b      	uxth	r3, r3
 800d01a:	429a      	cmp	r2, r3
 800d01c:	d205      	bcs.n	800d02a <tcp_create_segment+0x86>
 800d01e:	4b2b      	ldr	r3, [pc, #172]	; (800d0cc <tcp_create_segment+0x128>)
 800d020:	22b0      	movs	r2, #176	; 0xb0
 800d022:	492e      	ldr	r1, [pc, #184]	; (800d0dc <tcp_create_segment+0x138>)
 800d024:	482b      	ldr	r0, [pc, #172]	; (800d0d4 <tcp_create_segment+0x130>)
 800d026:	f006 fb75 	bl	8013714 <iprintf>
  seg->len = p->tot_len - optlen;
 800d02a:	68bb      	ldr	r3, [r7, #8]
 800d02c:	891a      	ldrh	r2, [r3, #8]
 800d02e:	7dfb      	ldrb	r3, [r7, #23]
 800d030:	b29b      	uxth	r3, r3
 800d032:	1ad3      	subs	r3, r2, r3
 800d034:	b29a      	uxth	r2, r3
 800d036:	693b      	ldr	r3, [r7, #16]
 800d038:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 800d03a:	2114      	movs	r1, #20
 800d03c:	68b8      	ldr	r0, [r7, #8]
 800d03e:	f7fb fdc1 	bl	8008bc4 <pbuf_add_header>
 800d042:	4603      	mov	r3, r0
 800d044:	2b00      	cmp	r3, #0
 800d046:	d004      	beq.n	800d052 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 800d048:	6938      	ldr	r0, [r7, #16]
 800d04a:	f7fd f8d5 	bl	800a1f8 <tcp_seg_free>
    return NULL;
 800d04e:	2300      	movs	r3, #0
 800d050:	e037      	b.n	800d0c2 <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800d052:	693b      	ldr	r3, [r7, #16]
 800d054:	685b      	ldr	r3, [r3, #4]
 800d056:	685a      	ldr	r2, [r3, #4]
 800d058:	693b      	ldr	r3, [r7, #16]
 800d05a:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800d05c:	68fb      	ldr	r3, [r7, #12]
 800d05e:	8ada      	ldrh	r2, [r3, #22]
 800d060:	693b      	ldr	r3, [r7, #16]
 800d062:	68dc      	ldr	r4, [r3, #12]
 800d064:	4610      	mov	r0, r2
 800d066:	f7fa fa8f 	bl	8007588 <lwip_htons>
 800d06a:	4603      	mov	r3, r0
 800d06c:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800d06e:	68fb      	ldr	r3, [r7, #12]
 800d070:	8b1a      	ldrh	r2, [r3, #24]
 800d072:	693b      	ldr	r3, [r7, #16]
 800d074:	68dc      	ldr	r4, [r3, #12]
 800d076:	4610      	mov	r0, r2
 800d078:	f7fa fa86 	bl	8007588 <lwip_htons>
 800d07c:	4603      	mov	r3, r0
 800d07e:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800d080:	693b      	ldr	r3, [r7, #16]
 800d082:	68dc      	ldr	r4, [r3, #12]
 800d084:	6838      	ldr	r0, [r7, #0]
 800d086:	f7fa fa94 	bl	80075b2 <lwip_htonl>
 800d08a:	4603      	mov	r3, r0
 800d08c:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800d08e:	7dfb      	ldrb	r3, [r7, #23]
 800d090:	089b      	lsrs	r3, r3, #2
 800d092:	b2db      	uxtb	r3, r3
 800d094:	b29b      	uxth	r3, r3
 800d096:	3305      	adds	r3, #5
 800d098:	b29b      	uxth	r3, r3
 800d09a:	031b      	lsls	r3, r3, #12
 800d09c:	b29a      	uxth	r2, r3
 800d09e:	79fb      	ldrb	r3, [r7, #7]
 800d0a0:	b29b      	uxth	r3, r3
 800d0a2:	4313      	orrs	r3, r2
 800d0a4:	b29a      	uxth	r2, r3
 800d0a6:	693b      	ldr	r3, [r7, #16]
 800d0a8:	68dc      	ldr	r4, [r3, #12]
 800d0aa:	4610      	mov	r0, r2
 800d0ac:	f7fa fa6c 	bl	8007588 <lwip_htons>
 800d0b0:	4603      	mov	r3, r0
 800d0b2:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800d0b4:	693b      	ldr	r3, [r7, #16]
 800d0b6:	68db      	ldr	r3, [r3, #12]
 800d0b8:	2200      	movs	r2, #0
 800d0ba:	749a      	strb	r2, [r3, #18]
 800d0bc:	2200      	movs	r2, #0
 800d0be:	74da      	strb	r2, [r3, #19]
  return seg;
 800d0c0:	693b      	ldr	r3, [r7, #16]
}
 800d0c2:	4618      	mov	r0, r3
 800d0c4:	371c      	adds	r7, #28
 800d0c6:	46bd      	mov	sp, r7
 800d0c8:	bd90      	pop	{r4, r7, pc}
 800d0ca:	bf00      	nop
 800d0cc:	08015d94 	.word	0x08015d94
 800d0d0:	08015dc8 	.word	0x08015dc8
 800d0d4:	08015de8 	.word	0x08015de8
 800d0d8:	08015e10 	.word	0x08015e10
 800d0dc:	08015e34 	.word	0x08015e34

0800d0e0 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 800d0e0:	b590      	push	{r4, r7, lr}
 800d0e2:	b08b      	sub	sp, #44	; 0x2c
 800d0e4:	af02      	add	r7, sp, #8
 800d0e6:	6078      	str	r0, [r7, #4]
 800d0e8:	460b      	mov	r3, r1
 800d0ea:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 800d0ec:	2300      	movs	r3, #0
 800d0ee:	61fb      	str	r3, [r7, #28]
 800d0f0:	2300      	movs	r3, #0
 800d0f2:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800d0f4:	2300      	movs	r3, #0
 800d0f6:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800d0f8:	687b      	ldr	r3, [r7, #4]
 800d0fa:	2b00      	cmp	r3, #0
 800d0fc:	d106      	bne.n	800d10c <tcp_split_unsent_seg+0x2c>
 800d0fe:	4b95      	ldr	r3, [pc, #596]	; (800d354 <tcp_split_unsent_seg+0x274>)
 800d100:	f240 324b 	movw	r2, #843	; 0x34b
 800d104:	4994      	ldr	r1, [pc, #592]	; (800d358 <tcp_split_unsent_seg+0x278>)
 800d106:	4895      	ldr	r0, [pc, #596]	; (800d35c <tcp_split_unsent_seg+0x27c>)
 800d108:	f006 fb04 	bl	8013714 <iprintf>

  useg = pcb->unsent;
 800d10c:	687b      	ldr	r3, [r7, #4]
 800d10e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d110:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 800d112:	697b      	ldr	r3, [r7, #20]
 800d114:	2b00      	cmp	r3, #0
 800d116:	d102      	bne.n	800d11e <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 800d118:	f04f 33ff 	mov.w	r3, #4294967295
 800d11c:	e116      	b.n	800d34c <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 800d11e:	887b      	ldrh	r3, [r7, #2]
 800d120:	2b00      	cmp	r3, #0
 800d122:	d109      	bne.n	800d138 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800d124:	4b8b      	ldr	r3, [pc, #556]	; (800d354 <tcp_split_unsent_seg+0x274>)
 800d126:	f240 3253 	movw	r2, #851	; 0x353
 800d12a:	498d      	ldr	r1, [pc, #564]	; (800d360 <tcp_split_unsent_seg+0x280>)
 800d12c:	488b      	ldr	r0, [pc, #556]	; (800d35c <tcp_split_unsent_seg+0x27c>)
 800d12e:	f006 faf1 	bl	8013714 <iprintf>
    return ERR_VAL;
 800d132:	f06f 0305 	mvn.w	r3, #5
 800d136:	e109      	b.n	800d34c <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 800d138:	697b      	ldr	r3, [r7, #20]
 800d13a:	891b      	ldrh	r3, [r3, #8]
 800d13c:	887a      	ldrh	r2, [r7, #2]
 800d13e:	429a      	cmp	r2, r3
 800d140:	d301      	bcc.n	800d146 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 800d142:	2300      	movs	r3, #0
 800d144:	e102      	b.n	800d34c <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800d146:	687b      	ldr	r3, [r7, #4]
 800d148:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d14a:	887a      	ldrh	r2, [r7, #2]
 800d14c:	429a      	cmp	r2, r3
 800d14e:	d906      	bls.n	800d15e <tcp_split_unsent_seg+0x7e>
 800d150:	4b80      	ldr	r3, [pc, #512]	; (800d354 <tcp_split_unsent_seg+0x274>)
 800d152:	f240 325b 	movw	r2, #859	; 0x35b
 800d156:	4983      	ldr	r1, [pc, #524]	; (800d364 <tcp_split_unsent_seg+0x284>)
 800d158:	4880      	ldr	r0, [pc, #512]	; (800d35c <tcp_split_unsent_seg+0x27c>)
 800d15a:	f006 fadb 	bl	8013714 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800d15e:	697b      	ldr	r3, [r7, #20]
 800d160:	891b      	ldrh	r3, [r3, #8]
 800d162:	2b00      	cmp	r3, #0
 800d164:	d106      	bne.n	800d174 <tcp_split_unsent_seg+0x94>
 800d166:	4b7b      	ldr	r3, [pc, #492]	; (800d354 <tcp_split_unsent_seg+0x274>)
 800d168:	f44f 7257 	mov.w	r2, #860	; 0x35c
 800d16c:	497e      	ldr	r1, [pc, #504]	; (800d368 <tcp_split_unsent_seg+0x288>)
 800d16e:	487b      	ldr	r0, [pc, #492]	; (800d35c <tcp_split_unsent_seg+0x27c>)
 800d170:	f006 fad0 	bl	8013714 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 800d174:	697b      	ldr	r3, [r7, #20]
 800d176:	7a9b      	ldrb	r3, [r3, #10]
 800d178:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800d17a:	7bfb      	ldrb	r3, [r7, #15]
 800d17c:	009b      	lsls	r3, r3, #2
 800d17e:	b2db      	uxtb	r3, r3
 800d180:	f003 0304 	and.w	r3, r3, #4
 800d184:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 800d186:	697b      	ldr	r3, [r7, #20]
 800d188:	891a      	ldrh	r2, [r3, #8]
 800d18a:	887b      	ldrh	r3, [r7, #2]
 800d18c:	1ad3      	subs	r3, r2, r3
 800d18e:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800d190:	7bbb      	ldrb	r3, [r7, #14]
 800d192:	b29a      	uxth	r2, r3
 800d194:	89bb      	ldrh	r3, [r7, #12]
 800d196:	4413      	add	r3, r2
 800d198:	b29b      	uxth	r3, r3
 800d19a:	f44f 7220 	mov.w	r2, #640	; 0x280
 800d19e:	4619      	mov	r1, r3
 800d1a0:	2036      	movs	r0, #54	; 0x36
 800d1a2:	f7fb fac5 	bl	8008730 <pbuf_alloc>
 800d1a6:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800d1a8:	693b      	ldr	r3, [r7, #16]
 800d1aa:	2b00      	cmp	r3, #0
 800d1ac:	f000 80b7 	beq.w	800d31e <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 800d1b0:	697b      	ldr	r3, [r7, #20]
 800d1b2:	685b      	ldr	r3, [r3, #4]
 800d1b4:	891a      	ldrh	r2, [r3, #8]
 800d1b6:	697b      	ldr	r3, [r7, #20]
 800d1b8:	891b      	ldrh	r3, [r3, #8]
 800d1ba:	1ad3      	subs	r3, r2, r3
 800d1bc:	b29a      	uxth	r2, r3
 800d1be:	887b      	ldrh	r3, [r7, #2]
 800d1c0:	4413      	add	r3, r2
 800d1c2:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800d1c4:	697b      	ldr	r3, [r7, #20]
 800d1c6:	6858      	ldr	r0, [r3, #4]
 800d1c8:	693b      	ldr	r3, [r7, #16]
 800d1ca:	685a      	ldr	r2, [r3, #4]
 800d1cc:	7bbb      	ldrb	r3, [r7, #14]
 800d1ce:	18d1      	adds	r1, r2, r3
 800d1d0:	897b      	ldrh	r3, [r7, #10]
 800d1d2:	89ba      	ldrh	r2, [r7, #12]
 800d1d4:	f7fb ff92 	bl	80090fc <pbuf_copy_partial>
 800d1d8:	4603      	mov	r3, r0
 800d1da:	461a      	mov	r2, r3
 800d1dc:	89bb      	ldrh	r3, [r7, #12]
 800d1de:	4293      	cmp	r3, r2
 800d1e0:	f040 809f 	bne.w	800d322 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800d1e4:	697b      	ldr	r3, [r7, #20]
 800d1e6:	68db      	ldr	r3, [r3, #12]
 800d1e8:	899b      	ldrh	r3, [r3, #12]
 800d1ea:	b29b      	uxth	r3, r3
 800d1ec:	4618      	mov	r0, r3
 800d1ee:	f7fa f9cb 	bl	8007588 <lwip_htons>
 800d1f2:	4603      	mov	r3, r0
 800d1f4:	b2db      	uxtb	r3, r3
 800d1f6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d1fa:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 800d1fc:	2300      	movs	r3, #0
 800d1fe:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 800d200:	7efb      	ldrb	r3, [r7, #27]
 800d202:	f003 0308 	and.w	r3, r3, #8
 800d206:	2b00      	cmp	r3, #0
 800d208:	d007      	beq.n	800d21a <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 800d20a:	7efb      	ldrb	r3, [r7, #27]
 800d20c:	f023 0308 	bic.w	r3, r3, #8
 800d210:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 800d212:	7ebb      	ldrb	r3, [r7, #26]
 800d214:	f043 0308 	orr.w	r3, r3, #8
 800d218:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 800d21a:	7efb      	ldrb	r3, [r7, #27]
 800d21c:	f003 0301 	and.w	r3, r3, #1
 800d220:	2b00      	cmp	r3, #0
 800d222:	d007      	beq.n	800d234 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 800d224:	7efb      	ldrb	r3, [r7, #27]
 800d226:	f023 0301 	bic.w	r3, r3, #1
 800d22a:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 800d22c:	7ebb      	ldrb	r3, [r7, #26]
 800d22e:	f043 0301 	orr.w	r3, r3, #1
 800d232:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800d234:	697b      	ldr	r3, [r7, #20]
 800d236:	68db      	ldr	r3, [r3, #12]
 800d238:	685b      	ldr	r3, [r3, #4]
 800d23a:	4618      	mov	r0, r3
 800d23c:	f7fa f9b9 	bl	80075b2 <lwip_htonl>
 800d240:	4602      	mov	r2, r0
 800d242:	887b      	ldrh	r3, [r7, #2]
 800d244:	18d1      	adds	r1, r2, r3
 800d246:	7eba      	ldrb	r2, [r7, #26]
 800d248:	7bfb      	ldrb	r3, [r7, #15]
 800d24a:	9300      	str	r3, [sp, #0]
 800d24c:	460b      	mov	r3, r1
 800d24e:	6939      	ldr	r1, [r7, #16]
 800d250:	6878      	ldr	r0, [r7, #4]
 800d252:	f7ff fea7 	bl	800cfa4 <tcp_create_segment>
 800d256:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 800d258:	69fb      	ldr	r3, [r7, #28]
 800d25a:	2b00      	cmp	r3, #0
 800d25c:	d063      	beq.n	800d326 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800d25e:	697b      	ldr	r3, [r7, #20]
 800d260:	685b      	ldr	r3, [r3, #4]
 800d262:	4618      	mov	r0, r3
 800d264:	f7fb fdd2 	bl	8008e0c <pbuf_clen>
 800d268:	4603      	mov	r3, r0
 800d26a:	461a      	mov	r2, r3
 800d26c:	687b      	ldr	r3, [r7, #4]
 800d26e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800d272:	1a9b      	subs	r3, r3, r2
 800d274:	b29a      	uxth	r2, r3
 800d276:	687b      	ldr	r3, [r7, #4]
 800d278:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800d27c:	697b      	ldr	r3, [r7, #20]
 800d27e:	6858      	ldr	r0, [r3, #4]
 800d280:	697b      	ldr	r3, [r7, #20]
 800d282:	685b      	ldr	r3, [r3, #4]
 800d284:	891a      	ldrh	r2, [r3, #8]
 800d286:	89bb      	ldrh	r3, [r7, #12]
 800d288:	1ad3      	subs	r3, r2, r3
 800d28a:	b29b      	uxth	r3, r3
 800d28c:	4619      	mov	r1, r3
 800d28e:	f7fb fba9 	bl	80089e4 <pbuf_realloc>
  useg->len -= remainder;
 800d292:	697b      	ldr	r3, [r7, #20]
 800d294:	891a      	ldrh	r2, [r3, #8]
 800d296:	89bb      	ldrh	r3, [r7, #12]
 800d298:	1ad3      	subs	r3, r2, r3
 800d29a:	b29a      	uxth	r2, r3
 800d29c:	697b      	ldr	r3, [r7, #20]
 800d29e:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800d2a0:	697b      	ldr	r3, [r7, #20]
 800d2a2:	68db      	ldr	r3, [r3, #12]
 800d2a4:	899b      	ldrh	r3, [r3, #12]
 800d2a6:	b29c      	uxth	r4, r3
 800d2a8:	7efb      	ldrb	r3, [r7, #27]
 800d2aa:	b29b      	uxth	r3, r3
 800d2ac:	4618      	mov	r0, r3
 800d2ae:	f7fa f96b 	bl	8007588 <lwip_htons>
 800d2b2:	4603      	mov	r3, r0
 800d2b4:	461a      	mov	r2, r3
 800d2b6:	697b      	ldr	r3, [r7, #20]
 800d2b8:	68db      	ldr	r3, [r3, #12]
 800d2ba:	4322      	orrs	r2, r4
 800d2bc:	b292      	uxth	r2, r2
 800d2be:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800d2c0:	697b      	ldr	r3, [r7, #20]
 800d2c2:	685b      	ldr	r3, [r3, #4]
 800d2c4:	4618      	mov	r0, r3
 800d2c6:	f7fb fda1 	bl	8008e0c <pbuf_clen>
 800d2ca:	4603      	mov	r3, r0
 800d2cc:	461a      	mov	r2, r3
 800d2ce:	687b      	ldr	r3, [r7, #4]
 800d2d0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800d2d4:	4413      	add	r3, r2
 800d2d6:	b29a      	uxth	r2, r3
 800d2d8:	687b      	ldr	r3, [r7, #4]
 800d2da:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800d2de:	69fb      	ldr	r3, [r7, #28]
 800d2e0:	685b      	ldr	r3, [r3, #4]
 800d2e2:	4618      	mov	r0, r3
 800d2e4:	f7fb fd92 	bl	8008e0c <pbuf_clen>
 800d2e8:	4603      	mov	r3, r0
 800d2ea:	461a      	mov	r2, r3
 800d2ec:	687b      	ldr	r3, [r7, #4]
 800d2ee:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800d2f2:	4413      	add	r3, r2
 800d2f4:	b29a      	uxth	r2, r3
 800d2f6:	687b      	ldr	r3, [r7, #4]
 800d2f8:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 800d2fc:	697b      	ldr	r3, [r7, #20]
 800d2fe:	681a      	ldr	r2, [r3, #0]
 800d300:	69fb      	ldr	r3, [r7, #28]
 800d302:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 800d304:	697b      	ldr	r3, [r7, #20]
 800d306:	69fa      	ldr	r2, [r7, #28]
 800d308:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 800d30a:	69fb      	ldr	r3, [r7, #28]
 800d30c:	681b      	ldr	r3, [r3, #0]
 800d30e:	2b00      	cmp	r3, #0
 800d310:	d103      	bne.n	800d31a <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 800d312:	687b      	ldr	r3, [r7, #4]
 800d314:	2200      	movs	r2, #0
 800d316:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 800d31a:	2300      	movs	r3, #0
 800d31c:	e016      	b.n	800d34c <tcp_split_unsent_seg+0x26c>
    goto memerr;
 800d31e:	bf00      	nop
 800d320:	e002      	b.n	800d328 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800d322:	bf00      	nop
 800d324:	e000      	b.n	800d328 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800d326:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 800d328:	69fb      	ldr	r3, [r7, #28]
 800d32a:	2b00      	cmp	r3, #0
 800d32c:	d006      	beq.n	800d33c <tcp_split_unsent_seg+0x25c>
 800d32e:	4b09      	ldr	r3, [pc, #36]	; (800d354 <tcp_split_unsent_seg+0x274>)
 800d330:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 800d334:	490d      	ldr	r1, [pc, #52]	; (800d36c <tcp_split_unsent_seg+0x28c>)
 800d336:	4809      	ldr	r0, [pc, #36]	; (800d35c <tcp_split_unsent_seg+0x27c>)
 800d338:	f006 f9ec 	bl	8013714 <iprintf>
  if (p != NULL) {
 800d33c:	693b      	ldr	r3, [r7, #16]
 800d33e:	2b00      	cmp	r3, #0
 800d340:	d002      	beq.n	800d348 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 800d342:	6938      	ldr	r0, [r7, #16]
 800d344:	f7fb fcd4 	bl	8008cf0 <pbuf_free>
  }

  return ERR_MEM;
 800d348:	f04f 33ff 	mov.w	r3, #4294967295
}
 800d34c:	4618      	mov	r0, r3
 800d34e:	3724      	adds	r7, #36	; 0x24
 800d350:	46bd      	mov	sp, r7
 800d352:	bd90      	pop	{r4, r7, pc}
 800d354:	08015d94 	.word	0x08015d94
 800d358:	08016128 	.word	0x08016128
 800d35c:	08015de8 	.word	0x08015de8
 800d360:	0801614c 	.word	0x0801614c
 800d364:	08016170 	.word	0x08016170
 800d368:	08016180 	.word	0x08016180
 800d36c:	08016190 	.word	0x08016190

0800d370 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 800d370:	b590      	push	{r4, r7, lr}
 800d372:	b085      	sub	sp, #20
 800d374:	af00      	add	r7, sp, #0
 800d376:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800d378:	687b      	ldr	r3, [r7, #4]
 800d37a:	2b00      	cmp	r3, #0
 800d37c:	d106      	bne.n	800d38c <tcp_send_fin+0x1c>
 800d37e:	4b21      	ldr	r3, [pc, #132]	; (800d404 <tcp_send_fin+0x94>)
 800d380:	f240 32eb 	movw	r2, #1003	; 0x3eb
 800d384:	4920      	ldr	r1, [pc, #128]	; (800d408 <tcp_send_fin+0x98>)
 800d386:	4821      	ldr	r0, [pc, #132]	; (800d40c <tcp_send_fin+0x9c>)
 800d388:	f006 f9c4 	bl	8013714 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 800d38c:	687b      	ldr	r3, [r7, #4]
 800d38e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d390:	2b00      	cmp	r3, #0
 800d392:	d02e      	beq.n	800d3f2 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800d394:	687b      	ldr	r3, [r7, #4]
 800d396:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d398:	60fb      	str	r3, [r7, #12]
 800d39a:	e002      	b.n	800d3a2 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 800d39c:	68fb      	ldr	r3, [r7, #12]
 800d39e:	681b      	ldr	r3, [r3, #0]
 800d3a0:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800d3a2:	68fb      	ldr	r3, [r7, #12]
 800d3a4:	681b      	ldr	r3, [r3, #0]
 800d3a6:	2b00      	cmp	r3, #0
 800d3a8:	d1f8      	bne.n	800d39c <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800d3aa:	68fb      	ldr	r3, [r7, #12]
 800d3ac:	68db      	ldr	r3, [r3, #12]
 800d3ae:	899b      	ldrh	r3, [r3, #12]
 800d3b0:	b29b      	uxth	r3, r3
 800d3b2:	4618      	mov	r0, r3
 800d3b4:	f7fa f8e8 	bl	8007588 <lwip_htons>
 800d3b8:	4603      	mov	r3, r0
 800d3ba:	b2db      	uxtb	r3, r3
 800d3bc:	f003 0307 	and.w	r3, r3, #7
 800d3c0:	2b00      	cmp	r3, #0
 800d3c2:	d116      	bne.n	800d3f2 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800d3c4:	68fb      	ldr	r3, [r7, #12]
 800d3c6:	68db      	ldr	r3, [r3, #12]
 800d3c8:	899b      	ldrh	r3, [r3, #12]
 800d3ca:	b29c      	uxth	r4, r3
 800d3cc:	2001      	movs	r0, #1
 800d3ce:	f7fa f8db 	bl	8007588 <lwip_htons>
 800d3d2:	4603      	mov	r3, r0
 800d3d4:	461a      	mov	r2, r3
 800d3d6:	68fb      	ldr	r3, [r7, #12]
 800d3d8:	68db      	ldr	r3, [r3, #12]
 800d3da:	4322      	orrs	r2, r4
 800d3dc:	b292      	uxth	r2, r2
 800d3de:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 800d3e0:	687b      	ldr	r3, [r7, #4]
 800d3e2:	8b5b      	ldrh	r3, [r3, #26]
 800d3e4:	f043 0320 	orr.w	r3, r3, #32
 800d3e8:	b29a      	uxth	r2, r3
 800d3ea:	687b      	ldr	r3, [r7, #4]
 800d3ec:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 800d3ee:	2300      	movs	r3, #0
 800d3f0:	e004      	b.n	800d3fc <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800d3f2:	2101      	movs	r1, #1
 800d3f4:	6878      	ldr	r0, [r7, #4]
 800d3f6:	f000 f80b 	bl	800d410 <tcp_enqueue_flags>
 800d3fa:	4603      	mov	r3, r0
}
 800d3fc:	4618      	mov	r0, r3
 800d3fe:	3714      	adds	r7, #20
 800d400:	46bd      	mov	sp, r7
 800d402:	bd90      	pop	{r4, r7, pc}
 800d404:	08015d94 	.word	0x08015d94
 800d408:	0801619c 	.word	0x0801619c
 800d40c:	08015de8 	.word	0x08015de8

0800d410 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 800d410:	b580      	push	{r7, lr}
 800d412:	b08a      	sub	sp, #40	; 0x28
 800d414:	af02      	add	r7, sp, #8
 800d416:	6078      	str	r0, [r7, #4]
 800d418:	460b      	mov	r3, r1
 800d41a:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 800d41c:	2300      	movs	r3, #0
 800d41e:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 800d420:	2300      	movs	r3, #0
 800d422:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800d424:	78fb      	ldrb	r3, [r7, #3]
 800d426:	f003 0303 	and.w	r3, r3, #3
 800d42a:	2b00      	cmp	r3, #0
 800d42c:	d106      	bne.n	800d43c <tcp_enqueue_flags+0x2c>
 800d42e:	4b67      	ldr	r3, [pc, #412]	; (800d5cc <tcp_enqueue_flags+0x1bc>)
 800d430:	f240 4212 	movw	r2, #1042	; 0x412
 800d434:	4966      	ldr	r1, [pc, #408]	; (800d5d0 <tcp_enqueue_flags+0x1c0>)
 800d436:	4867      	ldr	r0, [pc, #412]	; (800d5d4 <tcp_enqueue_flags+0x1c4>)
 800d438:	f006 f96c 	bl	8013714 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800d43c:	687b      	ldr	r3, [r7, #4]
 800d43e:	2b00      	cmp	r3, #0
 800d440:	d106      	bne.n	800d450 <tcp_enqueue_flags+0x40>
 800d442:	4b62      	ldr	r3, [pc, #392]	; (800d5cc <tcp_enqueue_flags+0x1bc>)
 800d444:	f240 4213 	movw	r2, #1043	; 0x413
 800d448:	4963      	ldr	r1, [pc, #396]	; (800d5d8 <tcp_enqueue_flags+0x1c8>)
 800d44a:	4862      	ldr	r0, [pc, #392]	; (800d5d4 <tcp_enqueue_flags+0x1c4>)
 800d44c:	f006 f962 	bl	8013714 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 800d450:	78fb      	ldrb	r3, [r7, #3]
 800d452:	f003 0302 	and.w	r3, r3, #2
 800d456:	2b00      	cmp	r3, #0
 800d458:	d001      	beq.n	800d45e <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 800d45a:	2301      	movs	r3, #1
 800d45c:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800d45e:	7ffb      	ldrb	r3, [r7, #31]
 800d460:	009b      	lsls	r3, r3, #2
 800d462:	b2db      	uxtb	r3, r3
 800d464:	f003 0304 	and.w	r3, r3, #4
 800d468:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800d46a:	7dfb      	ldrb	r3, [r7, #23]
 800d46c:	b29b      	uxth	r3, r3
 800d46e:	f44f 7220 	mov.w	r2, #640	; 0x280
 800d472:	4619      	mov	r1, r3
 800d474:	2036      	movs	r0, #54	; 0x36
 800d476:	f7fb f95b 	bl	8008730 <pbuf_alloc>
 800d47a:	6138      	str	r0, [r7, #16]
 800d47c:	693b      	ldr	r3, [r7, #16]
 800d47e:	2b00      	cmp	r3, #0
 800d480:	d109      	bne.n	800d496 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800d482:	687b      	ldr	r3, [r7, #4]
 800d484:	8b5b      	ldrh	r3, [r3, #26]
 800d486:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d48a:	b29a      	uxth	r2, r3
 800d48c:	687b      	ldr	r3, [r7, #4]
 800d48e:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800d490:	f04f 33ff 	mov.w	r3, #4294967295
 800d494:	e095      	b.n	800d5c2 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800d496:	693b      	ldr	r3, [r7, #16]
 800d498:	895a      	ldrh	r2, [r3, #10]
 800d49a:	7dfb      	ldrb	r3, [r7, #23]
 800d49c:	b29b      	uxth	r3, r3
 800d49e:	429a      	cmp	r2, r3
 800d4a0:	d206      	bcs.n	800d4b0 <tcp_enqueue_flags+0xa0>
 800d4a2:	4b4a      	ldr	r3, [pc, #296]	; (800d5cc <tcp_enqueue_flags+0x1bc>)
 800d4a4:	f240 423a 	movw	r2, #1082	; 0x43a
 800d4a8:	494c      	ldr	r1, [pc, #304]	; (800d5dc <tcp_enqueue_flags+0x1cc>)
 800d4aa:	484a      	ldr	r0, [pc, #296]	; (800d5d4 <tcp_enqueue_flags+0x1c4>)
 800d4ac:	f006 f932 	bl	8013714 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800d4b0:	687b      	ldr	r3, [r7, #4]
 800d4b2:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 800d4b4:	78fa      	ldrb	r2, [r7, #3]
 800d4b6:	7ffb      	ldrb	r3, [r7, #31]
 800d4b8:	9300      	str	r3, [sp, #0]
 800d4ba:	460b      	mov	r3, r1
 800d4bc:	6939      	ldr	r1, [r7, #16]
 800d4be:	6878      	ldr	r0, [r7, #4]
 800d4c0:	f7ff fd70 	bl	800cfa4 <tcp_create_segment>
 800d4c4:	60f8      	str	r0, [r7, #12]
 800d4c6:	68fb      	ldr	r3, [r7, #12]
 800d4c8:	2b00      	cmp	r3, #0
 800d4ca:	d109      	bne.n	800d4e0 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800d4cc:	687b      	ldr	r3, [r7, #4]
 800d4ce:	8b5b      	ldrh	r3, [r3, #26]
 800d4d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d4d4:	b29a      	uxth	r2, r3
 800d4d6:	687b      	ldr	r3, [r7, #4]
 800d4d8:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800d4da:	f04f 33ff 	mov.w	r3, #4294967295
 800d4de:	e070      	b.n	800d5c2 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800d4e0:	68fb      	ldr	r3, [r7, #12]
 800d4e2:	68db      	ldr	r3, [r3, #12]
 800d4e4:	f003 0303 	and.w	r3, r3, #3
 800d4e8:	2b00      	cmp	r3, #0
 800d4ea:	d006      	beq.n	800d4fa <tcp_enqueue_flags+0xea>
 800d4ec:	4b37      	ldr	r3, [pc, #220]	; (800d5cc <tcp_enqueue_flags+0x1bc>)
 800d4ee:	f240 4242 	movw	r2, #1090	; 0x442
 800d4f2:	493b      	ldr	r1, [pc, #236]	; (800d5e0 <tcp_enqueue_flags+0x1d0>)
 800d4f4:	4837      	ldr	r0, [pc, #220]	; (800d5d4 <tcp_enqueue_flags+0x1c4>)
 800d4f6:	f006 f90d 	bl	8013714 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800d4fa:	68fb      	ldr	r3, [r7, #12]
 800d4fc:	891b      	ldrh	r3, [r3, #8]
 800d4fe:	2b00      	cmp	r3, #0
 800d500:	d006      	beq.n	800d510 <tcp_enqueue_flags+0x100>
 800d502:	4b32      	ldr	r3, [pc, #200]	; (800d5cc <tcp_enqueue_flags+0x1bc>)
 800d504:	f240 4243 	movw	r2, #1091	; 0x443
 800d508:	4936      	ldr	r1, [pc, #216]	; (800d5e4 <tcp_enqueue_flags+0x1d4>)
 800d50a:	4832      	ldr	r0, [pc, #200]	; (800d5d4 <tcp_enqueue_flags+0x1c4>)
 800d50c:	f006 f902 	bl	8013714 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 800d510:	687b      	ldr	r3, [r7, #4]
 800d512:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d514:	2b00      	cmp	r3, #0
 800d516:	d103      	bne.n	800d520 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 800d518:	687b      	ldr	r3, [r7, #4]
 800d51a:	68fa      	ldr	r2, [r7, #12]
 800d51c:	66da      	str	r2, [r3, #108]	; 0x6c
 800d51e:	e00d      	b.n	800d53c <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800d520:	687b      	ldr	r3, [r7, #4]
 800d522:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d524:	61bb      	str	r3, [r7, #24]
 800d526:	e002      	b.n	800d52e <tcp_enqueue_flags+0x11e>
 800d528:	69bb      	ldr	r3, [r7, #24]
 800d52a:	681b      	ldr	r3, [r3, #0]
 800d52c:	61bb      	str	r3, [r7, #24]
 800d52e:	69bb      	ldr	r3, [r7, #24]
 800d530:	681b      	ldr	r3, [r3, #0]
 800d532:	2b00      	cmp	r3, #0
 800d534:	d1f8      	bne.n	800d528 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 800d536:	69bb      	ldr	r3, [r7, #24]
 800d538:	68fa      	ldr	r2, [r7, #12]
 800d53a:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 800d53c:	687b      	ldr	r3, [r7, #4]
 800d53e:	2200      	movs	r2, #0
 800d540:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800d544:	78fb      	ldrb	r3, [r7, #3]
 800d546:	f003 0302 	and.w	r3, r3, #2
 800d54a:	2b00      	cmp	r3, #0
 800d54c:	d104      	bne.n	800d558 <tcp_enqueue_flags+0x148>
 800d54e:	78fb      	ldrb	r3, [r7, #3]
 800d550:	f003 0301 	and.w	r3, r3, #1
 800d554:	2b00      	cmp	r3, #0
 800d556:	d004      	beq.n	800d562 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 800d558:	687b      	ldr	r3, [r7, #4]
 800d55a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d55c:	1c5a      	adds	r2, r3, #1
 800d55e:	687b      	ldr	r3, [r7, #4]
 800d560:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 800d562:	78fb      	ldrb	r3, [r7, #3]
 800d564:	f003 0301 	and.w	r3, r3, #1
 800d568:	2b00      	cmp	r3, #0
 800d56a:	d006      	beq.n	800d57a <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 800d56c:	687b      	ldr	r3, [r7, #4]
 800d56e:	8b5b      	ldrh	r3, [r3, #26]
 800d570:	f043 0320 	orr.w	r3, r3, #32
 800d574:	b29a      	uxth	r2, r3
 800d576:	687b      	ldr	r3, [r7, #4]
 800d578:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800d57a:	68fb      	ldr	r3, [r7, #12]
 800d57c:	685b      	ldr	r3, [r3, #4]
 800d57e:	4618      	mov	r0, r3
 800d580:	f7fb fc44 	bl	8008e0c <pbuf_clen>
 800d584:	4603      	mov	r3, r0
 800d586:	461a      	mov	r2, r3
 800d588:	687b      	ldr	r3, [r7, #4]
 800d58a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800d58e:	4413      	add	r3, r2
 800d590:	b29a      	uxth	r2, r3
 800d592:	687b      	ldr	r3, [r7, #4]
 800d594:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800d598:	687b      	ldr	r3, [r7, #4]
 800d59a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800d59e:	2b00      	cmp	r3, #0
 800d5a0:	d00e      	beq.n	800d5c0 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800d5a2:	687b      	ldr	r3, [r7, #4]
 800d5a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d5a6:	2b00      	cmp	r3, #0
 800d5a8:	d10a      	bne.n	800d5c0 <tcp_enqueue_flags+0x1b0>
 800d5aa:	687b      	ldr	r3, [r7, #4]
 800d5ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d5ae:	2b00      	cmp	r3, #0
 800d5b0:	d106      	bne.n	800d5c0 <tcp_enqueue_flags+0x1b0>
 800d5b2:	4b06      	ldr	r3, [pc, #24]	; (800d5cc <tcp_enqueue_flags+0x1bc>)
 800d5b4:	f240 4266 	movw	r2, #1126	; 0x466
 800d5b8:	490b      	ldr	r1, [pc, #44]	; (800d5e8 <tcp_enqueue_flags+0x1d8>)
 800d5ba:	4806      	ldr	r0, [pc, #24]	; (800d5d4 <tcp_enqueue_flags+0x1c4>)
 800d5bc:	f006 f8aa 	bl	8013714 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 800d5c0:	2300      	movs	r3, #0
}
 800d5c2:	4618      	mov	r0, r3
 800d5c4:	3720      	adds	r7, #32
 800d5c6:	46bd      	mov	sp, r7
 800d5c8:	bd80      	pop	{r7, pc}
 800d5ca:	bf00      	nop
 800d5cc:	08015d94 	.word	0x08015d94
 800d5d0:	080161b8 	.word	0x080161b8
 800d5d4:	08015de8 	.word	0x08015de8
 800d5d8:	08016210 	.word	0x08016210
 800d5dc:	08016230 	.word	0x08016230
 800d5e0:	0801626c 	.word	0x0801626c
 800d5e4:	08016284 	.word	0x08016284
 800d5e8:	080162b0 	.word	0x080162b0

0800d5ec <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 800d5ec:	b5b0      	push	{r4, r5, r7, lr}
 800d5ee:	b08a      	sub	sp, #40	; 0x28
 800d5f0:	af00      	add	r7, sp, #0
 800d5f2:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800d5f4:	687b      	ldr	r3, [r7, #4]
 800d5f6:	2b00      	cmp	r3, #0
 800d5f8:	d106      	bne.n	800d608 <tcp_output+0x1c>
 800d5fa:	4ba0      	ldr	r3, [pc, #640]	; (800d87c <tcp_output+0x290>)
 800d5fc:	f240 42e1 	movw	r2, #1249	; 0x4e1
 800d600:	499f      	ldr	r1, [pc, #636]	; (800d880 <tcp_output+0x294>)
 800d602:	48a0      	ldr	r0, [pc, #640]	; (800d884 <tcp_output+0x298>)
 800d604:	f006 f886 	bl	8013714 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800d608:	687b      	ldr	r3, [r7, #4]
 800d60a:	7d1b      	ldrb	r3, [r3, #20]
 800d60c:	2b01      	cmp	r3, #1
 800d60e:	d106      	bne.n	800d61e <tcp_output+0x32>
 800d610:	4b9a      	ldr	r3, [pc, #616]	; (800d87c <tcp_output+0x290>)
 800d612:	f240 42e4 	movw	r2, #1252	; 0x4e4
 800d616:	499c      	ldr	r1, [pc, #624]	; (800d888 <tcp_output+0x29c>)
 800d618:	489a      	ldr	r0, [pc, #616]	; (800d884 <tcp_output+0x298>)
 800d61a:	f006 f87b 	bl	8013714 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800d61e:	4b9b      	ldr	r3, [pc, #620]	; (800d88c <tcp_output+0x2a0>)
 800d620:	681b      	ldr	r3, [r3, #0]
 800d622:	687a      	ldr	r2, [r7, #4]
 800d624:	429a      	cmp	r2, r3
 800d626:	d101      	bne.n	800d62c <tcp_output+0x40>
    return ERR_OK;
 800d628:	2300      	movs	r3, #0
 800d62a:	e1d2      	b.n	800d9d2 <tcp_output+0x3e6>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800d62c:	687b      	ldr	r3, [r7, #4]
 800d62e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800d632:	687b      	ldr	r3, [r7, #4]
 800d634:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800d638:	429a      	cmp	r2, r3
 800d63a:	d203      	bcs.n	800d644 <tcp_output+0x58>
 800d63c:	687b      	ldr	r3, [r7, #4]
 800d63e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800d642:	e002      	b.n	800d64a <tcp_output+0x5e>
 800d644:	687b      	ldr	r3, [r7, #4]
 800d646:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800d64a:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 800d64c:	687b      	ldr	r3, [r7, #4]
 800d64e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d650:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 800d652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d654:	2b00      	cmp	r3, #0
 800d656:	d10b      	bne.n	800d670 <tcp_output+0x84>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 800d658:	687b      	ldr	r3, [r7, #4]
 800d65a:	8b5b      	ldrh	r3, [r3, #26]
 800d65c:	f003 0302 	and.w	r3, r3, #2
 800d660:	2b00      	cmp	r3, #0
 800d662:	f000 81a9 	beq.w	800d9b8 <tcp_output+0x3cc>
      return tcp_send_empty_ack(pcb);
 800d666:	6878      	ldr	r0, [r7, #4]
 800d668:	f000 fdd6 	bl	800e218 <tcp_send_empty_ack>
 800d66c:	4603      	mov	r3, r0
 800d66e:	e1b0      	b.n	800d9d2 <tcp_output+0x3e6>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800d670:	6879      	ldr	r1, [r7, #4]
 800d672:	687b      	ldr	r3, [r7, #4]
 800d674:	3304      	adds	r3, #4
 800d676:	461a      	mov	r2, r3
 800d678:	6878      	ldr	r0, [r7, #4]
 800d67a:	f7ff fc77 	bl	800cf6c <tcp_route>
 800d67e:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 800d680:	697b      	ldr	r3, [r7, #20]
 800d682:	2b00      	cmp	r3, #0
 800d684:	d102      	bne.n	800d68c <tcp_output+0xa0>
    return ERR_RTE;
 800d686:	f06f 0303 	mvn.w	r3, #3
 800d68a:	e1a2      	b.n	800d9d2 <tcp_output+0x3e6>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 800d68c:	687b      	ldr	r3, [r7, #4]
 800d68e:	2b00      	cmp	r3, #0
 800d690:	d003      	beq.n	800d69a <tcp_output+0xae>
 800d692:	687b      	ldr	r3, [r7, #4]
 800d694:	681b      	ldr	r3, [r3, #0]
 800d696:	2b00      	cmp	r3, #0
 800d698:	d111      	bne.n	800d6be <tcp_output+0xd2>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800d69a:	697b      	ldr	r3, [r7, #20]
 800d69c:	2b00      	cmp	r3, #0
 800d69e:	d002      	beq.n	800d6a6 <tcp_output+0xba>
 800d6a0:	697b      	ldr	r3, [r7, #20]
 800d6a2:	3304      	adds	r3, #4
 800d6a4:	e000      	b.n	800d6a8 <tcp_output+0xbc>
 800d6a6:	2300      	movs	r3, #0
 800d6a8:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 800d6aa:	693b      	ldr	r3, [r7, #16]
 800d6ac:	2b00      	cmp	r3, #0
 800d6ae:	d102      	bne.n	800d6b6 <tcp_output+0xca>
      return ERR_RTE;
 800d6b0:	f06f 0303 	mvn.w	r3, #3
 800d6b4:	e18d      	b.n	800d9d2 <tcp_output+0x3e6>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800d6b6:	693b      	ldr	r3, [r7, #16]
 800d6b8:	681a      	ldr	r2, [r3, #0]
 800d6ba:	687b      	ldr	r3, [r7, #4]
 800d6bc:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800d6be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6c0:	68db      	ldr	r3, [r3, #12]
 800d6c2:	685b      	ldr	r3, [r3, #4]
 800d6c4:	4618      	mov	r0, r3
 800d6c6:	f7f9 ff74 	bl	80075b2 <lwip_htonl>
 800d6ca:	4602      	mov	r2, r0
 800d6cc:	687b      	ldr	r3, [r7, #4]
 800d6ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d6d0:	1ad3      	subs	r3, r2, r3
 800d6d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d6d4:	8912      	ldrh	r2, [r2, #8]
 800d6d6:	4413      	add	r3, r2
 800d6d8:	69ba      	ldr	r2, [r7, #24]
 800d6da:	429a      	cmp	r2, r3
 800d6dc:	d227      	bcs.n	800d72e <tcp_output+0x142>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800d6de:	687b      	ldr	r3, [r7, #4]
 800d6e0:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800d6e4:	461a      	mov	r2, r3
 800d6e6:	69bb      	ldr	r3, [r7, #24]
 800d6e8:	4293      	cmp	r3, r2
 800d6ea:	d114      	bne.n	800d716 <tcp_output+0x12a>
 800d6ec:	687b      	ldr	r3, [r7, #4]
 800d6ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d6f0:	2b00      	cmp	r3, #0
 800d6f2:	d110      	bne.n	800d716 <tcp_output+0x12a>
 800d6f4:	687b      	ldr	r3, [r7, #4]
 800d6f6:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800d6fa:	2b00      	cmp	r3, #0
 800d6fc:	d10b      	bne.n	800d716 <tcp_output+0x12a>
      pcb->persist_cnt = 0;
 800d6fe:	687b      	ldr	r3, [r7, #4]
 800d700:	2200      	movs	r2, #0
 800d702:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 800d706:	687b      	ldr	r3, [r7, #4]
 800d708:	2201      	movs	r2, #1
 800d70a:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 800d70e:	687b      	ldr	r3, [r7, #4]
 800d710:	2200      	movs	r2, #0
 800d712:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 800d716:	687b      	ldr	r3, [r7, #4]
 800d718:	8b5b      	ldrh	r3, [r3, #26]
 800d71a:	f003 0302 	and.w	r3, r3, #2
 800d71e:	2b00      	cmp	r3, #0
 800d720:	f000 814c 	beq.w	800d9bc <tcp_output+0x3d0>
      return tcp_send_empty_ack(pcb);
 800d724:	6878      	ldr	r0, [r7, #4]
 800d726:	f000 fd77 	bl	800e218 <tcp_send_empty_ack>
 800d72a:	4603      	mov	r3, r0
 800d72c:	e151      	b.n	800d9d2 <tcp_output+0x3e6>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 800d72e:	687b      	ldr	r3, [r7, #4]
 800d730:	2200      	movs	r2, #0
 800d732:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 800d736:	687b      	ldr	r3, [r7, #4]
 800d738:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d73a:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 800d73c:	6a3b      	ldr	r3, [r7, #32]
 800d73e:	2b00      	cmp	r3, #0
 800d740:	f000 811b 	beq.w	800d97a <tcp_output+0x38e>
    for (; useg->next != NULL; useg = useg->next);
 800d744:	e002      	b.n	800d74c <tcp_output+0x160>
 800d746:	6a3b      	ldr	r3, [r7, #32]
 800d748:	681b      	ldr	r3, [r3, #0]
 800d74a:	623b      	str	r3, [r7, #32]
 800d74c:	6a3b      	ldr	r3, [r7, #32]
 800d74e:	681b      	ldr	r3, [r3, #0]
 800d750:	2b00      	cmp	r3, #0
 800d752:	d1f8      	bne.n	800d746 <tcp_output+0x15a>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 800d754:	e111      	b.n	800d97a <tcp_output+0x38e>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 800d756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d758:	68db      	ldr	r3, [r3, #12]
 800d75a:	899b      	ldrh	r3, [r3, #12]
 800d75c:	b29b      	uxth	r3, r3
 800d75e:	4618      	mov	r0, r3
 800d760:	f7f9 ff12 	bl	8007588 <lwip_htons>
 800d764:	4603      	mov	r3, r0
 800d766:	b2db      	uxtb	r3, r3
 800d768:	f003 0304 	and.w	r3, r3, #4
 800d76c:	2b00      	cmp	r3, #0
 800d76e:	d006      	beq.n	800d77e <tcp_output+0x192>
 800d770:	4b42      	ldr	r3, [pc, #264]	; (800d87c <tcp_output+0x290>)
 800d772:	f240 5237 	movw	r2, #1335	; 0x537
 800d776:	4946      	ldr	r1, [pc, #280]	; (800d890 <tcp_output+0x2a4>)
 800d778:	4842      	ldr	r0, [pc, #264]	; (800d884 <tcp_output+0x298>)
 800d77a:	f005 ffcb 	bl	8013714 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800d77e:	687b      	ldr	r3, [r7, #4]
 800d780:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d782:	2b00      	cmp	r3, #0
 800d784:	d01f      	beq.n	800d7c6 <tcp_output+0x1da>
 800d786:	687b      	ldr	r3, [r7, #4]
 800d788:	8b5b      	ldrh	r3, [r3, #26]
 800d78a:	f003 0344 	and.w	r3, r3, #68	; 0x44
 800d78e:	2b00      	cmp	r3, #0
 800d790:	d119      	bne.n	800d7c6 <tcp_output+0x1da>
 800d792:	687b      	ldr	r3, [r7, #4]
 800d794:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d796:	2b00      	cmp	r3, #0
 800d798:	d00b      	beq.n	800d7b2 <tcp_output+0x1c6>
 800d79a:	687b      	ldr	r3, [r7, #4]
 800d79c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d79e:	681b      	ldr	r3, [r3, #0]
 800d7a0:	2b00      	cmp	r3, #0
 800d7a2:	d110      	bne.n	800d7c6 <tcp_output+0x1da>
 800d7a4:	687b      	ldr	r3, [r7, #4]
 800d7a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d7a8:	891a      	ldrh	r2, [r3, #8]
 800d7aa:	687b      	ldr	r3, [r7, #4]
 800d7ac:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d7ae:	429a      	cmp	r2, r3
 800d7b0:	d209      	bcs.n	800d7c6 <tcp_output+0x1da>
 800d7b2:	687b      	ldr	r3, [r7, #4]
 800d7b4:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800d7b8:	2b00      	cmp	r3, #0
 800d7ba:	d004      	beq.n	800d7c6 <tcp_output+0x1da>
 800d7bc:	687b      	ldr	r3, [r7, #4]
 800d7be:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800d7c2:	2b08      	cmp	r3, #8
 800d7c4:	d901      	bls.n	800d7ca <tcp_output+0x1de>
 800d7c6:	2301      	movs	r3, #1
 800d7c8:	e000      	b.n	800d7cc <tcp_output+0x1e0>
 800d7ca:	2300      	movs	r3, #0
 800d7cc:	2b00      	cmp	r3, #0
 800d7ce:	d106      	bne.n	800d7de <tcp_output+0x1f2>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 800d7d0:	687b      	ldr	r3, [r7, #4]
 800d7d2:	8b5b      	ldrh	r3, [r3, #26]
 800d7d4:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800d7d8:	2b00      	cmp	r3, #0
 800d7da:	f000 80e3 	beq.w	800d9a4 <tcp_output+0x3b8>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 800d7de:	687b      	ldr	r3, [r7, #4]
 800d7e0:	7d1b      	ldrb	r3, [r3, #20]
 800d7e2:	2b02      	cmp	r3, #2
 800d7e4:	d00d      	beq.n	800d802 <tcp_output+0x216>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800d7e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7e8:	68db      	ldr	r3, [r3, #12]
 800d7ea:	899b      	ldrh	r3, [r3, #12]
 800d7ec:	b29c      	uxth	r4, r3
 800d7ee:	2010      	movs	r0, #16
 800d7f0:	f7f9 feca 	bl	8007588 <lwip_htons>
 800d7f4:	4603      	mov	r3, r0
 800d7f6:	461a      	mov	r2, r3
 800d7f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7fa:	68db      	ldr	r3, [r3, #12]
 800d7fc:	4322      	orrs	r2, r4
 800d7fe:	b292      	uxth	r2, r2
 800d800:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 800d802:	697a      	ldr	r2, [r7, #20]
 800d804:	6879      	ldr	r1, [r7, #4]
 800d806:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d808:	f000 f908 	bl	800da1c <tcp_output_segment>
 800d80c:	4603      	mov	r3, r0
 800d80e:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800d810:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d814:	2b00      	cmp	r3, #0
 800d816:	d009      	beq.n	800d82c <tcp_output+0x240>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800d818:	687b      	ldr	r3, [r7, #4]
 800d81a:	8b5b      	ldrh	r3, [r3, #26]
 800d81c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d820:	b29a      	uxth	r2, r3
 800d822:	687b      	ldr	r3, [r7, #4]
 800d824:	835a      	strh	r2, [r3, #26]
      return err;
 800d826:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d82a:	e0d2      	b.n	800d9d2 <tcp_output+0x3e6>
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 800d82c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d82e:	681a      	ldr	r2, [r3, #0]
 800d830:	687b      	ldr	r3, [r7, #4]
 800d832:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 800d834:	687b      	ldr	r3, [r7, #4]
 800d836:	7d1b      	ldrb	r3, [r3, #20]
 800d838:	2b02      	cmp	r3, #2
 800d83a:	d006      	beq.n	800d84a <tcp_output+0x25e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800d83c:	687b      	ldr	r3, [r7, #4]
 800d83e:	8b5b      	ldrh	r3, [r3, #26]
 800d840:	f023 0303 	bic.w	r3, r3, #3
 800d844:	b29a      	uxth	r2, r3
 800d846:	687b      	ldr	r3, [r7, #4]
 800d848:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800d84a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d84c:	68db      	ldr	r3, [r3, #12]
 800d84e:	685b      	ldr	r3, [r3, #4]
 800d850:	4618      	mov	r0, r3
 800d852:	f7f9 feae 	bl	80075b2 <lwip_htonl>
 800d856:	4604      	mov	r4, r0
 800d858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d85a:	891b      	ldrh	r3, [r3, #8]
 800d85c:	461d      	mov	r5, r3
 800d85e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d860:	68db      	ldr	r3, [r3, #12]
 800d862:	899b      	ldrh	r3, [r3, #12]
 800d864:	b29b      	uxth	r3, r3
 800d866:	4618      	mov	r0, r3
 800d868:	f7f9 fe8e 	bl	8007588 <lwip_htons>
 800d86c:	4603      	mov	r3, r0
 800d86e:	b2db      	uxtb	r3, r3
 800d870:	f003 0303 	and.w	r3, r3, #3
 800d874:	2b00      	cmp	r3, #0
 800d876:	d00d      	beq.n	800d894 <tcp_output+0x2a8>
 800d878:	2301      	movs	r3, #1
 800d87a:	e00c      	b.n	800d896 <tcp_output+0x2aa>
 800d87c:	08015d94 	.word	0x08015d94
 800d880:	080162d8 	.word	0x080162d8
 800d884:	08015de8 	.word	0x08015de8
 800d888:	080162f0 	.word	0x080162f0
 800d88c:	2000eef8 	.word	0x2000eef8
 800d890:	08016318 	.word	0x08016318
 800d894:	2300      	movs	r3, #0
 800d896:	442b      	add	r3, r5
 800d898:	4423      	add	r3, r4
 800d89a:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800d89c:	687b      	ldr	r3, [r7, #4]
 800d89e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d8a0:	68bb      	ldr	r3, [r7, #8]
 800d8a2:	1ad3      	subs	r3, r2, r3
 800d8a4:	2b00      	cmp	r3, #0
 800d8a6:	da02      	bge.n	800d8ae <tcp_output+0x2c2>
      pcb->snd_nxt = snd_nxt;
 800d8a8:	687b      	ldr	r3, [r7, #4]
 800d8aa:	68ba      	ldr	r2, [r7, #8]
 800d8ac:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 800d8ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8b0:	891b      	ldrh	r3, [r3, #8]
 800d8b2:	461c      	mov	r4, r3
 800d8b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8b6:	68db      	ldr	r3, [r3, #12]
 800d8b8:	899b      	ldrh	r3, [r3, #12]
 800d8ba:	b29b      	uxth	r3, r3
 800d8bc:	4618      	mov	r0, r3
 800d8be:	f7f9 fe63 	bl	8007588 <lwip_htons>
 800d8c2:	4603      	mov	r3, r0
 800d8c4:	b2db      	uxtb	r3, r3
 800d8c6:	f003 0303 	and.w	r3, r3, #3
 800d8ca:	2b00      	cmp	r3, #0
 800d8cc:	d001      	beq.n	800d8d2 <tcp_output+0x2e6>
 800d8ce:	2301      	movs	r3, #1
 800d8d0:	e000      	b.n	800d8d4 <tcp_output+0x2e8>
 800d8d2:	2300      	movs	r3, #0
 800d8d4:	4423      	add	r3, r4
 800d8d6:	2b00      	cmp	r3, #0
 800d8d8:	d049      	beq.n	800d96e <tcp_output+0x382>
      seg->next = NULL;
 800d8da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8dc:	2200      	movs	r2, #0
 800d8de:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 800d8e0:	687b      	ldr	r3, [r7, #4]
 800d8e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d8e4:	2b00      	cmp	r3, #0
 800d8e6:	d105      	bne.n	800d8f4 <tcp_output+0x308>
        pcb->unacked = seg;
 800d8e8:	687b      	ldr	r3, [r7, #4]
 800d8ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d8ec:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 800d8ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8f0:	623b      	str	r3, [r7, #32]
 800d8f2:	e03f      	b.n	800d974 <tcp_output+0x388>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800d8f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8f6:	68db      	ldr	r3, [r3, #12]
 800d8f8:	685b      	ldr	r3, [r3, #4]
 800d8fa:	4618      	mov	r0, r3
 800d8fc:	f7f9 fe59 	bl	80075b2 <lwip_htonl>
 800d900:	4604      	mov	r4, r0
 800d902:	6a3b      	ldr	r3, [r7, #32]
 800d904:	68db      	ldr	r3, [r3, #12]
 800d906:	685b      	ldr	r3, [r3, #4]
 800d908:	4618      	mov	r0, r3
 800d90a:	f7f9 fe52 	bl	80075b2 <lwip_htonl>
 800d90e:	4603      	mov	r3, r0
 800d910:	1ae3      	subs	r3, r4, r3
 800d912:	2b00      	cmp	r3, #0
 800d914:	da24      	bge.n	800d960 <tcp_output+0x374>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800d916:	687b      	ldr	r3, [r7, #4]
 800d918:	3370      	adds	r3, #112	; 0x70
 800d91a:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800d91c:	e002      	b.n	800d924 <tcp_output+0x338>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 800d91e:	69fb      	ldr	r3, [r7, #28]
 800d920:	681b      	ldr	r3, [r3, #0]
 800d922:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800d924:	69fb      	ldr	r3, [r7, #28]
 800d926:	681b      	ldr	r3, [r3, #0]
 800d928:	2b00      	cmp	r3, #0
 800d92a:	d011      	beq.n	800d950 <tcp_output+0x364>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800d92c:	69fb      	ldr	r3, [r7, #28]
 800d92e:	681b      	ldr	r3, [r3, #0]
 800d930:	68db      	ldr	r3, [r3, #12]
 800d932:	685b      	ldr	r3, [r3, #4]
 800d934:	4618      	mov	r0, r3
 800d936:	f7f9 fe3c 	bl	80075b2 <lwip_htonl>
 800d93a:	4604      	mov	r4, r0
 800d93c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d93e:	68db      	ldr	r3, [r3, #12]
 800d940:	685b      	ldr	r3, [r3, #4]
 800d942:	4618      	mov	r0, r3
 800d944:	f7f9 fe35 	bl	80075b2 <lwip_htonl>
 800d948:	4603      	mov	r3, r0
 800d94a:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 800d94c:	2b00      	cmp	r3, #0
 800d94e:	dbe6      	blt.n	800d91e <tcp_output+0x332>
          }
          seg->next = (*cur_seg);
 800d950:	69fb      	ldr	r3, [r7, #28]
 800d952:	681a      	ldr	r2, [r3, #0]
 800d954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d956:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 800d958:	69fb      	ldr	r3, [r7, #28]
 800d95a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d95c:	601a      	str	r2, [r3, #0]
 800d95e:	e009      	b.n	800d974 <tcp_output+0x388>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 800d960:	6a3b      	ldr	r3, [r7, #32]
 800d962:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d964:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 800d966:	6a3b      	ldr	r3, [r7, #32]
 800d968:	681b      	ldr	r3, [r3, #0]
 800d96a:	623b      	str	r3, [r7, #32]
 800d96c:	e002      	b.n	800d974 <tcp_output+0x388>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 800d96e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d970:	f7fc fc42 	bl	800a1f8 <tcp_seg_free>
    }
    seg = pcb->unsent;
 800d974:	687b      	ldr	r3, [r7, #4]
 800d976:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d978:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 800d97a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d97c:	2b00      	cmp	r3, #0
 800d97e:	d012      	beq.n	800d9a6 <tcp_output+0x3ba>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800d980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d982:	68db      	ldr	r3, [r3, #12]
 800d984:	685b      	ldr	r3, [r3, #4]
 800d986:	4618      	mov	r0, r3
 800d988:	f7f9 fe13 	bl	80075b2 <lwip_htonl>
 800d98c:	4602      	mov	r2, r0
 800d98e:	687b      	ldr	r3, [r7, #4]
 800d990:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d992:	1ad3      	subs	r3, r2, r3
 800d994:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d996:	8912      	ldrh	r2, [r2, #8]
 800d998:	4413      	add	r3, r2
  while (seg != NULL &&
 800d99a:	69ba      	ldr	r2, [r7, #24]
 800d99c:	429a      	cmp	r2, r3
 800d99e:	f4bf aeda 	bcs.w	800d756 <tcp_output+0x16a>
 800d9a2:	e000      	b.n	800d9a6 <tcp_output+0x3ba>
      break;
 800d9a4:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 800d9a6:	687b      	ldr	r3, [r7, #4]
 800d9a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d9aa:	2b00      	cmp	r3, #0
 800d9ac:	d108      	bne.n	800d9c0 <tcp_output+0x3d4>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800d9ae:	687b      	ldr	r3, [r7, #4]
 800d9b0:	2200      	movs	r2, #0
 800d9b2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 800d9b6:	e004      	b.n	800d9c2 <tcp_output+0x3d6>
    goto output_done;
 800d9b8:	bf00      	nop
 800d9ba:	e002      	b.n	800d9c2 <tcp_output+0x3d6>
    goto output_done;
 800d9bc:	bf00      	nop
 800d9be:	e000      	b.n	800d9c2 <tcp_output+0x3d6>
  }
#endif /* TCP_OVERSIZE */

output_done:
 800d9c0:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800d9c2:	687b      	ldr	r3, [r7, #4]
 800d9c4:	8b5b      	ldrh	r3, [r3, #26]
 800d9c6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d9ca:	b29a      	uxth	r2, r3
 800d9cc:	687b      	ldr	r3, [r7, #4]
 800d9ce:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 800d9d0:	2300      	movs	r3, #0
}
 800d9d2:	4618      	mov	r0, r3
 800d9d4:	3728      	adds	r7, #40	; 0x28
 800d9d6:	46bd      	mov	sp, r7
 800d9d8:	bdb0      	pop	{r4, r5, r7, pc}
 800d9da:	bf00      	nop

0800d9dc <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 800d9dc:	b580      	push	{r7, lr}
 800d9de:	b082      	sub	sp, #8
 800d9e0:	af00      	add	r7, sp, #0
 800d9e2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 800d9e4:	687b      	ldr	r3, [r7, #4]
 800d9e6:	2b00      	cmp	r3, #0
 800d9e8:	d106      	bne.n	800d9f8 <tcp_output_segment_busy+0x1c>
 800d9ea:	4b09      	ldr	r3, [pc, #36]	; (800da10 <tcp_output_segment_busy+0x34>)
 800d9ec:	f240 529a 	movw	r2, #1434	; 0x59a
 800d9f0:	4908      	ldr	r1, [pc, #32]	; (800da14 <tcp_output_segment_busy+0x38>)
 800d9f2:	4809      	ldr	r0, [pc, #36]	; (800da18 <tcp_output_segment_busy+0x3c>)
 800d9f4:	f005 fe8e 	bl	8013714 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 800d9f8:	687b      	ldr	r3, [r7, #4]
 800d9fa:	685b      	ldr	r3, [r3, #4]
 800d9fc:	7b9b      	ldrb	r3, [r3, #14]
 800d9fe:	2b01      	cmp	r3, #1
 800da00:	d001      	beq.n	800da06 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 800da02:	2301      	movs	r3, #1
 800da04:	e000      	b.n	800da08 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 800da06:	2300      	movs	r3, #0
}
 800da08:	4618      	mov	r0, r3
 800da0a:	3708      	adds	r7, #8
 800da0c:	46bd      	mov	sp, r7
 800da0e:	bd80      	pop	{r7, pc}
 800da10:	08015d94 	.word	0x08015d94
 800da14:	08016330 	.word	0x08016330
 800da18:	08015de8 	.word	0x08015de8

0800da1c <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 800da1c:	b5b0      	push	{r4, r5, r7, lr}
 800da1e:	b08c      	sub	sp, #48	; 0x30
 800da20:	af04      	add	r7, sp, #16
 800da22:	60f8      	str	r0, [r7, #12]
 800da24:	60b9      	str	r1, [r7, #8]
 800da26:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 800da28:	68fb      	ldr	r3, [r7, #12]
 800da2a:	2b00      	cmp	r3, #0
 800da2c:	d106      	bne.n	800da3c <tcp_output_segment+0x20>
 800da2e:	4b64      	ldr	r3, [pc, #400]	; (800dbc0 <tcp_output_segment+0x1a4>)
 800da30:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 800da34:	4963      	ldr	r1, [pc, #396]	; (800dbc4 <tcp_output_segment+0x1a8>)
 800da36:	4864      	ldr	r0, [pc, #400]	; (800dbc8 <tcp_output_segment+0x1ac>)
 800da38:	f005 fe6c 	bl	8013714 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 800da3c:	68bb      	ldr	r3, [r7, #8]
 800da3e:	2b00      	cmp	r3, #0
 800da40:	d106      	bne.n	800da50 <tcp_output_segment+0x34>
 800da42:	4b5f      	ldr	r3, [pc, #380]	; (800dbc0 <tcp_output_segment+0x1a4>)
 800da44:	f240 52b9 	movw	r2, #1465	; 0x5b9
 800da48:	4960      	ldr	r1, [pc, #384]	; (800dbcc <tcp_output_segment+0x1b0>)
 800da4a:	485f      	ldr	r0, [pc, #380]	; (800dbc8 <tcp_output_segment+0x1ac>)
 800da4c:	f005 fe62 	bl	8013714 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 800da50:	687b      	ldr	r3, [r7, #4]
 800da52:	2b00      	cmp	r3, #0
 800da54:	d106      	bne.n	800da64 <tcp_output_segment+0x48>
 800da56:	4b5a      	ldr	r3, [pc, #360]	; (800dbc0 <tcp_output_segment+0x1a4>)
 800da58:	f240 52ba 	movw	r2, #1466	; 0x5ba
 800da5c:	495c      	ldr	r1, [pc, #368]	; (800dbd0 <tcp_output_segment+0x1b4>)
 800da5e:	485a      	ldr	r0, [pc, #360]	; (800dbc8 <tcp_output_segment+0x1ac>)
 800da60:	f005 fe58 	bl	8013714 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 800da64:	68f8      	ldr	r0, [r7, #12]
 800da66:	f7ff ffb9 	bl	800d9dc <tcp_output_segment_busy>
 800da6a:	4603      	mov	r3, r0
 800da6c:	2b00      	cmp	r3, #0
 800da6e:	d001      	beq.n	800da74 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 800da70:	2300      	movs	r3, #0
 800da72:	e0a0      	b.n	800dbb6 <tcp_output_segment+0x19a>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800da74:	68bb      	ldr	r3, [r7, #8]
 800da76:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800da78:	68fb      	ldr	r3, [r7, #12]
 800da7a:	68dc      	ldr	r4, [r3, #12]
 800da7c:	4610      	mov	r0, r2
 800da7e:	f7f9 fd98 	bl	80075b2 <lwip_htonl>
 800da82:	4603      	mov	r3, r0
 800da84:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800da86:	68bb      	ldr	r3, [r7, #8]
 800da88:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800da8a:	68fb      	ldr	r3, [r7, #12]
 800da8c:	68dc      	ldr	r4, [r3, #12]
 800da8e:	4610      	mov	r0, r2
 800da90:	f7f9 fd7a 	bl	8007588 <lwip_htons>
 800da94:	4603      	mov	r3, r0
 800da96:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800da98:	68bb      	ldr	r3, [r7, #8]
 800da9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da9c:	68ba      	ldr	r2, [r7, #8]
 800da9e:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800daa0:	441a      	add	r2, r3
 800daa2:	68bb      	ldr	r3, [r7, #8]
 800daa4:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800daa6:	68fb      	ldr	r3, [r7, #12]
 800daa8:	68db      	ldr	r3, [r3, #12]
 800daaa:	3314      	adds	r3, #20
 800daac:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800daae:	68fb      	ldr	r3, [r7, #12]
 800dab0:	7a9b      	ldrb	r3, [r3, #10]
 800dab2:	f003 0301 	and.w	r3, r3, #1
 800dab6:	2b00      	cmp	r3, #0
 800dab8:	d015      	beq.n	800dae6 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800daba:	68bb      	ldr	r3, [r7, #8]
 800dabc:	3304      	adds	r3, #4
 800dabe:	461a      	mov	r2, r3
 800dac0:	6879      	ldr	r1, [r7, #4]
 800dac2:	f44f 7006 	mov.w	r0, #536	; 0x218
 800dac6:	f7fc fe8d 	bl	800a7e4 <tcp_eff_send_mss_netif>
 800daca:	4603      	mov	r3, r0
 800dacc:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800dace:	8b7b      	ldrh	r3, [r7, #26]
 800dad0:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 800dad4:	4618      	mov	r0, r3
 800dad6:	f7f9 fd6c 	bl	80075b2 <lwip_htonl>
 800dada:	4602      	mov	r2, r0
 800dadc:	69fb      	ldr	r3, [r7, #28]
 800dade:	601a      	str	r2, [r3, #0]
    opts += 1;
 800dae0:	69fb      	ldr	r3, [r7, #28]
 800dae2:	3304      	adds	r3, #4
 800dae4:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800dae6:	68bb      	ldr	r3, [r7, #8]
 800dae8:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800daec:	2b00      	cmp	r3, #0
 800daee:	da02      	bge.n	800daf6 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 800daf0:	68bb      	ldr	r3, [r7, #8]
 800daf2:	2200      	movs	r2, #0
 800daf4:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 800daf6:	68bb      	ldr	r3, [r7, #8]
 800daf8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dafa:	2b00      	cmp	r3, #0
 800dafc:	d10c      	bne.n	800db18 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 800dafe:	4b35      	ldr	r3, [pc, #212]	; (800dbd4 <tcp_output_segment+0x1b8>)
 800db00:	681a      	ldr	r2, [r3, #0]
 800db02:	68bb      	ldr	r3, [r7, #8]
 800db04:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800db06:	68fb      	ldr	r3, [r7, #12]
 800db08:	68db      	ldr	r3, [r3, #12]
 800db0a:	685b      	ldr	r3, [r3, #4]
 800db0c:	4618      	mov	r0, r3
 800db0e:	f7f9 fd50 	bl	80075b2 <lwip_htonl>
 800db12:	4602      	mov	r2, r0
 800db14:	68bb      	ldr	r3, [r7, #8]
 800db16:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800db18:	68fb      	ldr	r3, [r7, #12]
 800db1a:	68db      	ldr	r3, [r3, #12]
 800db1c:	461a      	mov	r2, r3
 800db1e:	68fb      	ldr	r3, [r7, #12]
 800db20:	685b      	ldr	r3, [r3, #4]
 800db22:	685b      	ldr	r3, [r3, #4]
 800db24:	1ad3      	subs	r3, r2, r3
 800db26:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800db28:	68fb      	ldr	r3, [r7, #12]
 800db2a:	685b      	ldr	r3, [r3, #4]
 800db2c:	8959      	ldrh	r1, [r3, #10]
 800db2e:	68fb      	ldr	r3, [r7, #12]
 800db30:	685b      	ldr	r3, [r3, #4]
 800db32:	8b3a      	ldrh	r2, [r7, #24]
 800db34:	1a8a      	subs	r2, r1, r2
 800db36:	b292      	uxth	r2, r2
 800db38:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 800db3a:	68fb      	ldr	r3, [r7, #12]
 800db3c:	685b      	ldr	r3, [r3, #4]
 800db3e:	8919      	ldrh	r1, [r3, #8]
 800db40:	68fb      	ldr	r3, [r7, #12]
 800db42:	685b      	ldr	r3, [r3, #4]
 800db44:	8b3a      	ldrh	r2, [r7, #24]
 800db46:	1a8a      	subs	r2, r1, r2
 800db48:	b292      	uxth	r2, r2
 800db4a:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 800db4c:	68fb      	ldr	r3, [r7, #12]
 800db4e:	685b      	ldr	r3, [r3, #4]
 800db50:	68fa      	ldr	r2, [r7, #12]
 800db52:	68d2      	ldr	r2, [r2, #12]
 800db54:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 800db56:	68fb      	ldr	r3, [r7, #12]
 800db58:	68db      	ldr	r3, [r3, #12]
 800db5a:	2200      	movs	r2, #0
 800db5c:	741a      	strb	r2, [r3, #16]
 800db5e:	2200      	movs	r2, #0
 800db60:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 800db62:	68fb      	ldr	r3, [r7, #12]
 800db64:	68db      	ldr	r3, [r3, #12]
 800db66:	f103 0214 	add.w	r2, r3, #20
 800db6a:	68fb      	ldr	r3, [r7, #12]
 800db6c:	7a9b      	ldrb	r3, [r3, #10]
 800db6e:	009b      	lsls	r3, r3, #2
 800db70:	f003 0304 	and.w	r3, r3, #4
 800db74:	4413      	add	r3, r2
 800db76:	69fa      	ldr	r2, [r7, #28]
 800db78:	429a      	cmp	r2, r3
 800db7a:	d006      	beq.n	800db8a <tcp_output_segment+0x16e>
 800db7c:	4b10      	ldr	r3, [pc, #64]	; (800dbc0 <tcp_output_segment+0x1a4>)
 800db7e:	f240 621c 	movw	r2, #1564	; 0x61c
 800db82:	4915      	ldr	r1, [pc, #84]	; (800dbd8 <tcp_output_segment+0x1bc>)
 800db84:	4810      	ldr	r0, [pc, #64]	; (800dbc8 <tcp_output_segment+0x1ac>)
 800db86:	f005 fdc5 	bl	8013714 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800db8a:	68fb      	ldr	r3, [r7, #12]
 800db8c:	6858      	ldr	r0, [r3, #4]
 800db8e:	68b9      	ldr	r1, [r7, #8]
 800db90:	68bb      	ldr	r3, [r7, #8]
 800db92:	1d1c      	adds	r4, r3, #4
 800db94:	68bb      	ldr	r3, [r7, #8]
 800db96:	7add      	ldrb	r5, [r3, #11]
 800db98:	68bb      	ldr	r3, [r7, #8]
 800db9a:	7a9b      	ldrb	r3, [r3, #10]
 800db9c:	687a      	ldr	r2, [r7, #4]
 800db9e:	9202      	str	r2, [sp, #8]
 800dba0:	2206      	movs	r2, #6
 800dba2:	9201      	str	r2, [sp, #4]
 800dba4:	9300      	str	r3, [sp, #0]
 800dba6:	462b      	mov	r3, r5
 800dba8:	4622      	mov	r2, r4
 800dbaa:	f004 fc33 	bl	8012414 <ip4_output_if>
 800dbae:	4603      	mov	r3, r0
 800dbb0:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 800dbb2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800dbb6:	4618      	mov	r0, r3
 800dbb8:	3720      	adds	r7, #32
 800dbba:	46bd      	mov	sp, r7
 800dbbc:	bdb0      	pop	{r4, r5, r7, pc}
 800dbbe:	bf00      	nop
 800dbc0:	08015d94 	.word	0x08015d94
 800dbc4:	08016358 	.word	0x08016358
 800dbc8:	08015de8 	.word	0x08015de8
 800dbcc:	08016378 	.word	0x08016378
 800dbd0:	08016398 	.word	0x08016398
 800dbd4:	2000eee8 	.word	0x2000eee8
 800dbd8:	080163bc 	.word	0x080163bc

0800dbdc <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 800dbdc:	b5b0      	push	{r4, r5, r7, lr}
 800dbde:	b084      	sub	sp, #16
 800dbe0:	af00      	add	r7, sp, #0
 800dbe2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800dbe4:	687b      	ldr	r3, [r7, #4]
 800dbe6:	2b00      	cmp	r3, #0
 800dbe8:	d106      	bne.n	800dbf8 <tcp_rexmit_rto_prepare+0x1c>
 800dbea:	4b31      	ldr	r3, [pc, #196]	; (800dcb0 <tcp_rexmit_rto_prepare+0xd4>)
 800dbec:	f240 6263 	movw	r2, #1635	; 0x663
 800dbf0:	4930      	ldr	r1, [pc, #192]	; (800dcb4 <tcp_rexmit_rto_prepare+0xd8>)
 800dbf2:	4831      	ldr	r0, [pc, #196]	; (800dcb8 <tcp_rexmit_rto_prepare+0xdc>)
 800dbf4:	f005 fd8e 	bl	8013714 <iprintf>

  if (pcb->unacked == NULL) {
 800dbf8:	687b      	ldr	r3, [r7, #4]
 800dbfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dbfc:	2b00      	cmp	r3, #0
 800dbfe:	d102      	bne.n	800dc06 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 800dc00:	f06f 0305 	mvn.w	r3, #5
 800dc04:	e050      	b.n	800dca8 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800dc06:	687b      	ldr	r3, [r7, #4]
 800dc08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dc0a:	60fb      	str	r3, [r7, #12]
 800dc0c:	e00b      	b.n	800dc26 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 800dc0e:	68f8      	ldr	r0, [r7, #12]
 800dc10:	f7ff fee4 	bl	800d9dc <tcp_output_segment_busy>
 800dc14:	4603      	mov	r3, r0
 800dc16:	2b00      	cmp	r3, #0
 800dc18:	d002      	beq.n	800dc20 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 800dc1a:	f06f 0305 	mvn.w	r3, #5
 800dc1e:	e043      	b.n	800dca8 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800dc20:	68fb      	ldr	r3, [r7, #12]
 800dc22:	681b      	ldr	r3, [r3, #0]
 800dc24:	60fb      	str	r3, [r7, #12]
 800dc26:	68fb      	ldr	r3, [r7, #12]
 800dc28:	681b      	ldr	r3, [r3, #0]
 800dc2a:	2b00      	cmp	r3, #0
 800dc2c:	d1ef      	bne.n	800dc0e <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 800dc2e:	68f8      	ldr	r0, [r7, #12]
 800dc30:	f7ff fed4 	bl	800d9dc <tcp_output_segment_busy>
 800dc34:	4603      	mov	r3, r0
 800dc36:	2b00      	cmp	r3, #0
 800dc38:	d002      	beq.n	800dc40 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 800dc3a:	f06f 0305 	mvn.w	r3, #5
 800dc3e:	e033      	b.n	800dca8 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800dc40:	687b      	ldr	r3, [r7, #4]
 800dc42:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800dc44:	68fb      	ldr	r3, [r7, #12]
 800dc46:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 800dc48:	687b      	ldr	r3, [r7, #4]
 800dc4a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800dc4c:	687b      	ldr	r3, [r7, #4]
 800dc4e:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800dc50:	687b      	ldr	r3, [r7, #4]
 800dc52:	2200      	movs	r2, #0
 800dc54:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 800dc56:	687b      	ldr	r3, [r7, #4]
 800dc58:	8b5b      	ldrh	r3, [r3, #26]
 800dc5a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800dc5e:	b29a      	uxth	r2, r3
 800dc60:	687b      	ldr	r3, [r7, #4]
 800dc62:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800dc64:	68fb      	ldr	r3, [r7, #12]
 800dc66:	68db      	ldr	r3, [r3, #12]
 800dc68:	685b      	ldr	r3, [r3, #4]
 800dc6a:	4618      	mov	r0, r3
 800dc6c:	f7f9 fca1 	bl	80075b2 <lwip_htonl>
 800dc70:	4604      	mov	r4, r0
 800dc72:	68fb      	ldr	r3, [r7, #12]
 800dc74:	891b      	ldrh	r3, [r3, #8]
 800dc76:	461d      	mov	r5, r3
 800dc78:	68fb      	ldr	r3, [r7, #12]
 800dc7a:	68db      	ldr	r3, [r3, #12]
 800dc7c:	899b      	ldrh	r3, [r3, #12]
 800dc7e:	b29b      	uxth	r3, r3
 800dc80:	4618      	mov	r0, r3
 800dc82:	f7f9 fc81 	bl	8007588 <lwip_htons>
 800dc86:	4603      	mov	r3, r0
 800dc88:	b2db      	uxtb	r3, r3
 800dc8a:	f003 0303 	and.w	r3, r3, #3
 800dc8e:	2b00      	cmp	r3, #0
 800dc90:	d001      	beq.n	800dc96 <tcp_rexmit_rto_prepare+0xba>
 800dc92:	2301      	movs	r3, #1
 800dc94:	e000      	b.n	800dc98 <tcp_rexmit_rto_prepare+0xbc>
 800dc96:	2300      	movs	r3, #0
 800dc98:	442b      	add	r3, r5
 800dc9a:	18e2      	adds	r2, r4, r3
 800dc9c:	687b      	ldr	r3, [r7, #4]
 800dc9e:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800dca0:	687b      	ldr	r3, [r7, #4]
 800dca2:	2200      	movs	r2, #0
 800dca4:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 800dca6:	2300      	movs	r3, #0
}
 800dca8:	4618      	mov	r0, r3
 800dcaa:	3710      	adds	r7, #16
 800dcac:	46bd      	mov	sp, r7
 800dcae:	bdb0      	pop	{r4, r5, r7, pc}
 800dcb0:	08015d94 	.word	0x08015d94
 800dcb4:	080163d0 	.word	0x080163d0
 800dcb8:	08015de8 	.word	0x08015de8

0800dcbc <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 800dcbc:	b580      	push	{r7, lr}
 800dcbe:	b082      	sub	sp, #8
 800dcc0:	af00      	add	r7, sp, #0
 800dcc2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800dcc4:	687b      	ldr	r3, [r7, #4]
 800dcc6:	2b00      	cmp	r3, #0
 800dcc8:	d106      	bne.n	800dcd8 <tcp_rexmit_rto_commit+0x1c>
 800dcca:	4b0d      	ldr	r3, [pc, #52]	; (800dd00 <tcp_rexmit_rto_commit+0x44>)
 800dccc:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800dcd0:	490c      	ldr	r1, [pc, #48]	; (800dd04 <tcp_rexmit_rto_commit+0x48>)
 800dcd2:	480d      	ldr	r0, [pc, #52]	; (800dd08 <tcp_rexmit_rto_commit+0x4c>)
 800dcd4:	f005 fd1e 	bl	8013714 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800dcd8:	687b      	ldr	r3, [r7, #4]
 800dcda:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800dcde:	2bff      	cmp	r3, #255	; 0xff
 800dce0:	d007      	beq.n	800dcf2 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 800dce2:	687b      	ldr	r3, [r7, #4]
 800dce4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800dce8:	3301      	adds	r3, #1
 800dcea:	b2da      	uxtb	r2, r3
 800dcec:	687b      	ldr	r3, [r7, #4]
 800dcee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 800dcf2:	6878      	ldr	r0, [r7, #4]
 800dcf4:	f7ff fc7a 	bl	800d5ec <tcp_output>
}
 800dcf8:	bf00      	nop
 800dcfa:	3708      	adds	r7, #8
 800dcfc:	46bd      	mov	sp, r7
 800dcfe:	bd80      	pop	{r7, pc}
 800dd00:	08015d94 	.word	0x08015d94
 800dd04:	080163f4 	.word	0x080163f4
 800dd08:	08015de8 	.word	0x08015de8

0800dd0c <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 800dd0c:	b580      	push	{r7, lr}
 800dd0e:	b082      	sub	sp, #8
 800dd10:	af00      	add	r7, sp, #0
 800dd12:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800dd14:	687b      	ldr	r3, [r7, #4]
 800dd16:	2b00      	cmp	r3, #0
 800dd18:	d106      	bne.n	800dd28 <tcp_rexmit_rto+0x1c>
 800dd1a:	4b0a      	ldr	r3, [pc, #40]	; (800dd44 <tcp_rexmit_rto+0x38>)
 800dd1c:	f240 62ad 	movw	r2, #1709	; 0x6ad
 800dd20:	4909      	ldr	r1, [pc, #36]	; (800dd48 <tcp_rexmit_rto+0x3c>)
 800dd22:	480a      	ldr	r0, [pc, #40]	; (800dd4c <tcp_rexmit_rto+0x40>)
 800dd24:	f005 fcf6 	bl	8013714 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 800dd28:	6878      	ldr	r0, [r7, #4]
 800dd2a:	f7ff ff57 	bl	800dbdc <tcp_rexmit_rto_prepare>
 800dd2e:	4603      	mov	r3, r0
 800dd30:	2b00      	cmp	r3, #0
 800dd32:	d102      	bne.n	800dd3a <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 800dd34:	6878      	ldr	r0, [r7, #4]
 800dd36:	f7ff ffc1 	bl	800dcbc <tcp_rexmit_rto_commit>
  }
}
 800dd3a:	bf00      	nop
 800dd3c:	3708      	adds	r7, #8
 800dd3e:	46bd      	mov	sp, r7
 800dd40:	bd80      	pop	{r7, pc}
 800dd42:	bf00      	nop
 800dd44:	08015d94 	.word	0x08015d94
 800dd48:	08016418 	.word	0x08016418
 800dd4c:	08015de8 	.word	0x08015de8

0800dd50 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 800dd50:	b590      	push	{r4, r7, lr}
 800dd52:	b085      	sub	sp, #20
 800dd54:	af00      	add	r7, sp, #0
 800dd56:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800dd58:	687b      	ldr	r3, [r7, #4]
 800dd5a:	2b00      	cmp	r3, #0
 800dd5c:	d106      	bne.n	800dd6c <tcp_rexmit+0x1c>
 800dd5e:	4b2f      	ldr	r3, [pc, #188]	; (800de1c <tcp_rexmit+0xcc>)
 800dd60:	f240 62c1 	movw	r2, #1729	; 0x6c1
 800dd64:	492e      	ldr	r1, [pc, #184]	; (800de20 <tcp_rexmit+0xd0>)
 800dd66:	482f      	ldr	r0, [pc, #188]	; (800de24 <tcp_rexmit+0xd4>)
 800dd68:	f005 fcd4 	bl	8013714 <iprintf>

  if (pcb->unacked == NULL) {
 800dd6c:	687b      	ldr	r3, [r7, #4]
 800dd6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dd70:	2b00      	cmp	r3, #0
 800dd72:	d102      	bne.n	800dd7a <tcp_rexmit+0x2a>
    return ERR_VAL;
 800dd74:	f06f 0305 	mvn.w	r3, #5
 800dd78:	e04c      	b.n	800de14 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 800dd7a:	687b      	ldr	r3, [r7, #4]
 800dd7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dd7e:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 800dd80:	68b8      	ldr	r0, [r7, #8]
 800dd82:	f7ff fe2b 	bl	800d9dc <tcp_output_segment_busy>
 800dd86:	4603      	mov	r3, r0
 800dd88:	2b00      	cmp	r3, #0
 800dd8a:	d002      	beq.n	800dd92 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 800dd8c:	f06f 0305 	mvn.w	r3, #5
 800dd90:	e040      	b.n	800de14 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 800dd92:	68bb      	ldr	r3, [r7, #8]
 800dd94:	681a      	ldr	r2, [r3, #0]
 800dd96:	687b      	ldr	r3, [r7, #4]
 800dd98:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 800dd9a:	687b      	ldr	r3, [r7, #4]
 800dd9c:	336c      	adds	r3, #108	; 0x6c
 800dd9e:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800dda0:	e002      	b.n	800dda8 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 800dda2:	68fb      	ldr	r3, [r7, #12]
 800dda4:	681b      	ldr	r3, [r3, #0]
 800dda6:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800dda8:	68fb      	ldr	r3, [r7, #12]
 800ddaa:	681b      	ldr	r3, [r3, #0]
 800ddac:	2b00      	cmp	r3, #0
 800ddae:	d011      	beq.n	800ddd4 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800ddb0:	68fb      	ldr	r3, [r7, #12]
 800ddb2:	681b      	ldr	r3, [r3, #0]
 800ddb4:	68db      	ldr	r3, [r3, #12]
 800ddb6:	685b      	ldr	r3, [r3, #4]
 800ddb8:	4618      	mov	r0, r3
 800ddba:	f7f9 fbfa 	bl	80075b2 <lwip_htonl>
 800ddbe:	4604      	mov	r4, r0
 800ddc0:	68bb      	ldr	r3, [r7, #8]
 800ddc2:	68db      	ldr	r3, [r3, #12]
 800ddc4:	685b      	ldr	r3, [r3, #4]
 800ddc6:	4618      	mov	r0, r3
 800ddc8:	f7f9 fbf3 	bl	80075b2 <lwip_htonl>
 800ddcc:	4603      	mov	r3, r0
 800ddce:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 800ddd0:	2b00      	cmp	r3, #0
 800ddd2:	dbe6      	blt.n	800dda2 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 800ddd4:	68fb      	ldr	r3, [r7, #12]
 800ddd6:	681a      	ldr	r2, [r3, #0]
 800ddd8:	68bb      	ldr	r3, [r7, #8]
 800ddda:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 800dddc:	68fb      	ldr	r3, [r7, #12]
 800ddde:	68ba      	ldr	r2, [r7, #8]
 800dde0:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800dde2:	68bb      	ldr	r3, [r7, #8]
 800dde4:	681b      	ldr	r3, [r3, #0]
 800dde6:	2b00      	cmp	r3, #0
 800dde8:	d103      	bne.n	800ddf2 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800ddea:	687b      	ldr	r3, [r7, #4]
 800ddec:	2200      	movs	r2, #0
 800ddee:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800ddf2:	687b      	ldr	r3, [r7, #4]
 800ddf4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ddf8:	2bff      	cmp	r3, #255	; 0xff
 800ddfa:	d007      	beq.n	800de0c <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 800ddfc:	687b      	ldr	r3, [r7, #4]
 800ddfe:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800de02:	3301      	adds	r3, #1
 800de04:	b2da      	uxtb	r2, r3
 800de06:	687b      	ldr	r3, [r7, #4]
 800de08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800de0c:	687b      	ldr	r3, [r7, #4]
 800de0e:	2200      	movs	r2, #0
 800de10:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 800de12:	2300      	movs	r3, #0
}
 800de14:	4618      	mov	r0, r3
 800de16:	3714      	adds	r7, #20
 800de18:	46bd      	mov	sp, r7
 800de1a:	bd90      	pop	{r4, r7, pc}
 800de1c:	08015d94 	.word	0x08015d94
 800de20:	08016434 	.word	0x08016434
 800de24:	08015de8 	.word	0x08015de8

0800de28 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 800de28:	b580      	push	{r7, lr}
 800de2a:	b082      	sub	sp, #8
 800de2c:	af00      	add	r7, sp, #0
 800de2e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800de30:	687b      	ldr	r3, [r7, #4]
 800de32:	2b00      	cmp	r3, #0
 800de34:	d106      	bne.n	800de44 <tcp_rexmit_fast+0x1c>
 800de36:	4b2e      	ldr	r3, [pc, #184]	; (800def0 <tcp_rexmit_fast+0xc8>)
 800de38:	f240 62f9 	movw	r2, #1785	; 0x6f9
 800de3c:	492d      	ldr	r1, [pc, #180]	; (800def4 <tcp_rexmit_fast+0xcc>)
 800de3e:	482e      	ldr	r0, [pc, #184]	; (800def8 <tcp_rexmit_fast+0xd0>)
 800de40:	f005 fc68 	bl	8013714 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800de44:	687b      	ldr	r3, [r7, #4]
 800de46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800de48:	2b00      	cmp	r3, #0
 800de4a:	d04d      	beq.n	800dee8 <tcp_rexmit_fast+0xc0>
 800de4c:	687b      	ldr	r3, [r7, #4]
 800de4e:	8b5b      	ldrh	r3, [r3, #26]
 800de50:	f003 0304 	and.w	r3, r3, #4
 800de54:	2b00      	cmp	r3, #0
 800de56:	d147      	bne.n	800dee8 <tcp_rexmit_fast+0xc0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 800de58:	6878      	ldr	r0, [r7, #4]
 800de5a:	f7ff ff79 	bl	800dd50 <tcp_rexmit>
 800de5e:	4603      	mov	r3, r0
 800de60:	2b00      	cmp	r3, #0
 800de62:	d141      	bne.n	800dee8 <tcp_rexmit_fast+0xc0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800de64:	687b      	ldr	r3, [r7, #4]
 800de66:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800de6a:	687b      	ldr	r3, [r7, #4]
 800de6c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800de70:	429a      	cmp	r2, r3
 800de72:	d207      	bcs.n	800de84 <tcp_rexmit_fast+0x5c>
 800de74:	687b      	ldr	r3, [r7, #4]
 800de76:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800de7a:	0fda      	lsrs	r2, r3, #31
 800de7c:	4413      	add	r3, r2
 800de7e:	105b      	asrs	r3, r3, #1
 800de80:	b29b      	uxth	r3, r3
 800de82:	e006      	b.n	800de92 <tcp_rexmit_fast+0x6a>
 800de84:	687b      	ldr	r3, [r7, #4]
 800de86:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800de8a:	0fda      	lsrs	r2, r3, #31
 800de8c:	4413      	add	r3, r2
 800de8e:	105b      	asrs	r3, r3, #1
 800de90:	b29b      	uxth	r3, r3
 800de92:	687a      	ldr	r2, [r7, #4]
 800de94:	f8a2 304a 	strh.w	r3, [r2, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800de98:	687b      	ldr	r3, [r7, #4]
 800de9a:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800de9e:	461a      	mov	r2, r3
 800dea0:	687b      	ldr	r3, [r7, #4]
 800dea2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800dea4:	005b      	lsls	r3, r3, #1
 800dea6:	429a      	cmp	r2, r3
 800dea8:	d206      	bcs.n	800deb8 <tcp_rexmit_fast+0x90>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 800deaa:	687b      	ldr	r3, [r7, #4]
 800deac:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800deae:	005b      	lsls	r3, r3, #1
 800deb0:	b29a      	uxth	r2, r3
 800deb2:	687b      	ldr	r3, [r7, #4]
 800deb4:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800deb8:	687b      	ldr	r3, [r7, #4]
 800deba:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800debe:	687b      	ldr	r3, [r7, #4]
 800dec0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800dec2:	4619      	mov	r1, r3
 800dec4:	0049      	lsls	r1, r1, #1
 800dec6:	440b      	add	r3, r1
 800dec8:	b29b      	uxth	r3, r3
 800deca:	4413      	add	r3, r2
 800decc:	b29a      	uxth	r2, r3
 800dece:	687b      	ldr	r3, [r7, #4]
 800ded0:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 800ded4:	687b      	ldr	r3, [r7, #4]
 800ded6:	8b5b      	ldrh	r3, [r3, #26]
 800ded8:	f043 0304 	orr.w	r3, r3, #4
 800dedc:	b29a      	uxth	r2, r3
 800dede:	687b      	ldr	r3, [r7, #4]
 800dee0:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 800dee2:	687b      	ldr	r3, [r7, #4]
 800dee4:	2200      	movs	r2, #0
 800dee6:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 800dee8:	bf00      	nop
 800deea:	3708      	adds	r7, #8
 800deec:	46bd      	mov	sp, r7
 800deee:	bd80      	pop	{r7, pc}
 800def0:	08015d94 	.word	0x08015d94
 800def4:	0801644c 	.word	0x0801644c
 800def8:	08015de8 	.word	0x08015de8

0800defc <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 800defc:	b580      	push	{r7, lr}
 800defe:	b086      	sub	sp, #24
 800df00:	af00      	add	r7, sp, #0
 800df02:	60f8      	str	r0, [r7, #12]
 800df04:	607b      	str	r3, [r7, #4]
 800df06:	460b      	mov	r3, r1
 800df08:	817b      	strh	r3, [r7, #10]
 800df0a:	4613      	mov	r3, r2
 800df0c:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800df0e:	897a      	ldrh	r2, [r7, #10]
 800df10:	893b      	ldrh	r3, [r7, #8]
 800df12:	4413      	add	r3, r2
 800df14:	b29b      	uxth	r3, r3
 800df16:	3314      	adds	r3, #20
 800df18:	b29b      	uxth	r3, r3
 800df1a:	f44f 7220 	mov.w	r2, #640	; 0x280
 800df1e:	4619      	mov	r1, r3
 800df20:	2022      	movs	r0, #34	; 0x22
 800df22:	f7fa fc05 	bl	8008730 <pbuf_alloc>
 800df26:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 800df28:	697b      	ldr	r3, [r7, #20]
 800df2a:	2b00      	cmp	r3, #0
 800df2c:	d04e      	beq.n	800dfcc <tcp_output_alloc_header_common+0xd0>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800df2e:	697b      	ldr	r3, [r7, #20]
 800df30:	895b      	ldrh	r3, [r3, #10]
 800df32:	461a      	mov	r2, r3
 800df34:	897b      	ldrh	r3, [r7, #10]
 800df36:	3314      	adds	r3, #20
 800df38:	429a      	cmp	r2, r3
 800df3a:	da06      	bge.n	800df4a <tcp_output_alloc_header_common+0x4e>
 800df3c:	4b26      	ldr	r3, [pc, #152]	; (800dfd8 <tcp_output_alloc_header_common+0xdc>)
 800df3e:	f240 7224 	movw	r2, #1828	; 0x724
 800df42:	4926      	ldr	r1, [pc, #152]	; (800dfdc <tcp_output_alloc_header_common+0xe0>)
 800df44:	4826      	ldr	r0, [pc, #152]	; (800dfe0 <tcp_output_alloc_header_common+0xe4>)
 800df46:	f005 fbe5 	bl	8013714 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 800df4a:	697b      	ldr	r3, [r7, #20]
 800df4c:	685b      	ldr	r3, [r3, #4]
 800df4e:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 800df50:	8c3b      	ldrh	r3, [r7, #32]
 800df52:	4618      	mov	r0, r3
 800df54:	f7f9 fb18 	bl	8007588 <lwip_htons>
 800df58:	4603      	mov	r3, r0
 800df5a:	461a      	mov	r2, r3
 800df5c:	693b      	ldr	r3, [r7, #16]
 800df5e:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 800df60:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800df62:	4618      	mov	r0, r3
 800df64:	f7f9 fb10 	bl	8007588 <lwip_htons>
 800df68:	4603      	mov	r3, r0
 800df6a:	461a      	mov	r2, r3
 800df6c:	693b      	ldr	r3, [r7, #16]
 800df6e:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 800df70:	693b      	ldr	r3, [r7, #16]
 800df72:	687a      	ldr	r2, [r7, #4]
 800df74:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 800df76:	68f8      	ldr	r0, [r7, #12]
 800df78:	f7f9 fb1b 	bl	80075b2 <lwip_htonl>
 800df7c:	4602      	mov	r2, r0
 800df7e:	693b      	ldr	r3, [r7, #16]
 800df80:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800df82:	897b      	ldrh	r3, [r7, #10]
 800df84:	089b      	lsrs	r3, r3, #2
 800df86:	b29b      	uxth	r3, r3
 800df88:	3305      	adds	r3, #5
 800df8a:	b29b      	uxth	r3, r3
 800df8c:	031b      	lsls	r3, r3, #12
 800df8e:	b29a      	uxth	r2, r3
 800df90:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800df94:	b29b      	uxth	r3, r3
 800df96:	4313      	orrs	r3, r2
 800df98:	b29b      	uxth	r3, r3
 800df9a:	4618      	mov	r0, r3
 800df9c:	f7f9 faf4 	bl	8007588 <lwip_htons>
 800dfa0:	4603      	mov	r3, r0
 800dfa2:	461a      	mov	r2, r3
 800dfa4:	693b      	ldr	r3, [r7, #16]
 800dfa6:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 800dfa8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800dfaa:	4618      	mov	r0, r3
 800dfac:	f7f9 faec 	bl	8007588 <lwip_htons>
 800dfb0:	4603      	mov	r3, r0
 800dfb2:	461a      	mov	r2, r3
 800dfb4:	693b      	ldr	r3, [r7, #16]
 800dfb6:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 800dfb8:	693b      	ldr	r3, [r7, #16]
 800dfba:	2200      	movs	r2, #0
 800dfbc:	741a      	strb	r2, [r3, #16]
 800dfbe:	2200      	movs	r2, #0
 800dfc0:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 800dfc2:	693b      	ldr	r3, [r7, #16]
 800dfc4:	2200      	movs	r2, #0
 800dfc6:	749a      	strb	r2, [r3, #18]
 800dfc8:	2200      	movs	r2, #0
 800dfca:	74da      	strb	r2, [r3, #19]
  }
  return p;
 800dfcc:	697b      	ldr	r3, [r7, #20]
}
 800dfce:	4618      	mov	r0, r3
 800dfd0:	3718      	adds	r7, #24
 800dfd2:	46bd      	mov	sp, r7
 800dfd4:	bd80      	pop	{r7, pc}
 800dfd6:	bf00      	nop
 800dfd8:	08015d94 	.word	0x08015d94
 800dfdc:	0801646c 	.word	0x0801646c
 800dfe0:	08015de8 	.word	0x08015de8

0800dfe4 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 800dfe4:	b5b0      	push	{r4, r5, r7, lr}
 800dfe6:	b08a      	sub	sp, #40	; 0x28
 800dfe8:	af04      	add	r7, sp, #16
 800dfea:	60f8      	str	r0, [r7, #12]
 800dfec:	607b      	str	r3, [r7, #4]
 800dfee:	460b      	mov	r3, r1
 800dff0:	817b      	strh	r3, [r7, #10]
 800dff2:	4613      	mov	r3, r2
 800dff4:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800dff6:	68fb      	ldr	r3, [r7, #12]
 800dff8:	2b00      	cmp	r3, #0
 800dffa:	d106      	bne.n	800e00a <tcp_output_alloc_header+0x26>
 800dffc:	4b15      	ldr	r3, [pc, #84]	; (800e054 <tcp_output_alloc_header+0x70>)
 800dffe:	f240 7242 	movw	r2, #1858	; 0x742
 800e002:	4915      	ldr	r1, [pc, #84]	; (800e058 <tcp_output_alloc_header+0x74>)
 800e004:	4815      	ldr	r0, [pc, #84]	; (800e05c <tcp_output_alloc_header+0x78>)
 800e006:	f005 fb85 	bl	8013714 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 800e00a:	68fb      	ldr	r3, [r7, #12]
 800e00c:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800e00e:	68fb      	ldr	r3, [r7, #12]
 800e010:	8adb      	ldrh	r3, [r3, #22]
 800e012:	68fa      	ldr	r2, [r7, #12]
 800e014:	8b12      	ldrh	r2, [r2, #24]
 800e016:	68f9      	ldr	r1, [r7, #12]
 800e018:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 800e01a:	893d      	ldrh	r5, [r7, #8]
 800e01c:	897c      	ldrh	r4, [r7, #10]
 800e01e:	9103      	str	r1, [sp, #12]
 800e020:	2110      	movs	r1, #16
 800e022:	9102      	str	r1, [sp, #8]
 800e024:	9201      	str	r2, [sp, #4]
 800e026:	9300      	str	r3, [sp, #0]
 800e028:	687b      	ldr	r3, [r7, #4]
 800e02a:	462a      	mov	r2, r5
 800e02c:	4621      	mov	r1, r4
 800e02e:	f7ff ff65 	bl	800defc <tcp_output_alloc_header_common>
 800e032:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 800e034:	697b      	ldr	r3, [r7, #20]
 800e036:	2b00      	cmp	r3, #0
 800e038:	d006      	beq.n	800e048 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800e03a:	68fb      	ldr	r3, [r7, #12]
 800e03c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e03e:	68fa      	ldr	r2, [r7, #12]
 800e040:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800e042:	441a      	add	r2, r3
 800e044:	68fb      	ldr	r3, [r7, #12]
 800e046:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 800e048:	697b      	ldr	r3, [r7, #20]
}
 800e04a:	4618      	mov	r0, r3
 800e04c:	3718      	adds	r7, #24
 800e04e:	46bd      	mov	sp, r7
 800e050:	bdb0      	pop	{r4, r5, r7, pc}
 800e052:	bf00      	nop
 800e054:	08015d94 	.word	0x08015d94
 800e058:	0801649c 	.word	0x0801649c
 800e05c:	08015de8 	.word	0x08015de8

0800e060 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 800e060:	b580      	push	{r7, lr}
 800e062:	b088      	sub	sp, #32
 800e064:	af00      	add	r7, sp, #0
 800e066:	60f8      	str	r0, [r7, #12]
 800e068:	60b9      	str	r1, [r7, #8]
 800e06a:	4611      	mov	r1, r2
 800e06c:	461a      	mov	r2, r3
 800e06e:	460b      	mov	r3, r1
 800e070:	71fb      	strb	r3, [r7, #7]
 800e072:	4613      	mov	r3, r2
 800e074:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 800e076:	2300      	movs	r3, #0
 800e078:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 800e07a:	68bb      	ldr	r3, [r7, #8]
 800e07c:	2b00      	cmp	r3, #0
 800e07e:	d106      	bne.n	800e08e <tcp_output_fill_options+0x2e>
 800e080:	4b13      	ldr	r3, [pc, #76]	; (800e0d0 <tcp_output_fill_options+0x70>)
 800e082:	f240 7256 	movw	r2, #1878	; 0x756
 800e086:	4913      	ldr	r1, [pc, #76]	; (800e0d4 <tcp_output_fill_options+0x74>)
 800e088:	4813      	ldr	r0, [pc, #76]	; (800e0d8 <tcp_output_fill_options+0x78>)
 800e08a:	f005 fb43 	bl	8013714 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 800e08e:	68bb      	ldr	r3, [r7, #8]
 800e090:	685b      	ldr	r3, [r3, #4]
 800e092:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 800e094:	69bb      	ldr	r3, [r7, #24]
 800e096:	3314      	adds	r3, #20
 800e098:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 800e09a:	69bb      	ldr	r3, [r7, #24]
 800e09c:	f103 0214 	add.w	r2, r3, #20
 800e0a0:	8bfb      	ldrh	r3, [r7, #30]
 800e0a2:	009b      	lsls	r3, r3, #2
 800e0a4:	4619      	mov	r1, r3
 800e0a6:	79fb      	ldrb	r3, [r7, #7]
 800e0a8:	009b      	lsls	r3, r3, #2
 800e0aa:	f003 0304 	and.w	r3, r3, #4
 800e0ae:	440b      	add	r3, r1
 800e0b0:	4413      	add	r3, r2
 800e0b2:	697a      	ldr	r2, [r7, #20]
 800e0b4:	429a      	cmp	r2, r3
 800e0b6:	d006      	beq.n	800e0c6 <tcp_output_fill_options+0x66>
 800e0b8:	4b05      	ldr	r3, [pc, #20]	; (800e0d0 <tcp_output_fill_options+0x70>)
 800e0ba:	f240 7275 	movw	r2, #1909	; 0x775
 800e0be:	4907      	ldr	r1, [pc, #28]	; (800e0dc <tcp_output_fill_options+0x7c>)
 800e0c0:	4805      	ldr	r0, [pc, #20]	; (800e0d8 <tcp_output_fill_options+0x78>)
 800e0c2:	f005 fb27 	bl	8013714 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 800e0c6:	bf00      	nop
 800e0c8:	3720      	adds	r7, #32
 800e0ca:	46bd      	mov	sp, r7
 800e0cc:	bd80      	pop	{r7, pc}
 800e0ce:	bf00      	nop
 800e0d0:	08015d94 	.word	0x08015d94
 800e0d4:	080164c4 	.word	0x080164c4
 800e0d8:	08015de8 	.word	0x08015de8
 800e0dc:	080163bc 	.word	0x080163bc

0800e0e0 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 800e0e0:	b580      	push	{r7, lr}
 800e0e2:	b08a      	sub	sp, #40	; 0x28
 800e0e4:	af04      	add	r7, sp, #16
 800e0e6:	60f8      	str	r0, [r7, #12]
 800e0e8:	60b9      	str	r1, [r7, #8]
 800e0ea:	607a      	str	r2, [r7, #4]
 800e0ec:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800e0ee:	68bb      	ldr	r3, [r7, #8]
 800e0f0:	2b00      	cmp	r3, #0
 800e0f2:	d106      	bne.n	800e102 <tcp_output_control_segment+0x22>
 800e0f4:	4b1c      	ldr	r3, [pc, #112]	; (800e168 <tcp_output_control_segment+0x88>)
 800e0f6:	f240 7287 	movw	r2, #1927	; 0x787
 800e0fa:	491c      	ldr	r1, [pc, #112]	; (800e16c <tcp_output_control_segment+0x8c>)
 800e0fc:	481c      	ldr	r0, [pc, #112]	; (800e170 <tcp_output_control_segment+0x90>)
 800e0fe:	f005 fb09 	bl	8013714 <iprintf>

  netif = tcp_route(pcb, src, dst);
 800e102:	683a      	ldr	r2, [r7, #0]
 800e104:	6879      	ldr	r1, [r7, #4]
 800e106:	68f8      	ldr	r0, [r7, #12]
 800e108:	f7fe ff30 	bl	800cf6c <tcp_route>
 800e10c:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 800e10e:	693b      	ldr	r3, [r7, #16]
 800e110:	2b00      	cmp	r3, #0
 800e112:	d102      	bne.n	800e11a <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 800e114:	23fc      	movs	r3, #252	; 0xfc
 800e116:	75fb      	strb	r3, [r7, #23]
 800e118:	e01c      	b.n	800e154 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 800e11a:	68fb      	ldr	r3, [r7, #12]
 800e11c:	2b00      	cmp	r3, #0
 800e11e:	d006      	beq.n	800e12e <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 800e120:	68fb      	ldr	r3, [r7, #12]
 800e122:	7adb      	ldrb	r3, [r3, #11]
 800e124:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 800e126:	68fb      	ldr	r3, [r7, #12]
 800e128:	7a9b      	ldrb	r3, [r3, #10]
 800e12a:	757b      	strb	r3, [r7, #21]
 800e12c:	e003      	b.n	800e136 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 800e12e:	23ff      	movs	r3, #255	; 0xff
 800e130:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 800e132:	2300      	movs	r3, #0
 800e134:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 800e136:	7dba      	ldrb	r2, [r7, #22]
 800e138:	693b      	ldr	r3, [r7, #16]
 800e13a:	9302      	str	r3, [sp, #8]
 800e13c:	2306      	movs	r3, #6
 800e13e:	9301      	str	r3, [sp, #4]
 800e140:	7d7b      	ldrb	r3, [r7, #21]
 800e142:	9300      	str	r3, [sp, #0]
 800e144:	4613      	mov	r3, r2
 800e146:	683a      	ldr	r2, [r7, #0]
 800e148:	6879      	ldr	r1, [r7, #4]
 800e14a:	68b8      	ldr	r0, [r7, #8]
 800e14c:	f004 f962 	bl	8012414 <ip4_output_if>
 800e150:	4603      	mov	r3, r0
 800e152:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 800e154:	68b8      	ldr	r0, [r7, #8]
 800e156:	f7fa fdcb 	bl	8008cf0 <pbuf_free>
  return err;
 800e15a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e15e:	4618      	mov	r0, r3
 800e160:	3718      	adds	r7, #24
 800e162:	46bd      	mov	sp, r7
 800e164:	bd80      	pop	{r7, pc}
 800e166:	bf00      	nop
 800e168:	08015d94 	.word	0x08015d94
 800e16c:	080164ec 	.word	0x080164ec
 800e170:	08015de8 	.word	0x08015de8

0800e174 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 800e174:	b590      	push	{r4, r7, lr}
 800e176:	b08b      	sub	sp, #44	; 0x2c
 800e178:	af04      	add	r7, sp, #16
 800e17a:	60f8      	str	r0, [r7, #12]
 800e17c:	60b9      	str	r1, [r7, #8]
 800e17e:	607a      	str	r2, [r7, #4]
 800e180:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800e182:	683b      	ldr	r3, [r7, #0]
 800e184:	2b00      	cmp	r3, #0
 800e186:	d106      	bne.n	800e196 <tcp_rst+0x22>
 800e188:	4b1f      	ldr	r3, [pc, #124]	; (800e208 <tcp_rst+0x94>)
 800e18a:	f240 72c4 	movw	r2, #1988	; 0x7c4
 800e18e:	491f      	ldr	r1, [pc, #124]	; (800e20c <tcp_rst+0x98>)
 800e190:	481f      	ldr	r0, [pc, #124]	; (800e210 <tcp_rst+0x9c>)
 800e192:	f005 fabf 	bl	8013714 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800e196:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e198:	2b00      	cmp	r3, #0
 800e19a:	d106      	bne.n	800e1aa <tcp_rst+0x36>
 800e19c:	4b1a      	ldr	r3, [pc, #104]	; (800e208 <tcp_rst+0x94>)
 800e19e:	f240 72c5 	movw	r2, #1989	; 0x7c5
 800e1a2:	491c      	ldr	r1, [pc, #112]	; (800e214 <tcp_rst+0xa0>)
 800e1a4:	481a      	ldr	r0, [pc, #104]	; (800e210 <tcp_rst+0x9c>)
 800e1a6:	f005 fab5 	bl	8013714 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800e1aa:	2300      	movs	r3, #0
 800e1ac:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 800e1ae:	f246 0308 	movw	r3, #24584	; 0x6008
 800e1b2:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 800e1b4:	7dfb      	ldrb	r3, [r7, #23]
 800e1b6:	b29c      	uxth	r4, r3
 800e1b8:	68b8      	ldr	r0, [r7, #8]
 800e1ba:	f7f9 f9fa 	bl	80075b2 <lwip_htonl>
 800e1be:	4602      	mov	r2, r0
 800e1c0:	8abb      	ldrh	r3, [r7, #20]
 800e1c2:	9303      	str	r3, [sp, #12]
 800e1c4:	2314      	movs	r3, #20
 800e1c6:	9302      	str	r3, [sp, #8]
 800e1c8:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800e1ca:	9301      	str	r3, [sp, #4]
 800e1cc:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800e1ce:	9300      	str	r3, [sp, #0]
 800e1d0:	4613      	mov	r3, r2
 800e1d2:	2200      	movs	r2, #0
 800e1d4:	4621      	mov	r1, r4
 800e1d6:	6878      	ldr	r0, [r7, #4]
 800e1d8:	f7ff fe90 	bl	800defc <tcp_output_alloc_header_common>
 800e1dc:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 800e1de:	693b      	ldr	r3, [r7, #16]
 800e1e0:	2b00      	cmp	r3, #0
 800e1e2:	d00c      	beq.n	800e1fe <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800e1e4:	7dfb      	ldrb	r3, [r7, #23]
 800e1e6:	2200      	movs	r2, #0
 800e1e8:	6939      	ldr	r1, [r7, #16]
 800e1ea:	68f8      	ldr	r0, [r7, #12]
 800e1ec:	f7ff ff38 	bl	800e060 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800e1f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e1f2:	683a      	ldr	r2, [r7, #0]
 800e1f4:	6939      	ldr	r1, [r7, #16]
 800e1f6:	68f8      	ldr	r0, [r7, #12]
 800e1f8:	f7ff ff72 	bl	800e0e0 <tcp_output_control_segment>
 800e1fc:	e000      	b.n	800e200 <tcp_rst+0x8c>
    return;
 800e1fe:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800e200:	371c      	adds	r7, #28
 800e202:	46bd      	mov	sp, r7
 800e204:	bd90      	pop	{r4, r7, pc}
 800e206:	bf00      	nop
 800e208:	08015d94 	.word	0x08015d94
 800e20c:	08016518 	.word	0x08016518
 800e210:	08015de8 	.word	0x08015de8
 800e214:	08016534 	.word	0x08016534

0800e218 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800e218:	b590      	push	{r4, r7, lr}
 800e21a:	b087      	sub	sp, #28
 800e21c:	af00      	add	r7, sp, #0
 800e21e:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 800e220:	2300      	movs	r3, #0
 800e222:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 800e224:	2300      	movs	r3, #0
 800e226:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800e228:	687b      	ldr	r3, [r7, #4]
 800e22a:	2b00      	cmp	r3, #0
 800e22c:	d106      	bne.n	800e23c <tcp_send_empty_ack+0x24>
 800e22e:	4b28      	ldr	r3, [pc, #160]	; (800e2d0 <tcp_send_empty_ack+0xb8>)
 800e230:	f240 72ea 	movw	r2, #2026	; 0x7ea
 800e234:	4927      	ldr	r1, [pc, #156]	; (800e2d4 <tcp_send_empty_ack+0xbc>)
 800e236:	4828      	ldr	r0, [pc, #160]	; (800e2d8 <tcp_send_empty_ack+0xc0>)
 800e238:	f005 fa6c 	bl	8013714 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800e23c:	7dfb      	ldrb	r3, [r7, #23]
 800e23e:	009b      	lsls	r3, r3, #2
 800e240:	b2db      	uxtb	r3, r3
 800e242:	f003 0304 	and.w	r3, r3, #4
 800e246:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800e248:	7d7b      	ldrb	r3, [r7, #21]
 800e24a:	b29c      	uxth	r4, r3
 800e24c:	687b      	ldr	r3, [r7, #4]
 800e24e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e250:	4618      	mov	r0, r3
 800e252:	f7f9 f9ae 	bl	80075b2 <lwip_htonl>
 800e256:	4603      	mov	r3, r0
 800e258:	2200      	movs	r2, #0
 800e25a:	4621      	mov	r1, r4
 800e25c:	6878      	ldr	r0, [r7, #4]
 800e25e:	f7ff fec1 	bl	800dfe4 <tcp_output_alloc_header>
 800e262:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800e264:	693b      	ldr	r3, [r7, #16]
 800e266:	2b00      	cmp	r3, #0
 800e268:	d109      	bne.n	800e27e <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800e26a:	687b      	ldr	r3, [r7, #4]
 800e26c:	8b5b      	ldrh	r3, [r3, #26]
 800e26e:	f043 0303 	orr.w	r3, r3, #3
 800e272:	b29a      	uxth	r2, r3
 800e274:	687b      	ldr	r3, [r7, #4]
 800e276:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800e278:	f06f 0301 	mvn.w	r3, #1
 800e27c:	e023      	b.n	800e2c6 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 800e27e:	7dbb      	ldrb	r3, [r7, #22]
 800e280:	7dfa      	ldrb	r2, [r7, #23]
 800e282:	6939      	ldr	r1, [r7, #16]
 800e284:	6878      	ldr	r0, [r7, #4]
 800e286:	f7ff feeb 	bl	800e060 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800e28a:	687a      	ldr	r2, [r7, #4]
 800e28c:	687b      	ldr	r3, [r7, #4]
 800e28e:	3304      	adds	r3, #4
 800e290:	6939      	ldr	r1, [r7, #16]
 800e292:	6878      	ldr	r0, [r7, #4]
 800e294:	f7ff ff24 	bl	800e0e0 <tcp_output_control_segment>
 800e298:	4603      	mov	r3, r0
 800e29a:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800e29c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e2a0:	2b00      	cmp	r3, #0
 800e2a2:	d007      	beq.n	800e2b4 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800e2a4:	687b      	ldr	r3, [r7, #4]
 800e2a6:	8b5b      	ldrh	r3, [r3, #26]
 800e2a8:	f043 0303 	orr.w	r3, r3, #3
 800e2ac:	b29a      	uxth	r2, r3
 800e2ae:	687b      	ldr	r3, [r7, #4]
 800e2b0:	835a      	strh	r2, [r3, #26]
 800e2b2:	e006      	b.n	800e2c2 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800e2b4:	687b      	ldr	r3, [r7, #4]
 800e2b6:	8b5b      	ldrh	r3, [r3, #26]
 800e2b8:	f023 0303 	bic.w	r3, r3, #3
 800e2bc:	b29a      	uxth	r2, r3
 800e2be:	687b      	ldr	r3, [r7, #4]
 800e2c0:	835a      	strh	r2, [r3, #26]
  }

  return err;
 800e2c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800e2c6:	4618      	mov	r0, r3
 800e2c8:	371c      	adds	r7, #28
 800e2ca:	46bd      	mov	sp, r7
 800e2cc:	bd90      	pop	{r4, r7, pc}
 800e2ce:	bf00      	nop
 800e2d0:	08015d94 	.word	0x08015d94
 800e2d4:	08016550 	.word	0x08016550
 800e2d8:	08015de8 	.word	0x08015de8

0800e2dc <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800e2dc:	b590      	push	{r4, r7, lr}
 800e2de:	b087      	sub	sp, #28
 800e2e0:	af00      	add	r7, sp, #0
 800e2e2:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800e2e4:	2300      	movs	r3, #0
 800e2e6:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800e2e8:	687b      	ldr	r3, [r7, #4]
 800e2ea:	2b00      	cmp	r3, #0
 800e2ec:	d106      	bne.n	800e2fc <tcp_keepalive+0x20>
 800e2ee:	4b18      	ldr	r3, [pc, #96]	; (800e350 <tcp_keepalive+0x74>)
 800e2f0:	f640 0224 	movw	r2, #2084	; 0x824
 800e2f4:	4917      	ldr	r1, [pc, #92]	; (800e354 <tcp_keepalive+0x78>)
 800e2f6:	4818      	ldr	r0, [pc, #96]	; (800e358 <tcp_keepalive+0x7c>)
 800e2f8:	f005 fa0c 	bl	8013714 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 800e2fc:	7dfb      	ldrb	r3, [r7, #23]
 800e2fe:	b29c      	uxth	r4, r3
 800e300:	687b      	ldr	r3, [r7, #4]
 800e302:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e304:	3b01      	subs	r3, #1
 800e306:	4618      	mov	r0, r3
 800e308:	f7f9 f953 	bl	80075b2 <lwip_htonl>
 800e30c:	4603      	mov	r3, r0
 800e30e:	2200      	movs	r2, #0
 800e310:	4621      	mov	r1, r4
 800e312:	6878      	ldr	r0, [r7, #4]
 800e314:	f7ff fe66 	bl	800dfe4 <tcp_output_alloc_header>
 800e318:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800e31a:	693b      	ldr	r3, [r7, #16]
 800e31c:	2b00      	cmp	r3, #0
 800e31e:	d102      	bne.n	800e326 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 800e320:	f04f 33ff 	mov.w	r3, #4294967295
 800e324:	e010      	b.n	800e348 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800e326:	7dfb      	ldrb	r3, [r7, #23]
 800e328:	2200      	movs	r2, #0
 800e32a:	6939      	ldr	r1, [r7, #16]
 800e32c:	6878      	ldr	r0, [r7, #4]
 800e32e:	f7ff fe97 	bl	800e060 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800e332:	687a      	ldr	r2, [r7, #4]
 800e334:	687b      	ldr	r3, [r7, #4]
 800e336:	3304      	adds	r3, #4
 800e338:	6939      	ldr	r1, [r7, #16]
 800e33a:	6878      	ldr	r0, [r7, #4]
 800e33c:	f7ff fed0 	bl	800e0e0 <tcp_output_control_segment>
 800e340:	4603      	mov	r3, r0
 800e342:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800e344:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800e348:	4618      	mov	r0, r3
 800e34a:	371c      	adds	r7, #28
 800e34c:	46bd      	mov	sp, r7
 800e34e:	bd90      	pop	{r4, r7, pc}
 800e350:	08015d94 	.word	0x08015d94
 800e354:	08016570 	.word	0x08016570
 800e358:	08015de8 	.word	0x08015de8

0800e35c <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800e35c:	b590      	push	{r4, r7, lr}
 800e35e:	b08b      	sub	sp, #44	; 0x2c
 800e360:	af00      	add	r7, sp, #0
 800e362:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800e364:	2300      	movs	r3, #0
 800e366:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 800e36a:	687b      	ldr	r3, [r7, #4]
 800e36c:	2b00      	cmp	r3, #0
 800e36e:	d106      	bne.n	800e37e <tcp_zero_window_probe+0x22>
 800e370:	4b4c      	ldr	r3, [pc, #304]	; (800e4a4 <tcp_zero_window_probe+0x148>)
 800e372:	f640 024f 	movw	r2, #2127	; 0x84f
 800e376:	494c      	ldr	r1, [pc, #304]	; (800e4a8 <tcp_zero_window_probe+0x14c>)
 800e378:	484c      	ldr	r0, [pc, #304]	; (800e4ac <tcp_zero_window_probe+0x150>)
 800e37a:	f005 f9cb 	bl	8013714 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 800e37e:	687b      	ldr	r3, [r7, #4]
 800e380:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e382:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 800e384:	6a3b      	ldr	r3, [r7, #32]
 800e386:	2b00      	cmp	r3, #0
 800e388:	d101      	bne.n	800e38e <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 800e38a:	2300      	movs	r3, #0
 800e38c:	e086      	b.n	800e49c <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 800e38e:	687b      	ldr	r3, [r7, #4]
 800e390:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800e394:	2bff      	cmp	r3, #255	; 0xff
 800e396:	d007      	beq.n	800e3a8 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 800e398:	687b      	ldr	r3, [r7, #4]
 800e39a:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800e39e:	3301      	adds	r3, #1
 800e3a0:	b2da      	uxtb	r2, r3
 800e3a2:	687b      	ldr	r3, [r7, #4]
 800e3a4:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800e3a8:	6a3b      	ldr	r3, [r7, #32]
 800e3aa:	68db      	ldr	r3, [r3, #12]
 800e3ac:	899b      	ldrh	r3, [r3, #12]
 800e3ae:	b29b      	uxth	r3, r3
 800e3b0:	4618      	mov	r0, r3
 800e3b2:	f7f9 f8e9 	bl	8007588 <lwip_htons>
 800e3b6:	4603      	mov	r3, r0
 800e3b8:	b2db      	uxtb	r3, r3
 800e3ba:	f003 0301 	and.w	r3, r3, #1
 800e3be:	2b00      	cmp	r3, #0
 800e3c0:	d005      	beq.n	800e3ce <tcp_zero_window_probe+0x72>
 800e3c2:	6a3b      	ldr	r3, [r7, #32]
 800e3c4:	891b      	ldrh	r3, [r3, #8]
 800e3c6:	2b00      	cmp	r3, #0
 800e3c8:	d101      	bne.n	800e3ce <tcp_zero_window_probe+0x72>
 800e3ca:	2301      	movs	r3, #1
 800e3cc:	e000      	b.n	800e3d0 <tcp_zero_window_probe+0x74>
 800e3ce:	2300      	movs	r3, #0
 800e3d0:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 800e3d2:	7ffb      	ldrb	r3, [r7, #31]
 800e3d4:	2b00      	cmp	r3, #0
 800e3d6:	bf0c      	ite	eq
 800e3d8:	2301      	moveq	r3, #1
 800e3da:	2300      	movne	r3, #0
 800e3dc:	b2db      	uxtb	r3, r3
 800e3de:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800e3e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e3e4:	b299      	uxth	r1, r3
 800e3e6:	6a3b      	ldr	r3, [r7, #32]
 800e3e8:	68db      	ldr	r3, [r3, #12]
 800e3ea:	685b      	ldr	r3, [r3, #4]
 800e3ec:	8bba      	ldrh	r2, [r7, #28]
 800e3ee:	6878      	ldr	r0, [r7, #4]
 800e3f0:	f7ff fdf8 	bl	800dfe4 <tcp_output_alloc_header>
 800e3f4:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 800e3f6:	69bb      	ldr	r3, [r7, #24]
 800e3f8:	2b00      	cmp	r3, #0
 800e3fa:	d102      	bne.n	800e402 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 800e3fc:	f04f 33ff 	mov.w	r3, #4294967295
 800e400:	e04c      	b.n	800e49c <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800e402:	69bb      	ldr	r3, [r7, #24]
 800e404:	685b      	ldr	r3, [r3, #4]
 800e406:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 800e408:	7ffb      	ldrb	r3, [r7, #31]
 800e40a:	2b00      	cmp	r3, #0
 800e40c:	d011      	beq.n	800e432 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800e40e:	697b      	ldr	r3, [r7, #20]
 800e410:	899b      	ldrh	r3, [r3, #12]
 800e412:	b29b      	uxth	r3, r3
 800e414:	b21b      	sxth	r3, r3
 800e416:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800e41a:	b21c      	sxth	r4, r3
 800e41c:	2011      	movs	r0, #17
 800e41e:	f7f9 f8b3 	bl	8007588 <lwip_htons>
 800e422:	4603      	mov	r3, r0
 800e424:	b21b      	sxth	r3, r3
 800e426:	4323      	orrs	r3, r4
 800e428:	b21b      	sxth	r3, r3
 800e42a:	b29a      	uxth	r2, r3
 800e42c:	697b      	ldr	r3, [r7, #20]
 800e42e:	819a      	strh	r2, [r3, #12]
 800e430:	e010      	b.n	800e454 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 800e432:	69bb      	ldr	r3, [r7, #24]
 800e434:	685b      	ldr	r3, [r3, #4]
 800e436:	3314      	adds	r3, #20
 800e438:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800e43a:	6a3b      	ldr	r3, [r7, #32]
 800e43c:	6858      	ldr	r0, [r3, #4]
 800e43e:	6a3b      	ldr	r3, [r7, #32]
 800e440:	685b      	ldr	r3, [r3, #4]
 800e442:	891a      	ldrh	r2, [r3, #8]
 800e444:	6a3b      	ldr	r3, [r7, #32]
 800e446:	891b      	ldrh	r3, [r3, #8]
 800e448:	1ad3      	subs	r3, r2, r3
 800e44a:	b29b      	uxth	r3, r3
 800e44c:	2201      	movs	r2, #1
 800e44e:	6939      	ldr	r1, [r7, #16]
 800e450:	f7fa fe54 	bl	80090fc <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800e454:	6a3b      	ldr	r3, [r7, #32]
 800e456:	68db      	ldr	r3, [r3, #12]
 800e458:	685b      	ldr	r3, [r3, #4]
 800e45a:	4618      	mov	r0, r3
 800e45c:	f7f9 f8a9 	bl	80075b2 <lwip_htonl>
 800e460:	4603      	mov	r3, r0
 800e462:	3301      	adds	r3, #1
 800e464:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800e466:	687b      	ldr	r3, [r7, #4]
 800e468:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e46a:	68fb      	ldr	r3, [r7, #12]
 800e46c:	1ad3      	subs	r3, r2, r3
 800e46e:	2b00      	cmp	r3, #0
 800e470:	da02      	bge.n	800e478 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 800e472:	687b      	ldr	r3, [r7, #4]
 800e474:	68fa      	ldr	r2, [r7, #12]
 800e476:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800e478:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e47c:	2200      	movs	r2, #0
 800e47e:	69b9      	ldr	r1, [r7, #24]
 800e480:	6878      	ldr	r0, [r7, #4]
 800e482:	f7ff fded 	bl	800e060 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800e486:	687a      	ldr	r2, [r7, #4]
 800e488:	687b      	ldr	r3, [r7, #4]
 800e48a:	3304      	adds	r3, #4
 800e48c:	69b9      	ldr	r1, [r7, #24]
 800e48e:	6878      	ldr	r0, [r7, #4]
 800e490:	f7ff fe26 	bl	800e0e0 <tcp_output_control_segment>
 800e494:	4603      	mov	r3, r0
 800e496:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800e498:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800e49c:	4618      	mov	r0, r3
 800e49e:	372c      	adds	r7, #44	; 0x2c
 800e4a0:	46bd      	mov	sp, r7
 800e4a2:	bd90      	pop	{r4, r7, pc}
 800e4a4:	08015d94 	.word	0x08015d94
 800e4a8:	0801658c 	.word	0x0801658c
 800e4ac:	08015de8 	.word	0x08015de8

0800e4b0 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 800e4b0:	b580      	push	{r7, lr}
 800e4b2:	b082      	sub	sp, #8
 800e4b4:	af00      	add	r7, sp, #0
 800e4b6:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 800e4b8:	f7fa ff0e 	bl	80092d8 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800e4bc:	4b0a      	ldr	r3, [pc, #40]	; (800e4e8 <tcpip_tcp_timer+0x38>)
 800e4be:	681b      	ldr	r3, [r3, #0]
 800e4c0:	2b00      	cmp	r3, #0
 800e4c2:	d103      	bne.n	800e4cc <tcpip_tcp_timer+0x1c>
 800e4c4:	4b09      	ldr	r3, [pc, #36]	; (800e4ec <tcpip_tcp_timer+0x3c>)
 800e4c6:	681b      	ldr	r3, [r3, #0]
 800e4c8:	2b00      	cmp	r3, #0
 800e4ca:	d005      	beq.n	800e4d8 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800e4cc:	2200      	movs	r2, #0
 800e4ce:	4908      	ldr	r1, [pc, #32]	; (800e4f0 <tcpip_tcp_timer+0x40>)
 800e4d0:	20fa      	movs	r0, #250	; 0xfa
 800e4d2:	f000 f8f1 	bl	800e6b8 <sys_timeout>
 800e4d6:	e002      	b.n	800e4de <tcpip_tcp_timer+0x2e>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 800e4d8:	4b06      	ldr	r3, [pc, #24]	; (800e4f4 <tcpip_tcp_timer+0x44>)
 800e4da:	2200      	movs	r2, #0
 800e4dc:	601a      	str	r2, [r3, #0]
  }
}
 800e4de:	bf00      	nop
 800e4e0:	3708      	adds	r7, #8
 800e4e2:	46bd      	mov	sp, r7
 800e4e4:	bd80      	pop	{r7, pc}
 800e4e6:	bf00      	nop
 800e4e8:	2000eee4 	.word	0x2000eee4
 800e4ec:	2000eef4 	.word	0x2000eef4
 800e4f0:	0800e4b1 	.word	0x0800e4b1
 800e4f4:	200084dc 	.word	0x200084dc

0800e4f8 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 800e4f8:	b580      	push	{r7, lr}
 800e4fa:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800e4fc:	4b0a      	ldr	r3, [pc, #40]	; (800e528 <tcp_timer_needed+0x30>)
 800e4fe:	681b      	ldr	r3, [r3, #0]
 800e500:	2b00      	cmp	r3, #0
 800e502:	d10f      	bne.n	800e524 <tcp_timer_needed+0x2c>
 800e504:	4b09      	ldr	r3, [pc, #36]	; (800e52c <tcp_timer_needed+0x34>)
 800e506:	681b      	ldr	r3, [r3, #0]
 800e508:	2b00      	cmp	r3, #0
 800e50a:	d103      	bne.n	800e514 <tcp_timer_needed+0x1c>
 800e50c:	4b08      	ldr	r3, [pc, #32]	; (800e530 <tcp_timer_needed+0x38>)
 800e50e:	681b      	ldr	r3, [r3, #0]
 800e510:	2b00      	cmp	r3, #0
 800e512:	d007      	beq.n	800e524 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 800e514:	4b04      	ldr	r3, [pc, #16]	; (800e528 <tcp_timer_needed+0x30>)
 800e516:	2201      	movs	r2, #1
 800e518:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800e51a:	2200      	movs	r2, #0
 800e51c:	4905      	ldr	r1, [pc, #20]	; (800e534 <tcp_timer_needed+0x3c>)
 800e51e:	20fa      	movs	r0, #250	; 0xfa
 800e520:	f000 f8ca 	bl	800e6b8 <sys_timeout>
  }
}
 800e524:	bf00      	nop
 800e526:	bd80      	pop	{r7, pc}
 800e528:	200084dc 	.word	0x200084dc
 800e52c:	2000eee4 	.word	0x2000eee4
 800e530:	2000eef4 	.word	0x2000eef4
 800e534:	0800e4b1 	.word	0x0800e4b1

0800e538 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 800e538:	b580      	push	{r7, lr}
 800e53a:	b086      	sub	sp, #24
 800e53c:	af00      	add	r7, sp, #0
 800e53e:	60f8      	str	r0, [r7, #12]
 800e540:	60b9      	str	r1, [r7, #8]
 800e542:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800e544:	200a      	movs	r0, #10
 800e546:	f7f9 fcd5 	bl	8007ef4 <memp_malloc>
 800e54a:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 800e54c:	693b      	ldr	r3, [r7, #16]
 800e54e:	2b00      	cmp	r3, #0
 800e550:	d109      	bne.n	800e566 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800e552:	693b      	ldr	r3, [r7, #16]
 800e554:	2b00      	cmp	r3, #0
 800e556:	d151      	bne.n	800e5fc <sys_timeout_abs+0xc4>
 800e558:	4b2a      	ldr	r3, [pc, #168]	; (800e604 <sys_timeout_abs+0xcc>)
 800e55a:	22be      	movs	r2, #190	; 0xbe
 800e55c:	492a      	ldr	r1, [pc, #168]	; (800e608 <sys_timeout_abs+0xd0>)
 800e55e:	482b      	ldr	r0, [pc, #172]	; (800e60c <sys_timeout_abs+0xd4>)
 800e560:	f005 f8d8 	bl	8013714 <iprintf>
    return;
 800e564:	e04a      	b.n	800e5fc <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 800e566:	693b      	ldr	r3, [r7, #16]
 800e568:	2200      	movs	r2, #0
 800e56a:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 800e56c:	693b      	ldr	r3, [r7, #16]
 800e56e:	68ba      	ldr	r2, [r7, #8]
 800e570:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 800e572:	693b      	ldr	r3, [r7, #16]
 800e574:	687a      	ldr	r2, [r7, #4]
 800e576:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 800e578:	693b      	ldr	r3, [r7, #16]
 800e57a:	68fa      	ldr	r2, [r7, #12]
 800e57c:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800e57e:	4b24      	ldr	r3, [pc, #144]	; (800e610 <sys_timeout_abs+0xd8>)
 800e580:	681b      	ldr	r3, [r3, #0]
 800e582:	2b00      	cmp	r3, #0
 800e584:	d103      	bne.n	800e58e <sys_timeout_abs+0x56>
    next_timeout = timeout;
 800e586:	4a22      	ldr	r2, [pc, #136]	; (800e610 <sys_timeout_abs+0xd8>)
 800e588:	693b      	ldr	r3, [r7, #16]
 800e58a:	6013      	str	r3, [r2, #0]
    return;
 800e58c:	e037      	b.n	800e5fe <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 800e58e:	693b      	ldr	r3, [r7, #16]
 800e590:	685a      	ldr	r2, [r3, #4]
 800e592:	4b1f      	ldr	r3, [pc, #124]	; (800e610 <sys_timeout_abs+0xd8>)
 800e594:	681b      	ldr	r3, [r3, #0]
 800e596:	685b      	ldr	r3, [r3, #4]
 800e598:	1ad3      	subs	r3, r2, r3
 800e59a:	0fdb      	lsrs	r3, r3, #31
 800e59c:	f003 0301 	and.w	r3, r3, #1
 800e5a0:	b2db      	uxtb	r3, r3
 800e5a2:	2b00      	cmp	r3, #0
 800e5a4:	d007      	beq.n	800e5b6 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 800e5a6:	4b1a      	ldr	r3, [pc, #104]	; (800e610 <sys_timeout_abs+0xd8>)
 800e5a8:	681a      	ldr	r2, [r3, #0]
 800e5aa:	693b      	ldr	r3, [r7, #16]
 800e5ac:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 800e5ae:	4a18      	ldr	r2, [pc, #96]	; (800e610 <sys_timeout_abs+0xd8>)
 800e5b0:	693b      	ldr	r3, [r7, #16]
 800e5b2:	6013      	str	r3, [r2, #0]
 800e5b4:	e023      	b.n	800e5fe <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 800e5b6:	4b16      	ldr	r3, [pc, #88]	; (800e610 <sys_timeout_abs+0xd8>)
 800e5b8:	681b      	ldr	r3, [r3, #0]
 800e5ba:	617b      	str	r3, [r7, #20]
 800e5bc:	e01a      	b.n	800e5f4 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 800e5be:	697b      	ldr	r3, [r7, #20]
 800e5c0:	681b      	ldr	r3, [r3, #0]
 800e5c2:	2b00      	cmp	r3, #0
 800e5c4:	d00b      	beq.n	800e5de <sys_timeout_abs+0xa6>
 800e5c6:	693b      	ldr	r3, [r7, #16]
 800e5c8:	685a      	ldr	r2, [r3, #4]
 800e5ca:	697b      	ldr	r3, [r7, #20]
 800e5cc:	681b      	ldr	r3, [r3, #0]
 800e5ce:	685b      	ldr	r3, [r3, #4]
 800e5d0:	1ad3      	subs	r3, r2, r3
 800e5d2:	0fdb      	lsrs	r3, r3, #31
 800e5d4:	f003 0301 	and.w	r3, r3, #1
 800e5d8:	b2db      	uxtb	r3, r3
 800e5da:	2b00      	cmp	r3, #0
 800e5dc:	d007      	beq.n	800e5ee <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 800e5de:	697b      	ldr	r3, [r7, #20]
 800e5e0:	681a      	ldr	r2, [r3, #0]
 800e5e2:	693b      	ldr	r3, [r7, #16]
 800e5e4:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 800e5e6:	697b      	ldr	r3, [r7, #20]
 800e5e8:	693a      	ldr	r2, [r7, #16]
 800e5ea:	601a      	str	r2, [r3, #0]
        break;
 800e5ec:	e007      	b.n	800e5fe <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 800e5ee:	697b      	ldr	r3, [r7, #20]
 800e5f0:	681b      	ldr	r3, [r3, #0]
 800e5f2:	617b      	str	r3, [r7, #20]
 800e5f4:	697b      	ldr	r3, [r7, #20]
 800e5f6:	2b00      	cmp	r3, #0
 800e5f8:	d1e1      	bne.n	800e5be <sys_timeout_abs+0x86>
 800e5fa:	e000      	b.n	800e5fe <sys_timeout_abs+0xc6>
    return;
 800e5fc:	bf00      	nop
      }
    }
  }
}
 800e5fe:	3718      	adds	r7, #24
 800e600:	46bd      	mov	sp, r7
 800e602:	bd80      	pop	{r7, pc}
 800e604:	080165b0 	.word	0x080165b0
 800e608:	080165e4 	.word	0x080165e4
 800e60c:	08016624 	.word	0x08016624
 800e610:	200084d4 	.word	0x200084d4

0800e614 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 800e614:	b580      	push	{r7, lr}
 800e616:	b086      	sub	sp, #24
 800e618:	af00      	add	r7, sp, #0
 800e61a:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 800e61c:	687b      	ldr	r3, [r7, #4]
 800e61e:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800e620:	697b      	ldr	r3, [r7, #20]
 800e622:	685b      	ldr	r3, [r3, #4]
 800e624:	4798      	blx	r3

  now = sys_now();
 800e626:	f7f5 fe73 	bl	8004310 <sys_now>
 800e62a:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800e62c:	697b      	ldr	r3, [r7, #20]
 800e62e:	681a      	ldr	r2, [r3, #0]
 800e630:	4b0f      	ldr	r3, [pc, #60]	; (800e670 <lwip_cyclic_timer+0x5c>)
 800e632:	681b      	ldr	r3, [r3, #0]
 800e634:	4413      	add	r3, r2
 800e636:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 800e638:	68fa      	ldr	r2, [r7, #12]
 800e63a:	693b      	ldr	r3, [r7, #16]
 800e63c:	1ad3      	subs	r3, r2, r3
 800e63e:	0fdb      	lsrs	r3, r3, #31
 800e640:	f003 0301 	and.w	r3, r3, #1
 800e644:	b2db      	uxtb	r3, r3
 800e646:	2b00      	cmp	r3, #0
 800e648:	d009      	beq.n	800e65e <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800e64a:	697b      	ldr	r3, [r7, #20]
 800e64c:	681a      	ldr	r2, [r3, #0]
 800e64e:	693b      	ldr	r3, [r7, #16]
 800e650:	4413      	add	r3, r2
 800e652:	687a      	ldr	r2, [r7, #4]
 800e654:	4907      	ldr	r1, [pc, #28]	; (800e674 <lwip_cyclic_timer+0x60>)
 800e656:	4618      	mov	r0, r3
 800e658:	f7ff ff6e 	bl	800e538 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 800e65c:	e004      	b.n	800e668 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 800e65e:	687a      	ldr	r2, [r7, #4]
 800e660:	4904      	ldr	r1, [pc, #16]	; (800e674 <lwip_cyclic_timer+0x60>)
 800e662:	68f8      	ldr	r0, [r7, #12]
 800e664:	f7ff ff68 	bl	800e538 <sys_timeout_abs>
}
 800e668:	bf00      	nop
 800e66a:	3718      	adds	r7, #24
 800e66c:	46bd      	mov	sp, r7
 800e66e:	bd80      	pop	{r7, pc}
 800e670:	200084d8 	.word	0x200084d8
 800e674:	0800e615 	.word	0x0800e615

0800e678 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 800e678:	b580      	push	{r7, lr}
 800e67a:	b082      	sub	sp, #8
 800e67c:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800e67e:	2301      	movs	r3, #1
 800e680:	607b      	str	r3, [r7, #4]
 800e682:	e00e      	b.n	800e6a2 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 800e684:	4a0a      	ldr	r2, [pc, #40]	; (800e6b0 <sys_timeouts_init+0x38>)
 800e686:	687b      	ldr	r3, [r7, #4]
 800e688:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800e68c:	687b      	ldr	r3, [r7, #4]
 800e68e:	00db      	lsls	r3, r3, #3
 800e690:	4a07      	ldr	r2, [pc, #28]	; (800e6b0 <sys_timeouts_init+0x38>)
 800e692:	4413      	add	r3, r2
 800e694:	461a      	mov	r2, r3
 800e696:	4907      	ldr	r1, [pc, #28]	; (800e6b4 <sys_timeouts_init+0x3c>)
 800e698:	f000 f80e 	bl	800e6b8 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800e69c:	687b      	ldr	r3, [r7, #4]
 800e69e:	3301      	adds	r3, #1
 800e6a0:	607b      	str	r3, [r7, #4]
 800e6a2:	687b      	ldr	r3, [r7, #4]
 800e6a4:	2b04      	cmp	r3, #4
 800e6a6:	d9ed      	bls.n	800e684 <sys_timeouts_init+0xc>
  }
}
 800e6a8:	bf00      	nop
 800e6aa:	3708      	adds	r7, #8
 800e6ac:	46bd      	mov	sp, r7
 800e6ae:	bd80      	pop	{r7, pc}
 800e6b0:	08017570 	.word	0x08017570
 800e6b4:	0800e615 	.word	0x0800e615

0800e6b8 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800e6b8:	b580      	push	{r7, lr}
 800e6ba:	b086      	sub	sp, #24
 800e6bc:	af00      	add	r7, sp, #0
 800e6be:	60f8      	str	r0, [r7, #12]
 800e6c0:	60b9      	str	r1, [r7, #8]
 800e6c2:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 800e6c4:	68fb      	ldr	r3, [r7, #12]
 800e6c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e6ca:	d306      	bcc.n	800e6da <sys_timeout+0x22>
 800e6cc:	4b0a      	ldr	r3, [pc, #40]	; (800e6f8 <sys_timeout+0x40>)
 800e6ce:	f240 1229 	movw	r2, #297	; 0x129
 800e6d2:	490a      	ldr	r1, [pc, #40]	; (800e6fc <sys_timeout+0x44>)
 800e6d4:	480a      	ldr	r0, [pc, #40]	; (800e700 <sys_timeout+0x48>)
 800e6d6:	f005 f81d 	bl	8013714 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800e6da:	f7f5 fe19 	bl	8004310 <sys_now>
 800e6de:	4602      	mov	r2, r0
 800e6e0:	68fb      	ldr	r3, [r7, #12]
 800e6e2:	4413      	add	r3, r2
 800e6e4:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 800e6e6:	687a      	ldr	r2, [r7, #4]
 800e6e8:	68b9      	ldr	r1, [r7, #8]
 800e6ea:	6978      	ldr	r0, [r7, #20]
 800e6ec:	f7ff ff24 	bl	800e538 <sys_timeout_abs>
#endif
}
 800e6f0:	bf00      	nop
 800e6f2:	3718      	adds	r7, #24
 800e6f4:	46bd      	mov	sp, r7
 800e6f6:	bd80      	pop	{r7, pc}
 800e6f8:	080165b0 	.word	0x080165b0
 800e6fc:	0801664c 	.word	0x0801664c
 800e700:	08016624 	.word	0x08016624

0800e704 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 800e704:	b580      	push	{r7, lr}
 800e706:	b084      	sub	sp, #16
 800e708:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 800e70a:	f7f5 fe01 	bl	8004310 <sys_now>
 800e70e:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 800e710:	4b17      	ldr	r3, [pc, #92]	; (800e770 <sys_check_timeouts+0x6c>)
 800e712:	681b      	ldr	r3, [r3, #0]
 800e714:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 800e716:	68bb      	ldr	r3, [r7, #8]
 800e718:	2b00      	cmp	r3, #0
 800e71a:	d022      	beq.n	800e762 <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 800e71c:	68bb      	ldr	r3, [r7, #8]
 800e71e:	685b      	ldr	r3, [r3, #4]
 800e720:	68fa      	ldr	r2, [r7, #12]
 800e722:	1ad3      	subs	r3, r2, r3
 800e724:	0fdb      	lsrs	r3, r3, #31
 800e726:	f003 0301 	and.w	r3, r3, #1
 800e72a:	b2db      	uxtb	r3, r3
 800e72c:	2b00      	cmp	r3, #0
 800e72e:	d11a      	bne.n	800e766 <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 800e730:	68bb      	ldr	r3, [r7, #8]
 800e732:	681b      	ldr	r3, [r3, #0]
 800e734:	4a0e      	ldr	r2, [pc, #56]	; (800e770 <sys_check_timeouts+0x6c>)
 800e736:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 800e738:	68bb      	ldr	r3, [r7, #8]
 800e73a:	689b      	ldr	r3, [r3, #8]
 800e73c:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 800e73e:	68bb      	ldr	r3, [r7, #8]
 800e740:	68db      	ldr	r3, [r3, #12]
 800e742:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 800e744:	68bb      	ldr	r3, [r7, #8]
 800e746:	685b      	ldr	r3, [r3, #4]
 800e748:	4a0a      	ldr	r2, [pc, #40]	; (800e774 <sys_check_timeouts+0x70>)
 800e74a:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800e74c:	68b9      	ldr	r1, [r7, #8]
 800e74e:	200a      	movs	r0, #10
 800e750:	f7f9 fc22 	bl	8007f98 <memp_free>
    if (handler != NULL) {
 800e754:	687b      	ldr	r3, [r7, #4]
 800e756:	2b00      	cmp	r3, #0
 800e758:	d0da      	beq.n	800e710 <sys_check_timeouts+0xc>
      handler(arg);
 800e75a:	687b      	ldr	r3, [r7, #4]
 800e75c:	6838      	ldr	r0, [r7, #0]
 800e75e:	4798      	blx	r3
  do {
 800e760:	e7d6      	b.n	800e710 <sys_check_timeouts+0xc>
      return;
 800e762:	bf00      	nop
 800e764:	e000      	b.n	800e768 <sys_check_timeouts+0x64>
      return;
 800e766:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 800e768:	3710      	adds	r7, #16
 800e76a:	46bd      	mov	sp, r7
 800e76c:	bd80      	pop	{r7, pc}
 800e76e:	bf00      	nop
 800e770:	200084d4 	.word	0x200084d4
 800e774:	200084d8 	.word	0x200084d8

0800e778 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 800e778:	b580      	push	{r7, lr}
 800e77a:	b082      	sub	sp, #8
 800e77c:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 800e77e:	4b16      	ldr	r3, [pc, #88]	; (800e7d8 <sys_timeouts_sleeptime+0x60>)
 800e780:	681b      	ldr	r3, [r3, #0]
 800e782:	2b00      	cmp	r3, #0
 800e784:	d102      	bne.n	800e78c <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 800e786:	f04f 33ff 	mov.w	r3, #4294967295
 800e78a:	e020      	b.n	800e7ce <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 800e78c:	f7f5 fdc0 	bl	8004310 <sys_now>
 800e790:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 800e792:	4b11      	ldr	r3, [pc, #68]	; (800e7d8 <sys_timeouts_sleeptime+0x60>)
 800e794:	681b      	ldr	r3, [r3, #0]
 800e796:	685a      	ldr	r2, [r3, #4]
 800e798:	687b      	ldr	r3, [r7, #4]
 800e79a:	1ad3      	subs	r3, r2, r3
 800e79c:	0fdb      	lsrs	r3, r3, #31
 800e79e:	f003 0301 	and.w	r3, r3, #1
 800e7a2:	b2db      	uxtb	r3, r3
 800e7a4:	2b00      	cmp	r3, #0
 800e7a6:	d001      	beq.n	800e7ac <sys_timeouts_sleeptime+0x34>
    return 0;
 800e7a8:	2300      	movs	r3, #0
 800e7aa:	e010      	b.n	800e7ce <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 800e7ac:	4b0a      	ldr	r3, [pc, #40]	; (800e7d8 <sys_timeouts_sleeptime+0x60>)
 800e7ae:	681b      	ldr	r3, [r3, #0]
 800e7b0:	685a      	ldr	r2, [r3, #4]
 800e7b2:	687b      	ldr	r3, [r7, #4]
 800e7b4:	1ad3      	subs	r3, r2, r3
 800e7b6:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 800e7b8:	683b      	ldr	r3, [r7, #0]
 800e7ba:	2b00      	cmp	r3, #0
 800e7bc:	da06      	bge.n	800e7cc <sys_timeouts_sleeptime+0x54>
 800e7be:	4b07      	ldr	r3, [pc, #28]	; (800e7dc <sys_timeouts_sleeptime+0x64>)
 800e7c0:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 800e7c4:	4906      	ldr	r1, [pc, #24]	; (800e7e0 <sys_timeouts_sleeptime+0x68>)
 800e7c6:	4807      	ldr	r0, [pc, #28]	; (800e7e4 <sys_timeouts_sleeptime+0x6c>)
 800e7c8:	f004 ffa4 	bl	8013714 <iprintf>
    return ret;
 800e7cc:	683b      	ldr	r3, [r7, #0]
  }
}
 800e7ce:	4618      	mov	r0, r3
 800e7d0:	3708      	adds	r7, #8
 800e7d2:	46bd      	mov	sp, r7
 800e7d4:	bd80      	pop	{r7, pc}
 800e7d6:	bf00      	nop
 800e7d8:	200084d4 	.word	0x200084d4
 800e7dc:	080165b0 	.word	0x080165b0
 800e7e0:	08016684 	.word	0x08016684
 800e7e4:	08016624 	.word	0x08016624

0800e7e8 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800e7e8:	b580      	push	{r7, lr}
 800e7ea:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800e7ec:	f004 ffaa 	bl	8013744 <rand>
 800e7f0:	4603      	mov	r3, r0
 800e7f2:	b29b      	uxth	r3, r3
 800e7f4:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800e7f8:	b29b      	uxth	r3, r3
 800e7fa:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800e7fe:	b29a      	uxth	r2, r3
 800e800:	4b01      	ldr	r3, [pc, #4]	; (800e808 <udp_init+0x20>)
 800e802:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800e804:	bf00      	nop
 800e806:	bd80      	pop	{r7, pc}
 800e808:	20000018 	.word	0x20000018

0800e80c <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 800e80c:	b480      	push	{r7}
 800e80e:	b083      	sub	sp, #12
 800e810:	af00      	add	r7, sp, #0
  u16_t n = 0;
 800e812:	2300      	movs	r3, #0
 800e814:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 800e816:	4b17      	ldr	r3, [pc, #92]	; (800e874 <udp_new_port+0x68>)
 800e818:	881b      	ldrh	r3, [r3, #0]
 800e81a:	1c5a      	adds	r2, r3, #1
 800e81c:	b291      	uxth	r1, r2
 800e81e:	4a15      	ldr	r2, [pc, #84]	; (800e874 <udp_new_port+0x68>)
 800e820:	8011      	strh	r1, [r2, #0]
 800e822:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e826:	4293      	cmp	r3, r2
 800e828:	d103      	bne.n	800e832 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 800e82a:	4b12      	ldr	r3, [pc, #72]	; (800e874 <udp_new_port+0x68>)
 800e82c:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800e830:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800e832:	4b11      	ldr	r3, [pc, #68]	; (800e878 <udp_new_port+0x6c>)
 800e834:	681b      	ldr	r3, [r3, #0]
 800e836:	603b      	str	r3, [r7, #0]
 800e838:	e011      	b.n	800e85e <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 800e83a:	683b      	ldr	r3, [r7, #0]
 800e83c:	8a5a      	ldrh	r2, [r3, #18]
 800e83e:	4b0d      	ldr	r3, [pc, #52]	; (800e874 <udp_new_port+0x68>)
 800e840:	881b      	ldrh	r3, [r3, #0]
 800e842:	429a      	cmp	r2, r3
 800e844:	d108      	bne.n	800e858 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 800e846:	88fb      	ldrh	r3, [r7, #6]
 800e848:	3301      	adds	r3, #1
 800e84a:	80fb      	strh	r3, [r7, #6]
 800e84c:	88fb      	ldrh	r3, [r7, #6]
 800e84e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800e852:	d3e0      	bcc.n	800e816 <udp_new_port+0xa>
        return 0;
 800e854:	2300      	movs	r3, #0
 800e856:	e007      	b.n	800e868 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800e858:	683b      	ldr	r3, [r7, #0]
 800e85a:	68db      	ldr	r3, [r3, #12]
 800e85c:	603b      	str	r3, [r7, #0]
 800e85e:	683b      	ldr	r3, [r7, #0]
 800e860:	2b00      	cmp	r3, #0
 800e862:	d1ea      	bne.n	800e83a <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 800e864:	4b03      	ldr	r3, [pc, #12]	; (800e874 <udp_new_port+0x68>)
 800e866:	881b      	ldrh	r3, [r3, #0]
}
 800e868:	4618      	mov	r0, r3
 800e86a:	370c      	adds	r7, #12
 800e86c:	46bd      	mov	sp, r7
 800e86e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e872:	4770      	bx	lr
 800e874:	20000018 	.word	0x20000018
 800e878:	2000eefc 	.word	0x2000eefc

0800e87c <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 800e87c:	b580      	push	{r7, lr}
 800e87e:	b084      	sub	sp, #16
 800e880:	af00      	add	r7, sp, #0
 800e882:	60f8      	str	r0, [r7, #12]
 800e884:	60b9      	str	r1, [r7, #8]
 800e886:	4613      	mov	r3, r2
 800e888:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 800e88a:	68fb      	ldr	r3, [r7, #12]
 800e88c:	2b00      	cmp	r3, #0
 800e88e:	d105      	bne.n	800e89c <udp_input_local_match+0x20>
 800e890:	4b27      	ldr	r3, [pc, #156]	; (800e930 <udp_input_local_match+0xb4>)
 800e892:	2287      	movs	r2, #135	; 0x87
 800e894:	4927      	ldr	r1, [pc, #156]	; (800e934 <udp_input_local_match+0xb8>)
 800e896:	4828      	ldr	r0, [pc, #160]	; (800e938 <udp_input_local_match+0xbc>)
 800e898:	f004 ff3c 	bl	8013714 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800e89c:	68bb      	ldr	r3, [r7, #8]
 800e89e:	2b00      	cmp	r3, #0
 800e8a0:	d105      	bne.n	800e8ae <udp_input_local_match+0x32>
 800e8a2:	4b23      	ldr	r3, [pc, #140]	; (800e930 <udp_input_local_match+0xb4>)
 800e8a4:	2288      	movs	r2, #136	; 0x88
 800e8a6:	4925      	ldr	r1, [pc, #148]	; (800e93c <udp_input_local_match+0xc0>)
 800e8a8:	4823      	ldr	r0, [pc, #140]	; (800e938 <udp_input_local_match+0xbc>)
 800e8aa:	f004 ff33 	bl	8013714 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800e8ae:	68fb      	ldr	r3, [r7, #12]
 800e8b0:	7a1b      	ldrb	r3, [r3, #8]
 800e8b2:	2b00      	cmp	r3, #0
 800e8b4:	d00b      	beq.n	800e8ce <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800e8b6:	68fb      	ldr	r3, [r7, #12]
 800e8b8:	7a1a      	ldrb	r2, [r3, #8]
 800e8ba:	4b21      	ldr	r3, [pc, #132]	; (800e940 <udp_input_local_match+0xc4>)
 800e8bc:	685b      	ldr	r3, [r3, #4]
 800e8be:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800e8c2:	3301      	adds	r3, #1
 800e8c4:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800e8c6:	429a      	cmp	r2, r3
 800e8c8:	d001      	beq.n	800e8ce <udp_input_local_match+0x52>
    return 0;
 800e8ca:	2300      	movs	r3, #0
 800e8cc:	e02b      	b.n	800e926 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 800e8ce:	79fb      	ldrb	r3, [r7, #7]
 800e8d0:	2b00      	cmp	r3, #0
 800e8d2:	d018      	beq.n	800e906 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800e8d4:	68fb      	ldr	r3, [r7, #12]
 800e8d6:	2b00      	cmp	r3, #0
 800e8d8:	d013      	beq.n	800e902 <udp_input_local_match+0x86>
 800e8da:	68fb      	ldr	r3, [r7, #12]
 800e8dc:	681b      	ldr	r3, [r3, #0]
 800e8de:	2b00      	cmp	r3, #0
 800e8e0:	d00f      	beq.n	800e902 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800e8e2:	4b17      	ldr	r3, [pc, #92]	; (800e940 <udp_input_local_match+0xc4>)
 800e8e4:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800e8e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e8ea:	d00a      	beq.n	800e902 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800e8ec:	68fb      	ldr	r3, [r7, #12]
 800e8ee:	681a      	ldr	r2, [r3, #0]
 800e8f0:	4b13      	ldr	r3, [pc, #76]	; (800e940 <udp_input_local_match+0xc4>)
 800e8f2:	695b      	ldr	r3, [r3, #20]
 800e8f4:	405a      	eors	r2, r3
 800e8f6:	68bb      	ldr	r3, [r7, #8]
 800e8f8:	3308      	adds	r3, #8
 800e8fa:	681b      	ldr	r3, [r3, #0]
 800e8fc:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800e8fe:	2b00      	cmp	r3, #0
 800e900:	d110      	bne.n	800e924 <udp_input_local_match+0xa8>
          return 1;
 800e902:	2301      	movs	r3, #1
 800e904:	e00f      	b.n	800e926 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800e906:	68fb      	ldr	r3, [r7, #12]
 800e908:	2b00      	cmp	r3, #0
 800e90a:	d009      	beq.n	800e920 <udp_input_local_match+0xa4>
 800e90c:	68fb      	ldr	r3, [r7, #12]
 800e90e:	681b      	ldr	r3, [r3, #0]
 800e910:	2b00      	cmp	r3, #0
 800e912:	d005      	beq.n	800e920 <udp_input_local_match+0xa4>
 800e914:	68fb      	ldr	r3, [r7, #12]
 800e916:	681a      	ldr	r2, [r3, #0]
 800e918:	4b09      	ldr	r3, [pc, #36]	; (800e940 <udp_input_local_match+0xc4>)
 800e91a:	695b      	ldr	r3, [r3, #20]
 800e91c:	429a      	cmp	r2, r3
 800e91e:	d101      	bne.n	800e924 <udp_input_local_match+0xa8>
        return 1;
 800e920:	2301      	movs	r3, #1
 800e922:	e000      	b.n	800e926 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 800e924:	2300      	movs	r3, #0
}
 800e926:	4618      	mov	r0, r3
 800e928:	3710      	adds	r7, #16
 800e92a:	46bd      	mov	sp, r7
 800e92c:	bd80      	pop	{r7, pc}
 800e92e:	bf00      	nop
 800e930:	08016698 	.word	0x08016698
 800e934:	080166c8 	.word	0x080166c8
 800e938:	080166ec 	.word	0x080166ec
 800e93c:	08016714 	.word	0x08016714
 800e940:	2000b7b0 	.word	0x2000b7b0

0800e944 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800e944:	b590      	push	{r4, r7, lr}
 800e946:	b08d      	sub	sp, #52	; 0x34
 800e948:	af02      	add	r7, sp, #8
 800e94a:	6078      	str	r0, [r7, #4]
 800e94c:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 800e94e:	2300      	movs	r3, #0
 800e950:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 800e952:	687b      	ldr	r3, [r7, #4]
 800e954:	2b00      	cmp	r3, #0
 800e956:	d105      	bne.n	800e964 <udp_input+0x20>
 800e958:	4b7c      	ldr	r3, [pc, #496]	; (800eb4c <udp_input+0x208>)
 800e95a:	22cf      	movs	r2, #207	; 0xcf
 800e95c:	497c      	ldr	r1, [pc, #496]	; (800eb50 <udp_input+0x20c>)
 800e95e:	487d      	ldr	r0, [pc, #500]	; (800eb54 <udp_input+0x210>)
 800e960:	f004 fed8 	bl	8013714 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 800e964:	683b      	ldr	r3, [r7, #0]
 800e966:	2b00      	cmp	r3, #0
 800e968:	d105      	bne.n	800e976 <udp_input+0x32>
 800e96a:	4b78      	ldr	r3, [pc, #480]	; (800eb4c <udp_input+0x208>)
 800e96c:	22d0      	movs	r2, #208	; 0xd0
 800e96e:	497a      	ldr	r1, [pc, #488]	; (800eb58 <udp_input+0x214>)
 800e970:	4878      	ldr	r0, [pc, #480]	; (800eb54 <udp_input+0x210>)
 800e972:	f004 fecf 	bl	8013714 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800e976:	687b      	ldr	r3, [r7, #4]
 800e978:	895b      	ldrh	r3, [r3, #10]
 800e97a:	2b07      	cmp	r3, #7
 800e97c:	d803      	bhi.n	800e986 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 800e97e:	6878      	ldr	r0, [r7, #4]
 800e980:	f7fa f9b6 	bl	8008cf0 <pbuf_free>
    goto end;
 800e984:	e0de      	b.n	800eb44 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 800e986:	687b      	ldr	r3, [r7, #4]
 800e988:	685b      	ldr	r3, [r3, #4]
 800e98a:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800e98c:	4b73      	ldr	r3, [pc, #460]	; (800eb5c <udp_input+0x218>)
 800e98e:	695a      	ldr	r2, [r3, #20]
 800e990:	4b72      	ldr	r3, [pc, #456]	; (800eb5c <udp_input+0x218>)
 800e992:	681b      	ldr	r3, [r3, #0]
 800e994:	4619      	mov	r1, r3
 800e996:	4610      	mov	r0, r2
 800e998:	f003 fe14 	bl	80125c4 <ip4_addr_isbroadcast_u32>
 800e99c:	4603      	mov	r3, r0
 800e99e:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 800e9a0:	697b      	ldr	r3, [r7, #20]
 800e9a2:	881b      	ldrh	r3, [r3, #0]
 800e9a4:	b29b      	uxth	r3, r3
 800e9a6:	4618      	mov	r0, r3
 800e9a8:	f7f8 fdee 	bl	8007588 <lwip_htons>
 800e9ac:	4603      	mov	r3, r0
 800e9ae:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 800e9b0:	697b      	ldr	r3, [r7, #20]
 800e9b2:	885b      	ldrh	r3, [r3, #2]
 800e9b4:	b29b      	uxth	r3, r3
 800e9b6:	4618      	mov	r0, r3
 800e9b8:	f7f8 fde6 	bl	8007588 <lwip_htons>
 800e9bc:	4603      	mov	r3, r0
 800e9be:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 800e9c0:	2300      	movs	r3, #0
 800e9c2:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 800e9c4:	2300      	movs	r3, #0
 800e9c6:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 800e9c8:	2300      	movs	r3, #0
 800e9ca:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800e9cc:	4b64      	ldr	r3, [pc, #400]	; (800eb60 <udp_input+0x21c>)
 800e9ce:	681b      	ldr	r3, [r3, #0]
 800e9d0:	627b      	str	r3, [r7, #36]	; 0x24
 800e9d2:	e054      	b.n	800ea7e <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 800e9d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9d6:	8a5b      	ldrh	r3, [r3, #18]
 800e9d8:	89fa      	ldrh	r2, [r7, #14]
 800e9da:	429a      	cmp	r2, r3
 800e9dc:	d14a      	bne.n	800ea74 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 800e9de:	7cfb      	ldrb	r3, [r7, #19]
 800e9e0:	461a      	mov	r2, r3
 800e9e2:	6839      	ldr	r1, [r7, #0]
 800e9e4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e9e6:	f7ff ff49 	bl	800e87c <udp_input_local_match>
 800e9ea:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 800e9ec:	2b00      	cmp	r3, #0
 800e9ee:	d041      	beq.n	800ea74 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 800e9f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9f2:	7c1b      	ldrb	r3, [r3, #16]
 800e9f4:	f003 0304 	and.w	r3, r3, #4
 800e9f8:	2b00      	cmp	r3, #0
 800e9fa:	d11d      	bne.n	800ea38 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 800e9fc:	69fb      	ldr	r3, [r7, #28]
 800e9fe:	2b00      	cmp	r3, #0
 800ea00:	d102      	bne.n	800ea08 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 800ea02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea04:	61fb      	str	r3, [r7, #28]
 800ea06:	e017      	b.n	800ea38 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 800ea08:	7cfb      	ldrb	r3, [r7, #19]
 800ea0a:	2b00      	cmp	r3, #0
 800ea0c:	d014      	beq.n	800ea38 <udp_input+0xf4>
 800ea0e:	4b53      	ldr	r3, [pc, #332]	; (800eb5c <udp_input+0x218>)
 800ea10:	695b      	ldr	r3, [r3, #20]
 800ea12:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ea16:	d10f      	bne.n	800ea38 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 800ea18:	69fb      	ldr	r3, [r7, #28]
 800ea1a:	681a      	ldr	r2, [r3, #0]
 800ea1c:	683b      	ldr	r3, [r7, #0]
 800ea1e:	3304      	adds	r3, #4
 800ea20:	681b      	ldr	r3, [r3, #0]
 800ea22:	429a      	cmp	r2, r3
 800ea24:	d008      	beq.n	800ea38 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 800ea26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea28:	681a      	ldr	r2, [r3, #0]
 800ea2a:	683b      	ldr	r3, [r7, #0]
 800ea2c:	3304      	adds	r3, #4
 800ea2e:	681b      	ldr	r3, [r3, #0]
 800ea30:	429a      	cmp	r2, r3
 800ea32:	d101      	bne.n	800ea38 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 800ea34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea36:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 800ea38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea3a:	8a9b      	ldrh	r3, [r3, #20]
 800ea3c:	8a3a      	ldrh	r2, [r7, #16]
 800ea3e:	429a      	cmp	r2, r3
 800ea40:	d118      	bne.n	800ea74 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800ea42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea44:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 800ea46:	2b00      	cmp	r3, #0
 800ea48:	d005      	beq.n	800ea56 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800ea4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea4c:	685a      	ldr	r2, [r3, #4]
 800ea4e:	4b43      	ldr	r3, [pc, #268]	; (800eb5c <udp_input+0x218>)
 800ea50:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 800ea52:	429a      	cmp	r2, r3
 800ea54:	d10e      	bne.n	800ea74 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 800ea56:	6a3b      	ldr	r3, [r7, #32]
 800ea58:	2b00      	cmp	r3, #0
 800ea5a:	d014      	beq.n	800ea86 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 800ea5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea5e:	68da      	ldr	r2, [r3, #12]
 800ea60:	6a3b      	ldr	r3, [r7, #32]
 800ea62:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 800ea64:	4b3e      	ldr	r3, [pc, #248]	; (800eb60 <udp_input+0x21c>)
 800ea66:	681a      	ldr	r2, [r3, #0]
 800ea68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea6a:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 800ea6c:	4a3c      	ldr	r2, [pc, #240]	; (800eb60 <udp_input+0x21c>)
 800ea6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea70:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 800ea72:	e008      	b.n	800ea86 <udp_input+0x142>
      }
    }

    prev = pcb;
 800ea74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea76:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800ea78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea7a:	68db      	ldr	r3, [r3, #12]
 800ea7c:	627b      	str	r3, [r7, #36]	; 0x24
 800ea7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea80:	2b00      	cmp	r3, #0
 800ea82:	d1a7      	bne.n	800e9d4 <udp_input+0x90>
 800ea84:	e000      	b.n	800ea88 <udp_input+0x144>
        break;
 800ea86:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 800ea88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea8a:	2b00      	cmp	r3, #0
 800ea8c:	d101      	bne.n	800ea92 <udp_input+0x14e>
    pcb = uncon_pcb;
 800ea8e:	69fb      	ldr	r3, [r7, #28]
 800ea90:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 800ea92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea94:	2b00      	cmp	r3, #0
 800ea96:	d002      	beq.n	800ea9e <udp_input+0x15a>
    for_us = 1;
 800ea98:	2301      	movs	r3, #1
 800ea9a:	76fb      	strb	r3, [r7, #27]
 800ea9c:	e00a      	b.n	800eab4 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 800ea9e:	683b      	ldr	r3, [r7, #0]
 800eaa0:	3304      	adds	r3, #4
 800eaa2:	681a      	ldr	r2, [r3, #0]
 800eaa4:	4b2d      	ldr	r3, [pc, #180]	; (800eb5c <udp_input+0x218>)
 800eaa6:	695b      	ldr	r3, [r3, #20]
 800eaa8:	429a      	cmp	r2, r3
 800eaaa:	bf0c      	ite	eq
 800eaac:	2301      	moveq	r3, #1
 800eaae:	2300      	movne	r3, #0
 800eab0:	b2db      	uxtb	r3, r3
 800eab2:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 800eab4:	7efb      	ldrb	r3, [r7, #27]
 800eab6:	2b00      	cmp	r3, #0
 800eab8:	d041      	beq.n	800eb3e <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 800eaba:	2108      	movs	r1, #8
 800eabc:	6878      	ldr	r0, [r7, #4]
 800eabe:	f7fa f891 	bl	8008be4 <pbuf_remove_header>
 800eac2:	4603      	mov	r3, r0
 800eac4:	2b00      	cmp	r3, #0
 800eac6:	d00a      	beq.n	800eade <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 800eac8:	4b20      	ldr	r3, [pc, #128]	; (800eb4c <udp_input+0x208>)
 800eaca:	f44f 72b8 	mov.w	r2, #368	; 0x170
 800eace:	4925      	ldr	r1, [pc, #148]	; (800eb64 <udp_input+0x220>)
 800ead0:	4820      	ldr	r0, [pc, #128]	; (800eb54 <udp_input+0x210>)
 800ead2:	f004 fe1f 	bl	8013714 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 800ead6:	6878      	ldr	r0, [r7, #4]
 800ead8:	f7fa f90a 	bl	8008cf0 <pbuf_free>
      goto end;
 800eadc:	e032      	b.n	800eb44 <udp_input+0x200>
    }

    if (pcb != NULL) {
 800eade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eae0:	2b00      	cmp	r3, #0
 800eae2:	d012      	beq.n	800eb0a <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 800eae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eae6:	699b      	ldr	r3, [r3, #24]
 800eae8:	2b00      	cmp	r3, #0
 800eaea:	d00a      	beq.n	800eb02 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800eaec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eaee:	699c      	ldr	r4, [r3, #24]
 800eaf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eaf2:	69d8      	ldr	r0, [r3, #28]
 800eaf4:	8a3b      	ldrh	r3, [r7, #16]
 800eaf6:	9300      	str	r3, [sp, #0]
 800eaf8:	4b1b      	ldr	r3, [pc, #108]	; (800eb68 <udp_input+0x224>)
 800eafa:	687a      	ldr	r2, [r7, #4]
 800eafc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800eafe:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 800eb00:	e021      	b.n	800eb46 <udp_input+0x202>
        pbuf_free(p);
 800eb02:	6878      	ldr	r0, [r7, #4]
 800eb04:	f7fa f8f4 	bl	8008cf0 <pbuf_free>
        goto end;
 800eb08:	e01c      	b.n	800eb44 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800eb0a:	7cfb      	ldrb	r3, [r7, #19]
 800eb0c:	2b00      	cmp	r3, #0
 800eb0e:	d112      	bne.n	800eb36 <udp_input+0x1f2>
 800eb10:	4b12      	ldr	r3, [pc, #72]	; (800eb5c <udp_input+0x218>)
 800eb12:	695b      	ldr	r3, [r3, #20]
 800eb14:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800eb18:	2be0      	cmp	r3, #224	; 0xe0
 800eb1a:	d00c      	beq.n	800eb36 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800eb1c:	4b0f      	ldr	r3, [pc, #60]	; (800eb5c <udp_input+0x218>)
 800eb1e:	899b      	ldrh	r3, [r3, #12]
 800eb20:	3308      	adds	r3, #8
 800eb22:	b29b      	uxth	r3, r3
 800eb24:	b21b      	sxth	r3, r3
 800eb26:	4619      	mov	r1, r3
 800eb28:	6878      	ldr	r0, [r7, #4]
 800eb2a:	f7fa f8ce 	bl	8008cca <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800eb2e:	2103      	movs	r1, #3
 800eb30:	6878      	ldr	r0, [r7, #4]
 800eb32:	f003 fa0b 	bl	8011f4c <icmp_dest_unreach>
      pbuf_free(p);
 800eb36:	6878      	ldr	r0, [r7, #4]
 800eb38:	f7fa f8da 	bl	8008cf0 <pbuf_free>
  return;
 800eb3c:	e003      	b.n	800eb46 <udp_input+0x202>
    pbuf_free(p);
 800eb3e:	6878      	ldr	r0, [r7, #4]
 800eb40:	f7fa f8d6 	bl	8008cf0 <pbuf_free>
  return;
 800eb44:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800eb46:	372c      	adds	r7, #44	; 0x2c
 800eb48:	46bd      	mov	sp, r7
 800eb4a:	bd90      	pop	{r4, r7, pc}
 800eb4c:	08016698 	.word	0x08016698
 800eb50:	0801673c 	.word	0x0801673c
 800eb54:	080166ec 	.word	0x080166ec
 800eb58:	08016754 	.word	0x08016754
 800eb5c:	2000b7b0 	.word	0x2000b7b0
 800eb60:	2000eefc 	.word	0x2000eefc
 800eb64:	08016770 	.word	0x08016770
 800eb68:	2000b7c0 	.word	0x2000b7c0

0800eb6c <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 800eb6c:	b580      	push	{r7, lr}
 800eb6e:	b088      	sub	sp, #32
 800eb70:	af02      	add	r7, sp, #8
 800eb72:	60f8      	str	r0, [r7, #12]
 800eb74:	60b9      	str	r1, [r7, #8]
 800eb76:	607a      	str	r2, [r7, #4]
 800eb78:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 800eb7a:	68fb      	ldr	r3, [r7, #12]
 800eb7c:	2b00      	cmp	r3, #0
 800eb7e:	d109      	bne.n	800eb94 <udp_sendto_if+0x28>
 800eb80:	4b2e      	ldr	r3, [pc, #184]	; (800ec3c <udp_sendto_if+0xd0>)
 800eb82:	f44f 7220 	mov.w	r2, #640	; 0x280
 800eb86:	492e      	ldr	r1, [pc, #184]	; (800ec40 <udp_sendto_if+0xd4>)
 800eb88:	482e      	ldr	r0, [pc, #184]	; (800ec44 <udp_sendto_if+0xd8>)
 800eb8a:	f004 fdc3 	bl	8013714 <iprintf>
 800eb8e:	f06f 030f 	mvn.w	r3, #15
 800eb92:	e04f      	b.n	800ec34 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 800eb94:	68bb      	ldr	r3, [r7, #8]
 800eb96:	2b00      	cmp	r3, #0
 800eb98:	d109      	bne.n	800ebae <udp_sendto_if+0x42>
 800eb9a:	4b28      	ldr	r3, [pc, #160]	; (800ec3c <udp_sendto_if+0xd0>)
 800eb9c:	f240 2281 	movw	r2, #641	; 0x281
 800eba0:	4929      	ldr	r1, [pc, #164]	; (800ec48 <udp_sendto_if+0xdc>)
 800eba2:	4828      	ldr	r0, [pc, #160]	; (800ec44 <udp_sendto_if+0xd8>)
 800eba4:	f004 fdb6 	bl	8013714 <iprintf>
 800eba8:	f06f 030f 	mvn.w	r3, #15
 800ebac:	e042      	b.n	800ec34 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800ebae:	687b      	ldr	r3, [r7, #4]
 800ebb0:	2b00      	cmp	r3, #0
 800ebb2:	d109      	bne.n	800ebc8 <udp_sendto_if+0x5c>
 800ebb4:	4b21      	ldr	r3, [pc, #132]	; (800ec3c <udp_sendto_if+0xd0>)
 800ebb6:	f240 2282 	movw	r2, #642	; 0x282
 800ebba:	4924      	ldr	r1, [pc, #144]	; (800ec4c <udp_sendto_if+0xe0>)
 800ebbc:	4821      	ldr	r0, [pc, #132]	; (800ec44 <udp_sendto_if+0xd8>)
 800ebbe:	f004 fda9 	bl	8013714 <iprintf>
 800ebc2:	f06f 030f 	mvn.w	r3, #15
 800ebc6:	e035      	b.n	800ec34 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 800ebc8:	6a3b      	ldr	r3, [r7, #32]
 800ebca:	2b00      	cmp	r3, #0
 800ebcc:	d109      	bne.n	800ebe2 <udp_sendto_if+0x76>
 800ebce:	4b1b      	ldr	r3, [pc, #108]	; (800ec3c <udp_sendto_if+0xd0>)
 800ebd0:	f240 2283 	movw	r2, #643	; 0x283
 800ebd4:	491e      	ldr	r1, [pc, #120]	; (800ec50 <udp_sendto_if+0xe4>)
 800ebd6:	481b      	ldr	r0, [pc, #108]	; (800ec44 <udp_sendto_if+0xd8>)
 800ebd8:	f004 fd9c 	bl	8013714 <iprintf>
 800ebdc:	f06f 030f 	mvn.w	r3, #15
 800ebe0:	e028      	b.n	800ec34 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800ebe2:	68fb      	ldr	r3, [r7, #12]
 800ebe4:	2b00      	cmp	r3, #0
 800ebe6:	d009      	beq.n	800ebfc <udp_sendto_if+0x90>
 800ebe8:	68fb      	ldr	r3, [r7, #12]
 800ebea:	681b      	ldr	r3, [r3, #0]
 800ebec:	2b00      	cmp	r3, #0
 800ebee:	d005      	beq.n	800ebfc <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 800ebf0:	68fb      	ldr	r3, [r7, #12]
 800ebf2:	681b      	ldr	r3, [r3, #0]
 800ebf4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800ebf8:	2be0      	cmp	r3, #224	; 0xe0
 800ebfa:	d103      	bne.n	800ec04 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 800ebfc:	6a3b      	ldr	r3, [r7, #32]
 800ebfe:	3304      	adds	r3, #4
 800ec00:	617b      	str	r3, [r7, #20]
 800ec02:	e00b      	b.n	800ec1c <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 800ec04:	68fb      	ldr	r3, [r7, #12]
 800ec06:	681a      	ldr	r2, [r3, #0]
 800ec08:	6a3b      	ldr	r3, [r7, #32]
 800ec0a:	3304      	adds	r3, #4
 800ec0c:	681b      	ldr	r3, [r3, #0]
 800ec0e:	429a      	cmp	r2, r3
 800ec10:	d002      	beq.n	800ec18 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 800ec12:	f06f 0303 	mvn.w	r3, #3
 800ec16:	e00d      	b.n	800ec34 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 800ec18:	68fb      	ldr	r3, [r7, #12]
 800ec1a:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 800ec1c:	887a      	ldrh	r2, [r7, #2]
 800ec1e:	697b      	ldr	r3, [r7, #20]
 800ec20:	9301      	str	r3, [sp, #4]
 800ec22:	6a3b      	ldr	r3, [r7, #32]
 800ec24:	9300      	str	r3, [sp, #0]
 800ec26:	4613      	mov	r3, r2
 800ec28:	687a      	ldr	r2, [r7, #4]
 800ec2a:	68b9      	ldr	r1, [r7, #8]
 800ec2c:	68f8      	ldr	r0, [r7, #12]
 800ec2e:	f000 f811 	bl	800ec54 <udp_sendto_if_src>
 800ec32:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 800ec34:	4618      	mov	r0, r3
 800ec36:	3718      	adds	r7, #24
 800ec38:	46bd      	mov	sp, r7
 800ec3a:	bd80      	pop	{r7, pc}
 800ec3c:	08016698 	.word	0x08016698
 800ec40:	0801680c 	.word	0x0801680c
 800ec44:	080166ec 	.word	0x080166ec
 800ec48:	08016828 	.word	0x08016828
 800ec4c:	08016844 	.word	0x08016844
 800ec50:	08016864 	.word	0x08016864

0800ec54 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 800ec54:	b580      	push	{r7, lr}
 800ec56:	b08c      	sub	sp, #48	; 0x30
 800ec58:	af04      	add	r7, sp, #16
 800ec5a:	60f8      	str	r0, [r7, #12]
 800ec5c:	60b9      	str	r1, [r7, #8]
 800ec5e:	607a      	str	r2, [r7, #4]
 800ec60:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 800ec62:	68fb      	ldr	r3, [r7, #12]
 800ec64:	2b00      	cmp	r3, #0
 800ec66:	d109      	bne.n	800ec7c <udp_sendto_if_src+0x28>
 800ec68:	4b65      	ldr	r3, [pc, #404]	; (800ee00 <udp_sendto_if_src+0x1ac>)
 800ec6a:	f240 22d1 	movw	r2, #721	; 0x2d1
 800ec6e:	4965      	ldr	r1, [pc, #404]	; (800ee04 <udp_sendto_if_src+0x1b0>)
 800ec70:	4865      	ldr	r0, [pc, #404]	; (800ee08 <udp_sendto_if_src+0x1b4>)
 800ec72:	f004 fd4f 	bl	8013714 <iprintf>
 800ec76:	f06f 030f 	mvn.w	r3, #15
 800ec7a:	e0bc      	b.n	800edf6 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 800ec7c:	68bb      	ldr	r3, [r7, #8]
 800ec7e:	2b00      	cmp	r3, #0
 800ec80:	d109      	bne.n	800ec96 <udp_sendto_if_src+0x42>
 800ec82:	4b5f      	ldr	r3, [pc, #380]	; (800ee00 <udp_sendto_if_src+0x1ac>)
 800ec84:	f240 22d2 	movw	r2, #722	; 0x2d2
 800ec88:	4960      	ldr	r1, [pc, #384]	; (800ee0c <udp_sendto_if_src+0x1b8>)
 800ec8a:	485f      	ldr	r0, [pc, #380]	; (800ee08 <udp_sendto_if_src+0x1b4>)
 800ec8c:	f004 fd42 	bl	8013714 <iprintf>
 800ec90:	f06f 030f 	mvn.w	r3, #15
 800ec94:	e0af      	b.n	800edf6 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800ec96:	687b      	ldr	r3, [r7, #4]
 800ec98:	2b00      	cmp	r3, #0
 800ec9a:	d109      	bne.n	800ecb0 <udp_sendto_if_src+0x5c>
 800ec9c:	4b58      	ldr	r3, [pc, #352]	; (800ee00 <udp_sendto_if_src+0x1ac>)
 800ec9e:	f240 22d3 	movw	r2, #723	; 0x2d3
 800eca2:	495b      	ldr	r1, [pc, #364]	; (800ee10 <udp_sendto_if_src+0x1bc>)
 800eca4:	4858      	ldr	r0, [pc, #352]	; (800ee08 <udp_sendto_if_src+0x1b4>)
 800eca6:	f004 fd35 	bl	8013714 <iprintf>
 800ecaa:	f06f 030f 	mvn.w	r3, #15
 800ecae:	e0a2      	b.n	800edf6 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 800ecb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ecb2:	2b00      	cmp	r3, #0
 800ecb4:	d109      	bne.n	800ecca <udp_sendto_if_src+0x76>
 800ecb6:	4b52      	ldr	r3, [pc, #328]	; (800ee00 <udp_sendto_if_src+0x1ac>)
 800ecb8:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 800ecbc:	4955      	ldr	r1, [pc, #340]	; (800ee14 <udp_sendto_if_src+0x1c0>)
 800ecbe:	4852      	ldr	r0, [pc, #328]	; (800ee08 <udp_sendto_if_src+0x1b4>)
 800ecc0:	f004 fd28 	bl	8013714 <iprintf>
 800ecc4:	f06f 030f 	mvn.w	r3, #15
 800ecc8:	e095      	b.n	800edf6 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 800ecca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eccc:	2b00      	cmp	r3, #0
 800ecce:	d109      	bne.n	800ece4 <udp_sendto_if_src+0x90>
 800ecd0:	4b4b      	ldr	r3, [pc, #300]	; (800ee00 <udp_sendto_if_src+0x1ac>)
 800ecd2:	f240 22d5 	movw	r2, #725	; 0x2d5
 800ecd6:	4950      	ldr	r1, [pc, #320]	; (800ee18 <udp_sendto_if_src+0x1c4>)
 800ecd8:	484b      	ldr	r0, [pc, #300]	; (800ee08 <udp_sendto_if_src+0x1b4>)
 800ecda:	f004 fd1b 	bl	8013714 <iprintf>
 800ecde:	f06f 030f 	mvn.w	r3, #15
 800ece2:	e088      	b.n	800edf6 <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 800ece4:	68fb      	ldr	r3, [r7, #12]
 800ece6:	8a5b      	ldrh	r3, [r3, #18]
 800ece8:	2b00      	cmp	r3, #0
 800ecea:	d10f      	bne.n	800ed0c <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800ecec:	68f9      	ldr	r1, [r7, #12]
 800ecee:	68fb      	ldr	r3, [r7, #12]
 800ecf0:	8a5b      	ldrh	r3, [r3, #18]
 800ecf2:	461a      	mov	r2, r3
 800ecf4:	68f8      	ldr	r0, [r7, #12]
 800ecf6:	f000 f893 	bl	800ee20 <udp_bind>
 800ecfa:	4603      	mov	r3, r0
 800ecfc:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 800ecfe:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800ed02:	2b00      	cmp	r3, #0
 800ed04:	d002      	beq.n	800ed0c <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 800ed06:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800ed0a:	e074      	b.n	800edf6 <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 800ed0c:	68bb      	ldr	r3, [r7, #8]
 800ed0e:	891b      	ldrh	r3, [r3, #8]
 800ed10:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 800ed14:	4293      	cmp	r3, r2
 800ed16:	d902      	bls.n	800ed1e <udp_sendto_if_src+0xca>
    return ERR_MEM;
 800ed18:	f04f 33ff 	mov.w	r3, #4294967295
 800ed1c:	e06b      	b.n	800edf6 <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 800ed1e:	2108      	movs	r1, #8
 800ed20:	68b8      	ldr	r0, [r7, #8]
 800ed22:	f7f9 ff4f 	bl	8008bc4 <pbuf_add_header>
 800ed26:	4603      	mov	r3, r0
 800ed28:	2b00      	cmp	r3, #0
 800ed2a:	d015      	beq.n	800ed58 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 800ed2c:	f44f 7220 	mov.w	r2, #640	; 0x280
 800ed30:	2108      	movs	r1, #8
 800ed32:	2022      	movs	r0, #34	; 0x22
 800ed34:	f7f9 fcfc 	bl	8008730 <pbuf_alloc>
 800ed38:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 800ed3a:	69fb      	ldr	r3, [r7, #28]
 800ed3c:	2b00      	cmp	r3, #0
 800ed3e:	d102      	bne.n	800ed46 <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 800ed40:	f04f 33ff 	mov.w	r3, #4294967295
 800ed44:	e057      	b.n	800edf6 <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 800ed46:	68bb      	ldr	r3, [r7, #8]
 800ed48:	891b      	ldrh	r3, [r3, #8]
 800ed4a:	2b00      	cmp	r3, #0
 800ed4c:	d006      	beq.n	800ed5c <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 800ed4e:	68b9      	ldr	r1, [r7, #8]
 800ed50:	69f8      	ldr	r0, [r7, #28]
 800ed52:	f7fa f8f1 	bl	8008f38 <pbuf_chain>
 800ed56:	e001      	b.n	800ed5c <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 800ed58:	68bb      	ldr	r3, [r7, #8]
 800ed5a:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 800ed5c:	69fb      	ldr	r3, [r7, #28]
 800ed5e:	895b      	ldrh	r3, [r3, #10]
 800ed60:	2b07      	cmp	r3, #7
 800ed62:	d806      	bhi.n	800ed72 <udp_sendto_if_src+0x11e>
 800ed64:	4b26      	ldr	r3, [pc, #152]	; (800ee00 <udp_sendto_if_src+0x1ac>)
 800ed66:	f240 320e 	movw	r2, #782	; 0x30e
 800ed6a:	492c      	ldr	r1, [pc, #176]	; (800ee1c <udp_sendto_if_src+0x1c8>)
 800ed6c:	4826      	ldr	r0, [pc, #152]	; (800ee08 <udp_sendto_if_src+0x1b4>)
 800ed6e:	f004 fcd1 	bl	8013714 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 800ed72:	69fb      	ldr	r3, [r7, #28]
 800ed74:	685b      	ldr	r3, [r3, #4]
 800ed76:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 800ed78:	68fb      	ldr	r3, [r7, #12]
 800ed7a:	8a5b      	ldrh	r3, [r3, #18]
 800ed7c:	4618      	mov	r0, r3
 800ed7e:	f7f8 fc03 	bl	8007588 <lwip_htons>
 800ed82:	4603      	mov	r3, r0
 800ed84:	461a      	mov	r2, r3
 800ed86:	697b      	ldr	r3, [r7, #20]
 800ed88:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 800ed8a:	887b      	ldrh	r3, [r7, #2]
 800ed8c:	4618      	mov	r0, r3
 800ed8e:	f7f8 fbfb 	bl	8007588 <lwip_htons>
 800ed92:	4603      	mov	r3, r0
 800ed94:	461a      	mov	r2, r3
 800ed96:	697b      	ldr	r3, [r7, #20]
 800ed98:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 800ed9a:	697b      	ldr	r3, [r7, #20]
 800ed9c:	2200      	movs	r2, #0
 800ed9e:	719a      	strb	r2, [r3, #6]
 800eda0:	2200      	movs	r2, #0
 800eda2:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 800eda4:	69fb      	ldr	r3, [r7, #28]
 800eda6:	891b      	ldrh	r3, [r3, #8]
 800eda8:	4618      	mov	r0, r3
 800edaa:	f7f8 fbed 	bl	8007588 <lwip_htons>
 800edae:	4603      	mov	r3, r0
 800edb0:	461a      	mov	r2, r3
 800edb2:	697b      	ldr	r3, [r7, #20]
 800edb4:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 800edb6:	2311      	movs	r3, #17
 800edb8:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 800edba:	68fb      	ldr	r3, [r7, #12]
 800edbc:	7adb      	ldrb	r3, [r3, #11]
 800edbe:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 800edc0:	68fb      	ldr	r3, [r7, #12]
 800edc2:	7a9b      	ldrb	r3, [r3, #10]
 800edc4:	7cb9      	ldrb	r1, [r7, #18]
 800edc6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800edc8:	9202      	str	r2, [sp, #8]
 800edca:	7cfa      	ldrb	r2, [r7, #19]
 800edcc:	9201      	str	r2, [sp, #4]
 800edce:	9300      	str	r3, [sp, #0]
 800edd0:	460b      	mov	r3, r1
 800edd2:	687a      	ldr	r2, [r7, #4]
 800edd4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800edd6:	69f8      	ldr	r0, [r7, #28]
 800edd8:	f003 fb46 	bl	8012468 <ip4_output_if_src>
 800eddc:	4603      	mov	r3, r0
 800edde:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 800ede0:	69fa      	ldr	r2, [r7, #28]
 800ede2:	68bb      	ldr	r3, [r7, #8]
 800ede4:	429a      	cmp	r2, r3
 800ede6:	d004      	beq.n	800edf2 <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 800ede8:	69f8      	ldr	r0, [r7, #28]
 800edea:	f7f9 ff81 	bl	8008cf0 <pbuf_free>
    q = NULL;
 800edee:	2300      	movs	r3, #0
 800edf0:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 800edf2:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 800edf6:	4618      	mov	r0, r3
 800edf8:	3720      	adds	r7, #32
 800edfa:	46bd      	mov	sp, r7
 800edfc:	bd80      	pop	{r7, pc}
 800edfe:	bf00      	nop
 800ee00:	08016698 	.word	0x08016698
 800ee04:	08016884 	.word	0x08016884
 800ee08:	080166ec 	.word	0x080166ec
 800ee0c:	080168a4 	.word	0x080168a4
 800ee10:	080168c4 	.word	0x080168c4
 800ee14:	080168e8 	.word	0x080168e8
 800ee18:	0801690c 	.word	0x0801690c
 800ee1c:	08016930 	.word	0x08016930

0800ee20 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800ee20:	b580      	push	{r7, lr}
 800ee22:	b086      	sub	sp, #24
 800ee24:	af00      	add	r7, sp, #0
 800ee26:	60f8      	str	r0, [r7, #12]
 800ee28:	60b9      	str	r1, [r7, #8]
 800ee2a:	4613      	mov	r3, r2
 800ee2c:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800ee2e:	68bb      	ldr	r3, [r7, #8]
 800ee30:	2b00      	cmp	r3, #0
 800ee32:	d101      	bne.n	800ee38 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 800ee34:	4b39      	ldr	r3, [pc, #228]	; (800ef1c <udp_bind+0xfc>)
 800ee36:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800ee38:	68fb      	ldr	r3, [r7, #12]
 800ee3a:	2b00      	cmp	r3, #0
 800ee3c:	d109      	bne.n	800ee52 <udp_bind+0x32>
 800ee3e:	4b38      	ldr	r3, [pc, #224]	; (800ef20 <udp_bind+0x100>)
 800ee40:	f240 32b7 	movw	r2, #951	; 0x3b7
 800ee44:	4937      	ldr	r1, [pc, #220]	; (800ef24 <udp_bind+0x104>)
 800ee46:	4838      	ldr	r0, [pc, #224]	; (800ef28 <udp_bind+0x108>)
 800ee48:	f004 fc64 	bl	8013714 <iprintf>
 800ee4c:	f06f 030f 	mvn.w	r3, #15
 800ee50:	e060      	b.n	800ef14 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 800ee52:	2300      	movs	r3, #0
 800ee54:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800ee56:	4b35      	ldr	r3, [pc, #212]	; (800ef2c <udp_bind+0x10c>)
 800ee58:	681b      	ldr	r3, [r3, #0]
 800ee5a:	617b      	str	r3, [r7, #20]
 800ee5c:	e009      	b.n	800ee72 <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 800ee5e:	68fa      	ldr	r2, [r7, #12]
 800ee60:	697b      	ldr	r3, [r7, #20]
 800ee62:	429a      	cmp	r2, r3
 800ee64:	d102      	bne.n	800ee6c <udp_bind+0x4c>
      rebind = 1;
 800ee66:	2301      	movs	r3, #1
 800ee68:	74fb      	strb	r3, [r7, #19]
      break;
 800ee6a:	e005      	b.n	800ee78 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800ee6c:	697b      	ldr	r3, [r7, #20]
 800ee6e:	68db      	ldr	r3, [r3, #12]
 800ee70:	617b      	str	r3, [r7, #20]
 800ee72:	697b      	ldr	r3, [r7, #20]
 800ee74:	2b00      	cmp	r3, #0
 800ee76:	d1f2      	bne.n	800ee5e <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 800ee78:	88fb      	ldrh	r3, [r7, #6]
 800ee7a:	2b00      	cmp	r3, #0
 800ee7c:	d109      	bne.n	800ee92 <udp_bind+0x72>
    port = udp_new_port();
 800ee7e:	f7ff fcc5 	bl	800e80c <udp_new_port>
 800ee82:	4603      	mov	r3, r0
 800ee84:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800ee86:	88fb      	ldrh	r3, [r7, #6]
 800ee88:	2b00      	cmp	r3, #0
 800ee8a:	d12c      	bne.n	800eee6 <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 800ee8c:	f06f 0307 	mvn.w	r3, #7
 800ee90:	e040      	b.n	800ef14 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800ee92:	4b26      	ldr	r3, [pc, #152]	; (800ef2c <udp_bind+0x10c>)
 800ee94:	681b      	ldr	r3, [r3, #0]
 800ee96:	617b      	str	r3, [r7, #20]
 800ee98:	e022      	b.n	800eee0 <udp_bind+0xc0>
      if (pcb != ipcb) {
 800ee9a:	68fa      	ldr	r2, [r7, #12]
 800ee9c:	697b      	ldr	r3, [r7, #20]
 800ee9e:	429a      	cmp	r2, r3
 800eea0:	d01b      	beq.n	800eeda <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 800eea2:	697b      	ldr	r3, [r7, #20]
 800eea4:	8a5b      	ldrh	r3, [r3, #18]
 800eea6:	88fa      	ldrh	r2, [r7, #6]
 800eea8:	429a      	cmp	r2, r3
 800eeaa:	d116      	bne.n	800eeda <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800eeac:	697b      	ldr	r3, [r7, #20]
 800eeae:	681a      	ldr	r2, [r3, #0]
 800eeb0:	68bb      	ldr	r3, [r7, #8]
 800eeb2:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 800eeb4:	429a      	cmp	r2, r3
 800eeb6:	d00d      	beq.n	800eed4 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800eeb8:	68bb      	ldr	r3, [r7, #8]
 800eeba:	2b00      	cmp	r3, #0
 800eebc:	d00a      	beq.n	800eed4 <udp_bind+0xb4>
 800eebe:	68bb      	ldr	r3, [r7, #8]
 800eec0:	681b      	ldr	r3, [r3, #0]
 800eec2:	2b00      	cmp	r3, #0
 800eec4:	d006      	beq.n	800eed4 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 800eec6:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800eec8:	2b00      	cmp	r3, #0
 800eeca:	d003      	beq.n	800eed4 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 800eecc:	697b      	ldr	r3, [r7, #20]
 800eece:	681b      	ldr	r3, [r3, #0]
 800eed0:	2b00      	cmp	r3, #0
 800eed2:	d102      	bne.n	800eeda <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 800eed4:	f06f 0307 	mvn.w	r3, #7
 800eed8:	e01c      	b.n	800ef14 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800eeda:	697b      	ldr	r3, [r7, #20]
 800eedc:	68db      	ldr	r3, [r3, #12]
 800eede:	617b      	str	r3, [r7, #20]
 800eee0:	697b      	ldr	r3, [r7, #20]
 800eee2:	2b00      	cmp	r3, #0
 800eee4:	d1d9      	bne.n	800ee9a <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 800eee6:	68bb      	ldr	r3, [r7, #8]
 800eee8:	2b00      	cmp	r3, #0
 800eeea:	d002      	beq.n	800eef2 <udp_bind+0xd2>
 800eeec:	68bb      	ldr	r3, [r7, #8]
 800eeee:	681b      	ldr	r3, [r3, #0]
 800eef0:	e000      	b.n	800eef4 <udp_bind+0xd4>
 800eef2:	2300      	movs	r3, #0
 800eef4:	68fa      	ldr	r2, [r7, #12]
 800eef6:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 800eef8:	68fb      	ldr	r3, [r7, #12]
 800eefa:	88fa      	ldrh	r2, [r7, #6]
 800eefc:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 800eefe:	7cfb      	ldrb	r3, [r7, #19]
 800ef00:	2b00      	cmp	r3, #0
 800ef02:	d106      	bne.n	800ef12 <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 800ef04:	4b09      	ldr	r3, [pc, #36]	; (800ef2c <udp_bind+0x10c>)
 800ef06:	681a      	ldr	r2, [r3, #0]
 800ef08:	68fb      	ldr	r3, [r7, #12]
 800ef0a:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 800ef0c:	4a07      	ldr	r2, [pc, #28]	; (800ef2c <udp_bind+0x10c>)
 800ef0e:	68fb      	ldr	r3, [r7, #12]
 800ef10:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 800ef12:	2300      	movs	r3, #0
}
 800ef14:	4618      	mov	r0, r3
 800ef16:	3718      	adds	r7, #24
 800ef18:	46bd      	mov	sp, r7
 800ef1a:	bd80      	pop	{r7, pc}
 800ef1c:	08017598 	.word	0x08017598
 800ef20:	08016698 	.word	0x08016698
 800ef24:	08016960 	.word	0x08016960
 800ef28:	080166ec 	.word	0x080166ec
 800ef2c:	2000eefc 	.word	0x2000eefc

0800ef30 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800ef30:	b580      	push	{r7, lr}
 800ef32:	b086      	sub	sp, #24
 800ef34:	af00      	add	r7, sp, #0
 800ef36:	60f8      	str	r0, [r7, #12]
 800ef38:	60b9      	str	r1, [r7, #8]
 800ef3a:	4613      	mov	r3, r2
 800ef3c:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 800ef3e:	68fb      	ldr	r3, [r7, #12]
 800ef40:	2b00      	cmp	r3, #0
 800ef42:	d109      	bne.n	800ef58 <udp_connect+0x28>
 800ef44:	4b2c      	ldr	r3, [pc, #176]	; (800eff8 <udp_connect+0xc8>)
 800ef46:	f240 4235 	movw	r2, #1077	; 0x435
 800ef4a:	492c      	ldr	r1, [pc, #176]	; (800effc <udp_connect+0xcc>)
 800ef4c:	482c      	ldr	r0, [pc, #176]	; (800f000 <udp_connect+0xd0>)
 800ef4e:	f004 fbe1 	bl	8013714 <iprintf>
 800ef52:	f06f 030f 	mvn.w	r3, #15
 800ef56:	e04b      	b.n	800eff0 <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 800ef58:	68bb      	ldr	r3, [r7, #8]
 800ef5a:	2b00      	cmp	r3, #0
 800ef5c:	d109      	bne.n	800ef72 <udp_connect+0x42>
 800ef5e:	4b26      	ldr	r3, [pc, #152]	; (800eff8 <udp_connect+0xc8>)
 800ef60:	f240 4236 	movw	r2, #1078	; 0x436
 800ef64:	4927      	ldr	r1, [pc, #156]	; (800f004 <udp_connect+0xd4>)
 800ef66:	4826      	ldr	r0, [pc, #152]	; (800f000 <udp_connect+0xd0>)
 800ef68:	f004 fbd4 	bl	8013714 <iprintf>
 800ef6c:	f06f 030f 	mvn.w	r3, #15
 800ef70:	e03e      	b.n	800eff0 <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 800ef72:	68fb      	ldr	r3, [r7, #12]
 800ef74:	8a5b      	ldrh	r3, [r3, #18]
 800ef76:	2b00      	cmp	r3, #0
 800ef78:	d10f      	bne.n	800ef9a <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800ef7a:	68f9      	ldr	r1, [r7, #12]
 800ef7c:	68fb      	ldr	r3, [r7, #12]
 800ef7e:	8a5b      	ldrh	r3, [r3, #18]
 800ef80:	461a      	mov	r2, r3
 800ef82:	68f8      	ldr	r0, [r7, #12]
 800ef84:	f7ff ff4c 	bl	800ee20 <udp_bind>
 800ef88:	4603      	mov	r3, r0
 800ef8a:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 800ef8c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ef90:	2b00      	cmp	r3, #0
 800ef92:	d002      	beq.n	800ef9a <udp_connect+0x6a>
      return err;
 800ef94:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ef98:	e02a      	b.n	800eff0 <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 800ef9a:	68bb      	ldr	r3, [r7, #8]
 800ef9c:	2b00      	cmp	r3, #0
 800ef9e:	d002      	beq.n	800efa6 <udp_connect+0x76>
 800efa0:	68bb      	ldr	r3, [r7, #8]
 800efa2:	681b      	ldr	r3, [r3, #0]
 800efa4:	e000      	b.n	800efa8 <udp_connect+0x78>
 800efa6:	2300      	movs	r3, #0
 800efa8:	68fa      	ldr	r2, [r7, #12]
 800efaa:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 800efac:	68fb      	ldr	r3, [r7, #12]
 800efae:	88fa      	ldrh	r2, [r7, #6]
 800efb0:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 800efb2:	68fb      	ldr	r3, [r7, #12]
 800efb4:	7c1b      	ldrb	r3, [r3, #16]
 800efb6:	f043 0304 	orr.w	r3, r3, #4
 800efba:	b2da      	uxtb	r2, r3
 800efbc:	68fb      	ldr	r3, [r7, #12]
 800efbe:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800efc0:	4b11      	ldr	r3, [pc, #68]	; (800f008 <udp_connect+0xd8>)
 800efc2:	681b      	ldr	r3, [r3, #0]
 800efc4:	617b      	str	r3, [r7, #20]
 800efc6:	e008      	b.n	800efda <udp_connect+0xaa>
    if (pcb == ipcb) {
 800efc8:	68fa      	ldr	r2, [r7, #12]
 800efca:	697b      	ldr	r3, [r7, #20]
 800efcc:	429a      	cmp	r2, r3
 800efce:	d101      	bne.n	800efd4 <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 800efd0:	2300      	movs	r3, #0
 800efd2:	e00d      	b.n	800eff0 <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800efd4:	697b      	ldr	r3, [r7, #20]
 800efd6:	68db      	ldr	r3, [r3, #12]
 800efd8:	617b      	str	r3, [r7, #20]
 800efda:	697b      	ldr	r3, [r7, #20]
 800efdc:	2b00      	cmp	r3, #0
 800efde:	d1f3      	bne.n	800efc8 <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 800efe0:	4b09      	ldr	r3, [pc, #36]	; (800f008 <udp_connect+0xd8>)
 800efe2:	681a      	ldr	r2, [r3, #0]
 800efe4:	68fb      	ldr	r3, [r7, #12]
 800efe6:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 800efe8:	4a07      	ldr	r2, [pc, #28]	; (800f008 <udp_connect+0xd8>)
 800efea:	68fb      	ldr	r3, [r7, #12]
 800efec:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 800efee:	2300      	movs	r3, #0
}
 800eff0:	4618      	mov	r0, r3
 800eff2:	3718      	adds	r7, #24
 800eff4:	46bd      	mov	sp, r7
 800eff6:	bd80      	pop	{r7, pc}
 800eff8:	08016698 	.word	0x08016698
 800effc:	08016978 	.word	0x08016978
 800f000:	080166ec 	.word	0x080166ec
 800f004:	08016994 	.word	0x08016994
 800f008:	2000eefc 	.word	0x2000eefc

0800f00c <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 800f00c:	b580      	push	{r7, lr}
 800f00e:	b084      	sub	sp, #16
 800f010:	af00      	add	r7, sp, #0
 800f012:	60f8      	str	r0, [r7, #12]
 800f014:	60b9      	str	r1, [r7, #8]
 800f016:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 800f018:	68fb      	ldr	r3, [r7, #12]
 800f01a:	2b00      	cmp	r3, #0
 800f01c:	d107      	bne.n	800f02e <udp_recv+0x22>
 800f01e:	4b08      	ldr	r3, [pc, #32]	; (800f040 <udp_recv+0x34>)
 800f020:	f240 428a 	movw	r2, #1162	; 0x48a
 800f024:	4907      	ldr	r1, [pc, #28]	; (800f044 <udp_recv+0x38>)
 800f026:	4808      	ldr	r0, [pc, #32]	; (800f048 <udp_recv+0x3c>)
 800f028:	f004 fb74 	bl	8013714 <iprintf>
 800f02c:	e005      	b.n	800f03a <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 800f02e:	68fb      	ldr	r3, [r7, #12]
 800f030:	68ba      	ldr	r2, [r7, #8]
 800f032:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 800f034:	68fb      	ldr	r3, [r7, #12]
 800f036:	687a      	ldr	r2, [r7, #4]
 800f038:	61da      	str	r2, [r3, #28]
}
 800f03a:	3710      	adds	r7, #16
 800f03c:	46bd      	mov	sp, r7
 800f03e:	bd80      	pop	{r7, pc}
 800f040:	08016698 	.word	0x08016698
 800f044:	080169cc 	.word	0x080169cc
 800f048:	080166ec 	.word	0x080166ec

0800f04c <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 800f04c:	b580      	push	{r7, lr}
 800f04e:	b084      	sub	sp, #16
 800f050:	af00      	add	r7, sp, #0
 800f052:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 800f054:	687b      	ldr	r3, [r7, #4]
 800f056:	2b00      	cmp	r3, #0
 800f058:	d107      	bne.n	800f06a <udp_remove+0x1e>
 800f05a:	4b19      	ldr	r3, [pc, #100]	; (800f0c0 <udp_remove+0x74>)
 800f05c:	f240 42a1 	movw	r2, #1185	; 0x4a1
 800f060:	4918      	ldr	r1, [pc, #96]	; (800f0c4 <udp_remove+0x78>)
 800f062:	4819      	ldr	r0, [pc, #100]	; (800f0c8 <udp_remove+0x7c>)
 800f064:	f004 fb56 	bl	8013714 <iprintf>
 800f068:	e026      	b.n	800f0b8 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 800f06a:	4b18      	ldr	r3, [pc, #96]	; (800f0cc <udp_remove+0x80>)
 800f06c:	681b      	ldr	r3, [r3, #0]
 800f06e:	687a      	ldr	r2, [r7, #4]
 800f070:	429a      	cmp	r2, r3
 800f072:	d105      	bne.n	800f080 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 800f074:	4b15      	ldr	r3, [pc, #84]	; (800f0cc <udp_remove+0x80>)
 800f076:	681b      	ldr	r3, [r3, #0]
 800f078:	68db      	ldr	r3, [r3, #12]
 800f07a:	4a14      	ldr	r2, [pc, #80]	; (800f0cc <udp_remove+0x80>)
 800f07c:	6013      	str	r3, [r2, #0]
 800f07e:	e017      	b.n	800f0b0 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 800f080:	4b12      	ldr	r3, [pc, #72]	; (800f0cc <udp_remove+0x80>)
 800f082:	681b      	ldr	r3, [r3, #0]
 800f084:	60fb      	str	r3, [r7, #12]
 800f086:	e010      	b.n	800f0aa <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 800f088:	68fb      	ldr	r3, [r7, #12]
 800f08a:	68db      	ldr	r3, [r3, #12]
 800f08c:	2b00      	cmp	r3, #0
 800f08e:	d009      	beq.n	800f0a4 <udp_remove+0x58>
 800f090:	68fb      	ldr	r3, [r7, #12]
 800f092:	68db      	ldr	r3, [r3, #12]
 800f094:	687a      	ldr	r2, [r7, #4]
 800f096:	429a      	cmp	r2, r3
 800f098:	d104      	bne.n	800f0a4 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 800f09a:	687b      	ldr	r3, [r7, #4]
 800f09c:	68da      	ldr	r2, [r3, #12]
 800f09e:	68fb      	ldr	r3, [r7, #12]
 800f0a0:	60da      	str	r2, [r3, #12]
        break;
 800f0a2:	e005      	b.n	800f0b0 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 800f0a4:	68fb      	ldr	r3, [r7, #12]
 800f0a6:	68db      	ldr	r3, [r3, #12]
 800f0a8:	60fb      	str	r3, [r7, #12]
 800f0aa:	68fb      	ldr	r3, [r7, #12]
 800f0ac:	2b00      	cmp	r3, #0
 800f0ae:	d1eb      	bne.n	800f088 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 800f0b0:	6879      	ldr	r1, [r7, #4]
 800f0b2:	2000      	movs	r0, #0
 800f0b4:	f7f8 ff70 	bl	8007f98 <memp_free>
}
 800f0b8:	3710      	adds	r7, #16
 800f0ba:	46bd      	mov	sp, r7
 800f0bc:	bd80      	pop	{r7, pc}
 800f0be:	bf00      	nop
 800f0c0:	08016698 	.word	0x08016698
 800f0c4:	080169e4 	.word	0x080169e4
 800f0c8:	080166ec 	.word	0x080166ec
 800f0cc:	2000eefc 	.word	0x2000eefc

0800f0d0 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 800f0d0:	b580      	push	{r7, lr}
 800f0d2:	b082      	sub	sp, #8
 800f0d4:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 800f0d6:	2000      	movs	r0, #0
 800f0d8:	f7f8 ff0c 	bl	8007ef4 <memp_malloc>
 800f0dc:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 800f0de:	687b      	ldr	r3, [r7, #4]
 800f0e0:	2b00      	cmp	r3, #0
 800f0e2:	d007      	beq.n	800f0f4 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 800f0e4:	2220      	movs	r2, #32
 800f0e6:	2100      	movs	r1, #0
 800f0e8:	6878      	ldr	r0, [r7, #4]
 800f0ea:	f004 fb0b 	bl	8013704 <memset>
    pcb->ttl = UDP_TTL;
 800f0ee:	687b      	ldr	r3, [r7, #4]
 800f0f0:	22ff      	movs	r2, #255	; 0xff
 800f0f2:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 800f0f4:	687b      	ldr	r3, [r7, #4]
}
 800f0f6:	4618      	mov	r0, r3
 800f0f8:	3708      	adds	r7, #8
 800f0fa:	46bd      	mov	sp, r7
 800f0fc:	bd80      	pop	{r7, pc}
	...

0800f100 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800f100:	b480      	push	{r7}
 800f102:	b085      	sub	sp, #20
 800f104:	af00      	add	r7, sp, #0
 800f106:	6078      	str	r0, [r7, #4]
 800f108:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800f10a:	687b      	ldr	r3, [r7, #4]
 800f10c:	2b00      	cmp	r3, #0
 800f10e:	d01e      	beq.n	800f14e <udp_netif_ip_addr_changed+0x4e>
 800f110:	687b      	ldr	r3, [r7, #4]
 800f112:	681b      	ldr	r3, [r3, #0]
 800f114:	2b00      	cmp	r3, #0
 800f116:	d01a      	beq.n	800f14e <udp_netif_ip_addr_changed+0x4e>
 800f118:	683b      	ldr	r3, [r7, #0]
 800f11a:	2b00      	cmp	r3, #0
 800f11c:	d017      	beq.n	800f14e <udp_netif_ip_addr_changed+0x4e>
 800f11e:	683b      	ldr	r3, [r7, #0]
 800f120:	681b      	ldr	r3, [r3, #0]
 800f122:	2b00      	cmp	r3, #0
 800f124:	d013      	beq.n	800f14e <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800f126:	4b0d      	ldr	r3, [pc, #52]	; (800f15c <udp_netif_ip_addr_changed+0x5c>)
 800f128:	681b      	ldr	r3, [r3, #0]
 800f12a:	60fb      	str	r3, [r7, #12]
 800f12c:	e00c      	b.n	800f148 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800f12e:	68fb      	ldr	r3, [r7, #12]
 800f130:	681a      	ldr	r2, [r3, #0]
 800f132:	687b      	ldr	r3, [r7, #4]
 800f134:	681b      	ldr	r3, [r3, #0]
 800f136:	429a      	cmp	r2, r3
 800f138:	d103      	bne.n	800f142 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 800f13a:	683b      	ldr	r3, [r7, #0]
 800f13c:	681a      	ldr	r2, [r3, #0]
 800f13e:	68fb      	ldr	r3, [r7, #12]
 800f140:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800f142:	68fb      	ldr	r3, [r7, #12]
 800f144:	68db      	ldr	r3, [r3, #12]
 800f146:	60fb      	str	r3, [r7, #12]
 800f148:	68fb      	ldr	r3, [r7, #12]
 800f14a:	2b00      	cmp	r3, #0
 800f14c:	d1ef      	bne.n	800f12e <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 800f14e:	bf00      	nop
 800f150:	3714      	adds	r7, #20
 800f152:	46bd      	mov	sp, r7
 800f154:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f158:	4770      	bx	lr
 800f15a:	bf00      	nop
 800f15c:	2000eefc 	.word	0x2000eefc

0800f160 <dhcp_inc_pcb_refcount>:
static void dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out);

/** Ensure DHCP PCB is allocated and bound */
static err_t
dhcp_inc_pcb_refcount(void)
{
 800f160:	b580      	push	{r7, lr}
 800f162:	af00      	add	r7, sp, #0
  if (dhcp_pcb_refcount == 0) {
 800f164:	4b20      	ldr	r3, [pc, #128]	; (800f1e8 <dhcp_inc_pcb_refcount+0x88>)
 800f166:	781b      	ldrb	r3, [r3, #0]
 800f168:	2b00      	cmp	r3, #0
 800f16a:	d133      	bne.n	800f1d4 <dhcp_inc_pcb_refcount+0x74>
    LWIP_ASSERT("dhcp_inc_pcb_refcount(): memory leak", dhcp_pcb == NULL);
 800f16c:	4b1f      	ldr	r3, [pc, #124]	; (800f1ec <dhcp_inc_pcb_refcount+0x8c>)
 800f16e:	681b      	ldr	r3, [r3, #0]
 800f170:	2b00      	cmp	r3, #0
 800f172:	d005      	beq.n	800f180 <dhcp_inc_pcb_refcount+0x20>
 800f174:	4b1e      	ldr	r3, [pc, #120]	; (800f1f0 <dhcp_inc_pcb_refcount+0x90>)
 800f176:	22e5      	movs	r2, #229	; 0xe5
 800f178:	491e      	ldr	r1, [pc, #120]	; (800f1f4 <dhcp_inc_pcb_refcount+0x94>)
 800f17a:	481f      	ldr	r0, [pc, #124]	; (800f1f8 <dhcp_inc_pcb_refcount+0x98>)
 800f17c:	f004 faca 	bl	8013714 <iprintf>

    /* allocate UDP PCB */
    dhcp_pcb = udp_new();
 800f180:	f7ff ffa6 	bl	800f0d0 <udp_new>
 800f184:	4602      	mov	r2, r0
 800f186:	4b19      	ldr	r3, [pc, #100]	; (800f1ec <dhcp_inc_pcb_refcount+0x8c>)
 800f188:	601a      	str	r2, [r3, #0]

    if (dhcp_pcb == NULL) {
 800f18a:	4b18      	ldr	r3, [pc, #96]	; (800f1ec <dhcp_inc_pcb_refcount+0x8c>)
 800f18c:	681b      	ldr	r3, [r3, #0]
 800f18e:	2b00      	cmp	r3, #0
 800f190:	d102      	bne.n	800f198 <dhcp_inc_pcb_refcount+0x38>
      return ERR_MEM;
 800f192:	f04f 33ff 	mov.w	r3, #4294967295
 800f196:	e024      	b.n	800f1e2 <dhcp_inc_pcb_refcount+0x82>
    }

    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 800f198:	4b14      	ldr	r3, [pc, #80]	; (800f1ec <dhcp_inc_pcb_refcount+0x8c>)
 800f19a:	681b      	ldr	r3, [r3, #0]
 800f19c:	7a5a      	ldrb	r2, [r3, #9]
 800f19e:	4b13      	ldr	r3, [pc, #76]	; (800f1ec <dhcp_inc_pcb_refcount+0x8c>)
 800f1a0:	681b      	ldr	r3, [r3, #0]
 800f1a2:	f042 0220 	orr.w	r2, r2, #32
 800f1a6:	b2d2      	uxtb	r2, r2
 800f1a8:	725a      	strb	r2, [r3, #9]

    /* set up local and remote port for the pcb -> listen on all interfaces on all src/dest IPs */
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_CLIENT);
 800f1aa:	4b10      	ldr	r3, [pc, #64]	; (800f1ec <dhcp_inc_pcb_refcount+0x8c>)
 800f1ac:	681b      	ldr	r3, [r3, #0]
 800f1ae:	2244      	movs	r2, #68	; 0x44
 800f1b0:	4912      	ldr	r1, [pc, #72]	; (800f1fc <dhcp_inc_pcb_refcount+0x9c>)
 800f1b2:	4618      	mov	r0, r3
 800f1b4:	f7ff fe34 	bl	800ee20 <udp_bind>
    udp_connect(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_SERVER);
 800f1b8:	4b0c      	ldr	r3, [pc, #48]	; (800f1ec <dhcp_inc_pcb_refcount+0x8c>)
 800f1ba:	681b      	ldr	r3, [r3, #0]
 800f1bc:	2243      	movs	r2, #67	; 0x43
 800f1be:	490f      	ldr	r1, [pc, #60]	; (800f1fc <dhcp_inc_pcb_refcount+0x9c>)
 800f1c0:	4618      	mov	r0, r3
 800f1c2:	f7ff feb5 	bl	800ef30 <udp_connect>
    udp_recv(dhcp_pcb, dhcp_recv, NULL);
 800f1c6:	4b09      	ldr	r3, [pc, #36]	; (800f1ec <dhcp_inc_pcb_refcount+0x8c>)
 800f1c8:	681b      	ldr	r3, [r3, #0]
 800f1ca:	2200      	movs	r2, #0
 800f1cc:	490c      	ldr	r1, [pc, #48]	; (800f200 <dhcp_inc_pcb_refcount+0xa0>)
 800f1ce:	4618      	mov	r0, r3
 800f1d0:	f7ff ff1c 	bl	800f00c <udp_recv>
  }

  dhcp_pcb_refcount++;
 800f1d4:	4b04      	ldr	r3, [pc, #16]	; (800f1e8 <dhcp_inc_pcb_refcount+0x88>)
 800f1d6:	781b      	ldrb	r3, [r3, #0]
 800f1d8:	3301      	adds	r3, #1
 800f1da:	b2da      	uxtb	r2, r3
 800f1dc:	4b02      	ldr	r3, [pc, #8]	; (800f1e8 <dhcp_inc_pcb_refcount+0x88>)
 800f1de:	701a      	strb	r2, [r3, #0]

  return ERR_OK;
 800f1e0:	2300      	movs	r3, #0
}
 800f1e2:	4618      	mov	r0, r3
 800f1e4:	bd80      	pop	{r7, pc}
 800f1e6:	bf00      	nop
 800f1e8:	200084e4 	.word	0x200084e4
 800f1ec:	200084e0 	.word	0x200084e0
 800f1f0:	080169fc 	.word	0x080169fc
 800f1f4:	08016a34 	.word	0x08016a34
 800f1f8:	08016a5c 	.word	0x08016a5c
 800f1fc:	08017598 	.word	0x08017598
 800f200:	08010ab9 	.word	0x08010ab9

0800f204 <dhcp_dec_pcb_refcount>:

/** Free DHCP PCB if the last netif stops using it */
static void
dhcp_dec_pcb_refcount(void)
{
 800f204:	b580      	push	{r7, lr}
 800f206:	af00      	add	r7, sp, #0
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 800f208:	4b0e      	ldr	r3, [pc, #56]	; (800f244 <dhcp_dec_pcb_refcount+0x40>)
 800f20a:	781b      	ldrb	r3, [r3, #0]
 800f20c:	2b00      	cmp	r3, #0
 800f20e:	d105      	bne.n	800f21c <dhcp_dec_pcb_refcount+0x18>
 800f210:	4b0d      	ldr	r3, [pc, #52]	; (800f248 <dhcp_dec_pcb_refcount+0x44>)
 800f212:	22ff      	movs	r2, #255	; 0xff
 800f214:	490d      	ldr	r1, [pc, #52]	; (800f24c <dhcp_dec_pcb_refcount+0x48>)
 800f216:	480e      	ldr	r0, [pc, #56]	; (800f250 <dhcp_dec_pcb_refcount+0x4c>)
 800f218:	f004 fa7c 	bl	8013714 <iprintf>
  dhcp_pcb_refcount--;
 800f21c:	4b09      	ldr	r3, [pc, #36]	; (800f244 <dhcp_dec_pcb_refcount+0x40>)
 800f21e:	781b      	ldrb	r3, [r3, #0]
 800f220:	3b01      	subs	r3, #1
 800f222:	b2da      	uxtb	r2, r3
 800f224:	4b07      	ldr	r3, [pc, #28]	; (800f244 <dhcp_dec_pcb_refcount+0x40>)
 800f226:	701a      	strb	r2, [r3, #0]

  if (dhcp_pcb_refcount == 0) {
 800f228:	4b06      	ldr	r3, [pc, #24]	; (800f244 <dhcp_dec_pcb_refcount+0x40>)
 800f22a:	781b      	ldrb	r3, [r3, #0]
 800f22c:	2b00      	cmp	r3, #0
 800f22e:	d107      	bne.n	800f240 <dhcp_dec_pcb_refcount+0x3c>
    udp_remove(dhcp_pcb);
 800f230:	4b08      	ldr	r3, [pc, #32]	; (800f254 <dhcp_dec_pcb_refcount+0x50>)
 800f232:	681b      	ldr	r3, [r3, #0]
 800f234:	4618      	mov	r0, r3
 800f236:	f7ff ff09 	bl	800f04c <udp_remove>
    dhcp_pcb = NULL;
 800f23a:	4b06      	ldr	r3, [pc, #24]	; (800f254 <dhcp_dec_pcb_refcount+0x50>)
 800f23c:	2200      	movs	r2, #0
 800f23e:	601a      	str	r2, [r3, #0]
  }
}
 800f240:	bf00      	nop
 800f242:	bd80      	pop	{r7, pc}
 800f244:	200084e4 	.word	0x200084e4
 800f248:	080169fc 	.word	0x080169fc
 800f24c:	08016a84 	.word	0x08016a84
 800f250:	08016a5c 	.word	0x08016a5c
 800f254:	200084e0 	.word	0x200084e0

0800f258 <dhcp_handle_nak>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_nak(struct netif *netif)
{
 800f258:	b580      	push	{r7, lr}
 800f25a:	b084      	sub	sp, #16
 800f25c:	af00      	add	r7, sp, #0
 800f25e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800f260:	687b      	ldr	r3, [r7, #4]
 800f262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f264:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_nak(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* Change to a defined state - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 800f266:	210c      	movs	r1, #12
 800f268:	68f8      	ldr	r0, [r7, #12]
 800f26a:	f001 f867 	bl	801033c <dhcp_set_state>
  /* remove IP address from interface (must no longer be used, as per RFC2131) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 800f26e:	4b06      	ldr	r3, [pc, #24]	; (800f288 <dhcp_handle_nak+0x30>)
 800f270:	4a05      	ldr	r2, [pc, #20]	; (800f288 <dhcp_handle_nak+0x30>)
 800f272:	4905      	ldr	r1, [pc, #20]	; (800f288 <dhcp_handle_nak+0x30>)
 800f274:	6878      	ldr	r0, [r7, #4]
 800f276:	f7f9 f831 	bl	80082dc <netif_set_addr>
  /* We can immediately restart discovery */
  dhcp_discover(netif);
 800f27a:	6878      	ldr	r0, [r7, #4]
 800f27c:	f000 fc5a 	bl	800fb34 <dhcp_discover>
}
 800f280:	bf00      	nop
 800f282:	3710      	adds	r7, #16
 800f284:	46bd      	mov	sp, r7
 800f286:	bd80      	pop	{r7, pc}
 800f288:	08017598 	.word	0x08017598

0800f28c <dhcp_check>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_check(struct netif *netif)
{
 800f28c:	b580      	push	{r7, lr}
 800f28e:	b084      	sub	sp, #16
 800f290:	af00      	add	r7, sp, #0
 800f292:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800f294:	687b      	ldr	r3, [r7, #4]
 800f296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f298:	60fb      	str	r3, [r7, #12]
  err_t result;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_check(netif=%p) %c%c\n", (void *)netif, (s16_t)netif->name[0],
              (s16_t)netif->name[1]));
  dhcp_set_state(dhcp, DHCP_STATE_CHECKING);
 800f29a:	2108      	movs	r1, #8
 800f29c:	68f8      	ldr	r0, [r7, #12]
 800f29e:	f001 f84d 	bl	801033c <dhcp_set_state>
  /* create an ARP query for the offered IP address, expecting that no host
     responds, as the IP address should not be in use. */
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 800f2a2:	68fb      	ldr	r3, [r7, #12]
 800f2a4:	331c      	adds	r3, #28
 800f2a6:	2200      	movs	r2, #0
 800f2a8:	4619      	mov	r1, r3
 800f2aa:	6878      	ldr	r0, [r7, #4]
 800f2ac:	f002 fb4c 	bl	8011948 <etharp_query>
 800f2b0:	4603      	mov	r3, r0
 800f2b2:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_check: could not perform ARP query\n"));
  }
  if (dhcp->tries < 255) {
 800f2b4:	68fb      	ldr	r3, [r7, #12]
 800f2b6:	799b      	ldrb	r3, [r3, #6]
 800f2b8:	2bff      	cmp	r3, #255	; 0xff
 800f2ba:	d005      	beq.n	800f2c8 <dhcp_check+0x3c>
    dhcp->tries++;
 800f2bc:	68fb      	ldr	r3, [r7, #12]
 800f2be:	799b      	ldrb	r3, [r3, #6]
 800f2c0:	3301      	adds	r3, #1
 800f2c2:	b2da      	uxtb	r2, r3
 800f2c4:	68fb      	ldr	r3, [r7, #12]
 800f2c6:	719a      	strb	r2, [r3, #6]
  }
  msecs = 500;
 800f2c8:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800f2cc:	813b      	strh	r3, [r7, #8]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800f2ce:	893b      	ldrh	r3, [r7, #8]
 800f2d0:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800f2d4:	4a06      	ldr	r2, [pc, #24]	; (800f2f0 <dhcp_check+0x64>)
 800f2d6:	fb82 1203 	smull	r1, r2, r2, r3
 800f2da:	1152      	asrs	r2, r2, #5
 800f2dc:	17db      	asrs	r3, r3, #31
 800f2de:	1ad3      	subs	r3, r2, r3
 800f2e0:	b29a      	uxth	r2, r3
 800f2e2:	68fb      	ldr	r3, [r7, #12]
 800f2e4:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_check(): set request timeout %"U16_F" msecs\n", msecs));
}
 800f2e6:	bf00      	nop
 800f2e8:	3710      	adds	r7, #16
 800f2ea:	46bd      	mov	sp, r7
 800f2ec:	bd80      	pop	{r7, pc}
 800f2ee:	bf00      	nop
 800f2f0:	10624dd3 	.word	0x10624dd3

0800f2f4 <dhcp_handle_offer>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_offer(struct netif *netif, struct dhcp_msg *msg_in)
{
 800f2f4:	b580      	push	{r7, lr}
 800f2f6:	b084      	sub	sp, #16
 800f2f8:	af00      	add	r7, sp, #0
 800f2fa:	6078      	str	r0, [r7, #4]
 800f2fc:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800f2fe:	687b      	ldr	r3, [r7, #4]
 800f300:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f302:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_offer(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* obtain the server address */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
 800f304:	4b0c      	ldr	r3, [pc, #48]	; (800f338 <dhcp_handle_offer+0x44>)
 800f306:	789b      	ldrb	r3, [r3, #2]
 800f308:	2b00      	cmp	r3, #0
 800f30a:	d011      	beq.n	800f330 <dhcp_handle_offer+0x3c>
    dhcp->request_timeout = 0; /* stop timer */
 800f30c:	68fb      	ldr	r3, [r7, #12]
 800f30e:	2200      	movs	r2, #0
 800f310:	811a      	strh	r2, [r3, #8]

    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 800f312:	4b0a      	ldr	r3, [pc, #40]	; (800f33c <dhcp_handle_offer+0x48>)
 800f314:	689b      	ldr	r3, [r3, #8]
 800f316:	4618      	mov	r0, r3
 800f318:	f7f8 f94b 	bl	80075b2 <lwip_htonl>
 800f31c:	4602      	mov	r2, r0
 800f31e:	68fb      	ldr	r3, [r7, #12]
 800f320:	619a      	str	r2, [r3, #24]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): server 0x%08"X32_F"\n",
                ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
    /* remember offered address */
    ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 800f322:	683b      	ldr	r3, [r7, #0]
 800f324:	691a      	ldr	r2, [r3, #16]
 800f326:	68fb      	ldr	r3, [r7, #12]
 800f328:	61da      	str	r2, [r3, #28]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): offer for 0x%08"X32_F"\n",
                ip4_addr_get_u32(&dhcp->offered_ip_addr)));

    dhcp_select(netif);
 800f32a:	6878      	ldr	r0, [r7, #4]
 800f32c:	f000 f808 	bl	800f340 <dhcp_select>
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_handle_offer(netif=%p) did not get server ID!\n", (void *)netif));
  }
}
 800f330:	bf00      	nop
 800f332:	3710      	adds	r7, #16
 800f334:	46bd      	mov	sp, r7
 800f336:	bd80      	pop	{r7, pc}
 800f338:	2000ef00 	.word	0x2000ef00
 800f33c:	2000ef08 	.word	0x2000ef08

0800f340 <dhcp_select>:
 * @param netif the netif under DHCP control
 * @return lwIP specific error (see error.h)
 */
static err_t
dhcp_select(struct netif *netif)
{
 800f340:	b5b0      	push	{r4, r5, r7, lr}
 800f342:	b08a      	sub	sp, #40	; 0x28
 800f344:	af02      	add	r7, sp, #8
 800f346:	6078      	str	r0, [r7, #4]
  u16_t msecs;
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ERROR("dhcp_select: netif != NULL", (netif != NULL), return ERR_ARG;);
 800f348:	687b      	ldr	r3, [r7, #4]
 800f34a:	2b00      	cmp	r3, #0
 800f34c:	d109      	bne.n	800f362 <dhcp_select+0x22>
 800f34e:	4b71      	ldr	r3, [pc, #452]	; (800f514 <dhcp_select+0x1d4>)
 800f350:	f240 1277 	movw	r2, #375	; 0x177
 800f354:	4970      	ldr	r1, [pc, #448]	; (800f518 <dhcp_select+0x1d8>)
 800f356:	4871      	ldr	r0, [pc, #452]	; (800f51c <dhcp_select+0x1dc>)
 800f358:	f004 f9dc 	bl	8013714 <iprintf>
 800f35c:	f06f 030f 	mvn.w	r3, #15
 800f360:	e0d3      	b.n	800f50a <dhcp_select+0x1ca>
  dhcp = netif_dhcp_data(netif);
 800f362:	687b      	ldr	r3, [r7, #4]
 800f364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f366:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_select: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 800f368:	69bb      	ldr	r3, [r7, #24]
 800f36a:	2b00      	cmp	r3, #0
 800f36c:	d109      	bne.n	800f382 <dhcp_select+0x42>
 800f36e:	4b69      	ldr	r3, [pc, #420]	; (800f514 <dhcp_select+0x1d4>)
 800f370:	f240 1279 	movw	r2, #377	; 0x179
 800f374:	496a      	ldr	r1, [pc, #424]	; (800f520 <dhcp_select+0x1e0>)
 800f376:	4869      	ldr	r0, [pc, #420]	; (800f51c <dhcp_select+0x1dc>)
 800f378:	f004 f9cc 	bl	8013714 <iprintf>
 800f37c:	f06f 0305 	mvn.w	r3, #5
 800f380:	e0c3      	b.n	800f50a <dhcp_select+0x1ca>

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_select(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  dhcp_set_state(dhcp, DHCP_STATE_REQUESTING);
 800f382:	2101      	movs	r1, #1
 800f384:	69b8      	ldr	r0, [r7, #24]
 800f386:	f000 ffd9 	bl	801033c <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 800f38a:	f107 030c 	add.w	r3, r7, #12
 800f38e:	2203      	movs	r2, #3
 800f390:	69b9      	ldr	r1, [r7, #24]
 800f392:	6878      	ldr	r0, [r7, #4]
 800f394:	f001 fc5c 	bl	8010c50 <dhcp_create_msg>
 800f398:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 800f39a:	697b      	ldr	r3, [r7, #20]
 800f39c:	2b00      	cmp	r3, #0
 800f39e:	f000 8085 	beq.w	800f4ac <dhcp_select+0x16c>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 800f3a2:	697b      	ldr	r3, [r7, #20]
 800f3a4:	685b      	ldr	r3, [r3, #4]
 800f3a6:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800f3a8:	89b8      	ldrh	r0, [r7, #12]
 800f3aa:	693b      	ldr	r3, [r7, #16]
 800f3ac:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800f3b0:	2302      	movs	r3, #2
 800f3b2:	2239      	movs	r2, #57	; 0x39
 800f3b4:	f000 ffdc 	bl	8010370 <dhcp_option>
 800f3b8:	4603      	mov	r3, r0
 800f3ba:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 800f3bc:	89b8      	ldrh	r0, [r7, #12]
 800f3be:	693b      	ldr	r3, [r7, #16]
 800f3c0:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800f3c4:	687b      	ldr	r3, [r7, #4]
 800f3c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f3c8:	461a      	mov	r2, r3
 800f3ca:	f001 f82b 	bl	8010424 <dhcp_option_short>
 800f3ce:	4603      	mov	r3, r0
 800f3d0:	81bb      	strh	r3, [r7, #12]

    /* MUST request the offered IP address */
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 800f3d2:	89b8      	ldrh	r0, [r7, #12]
 800f3d4:	693b      	ldr	r3, [r7, #16]
 800f3d6:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800f3da:	2304      	movs	r3, #4
 800f3dc:	2232      	movs	r2, #50	; 0x32
 800f3de:	f000 ffc7 	bl	8010370 <dhcp_option>
 800f3e2:	4603      	mov	r3, r0
 800f3e4:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 800f3e6:	89bc      	ldrh	r4, [r7, #12]
 800f3e8:	693b      	ldr	r3, [r7, #16]
 800f3ea:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 800f3ee:	69bb      	ldr	r3, [r7, #24]
 800f3f0:	69db      	ldr	r3, [r3, #28]
 800f3f2:	4618      	mov	r0, r3
 800f3f4:	f7f8 f8dd 	bl	80075b2 <lwip_htonl>
 800f3f8:	4603      	mov	r3, r0
 800f3fa:	461a      	mov	r2, r3
 800f3fc:	4629      	mov	r1, r5
 800f3fe:	4620      	mov	r0, r4
 800f400:	f001 f842 	bl	8010488 <dhcp_option_long>
 800f404:	4603      	mov	r3, r0
 800f406:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 800f408:	89b8      	ldrh	r0, [r7, #12]
 800f40a:	693b      	ldr	r3, [r7, #16]
 800f40c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800f410:	2304      	movs	r3, #4
 800f412:	2236      	movs	r2, #54	; 0x36
 800f414:	f000 ffac 	bl	8010370 <dhcp_option>
 800f418:	4603      	mov	r3, r0
 800f41a:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 800f41c:	89bc      	ldrh	r4, [r7, #12]
 800f41e:	693b      	ldr	r3, [r7, #16]
 800f420:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 800f424:	69bb      	ldr	r3, [r7, #24]
 800f426:	699b      	ldr	r3, [r3, #24]
 800f428:	4618      	mov	r0, r3
 800f42a:	f7f8 f8c2 	bl	80075b2 <lwip_htonl>
 800f42e:	4603      	mov	r3, r0
 800f430:	461a      	mov	r2, r3
 800f432:	4629      	mov	r1, r5
 800f434:	4620      	mov	r0, r4
 800f436:	f001 f827 	bl	8010488 <dhcp_option_long>
 800f43a:	4603      	mov	r3, r0
 800f43c:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800f43e:	89b8      	ldrh	r0, [r7, #12]
 800f440:	693b      	ldr	r3, [r7, #16]
 800f442:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800f446:	2303      	movs	r3, #3
 800f448:	2237      	movs	r2, #55	; 0x37
 800f44a:	f000 ff91 	bl	8010370 <dhcp_option>
 800f44e:	4603      	mov	r3, r0
 800f450:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800f452:	2300      	movs	r3, #0
 800f454:	77bb      	strb	r3, [r7, #30]
 800f456:	e00e      	b.n	800f476 <dhcp_select+0x136>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 800f458:	89b8      	ldrh	r0, [r7, #12]
 800f45a:	693b      	ldr	r3, [r7, #16]
 800f45c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800f460:	7fbb      	ldrb	r3, [r7, #30]
 800f462:	4a30      	ldr	r2, [pc, #192]	; (800f524 <dhcp_select+0x1e4>)
 800f464:	5cd3      	ldrb	r3, [r2, r3]
 800f466:	461a      	mov	r2, r3
 800f468:	f000 ffb6 	bl	80103d8 <dhcp_option_byte>
 800f46c:	4603      	mov	r3, r0
 800f46e:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800f470:	7fbb      	ldrb	r3, [r7, #30]
 800f472:	3301      	adds	r3, #1
 800f474:	77bb      	strb	r3, [r7, #30]
 800f476:	7fbb      	ldrb	r3, [r7, #30]
 800f478:	2b02      	cmp	r3, #2
 800f47a:	d9ed      	bls.n	800f458 <dhcp_select+0x118>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REQUESTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800f47c:	89b8      	ldrh	r0, [r7, #12]
 800f47e:	693b      	ldr	r3, [r7, #16]
 800f480:	33f0      	adds	r3, #240	; 0xf0
 800f482:	697a      	ldr	r2, [r7, #20]
 800f484:	4619      	mov	r1, r3
 800f486:	f001 fcb9 	bl	8010dfc <dhcp_option_trailer>

    /* send broadcast to any DHCP server */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 800f48a:	4b27      	ldr	r3, [pc, #156]	; (800f528 <dhcp_select+0x1e8>)
 800f48c:	6818      	ldr	r0, [r3, #0]
 800f48e:	4b27      	ldr	r3, [pc, #156]	; (800f52c <dhcp_select+0x1ec>)
 800f490:	9301      	str	r3, [sp, #4]
 800f492:	687b      	ldr	r3, [r7, #4]
 800f494:	9300      	str	r3, [sp, #0]
 800f496:	2343      	movs	r3, #67	; 0x43
 800f498:	4a25      	ldr	r2, [pc, #148]	; (800f530 <dhcp_select+0x1f0>)
 800f49a:	6979      	ldr	r1, [r7, #20]
 800f49c:	f7ff fbda 	bl	800ec54 <udp_sendto_if_src>
 800f4a0:	4603      	mov	r3, r0
 800f4a2:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 800f4a4:	6978      	ldr	r0, [r7, #20]
 800f4a6:	f7f9 fc23 	bl	8008cf0 <pbuf_free>
 800f4aa:	e001      	b.n	800f4b0 <dhcp_select+0x170>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_select: REQUESTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_select: could not allocate DHCP request\n"));
    result = ERR_MEM;
 800f4ac:	23ff      	movs	r3, #255	; 0xff
 800f4ae:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 800f4b0:	69bb      	ldr	r3, [r7, #24]
 800f4b2:	799b      	ldrb	r3, [r3, #6]
 800f4b4:	2bff      	cmp	r3, #255	; 0xff
 800f4b6:	d005      	beq.n	800f4c4 <dhcp_select+0x184>
    dhcp->tries++;
 800f4b8:	69bb      	ldr	r3, [r7, #24]
 800f4ba:	799b      	ldrb	r3, [r3, #6]
 800f4bc:	3301      	adds	r3, #1
 800f4be:	b2da      	uxtb	r2, r3
 800f4c0:	69bb      	ldr	r3, [r7, #24]
 800f4c2:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 800f4c4:	69bb      	ldr	r3, [r7, #24]
 800f4c6:	799b      	ldrb	r3, [r3, #6]
 800f4c8:	2b05      	cmp	r3, #5
 800f4ca:	d80d      	bhi.n	800f4e8 <dhcp_select+0x1a8>
 800f4cc:	69bb      	ldr	r3, [r7, #24]
 800f4ce:	799b      	ldrb	r3, [r3, #6]
 800f4d0:	461a      	mov	r2, r3
 800f4d2:	2301      	movs	r3, #1
 800f4d4:	4093      	lsls	r3, r2
 800f4d6:	b29b      	uxth	r3, r3
 800f4d8:	461a      	mov	r2, r3
 800f4da:	0152      	lsls	r2, r2, #5
 800f4dc:	1ad2      	subs	r2, r2, r3
 800f4de:	0092      	lsls	r2, r2, #2
 800f4e0:	4413      	add	r3, r2
 800f4e2:	00db      	lsls	r3, r3, #3
 800f4e4:	b29b      	uxth	r3, r3
 800f4e6:	e001      	b.n	800f4ec <dhcp_select+0x1ac>
 800f4e8:	f64e 2360 	movw	r3, #60000	; 0xea60
 800f4ec:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800f4ee:	89fb      	ldrh	r3, [r7, #14]
 800f4f0:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800f4f4:	4a0f      	ldr	r2, [pc, #60]	; (800f534 <dhcp_select+0x1f4>)
 800f4f6:	fb82 1203 	smull	r1, r2, r2, r3
 800f4fa:	1152      	asrs	r2, r2, #5
 800f4fc:	17db      	asrs	r3, r3, #31
 800f4fe:	1ad3      	subs	r3, r2, r3
 800f500:	b29a      	uxth	r2, r3
 800f502:	69bb      	ldr	r3, [r7, #24]
 800f504:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_select(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 800f506:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800f50a:	4618      	mov	r0, r3
 800f50c:	3720      	adds	r7, #32
 800f50e:	46bd      	mov	sp, r7
 800f510:	bdb0      	pop	{r4, r5, r7, pc}
 800f512:	bf00      	nop
 800f514:	080169fc 	.word	0x080169fc
 800f518:	08016aa8 	.word	0x08016aa8
 800f51c:	08016a5c 	.word	0x08016a5c
 800f520:	08016ac4 	.word	0x08016ac4
 800f524:	2000001c 	.word	0x2000001c
 800f528:	200084e0 	.word	0x200084e0
 800f52c:	08017598 	.word	0x08017598
 800f530:	0801759c 	.word	0x0801759c
 800f534:	10624dd3 	.word	0x10624dd3

0800f538 <dhcp_coarse_tmr>:
 * The DHCP timer that checks for lease renewal/rebind timeouts.
 * Must be called once a minute (see @ref DHCP_COARSE_TIMER_SECS).
 */
void
dhcp_coarse_tmr(void)
{
 800f538:	b580      	push	{r7, lr}
 800f53a:	b082      	sub	sp, #8
 800f53c:	af00      	add	r7, sp, #0
  struct netif *netif;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_coarse_tmr()\n"));
  /* iterate through all network interfaces */
  NETIF_FOREACH(netif) {
 800f53e:	4b27      	ldr	r3, [pc, #156]	; (800f5dc <dhcp_coarse_tmr+0xa4>)
 800f540:	681b      	ldr	r3, [r3, #0]
 800f542:	607b      	str	r3, [r7, #4]
 800f544:	e042      	b.n	800f5cc <dhcp_coarse_tmr+0x94>
    /* only act on DHCP configured interfaces */
    struct dhcp *dhcp = netif_dhcp_data(netif);
 800f546:	687b      	ldr	r3, [r7, #4]
 800f548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f54a:	603b      	str	r3, [r7, #0]
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
 800f54c:	683b      	ldr	r3, [r7, #0]
 800f54e:	2b00      	cmp	r3, #0
 800f550:	d039      	beq.n	800f5c6 <dhcp_coarse_tmr+0x8e>
 800f552:	683b      	ldr	r3, [r7, #0]
 800f554:	795b      	ldrb	r3, [r3, #5]
 800f556:	2b00      	cmp	r3, #0
 800f558:	d035      	beq.n	800f5c6 <dhcp_coarse_tmr+0x8e>
      /* compare lease time to expire timeout */
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
 800f55a:	683b      	ldr	r3, [r7, #0]
 800f55c:	8a9b      	ldrh	r3, [r3, #20]
 800f55e:	2b00      	cmp	r3, #0
 800f560:	d012      	beq.n	800f588 <dhcp_coarse_tmr+0x50>
 800f562:	683b      	ldr	r3, [r7, #0]
 800f564:	8a5b      	ldrh	r3, [r3, #18]
 800f566:	3301      	adds	r3, #1
 800f568:	b29a      	uxth	r2, r3
 800f56a:	683b      	ldr	r3, [r7, #0]
 800f56c:	825a      	strh	r2, [r3, #18]
 800f56e:	683b      	ldr	r3, [r7, #0]
 800f570:	8a5a      	ldrh	r2, [r3, #18]
 800f572:	683b      	ldr	r3, [r7, #0]
 800f574:	8a9b      	ldrh	r3, [r3, #20]
 800f576:	429a      	cmp	r2, r3
 800f578:	d106      	bne.n	800f588 <dhcp_coarse_tmr+0x50>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t0 timeout\n"));
        /* this clients' lease time has expired */
        dhcp_release_and_stop(netif);
 800f57a:	6878      	ldr	r0, [r7, #4]
 800f57c:	f000 fe44 	bl	8010208 <dhcp_release_and_stop>
        dhcp_start(netif);
 800f580:	6878      	ldr	r0, [r7, #4]
 800f582:	f000 f969 	bl	800f858 <dhcp_start>
 800f586:	e01e      	b.n	800f5c6 <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now? */
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
 800f588:	683b      	ldr	r3, [r7, #0]
 800f58a:	8a1b      	ldrh	r3, [r3, #16]
 800f58c:	2b00      	cmp	r3, #0
 800f58e:	d00b      	beq.n	800f5a8 <dhcp_coarse_tmr+0x70>
 800f590:	683b      	ldr	r3, [r7, #0]
 800f592:	8a1b      	ldrh	r3, [r3, #16]
 800f594:	1e5a      	subs	r2, r3, #1
 800f596:	b291      	uxth	r1, r2
 800f598:	683a      	ldr	r2, [r7, #0]
 800f59a:	8211      	strh	r1, [r2, #16]
 800f59c:	2b01      	cmp	r3, #1
 800f59e:	d103      	bne.n	800f5a8 <dhcp_coarse_tmr+0x70>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t2 timeout\n"));
        /* this clients' rebind timeout triggered */
        dhcp_t2_timeout(netif);
 800f5a0:	6878      	ldr	r0, [r7, #4]
 800f5a2:	f000 f8c6 	bl	800f732 <dhcp_t2_timeout>
 800f5a6:	e00e      	b.n	800f5c6 <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now */
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
 800f5a8:	683b      	ldr	r3, [r7, #0]
 800f5aa:	89db      	ldrh	r3, [r3, #14]
 800f5ac:	2b00      	cmp	r3, #0
 800f5ae:	d00a      	beq.n	800f5c6 <dhcp_coarse_tmr+0x8e>
 800f5b0:	683b      	ldr	r3, [r7, #0]
 800f5b2:	89db      	ldrh	r3, [r3, #14]
 800f5b4:	1e5a      	subs	r2, r3, #1
 800f5b6:	b291      	uxth	r1, r2
 800f5b8:	683a      	ldr	r2, [r7, #0]
 800f5ba:	81d1      	strh	r1, [r2, #14]
 800f5bc:	2b01      	cmp	r3, #1
 800f5be:	d102      	bne.n	800f5c6 <dhcp_coarse_tmr+0x8e>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t1 timeout\n"));
        /* this clients' renewal timeout triggered */
        dhcp_t1_timeout(netif);
 800f5c0:	6878      	ldr	r0, [r7, #4]
 800f5c2:	f000 f888 	bl	800f6d6 <dhcp_t1_timeout>
  NETIF_FOREACH(netif) {
 800f5c6:	687b      	ldr	r3, [r7, #4]
 800f5c8:	681b      	ldr	r3, [r3, #0]
 800f5ca:	607b      	str	r3, [r7, #4]
 800f5cc:	687b      	ldr	r3, [r7, #4]
 800f5ce:	2b00      	cmp	r3, #0
 800f5d0:	d1b9      	bne.n	800f546 <dhcp_coarse_tmr+0xe>
      }
    }
  }
}
 800f5d2:	bf00      	nop
 800f5d4:	3708      	adds	r7, #8
 800f5d6:	46bd      	mov	sp, r7
 800f5d8:	bd80      	pop	{r7, pc}
 800f5da:	bf00      	nop
 800f5dc:	2000eed4 	.word	0x2000eed4

0800f5e0 <dhcp_fine_tmr>:
 * A DHCP server is expected to respond within a short period of time.
 * This timer checks whether an outstanding DHCP request is timed out.
 */
void
dhcp_fine_tmr(void)
{
 800f5e0:	b580      	push	{r7, lr}
 800f5e2:	b082      	sub	sp, #8
 800f5e4:	af00      	add	r7, sp, #0
  struct netif *netif;
  /* loop through netif's */
  NETIF_FOREACH(netif) {
 800f5e6:	4b16      	ldr	r3, [pc, #88]	; (800f640 <dhcp_fine_tmr+0x60>)
 800f5e8:	681b      	ldr	r3, [r3, #0]
 800f5ea:	607b      	str	r3, [r7, #4]
 800f5ec:	e020      	b.n	800f630 <dhcp_fine_tmr+0x50>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 800f5ee:	687b      	ldr	r3, [r7, #4]
 800f5f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f5f2:	603b      	str	r3, [r7, #0]
    /* only act on DHCP configured interfaces */
    if (dhcp != NULL) {
 800f5f4:	683b      	ldr	r3, [r7, #0]
 800f5f6:	2b00      	cmp	r3, #0
 800f5f8:	d017      	beq.n	800f62a <dhcp_fine_tmr+0x4a>
      /* timer is active (non zero), and is about to trigger now */
      if (dhcp->request_timeout > 1) {
 800f5fa:	683b      	ldr	r3, [r7, #0]
 800f5fc:	891b      	ldrh	r3, [r3, #8]
 800f5fe:	2b01      	cmp	r3, #1
 800f600:	d906      	bls.n	800f610 <dhcp_fine_tmr+0x30>
        dhcp->request_timeout--;
 800f602:	683b      	ldr	r3, [r7, #0]
 800f604:	891b      	ldrh	r3, [r3, #8]
 800f606:	3b01      	subs	r3, #1
 800f608:	b29a      	uxth	r2, r3
 800f60a:	683b      	ldr	r3, [r7, #0]
 800f60c:	811a      	strh	r2, [r3, #8]
 800f60e:	e00c      	b.n	800f62a <dhcp_fine_tmr+0x4a>
      } else if (dhcp->request_timeout == 1) {
 800f610:	683b      	ldr	r3, [r7, #0]
 800f612:	891b      	ldrh	r3, [r3, #8]
 800f614:	2b01      	cmp	r3, #1
 800f616:	d108      	bne.n	800f62a <dhcp_fine_tmr+0x4a>
        dhcp->request_timeout--;
 800f618:	683b      	ldr	r3, [r7, #0]
 800f61a:	891b      	ldrh	r3, [r3, #8]
 800f61c:	3b01      	subs	r3, #1
 800f61e:	b29a      	uxth	r2, r3
 800f620:	683b      	ldr	r3, [r7, #0]
 800f622:	811a      	strh	r2, [r3, #8]
        /* { dhcp->request_timeout == 0 } */
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_fine_tmr(): request timeout\n"));
        /* this client's request timeout triggered */
        dhcp_timeout(netif);
 800f624:	6878      	ldr	r0, [r7, #4]
 800f626:	f000 f80d 	bl	800f644 <dhcp_timeout>
  NETIF_FOREACH(netif) {
 800f62a:	687b      	ldr	r3, [r7, #4]
 800f62c:	681b      	ldr	r3, [r3, #0]
 800f62e:	607b      	str	r3, [r7, #4]
 800f630:	687b      	ldr	r3, [r7, #4]
 800f632:	2b00      	cmp	r3, #0
 800f634:	d1db      	bne.n	800f5ee <dhcp_fine_tmr+0xe>
      }
    }
  }
}
 800f636:	bf00      	nop
 800f638:	3708      	adds	r7, #8
 800f63a:	46bd      	mov	sp, r7
 800f63c:	bd80      	pop	{r7, pc}
 800f63e:	bf00      	nop
 800f640:	2000eed4 	.word	0x2000eed4

0800f644 <dhcp_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_timeout(struct netif *netif)
{
 800f644:	b580      	push	{r7, lr}
 800f646:	b084      	sub	sp, #16
 800f648:	af00      	add	r7, sp, #0
 800f64a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800f64c:	687b      	ldr	r3, [r7, #4]
 800f64e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f650:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout()\n"));
  /* back-off period has passed, or server selection timed out */
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 800f652:	68fb      	ldr	r3, [r7, #12]
 800f654:	795b      	ldrb	r3, [r3, #5]
 800f656:	2b0c      	cmp	r3, #12
 800f658:	d003      	beq.n	800f662 <dhcp_timeout+0x1e>
 800f65a:	68fb      	ldr	r3, [r7, #12]
 800f65c:	795b      	ldrb	r3, [r3, #5]
 800f65e:	2b06      	cmp	r3, #6
 800f660:	d103      	bne.n	800f66a <dhcp_timeout+0x26>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout(): restarting discovery\n"));
    dhcp_discover(netif);
 800f662:	6878      	ldr	r0, [r7, #4]
 800f664:	f000 fa66 	bl	800fb34 <dhcp_discover>
      dhcp_reboot(netif);
    } else {
      dhcp_discover(netif);
    }
  }
}
 800f668:	e031      	b.n	800f6ce <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
 800f66a:	68fb      	ldr	r3, [r7, #12]
 800f66c:	795b      	ldrb	r3, [r3, #5]
 800f66e:	2b01      	cmp	r3, #1
 800f670:	d10e      	bne.n	800f690 <dhcp_timeout+0x4c>
    if (dhcp->tries <= 5) {
 800f672:	68fb      	ldr	r3, [r7, #12]
 800f674:	799b      	ldrb	r3, [r3, #6]
 800f676:	2b05      	cmp	r3, #5
 800f678:	d803      	bhi.n	800f682 <dhcp_timeout+0x3e>
      dhcp_select(netif);
 800f67a:	6878      	ldr	r0, [r7, #4]
 800f67c:	f7ff fe60 	bl	800f340 <dhcp_select>
}
 800f680:	e025      	b.n	800f6ce <dhcp_timeout+0x8a>
      dhcp_release_and_stop(netif);
 800f682:	6878      	ldr	r0, [r7, #4]
 800f684:	f000 fdc0 	bl	8010208 <dhcp_release_and_stop>
      dhcp_start(netif);
 800f688:	6878      	ldr	r0, [r7, #4]
 800f68a:	f000 f8e5 	bl	800f858 <dhcp_start>
}
 800f68e:	e01e      	b.n	800f6ce <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
 800f690:	68fb      	ldr	r3, [r7, #12]
 800f692:	795b      	ldrb	r3, [r3, #5]
 800f694:	2b08      	cmp	r3, #8
 800f696:	d10b      	bne.n	800f6b0 <dhcp_timeout+0x6c>
    if (dhcp->tries <= 1) {
 800f698:	68fb      	ldr	r3, [r7, #12]
 800f69a:	799b      	ldrb	r3, [r3, #6]
 800f69c:	2b01      	cmp	r3, #1
 800f69e:	d803      	bhi.n	800f6a8 <dhcp_timeout+0x64>
      dhcp_check(netif);
 800f6a0:	6878      	ldr	r0, [r7, #4]
 800f6a2:	f7ff fdf3 	bl	800f28c <dhcp_check>
}
 800f6a6:	e012      	b.n	800f6ce <dhcp_timeout+0x8a>
      dhcp_bind(netif);
 800f6a8:	6878      	ldr	r0, [r7, #4]
 800f6aa:	f000 fae5 	bl	800fc78 <dhcp_bind>
}
 800f6ae:	e00e      	b.n	800f6ce <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
 800f6b0:	68fb      	ldr	r3, [r7, #12]
 800f6b2:	795b      	ldrb	r3, [r3, #5]
 800f6b4:	2b03      	cmp	r3, #3
 800f6b6:	d10a      	bne.n	800f6ce <dhcp_timeout+0x8a>
    if (dhcp->tries < REBOOT_TRIES) {
 800f6b8:	68fb      	ldr	r3, [r7, #12]
 800f6ba:	799b      	ldrb	r3, [r3, #6]
 800f6bc:	2b01      	cmp	r3, #1
 800f6be:	d803      	bhi.n	800f6c8 <dhcp_timeout+0x84>
      dhcp_reboot(netif);
 800f6c0:	6878      	ldr	r0, [r7, #4]
 800f6c2:	f000 fceb 	bl	801009c <dhcp_reboot>
}
 800f6c6:	e002      	b.n	800f6ce <dhcp_timeout+0x8a>
      dhcp_discover(netif);
 800f6c8:	6878      	ldr	r0, [r7, #4]
 800f6ca:	f000 fa33 	bl	800fb34 <dhcp_discover>
}
 800f6ce:	bf00      	nop
 800f6d0:	3710      	adds	r7, #16
 800f6d2:	46bd      	mov	sp, r7
 800f6d4:	bd80      	pop	{r7, pc}

0800f6d6 <dhcp_t1_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t1_timeout(struct netif *netif)
{
 800f6d6:	b580      	push	{r7, lr}
 800f6d8:	b084      	sub	sp, #16
 800f6da:	af00      	add	r7, sp, #0
 800f6dc:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800f6de:	687b      	ldr	r3, [r7, #4]
 800f6e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f6e2:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_t1_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 800f6e4:	68fb      	ldr	r3, [r7, #12]
 800f6e6:	795b      	ldrb	r3, [r3, #5]
 800f6e8:	2b01      	cmp	r3, #1
 800f6ea:	d007      	beq.n	800f6fc <dhcp_t1_timeout+0x26>
 800f6ec:	68fb      	ldr	r3, [r7, #12]
 800f6ee:	795b      	ldrb	r3, [r3, #5]
 800f6f0:	2b0a      	cmp	r3, #10
 800f6f2:	d003      	beq.n	800f6fc <dhcp_t1_timeout+0x26>
      (dhcp->state == DHCP_STATE_RENEWING)) {
 800f6f4:	68fb      	ldr	r3, [r7, #12]
 800f6f6:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 800f6f8:	2b05      	cmp	r3, #5
 800f6fa:	d116      	bne.n	800f72a <dhcp_t1_timeout+0x54>
     * eventually time-out if renew tries fail. */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t1_timeout(): must renew\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_RENEWING, not DHCP_STATE_BOUND */
    dhcp_renew(netif);
 800f6fc:	6878      	ldr	r0, [r7, #4]
 800f6fe:	f000 fb95 	bl	800fe2c <dhcp_renew>
    /* Calculate next timeout */
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 800f702:	68fb      	ldr	r3, [r7, #12]
 800f704:	899b      	ldrh	r3, [r3, #12]
 800f706:	461a      	mov	r2, r3
 800f708:	68fb      	ldr	r3, [r7, #12]
 800f70a:	8a5b      	ldrh	r3, [r3, #18]
 800f70c:	1ad3      	subs	r3, r2, r3
 800f70e:	2b01      	cmp	r3, #1
 800f710:	dd0b      	ble.n	800f72a <dhcp_t1_timeout+0x54>
      dhcp->t1_renew_time = (u16_t)((dhcp->t2_timeout - dhcp->lease_used) / 2);
 800f712:	68fb      	ldr	r3, [r7, #12]
 800f714:	899b      	ldrh	r3, [r3, #12]
 800f716:	461a      	mov	r2, r3
 800f718:	68fb      	ldr	r3, [r7, #12]
 800f71a:	8a5b      	ldrh	r3, [r3, #18]
 800f71c:	1ad3      	subs	r3, r2, r3
 800f71e:	0fda      	lsrs	r2, r3, #31
 800f720:	4413      	add	r3, r2
 800f722:	105b      	asrs	r3, r3, #1
 800f724:	b29a      	uxth	r2, r3
 800f726:	68fb      	ldr	r3, [r7, #12]
 800f728:	81da      	strh	r2, [r3, #14]
    }
  }
}
 800f72a:	bf00      	nop
 800f72c:	3710      	adds	r7, #16
 800f72e:	46bd      	mov	sp, r7
 800f730:	bd80      	pop	{r7, pc}

0800f732 <dhcp_t2_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t2_timeout(struct netif *netif)
{
 800f732:	b580      	push	{r7, lr}
 800f734:	b084      	sub	sp, #16
 800f736:	af00      	add	r7, sp, #0
 800f738:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800f73a:	687b      	ldr	r3, [r7, #4]
 800f73c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f73e:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_t2_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 800f740:	68fb      	ldr	r3, [r7, #12]
 800f742:	795b      	ldrb	r3, [r3, #5]
 800f744:	2b01      	cmp	r3, #1
 800f746:	d00b      	beq.n	800f760 <dhcp_t2_timeout+0x2e>
 800f748:	68fb      	ldr	r3, [r7, #12]
 800f74a:	795b      	ldrb	r3, [r3, #5]
 800f74c:	2b0a      	cmp	r3, #10
 800f74e:	d007      	beq.n	800f760 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 800f750:	68fb      	ldr	r3, [r7, #12]
 800f752:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 800f754:	2b05      	cmp	r3, #5
 800f756:	d003      	beq.n	800f760 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 800f758:	68fb      	ldr	r3, [r7, #12]
 800f75a:	795b      	ldrb	r3, [r3, #5]
 800f75c:	2b04      	cmp	r3, #4
 800f75e:	d116      	bne.n	800f78e <dhcp_t2_timeout+0x5c>
    /* just retry to rebind */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t2_timeout(): must rebind\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_REBINDING, not DHCP_STATE_BOUND */
    dhcp_rebind(netif);
 800f760:	6878      	ldr	r0, [r7, #4]
 800f762:	f000 fbff 	bl	800ff64 <dhcp_rebind>
    /* Calculate next timeout */
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 800f766:	68fb      	ldr	r3, [r7, #12]
 800f768:	8a9b      	ldrh	r3, [r3, #20]
 800f76a:	461a      	mov	r2, r3
 800f76c:	68fb      	ldr	r3, [r7, #12]
 800f76e:	8a5b      	ldrh	r3, [r3, #18]
 800f770:	1ad3      	subs	r3, r2, r3
 800f772:	2b01      	cmp	r3, #1
 800f774:	dd0b      	ble.n	800f78e <dhcp_t2_timeout+0x5c>
      dhcp->t2_rebind_time = (u16_t)((dhcp->t0_timeout - dhcp->lease_used) / 2);
 800f776:	68fb      	ldr	r3, [r7, #12]
 800f778:	8a9b      	ldrh	r3, [r3, #20]
 800f77a:	461a      	mov	r2, r3
 800f77c:	68fb      	ldr	r3, [r7, #12]
 800f77e:	8a5b      	ldrh	r3, [r3, #18]
 800f780:	1ad3      	subs	r3, r2, r3
 800f782:	0fda      	lsrs	r2, r3, #31
 800f784:	4413      	add	r3, r2
 800f786:	105b      	asrs	r3, r3, #1
 800f788:	b29a      	uxth	r2, r3
 800f78a:	68fb      	ldr	r3, [r7, #12]
 800f78c:	821a      	strh	r2, [r3, #16]
    }
  }
}
 800f78e:	bf00      	nop
 800f790:	3710      	adds	r7, #16
 800f792:	46bd      	mov	sp, r7
 800f794:	bd80      	pop	{r7, pc}
	...

0800f798 <dhcp_handle_ack>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_ack(struct netif *netif, struct dhcp_msg *msg_in)
{
 800f798:	b580      	push	{r7, lr}
 800f79a:	b084      	sub	sp, #16
 800f79c:	af00      	add	r7, sp, #0
 800f79e:	6078      	str	r0, [r7, #4]
 800f7a0:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800f7a2:	687b      	ldr	r3, [r7, #4]
 800f7a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f7a6:	60fb      	str	r3, [r7, #12]
#if LWIP_DHCP_GET_NTP_SRV
  ip4_addr_t ntp_server_addrs[LWIP_DHCP_MAX_NTP_SERVERS];
#endif

  /* clear options we might not get from the ACK */
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 800f7a8:	68fb      	ldr	r3, [r7, #12]
 800f7aa:	2200      	movs	r2, #0
 800f7ac:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 800f7ae:	68fb      	ldr	r3, [r7, #12]
 800f7b0:	2200      	movs	r2, #0
 800f7b2:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* lease time given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 800f7b4:	4b26      	ldr	r3, [pc, #152]	; (800f850 <dhcp_handle_ack+0xb8>)
 800f7b6:	78db      	ldrb	r3, [r3, #3]
 800f7b8:	2b00      	cmp	r3, #0
 800f7ba:	d003      	beq.n	800f7c4 <dhcp_handle_ack+0x2c>
    /* remember offered lease time */
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
 800f7bc:	4b25      	ldr	r3, [pc, #148]	; (800f854 <dhcp_handle_ack+0xbc>)
 800f7be:	68da      	ldr	r2, [r3, #12]
 800f7c0:	68fb      	ldr	r3, [r7, #12]
 800f7c2:	629a      	str	r2, [r3, #40]	; 0x28
  }
  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
 800f7c4:	4b22      	ldr	r3, [pc, #136]	; (800f850 <dhcp_handle_ack+0xb8>)
 800f7c6:	791b      	ldrb	r3, [r3, #4]
 800f7c8:	2b00      	cmp	r3, #0
 800f7ca:	d004      	beq.n	800f7d6 <dhcp_handle_ack+0x3e>
    /* remember given renewal period */
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
 800f7cc:	4b21      	ldr	r3, [pc, #132]	; (800f854 <dhcp_handle_ack+0xbc>)
 800f7ce:	691a      	ldr	r2, [r3, #16]
 800f7d0:	68fb      	ldr	r3, [r7, #12]
 800f7d2:	62da      	str	r2, [r3, #44]	; 0x2c
 800f7d4:	e004      	b.n	800f7e0 <dhcp_handle_ack+0x48>
  } else {
    /* calculate safe periods for renewal */
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 800f7d6:	68fb      	ldr	r3, [r7, #12]
 800f7d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f7da:	085a      	lsrs	r2, r3, #1
 800f7dc:	68fb      	ldr	r3, [r7, #12]
 800f7de:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
 800f7e0:	4b1b      	ldr	r3, [pc, #108]	; (800f850 <dhcp_handle_ack+0xb8>)
 800f7e2:	795b      	ldrb	r3, [r3, #5]
 800f7e4:	2b00      	cmp	r3, #0
 800f7e6:	d004      	beq.n	800f7f2 <dhcp_handle_ack+0x5a>
    /* remember given rebind period */
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
 800f7e8:	4b1a      	ldr	r3, [pc, #104]	; (800f854 <dhcp_handle_ack+0xbc>)
 800f7ea:	695a      	ldr	r2, [r3, #20]
 800f7ec:	68fb      	ldr	r3, [r7, #12]
 800f7ee:	631a      	str	r2, [r3, #48]	; 0x30
 800f7f0:	e007      	b.n	800f802 <dhcp_handle_ack+0x6a>
  } else {
    /* calculate safe periods for rebinding (offered_t0_lease * 0.875 -> 87.5%)*/
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
 800f7f2:	68fb      	ldr	r3, [r7, #12]
 800f7f4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800f7f6:	4613      	mov	r3, r2
 800f7f8:	00db      	lsls	r3, r3, #3
 800f7fa:	1a9b      	subs	r3, r3, r2
 800f7fc:	08da      	lsrs	r2, r3, #3
 800f7fe:	68fb      	ldr	r3, [r7, #12]
 800f800:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* (y)our internet address */
  ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 800f802:	683b      	ldr	r3, [r7, #0]
 800f804:	691a      	ldr	r2, [r3, #16]
 800f806:	68fb      	ldr	r3, [r7, #12]
 800f808:	61da      	str	r2, [r3, #28]
     boot file name copied in dhcp_parse_reply if not overloaded */
  ip4_addr_copy(dhcp->offered_si_addr, msg_in->siaddr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* subnet mask given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 800f80a:	4b11      	ldr	r3, [pc, #68]	; (800f850 <dhcp_handle_ack+0xb8>)
 800f80c:	799b      	ldrb	r3, [r3, #6]
 800f80e:	2b00      	cmp	r3, #0
 800f810:	d00b      	beq.n	800f82a <dhcp_handle_ack+0x92>
    /* remember given subnet mask */
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 800f812:	4b10      	ldr	r3, [pc, #64]	; (800f854 <dhcp_handle_ack+0xbc>)
 800f814:	699b      	ldr	r3, [r3, #24]
 800f816:	4618      	mov	r0, r3
 800f818:	f7f7 fecb 	bl	80075b2 <lwip_htonl>
 800f81c:	4602      	mov	r2, r0
 800f81e:	68fb      	ldr	r3, [r7, #12]
 800f820:	621a      	str	r2, [r3, #32]
    dhcp->subnet_mask_given = 1;
 800f822:	68fb      	ldr	r3, [r7, #12]
 800f824:	2201      	movs	r2, #1
 800f826:	71da      	strb	r2, [r3, #7]
 800f828:	e002      	b.n	800f830 <dhcp_handle_ack+0x98>
  } else {
    dhcp->subnet_mask_given = 0;
 800f82a:	68fb      	ldr	r3, [r7, #12]
 800f82c:	2200      	movs	r2, #0
 800f82e:	71da      	strb	r2, [r3, #7]
  }

  /* gateway router */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 800f830:	4b07      	ldr	r3, [pc, #28]	; (800f850 <dhcp_handle_ack+0xb8>)
 800f832:	79db      	ldrb	r3, [r3, #7]
 800f834:	2b00      	cmp	r3, #0
 800f836:	d007      	beq.n	800f848 <dhcp_handle_ack+0xb0>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
 800f838:	4b06      	ldr	r3, [pc, #24]	; (800f854 <dhcp_handle_ack+0xbc>)
 800f83a:	69db      	ldr	r3, [r3, #28]
 800f83c:	4618      	mov	r0, r3
 800f83e:	f7f7 feb8 	bl	80075b2 <lwip_htonl>
 800f842:	4602      	mov	r2, r0
 800f844:	68fb      	ldr	r3, [r7, #12]
 800f846:	625a      	str	r2, [r3, #36]	; 0x24
    ip_addr_t dns_addr;
    ip_addr_set_ip4_u32_val(dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
    dns_setserver(n, &dns_addr);
  }
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
}
 800f848:	bf00      	nop
 800f84a:	3710      	adds	r7, #16
 800f84c:	46bd      	mov	sp, r7
 800f84e:	bd80      	pop	{r7, pc}
 800f850:	2000ef00 	.word	0x2000ef00
 800f854:	2000ef08 	.word	0x2000ef08

0800f858 <dhcp_start>:
 * - ERR_OK - No error
 * - ERR_MEM - Out of memory
 */
err_t
dhcp_start(struct netif *netif)
{
 800f858:	b580      	push	{r7, lr}
 800f85a:	b084      	sub	sp, #16
 800f85c:	af00      	add	r7, sp, #0
 800f85e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp;
  err_t result;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 800f860:	687b      	ldr	r3, [r7, #4]
 800f862:	2b00      	cmp	r3, #0
 800f864:	d109      	bne.n	800f87a <dhcp_start+0x22>
 800f866:	4b37      	ldr	r3, [pc, #220]	; (800f944 <dhcp_start+0xec>)
 800f868:	f240 22e7 	movw	r2, #743	; 0x2e7
 800f86c:	4936      	ldr	r1, [pc, #216]	; (800f948 <dhcp_start+0xf0>)
 800f86e:	4837      	ldr	r0, [pc, #220]	; (800f94c <dhcp_start+0xf4>)
 800f870:	f003 ff50 	bl	8013714 <iprintf>
 800f874:	f06f 030f 	mvn.w	r3, #15
 800f878:	e060      	b.n	800f93c <dhcp_start+0xe4>
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 800f87a:	687b      	ldr	r3, [r7, #4]
 800f87c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800f880:	f003 0301 	and.w	r3, r3, #1
 800f884:	2b00      	cmp	r3, #0
 800f886:	d109      	bne.n	800f89c <dhcp_start+0x44>
 800f888:	4b2e      	ldr	r3, [pc, #184]	; (800f944 <dhcp_start+0xec>)
 800f88a:	f44f 723a 	mov.w	r2, #744	; 0x2e8
 800f88e:	4930      	ldr	r1, [pc, #192]	; (800f950 <dhcp_start+0xf8>)
 800f890:	482e      	ldr	r0, [pc, #184]	; (800f94c <dhcp_start+0xf4>)
 800f892:	f003 ff3f 	bl	8013714 <iprintf>
 800f896:	f06f 030f 	mvn.w	r3, #15
 800f89a:	e04f      	b.n	800f93c <dhcp_start+0xe4>
  dhcp = netif_dhcp_data(netif);
 800f89c:	687b      	ldr	r3, [r7, #4]
 800f89e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f8a0:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* check MTU of the netif */
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 800f8a2:	687b      	ldr	r3, [r7, #4]
 800f8a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f8a6:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 800f8aa:	d202      	bcs.n	800f8b2 <dhcp_start+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): Cannot use this netif with DHCP: MTU is too small\n"));
    return ERR_MEM;
 800f8ac:	f04f 33ff 	mov.w	r3, #4294967295
 800f8b0:	e044      	b.n	800f93c <dhcp_start+0xe4>
  }

  /* no DHCP client attached yet? */
  if (dhcp == NULL) {
 800f8b2:	68fb      	ldr	r3, [r7, #12]
 800f8b4:	2b00      	cmp	r3, #0
 800f8b6:	d10d      	bne.n	800f8d4 <dhcp_start+0x7c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): mallocing new DHCP client\n"));
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
 800f8b8:	2034      	movs	r0, #52	; 0x34
 800f8ba:	f7f8 f999 	bl	8007bf0 <mem_malloc>
 800f8be:	60f8      	str	r0, [r7, #12]
    if (dhcp == NULL) {
 800f8c0:	68fb      	ldr	r3, [r7, #12]
 800f8c2:	2b00      	cmp	r3, #0
 800f8c4:	d102      	bne.n	800f8cc <dhcp_start+0x74>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): could not allocate dhcp\n"));
      return ERR_MEM;
 800f8c6:	f04f 33ff 	mov.w	r3, #4294967295
 800f8ca:	e037      	b.n	800f93c <dhcp_start+0xe4>
    }

    /* store this dhcp client in the netif */
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
 800f8cc:	687b      	ldr	r3, [r7, #4]
 800f8ce:	68fa      	ldr	r2, [r7, #12]
 800f8d0:	625a      	str	r2, [r3, #36]	; 0x24
 800f8d2:	e005      	b.n	800f8e0 <dhcp_start+0x88>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): allocated dhcp"));
    /* already has DHCP client attached */
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(): restarting DHCP configuration\n"));

    if (dhcp->pcb_allocated != 0) {
 800f8d4:	68fb      	ldr	r3, [r7, #12]
 800f8d6:	791b      	ldrb	r3, [r3, #4]
 800f8d8:	2b00      	cmp	r3, #0
 800f8da:	d001      	beq.n	800f8e0 <dhcp_start+0x88>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 800f8dc:	f7ff fc92 	bl	800f204 <dhcp_dec_pcb_refcount>
    }
    /* dhcp is cleared below, no need to reset flag*/
  }

  /* clear data structure */
  memset(dhcp, 0, sizeof(struct dhcp));
 800f8e0:	2234      	movs	r2, #52	; 0x34
 800f8e2:	2100      	movs	r1, #0
 800f8e4:	68f8      	ldr	r0, [r7, #12]
 800f8e6:	f003 ff0d 	bl	8013704 <memset>
  /* dhcp_set_state(&dhcp, DHCP_STATE_OFF); */

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): starting DHCP configuration\n"));

  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
 800f8ea:	f7ff fc39 	bl	800f160 <dhcp_inc_pcb_refcount>
 800f8ee:	4603      	mov	r3, r0
 800f8f0:	2b00      	cmp	r3, #0
 800f8f2:	d002      	beq.n	800f8fa <dhcp_start+0xa2>
    return ERR_MEM;
 800f8f4:	f04f 33ff 	mov.w	r3, #4294967295
 800f8f8:	e020      	b.n	800f93c <dhcp_start+0xe4>
  }
  dhcp->pcb_allocated = 1;
 800f8fa:	68fb      	ldr	r3, [r7, #12]
 800f8fc:	2201      	movs	r2, #1
 800f8fe:	711a      	strb	r2, [r3, #4]

  if (!netif_is_link_up(netif)) {
 800f900:	687b      	ldr	r3, [r7, #4]
 800f902:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800f906:	f003 0304 	and.w	r3, r3, #4
 800f90a:	2b00      	cmp	r3, #0
 800f90c:	d105      	bne.n	800f91a <dhcp_start+0xc2>
    /* set state INIT and wait for dhcp_network_changed() to call dhcp_discover() */
    dhcp_set_state(dhcp, DHCP_STATE_INIT);
 800f90e:	2102      	movs	r1, #2
 800f910:	68f8      	ldr	r0, [r7, #12]
 800f912:	f000 fd13 	bl	801033c <dhcp_set_state>
    return ERR_OK;
 800f916:	2300      	movs	r3, #0
 800f918:	e010      	b.n	800f93c <dhcp_start+0xe4>
  }

  /* (re)start the DHCP negotiation */
  result = dhcp_discover(netif);
 800f91a:	6878      	ldr	r0, [r7, #4]
 800f91c:	f000 f90a 	bl	800fb34 <dhcp_discover>
 800f920:	4603      	mov	r3, r0
 800f922:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
 800f924:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800f928:	2b00      	cmp	r3, #0
 800f92a:	d005      	beq.n	800f938 <dhcp_start+0xe0>
    /* free resources allocated above */
    dhcp_release_and_stop(netif);
 800f92c:	6878      	ldr	r0, [r7, #4]
 800f92e:	f000 fc6b 	bl	8010208 <dhcp_release_and_stop>
    return ERR_MEM;
 800f932:	f04f 33ff 	mov.w	r3, #4294967295
 800f936:	e001      	b.n	800f93c <dhcp_start+0xe4>
  }
  return result;
 800f938:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800f93c:	4618      	mov	r0, r3
 800f93e:	3710      	adds	r7, #16
 800f940:	46bd      	mov	sp, r7
 800f942:	bd80      	pop	{r7, pc}
 800f944:	080169fc 	.word	0x080169fc
 800f948:	08016ae0 	.word	0x08016ae0
 800f94c:	08016a5c 	.word	0x08016a5c
 800f950:	08016b24 	.word	0x08016b24

0800f954 <dhcp_network_changed>:
 * This enters the REBOOTING state to verify that the currently bound
 * address is still valid.
 */
void
dhcp_network_changed(struct netif *netif)
{
 800f954:	b580      	push	{r7, lr}
 800f956:	b084      	sub	sp, #16
 800f958:	af00      	add	r7, sp, #0
 800f95a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800f95c:	687b      	ldr	r3, [r7, #4]
 800f95e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f960:	60fb      	str	r3, [r7, #12]

  if (!dhcp) {
 800f962:	68fb      	ldr	r3, [r7, #12]
 800f964:	2b00      	cmp	r3, #0
 800f966:	d037      	beq.n	800f9d8 <dhcp_network_changed+0x84>
    return;
  }
  switch (dhcp->state) {
 800f968:	68fb      	ldr	r3, [r7, #12]
 800f96a:	795b      	ldrb	r3, [r3, #5]
 800f96c:	2b0a      	cmp	r3, #10
 800f96e:	d820      	bhi.n	800f9b2 <dhcp_network_changed+0x5e>
 800f970:	a201      	add	r2, pc, #4	; (adr r2, 800f978 <dhcp_network_changed+0x24>)
 800f972:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f976:	bf00      	nop
 800f978:	0800f9dd 	.word	0x0800f9dd
 800f97c:	0800f9b3 	.word	0x0800f9b3
 800f980:	0800f9b3 	.word	0x0800f9b3
 800f984:	0800f9a5 	.word	0x0800f9a5
 800f988:	0800f9a5 	.word	0x0800f9a5
 800f98c:	0800f9a5 	.word	0x0800f9a5
 800f990:	0800f9b3 	.word	0x0800f9b3
 800f994:	0800f9b3 	.word	0x0800f9b3
 800f998:	0800f9b3 	.word	0x0800f9b3
 800f99c:	0800f9b3 	.word	0x0800f9b3
 800f9a0:	0800f9a5 	.word	0x0800f9a5
    case DHCP_STATE_REBINDING:
    case DHCP_STATE_RENEWING:
    case DHCP_STATE_BOUND:
    case DHCP_STATE_REBOOTING:
      dhcp->tries = 0;
 800f9a4:	68fb      	ldr	r3, [r7, #12]
 800f9a6:	2200      	movs	r2, #0
 800f9a8:	719a      	strb	r2, [r3, #6]
      dhcp_reboot(netif);
 800f9aa:	6878      	ldr	r0, [r7, #4]
 800f9ac:	f000 fb76 	bl	801009c <dhcp_reboot>
      break;
 800f9b0:	e015      	b.n	800f9de <dhcp_network_changed+0x8a>
    case DHCP_STATE_OFF:
      /* stay off */
      break;
    default:
      LWIP_ASSERT("invalid dhcp->state", dhcp->state <= DHCP_STATE_BACKING_OFF);
 800f9b2:	68fb      	ldr	r3, [r7, #12]
 800f9b4:	795b      	ldrb	r3, [r3, #5]
 800f9b6:	2b0c      	cmp	r3, #12
 800f9b8:	d906      	bls.n	800f9c8 <dhcp_network_changed+0x74>
 800f9ba:	4b0a      	ldr	r3, [pc, #40]	; (800f9e4 <dhcp_network_changed+0x90>)
 800f9bc:	f240 326d 	movw	r2, #877	; 0x36d
 800f9c0:	4909      	ldr	r1, [pc, #36]	; (800f9e8 <dhcp_network_changed+0x94>)
 800f9c2:	480a      	ldr	r0, [pc, #40]	; (800f9ec <dhcp_network_changed+0x98>)
 800f9c4:	f003 fea6 	bl	8013714 <iprintf>
        autoip_stop(netif);
        dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
      }
#endif /* LWIP_DHCP_AUTOIP_COOP */
      /* ensure we start with short timeouts, even if already discovering */
      dhcp->tries = 0;
 800f9c8:	68fb      	ldr	r3, [r7, #12]
 800f9ca:	2200      	movs	r2, #0
 800f9cc:	719a      	strb	r2, [r3, #6]
      dhcp_discover(netif);
 800f9ce:	6878      	ldr	r0, [r7, #4]
 800f9d0:	f000 f8b0 	bl	800fb34 <dhcp_discover>
      break;
 800f9d4:	bf00      	nop
 800f9d6:	e002      	b.n	800f9de <dhcp_network_changed+0x8a>
    return;
 800f9d8:	bf00      	nop
 800f9da:	e000      	b.n	800f9de <dhcp_network_changed+0x8a>
      break;
 800f9dc:	bf00      	nop
  }
}
 800f9de:	3710      	adds	r7, #16
 800f9e0:	46bd      	mov	sp, r7
 800f9e2:	bd80      	pop	{r7, pc}
 800f9e4:	080169fc 	.word	0x080169fc
 800f9e8:	08016b48 	.word	0x08016b48
 800f9ec:	08016a5c 	.word	0x08016a5c

0800f9f0 <dhcp_arp_reply>:
 * @param netif the network interface on which the reply was received
 * @param addr The IP address we received a reply from
 */
void
dhcp_arp_reply(struct netif *netif, const ip4_addr_t *addr)
{
 800f9f0:	b580      	push	{r7, lr}
 800f9f2:	b084      	sub	sp, #16
 800f9f4:	af00      	add	r7, sp, #0
 800f9f6:	6078      	str	r0, [r7, #4]
 800f9f8:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800f9fa:	687b      	ldr	r3, [r7, #4]
 800f9fc:	2b00      	cmp	r3, #0
 800f9fe:	d107      	bne.n	800fa10 <dhcp_arp_reply+0x20>
 800fa00:	4b0e      	ldr	r3, [pc, #56]	; (800fa3c <dhcp_arp_reply+0x4c>)
 800fa02:	f240 328b 	movw	r2, #907	; 0x38b
 800fa06:	490e      	ldr	r1, [pc, #56]	; (800fa40 <dhcp_arp_reply+0x50>)
 800fa08:	480e      	ldr	r0, [pc, #56]	; (800fa44 <dhcp_arp_reply+0x54>)
 800fa0a:	f003 fe83 	bl	8013714 <iprintf>
 800fa0e:	e012      	b.n	800fa36 <dhcp_arp_reply+0x46>
  dhcp = netif_dhcp_data(netif);
 800fa10:	687b      	ldr	r3, [r7, #4]
 800fa12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fa14:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_arp_reply()\n"));
  /* is a DHCP client doing an ARP check? */
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
 800fa16:	68fb      	ldr	r3, [r7, #12]
 800fa18:	2b00      	cmp	r3, #0
 800fa1a:	d00c      	beq.n	800fa36 <dhcp_arp_reply+0x46>
 800fa1c:	68fb      	ldr	r3, [r7, #12]
 800fa1e:	795b      	ldrb	r3, [r3, #5]
 800fa20:	2b08      	cmp	r3, #8
 800fa22:	d108      	bne.n	800fa36 <dhcp_arp_reply+0x46>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_arp_reply(): CHECKING, arp reply for 0x%08"X32_F"\n",
                ip4_addr_get_u32(addr)));
    /* did a host respond with the address we
       were offered by the DHCP server? */
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
 800fa24:	683b      	ldr	r3, [r7, #0]
 800fa26:	681a      	ldr	r2, [r3, #0]
 800fa28:	68fb      	ldr	r3, [r7, #12]
 800fa2a:	69db      	ldr	r3, [r3, #28]
 800fa2c:	429a      	cmp	r2, r3
 800fa2e:	d102      	bne.n	800fa36 <dhcp_arp_reply+0x46>
      /* we will not accept the offered address */
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE | LWIP_DBG_LEVEL_WARNING,
                  ("dhcp_arp_reply(): arp reply matched with offered address, declining\n"));
      dhcp_decline(netif);
 800fa30:	6878      	ldr	r0, [r7, #4]
 800fa32:	f000 f809 	bl	800fa48 <dhcp_decline>
    }
  }
}
 800fa36:	3710      	adds	r7, #16
 800fa38:	46bd      	mov	sp, r7
 800fa3a:	bd80      	pop	{r7, pc}
 800fa3c:	080169fc 	.word	0x080169fc
 800fa40:	08016ae0 	.word	0x08016ae0
 800fa44:	08016a5c 	.word	0x08016a5c

0800fa48 <dhcp_decline>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_decline(struct netif *netif)
{
 800fa48:	b5b0      	push	{r4, r5, r7, lr}
 800fa4a:	b08a      	sub	sp, #40	; 0x28
 800fa4c:	af02      	add	r7, sp, #8
 800fa4e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800fa50:	687b      	ldr	r3, [r7, #4]
 800fa52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fa54:	61bb      	str	r3, [r7, #24]
  u16_t msecs;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 800fa56:	210c      	movs	r1, #12
 800fa58:	69b8      	ldr	r0, [r7, #24]
 800fa5a:	f000 fc6f 	bl	801033c <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DECLINE, &options_out_len);
 800fa5e:	f107 030c 	add.w	r3, r7, #12
 800fa62:	2204      	movs	r2, #4
 800fa64:	69b9      	ldr	r1, [r7, #24]
 800fa66:	6878      	ldr	r0, [r7, #4]
 800fa68:	f001 f8f2 	bl	8010c50 <dhcp_create_msg>
 800fa6c:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 800fa6e:	697b      	ldr	r3, [r7, #20]
 800fa70:	2b00      	cmp	r3, #0
 800fa72:	d035      	beq.n	800fae0 <dhcp_decline+0x98>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 800fa74:	697b      	ldr	r3, [r7, #20]
 800fa76:	685b      	ldr	r3, [r3, #4]
 800fa78:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 800fa7a:	89b8      	ldrh	r0, [r7, #12]
 800fa7c:	693b      	ldr	r3, [r7, #16]
 800fa7e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800fa82:	2304      	movs	r3, #4
 800fa84:	2232      	movs	r2, #50	; 0x32
 800fa86:	f000 fc73 	bl	8010370 <dhcp_option>
 800fa8a:	4603      	mov	r3, r0
 800fa8c:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 800fa8e:	89bc      	ldrh	r4, [r7, #12]
 800fa90:	693b      	ldr	r3, [r7, #16]
 800fa92:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 800fa96:	69bb      	ldr	r3, [r7, #24]
 800fa98:	69db      	ldr	r3, [r3, #28]
 800fa9a:	4618      	mov	r0, r3
 800fa9c:	f7f7 fd89 	bl	80075b2 <lwip_htonl>
 800faa0:	4603      	mov	r3, r0
 800faa2:	461a      	mov	r2, r3
 800faa4:	4629      	mov	r1, r5
 800faa6:	4620      	mov	r0, r4
 800faa8:	f000 fcee 	bl	8010488 <dhcp_option_long>
 800faac:	4603      	mov	r3, r0
 800faae:	81bb      	strh	r3, [r7, #12]

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_BACKING_OFF, msg_out, DHCP_DECLINE, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800fab0:	89b8      	ldrh	r0, [r7, #12]
 800fab2:	693b      	ldr	r3, [r7, #16]
 800fab4:	33f0      	adds	r3, #240	; 0xf0
 800fab6:	697a      	ldr	r2, [r7, #20]
 800fab8:	4619      	mov	r1, r3
 800faba:	f001 f99f 	bl	8010dfc <dhcp_option_trailer>

    /* per section 4.4.4, broadcast DECLINE messages */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 800fabe:	4b19      	ldr	r3, [pc, #100]	; (800fb24 <dhcp_decline+0xdc>)
 800fac0:	6818      	ldr	r0, [r3, #0]
 800fac2:	4b19      	ldr	r3, [pc, #100]	; (800fb28 <dhcp_decline+0xe0>)
 800fac4:	9301      	str	r3, [sp, #4]
 800fac6:	687b      	ldr	r3, [r7, #4]
 800fac8:	9300      	str	r3, [sp, #0]
 800faca:	2343      	movs	r3, #67	; 0x43
 800facc:	4a17      	ldr	r2, [pc, #92]	; (800fb2c <dhcp_decline+0xe4>)
 800face:	6979      	ldr	r1, [r7, #20]
 800fad0:	f7ff f8c0 	bl	800ec54 <udp_sendto_if_src>
 800fad4:	4603      	mov	r3, r0
 800fad6:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 800fad8:	6978      	ldr	r0, [r7, #20]
 800fada:	f7f9 f909 	bl	8008cf0 <pbuf_free>
 800fade:	e001      	b.n	800fae4 <dhcp_decline+0x9c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_decline: BACKING OFF\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_decline: could not allocate DHCP request\n"));
    result = ERR_MEM;
 800fae0:	23ff      	movs	r3, #255	; 0xff
 800fae2:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 800fae4:	69bb      	ldr	r3, [r7, #24]
 800fae6:	799b      	ldrb	r3, [r3, #6]
 800fae8:	2bff      	cmp	r3, #255	; 0xff
 800faea:	d005      	beq.n	800faf8 <dhcp_decline+0xb0>
    dhcp->tries++;
 800faec:	69bb      	ldr	r3, [r7, #24]
 800faee:	799b      	ldrb	r3, [r3, #6]
 800faf0:	3301      	adds	r3, #1
 800faf2:	b2da      	uxtb	r2, r3
 800faf4:	69bb      	ldr	r3, [r7, #24]
 800faf6:	719a      	strb	r2, [r3, #6]
  }
  msecs = 10 * 1000;
 800faf8:	f242 7310 	movw	r3, #10000	; 0x2710
 800fafc:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800fafe:	89fb      	ldrh	r3, [r7, #14]
 800fb00:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800fb04:	4a0a      	ldr	r2, [pc, #40]	; (800fb30 <dhcp_decline+0xe8>)
 800fb06:	fb82 1203 	smull	r1, r2, r2, r3
 800fb0a:	1152      	asrs	r2, r2, #5
 800fb0c:	17db      	asrs	r3, r3, #31
 800fb0e:	1ad3      	subs	r3, r2, r3
 800fb10:	b29a      	uxth	r2, r3
 800fb12:	69bb      	ldr	r3, [r7, #24]
 800fb14:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 800fb16:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800fb1a:	4618      	mov	r0, r3
 800fb1c:	3720      	adds	r7, #32
 800fb1e:	46bd      	mov	sp, r7
 800fb20:	bdb0      	pop	{r4, r5, r7, pc}
 800fb22:	bf00      	nop
 800fb24:	200084e0 	.word	0x200084e0
 800fb28:	08017598 	.word	0x08017598
 800fb2c:	0801759c 	.word	0x0801759c
 800fb30:	10624dd3 	.word	0x10624dd3

0800fb34 <dhcp_discover>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_discover(struct netif *netif)
{
 800fb34:	b580      	push	{r7, lr}
 800fb36:	b08a      	sub	sp, #40	; 0x28
 800fb38:	af02      	add	r7, sp, #8
 800fb3a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800fb3c:	687b      	ldr	r3, [r7, #4]
 800fb3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fb40:	61bb      	str	r3, [r7, #24]
  err_t result = ERR_OK;
 800fb42:	2300      	movs	r3, #0
 800fb44:	75fb      	strb	r3, [r7, #23]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover()\n"));

  ip4_addr_set_any(&dhcp->offered_ip_addr);
 800fb46:	69bb      	ldr	r3, [r7, #24]
 800fb48:	2200      	movs	r2, #0
 800fb4a:	61da      	str	r2, [r3, #28]
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
 800fb4c:	2106      	movs	r1, #6
 800fb4e:	69b8      	ldr	r0, [r7, #24]
 800fb50:	f000 fbf4 	bl	801033c <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER, &options_out_len);
 800fb54:	f107 0308 	add.w	r3, r7, #8
 800fb58:	2201      	movs	r2, #1
 800fb5a:	69b9      	ldr	r1, [r7, #24]
 800fb5c:	6878      	ldr	r0, [r7, #4]
 800fb5e:	f001 f877 	bl	8010c50 <dhcp_create_msg>
 800fb62:	6138      	str	r0, [r7, #16]
  if (p_out != NULL) {
 800fb64:	693b      	ldr	r3, [r7, #16]
 800fb66:	2b00      	cmp	r3, #0
 800fb68:	d04b      	beq.n	800fc02 <dhcp_discover+0xce>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 800fb6a:	693b      	ldr	r3, [r7, #16]
 800fb6c:	685b      	ldr	r3, [r3, #4]
 800fb6e:	60fb      	str	r3, [r7, #12]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: making request\n"));

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800fb70:	8938      	ldrh	r0, [r7, #8]
 800fb72:	68fb      	ldr	r3, [r7, #12]
 800fb74:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800fb78:	2302      	movs	r3, #2
 800fb7a:	2239      	movs	r2, #57	; 0x39
 800fb7c:	f000 fbf8 	bl	8010370 <dhcp_option>
 800fb80:	4603      	mov	r3, r0
 800fb82:	813b      	strh	r3, [r7, #8]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 800fb84:	8938      	ldrh	r0, [r7, #8]
 800fb86:	68fb      	ldr	r3, [r7, #12]
 800fb88:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800fb8c:	687b      	ldr	r3, [r7, #4]
 800fb8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800fb90:	461a      	mov	r2, r3
 800fb92:	f000 fc47 	bl	8010424 <dhcp_option_short>
 800fb96:	4603      	mov	r3, r0
 800fb98:	813b      	strh	r3, [r7, #8]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800fb9a:	8938      	ldrh	r0, [r7, #8]
 800fb9c:	68fb      	ldr	r3, [r7, #12]
 800fb9e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800fba2:	2303      	movs	r3, #3
 800fba4:	2237      	movs	r2, #55	; 0x37
 800fba6:	f000 fbe3 	bl	8010370 <dhcp_option>
 800fbaa:	4603      	mov	r3, r0
 800fbac:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800fbae:	2300      	movs	r3, #0
 800fbb0:	77fb      	strb	r3, [r7, #31]
 800fbb2:	e00e      	b.n	800fbd2 <dhcp_discover+0x9e>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 800fbb4:	8938      	ldrh	r0, [r7, #8]
 800fbb6:	68fb      	ldr	r3, [r7, #12]
 800fbb8:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800fbbc:	7ffb      	ldrb	r3, [r7, #31]
 800fbbe:	4a29      	ldr	r2, [pc, #164]	; (800fc64 <dhcp_discover+0x130>)
 800fbc0:	5cd3      	ldrb	r3, [r2, r3]
 800fbc2:	461a      	mov	r2, r3
 800fbc4:	f000 fc08 	bl	80103d8 <dhcp_option_byte>
 800fbc8:	4603      	mov	r3, r0
 800fbca:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800fbcc:	7ffb      	ldrb	r3, [r7, #31]
 800fbce:	3301      	adds	r3, #1
 800fbd0:	77fb      	strb	r3, [r7, #31]
 800fbd2:	7ffb      	ldrb	r3, [r7, #31]
 800fbd4:	2b02      	cmp	r3, #2
 800fbd6:	d9ed      	bls.n	800fbb4 <dhcp_discover+0x80>
    }
    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_SELECTING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800fbd8:	8938      	ldrh	r0, [r7, #8]
 800fbda:	68fb      	ldr	r3, [r7, #12]
 800fbdc:	33f0      	adds	r3, #240	; 0xf0
 800fbde:	693a      	ldr	r2, [r7, #16]
 800fbe0:	4619      	mov	r1, r3
 800fbe2:	f001 f90b 	bl	8010dfc <dhcp_option_trailer>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: sendto(DISCOVER, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER)\n"));
    udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 800fbe6:	4b20      	ldr	r3, [pc, #128]	; (800fc68 <dhcp_discover+0x134>)
 800fbe8:	6818      	ldr	r0, [r3, #0]
 800fbea:	4b20      	ldr	r3, [pc, #128]	; (800fc6c <dhcp_discover+0x138>)
 800fbec:	9301      	str	r3, [sp, #4]
 800fbee:	687b      	ldr	r3, [r7, #4]
 800fbf0:	9300      	str	r3, [sp, #0]
 800fbf2:	2343      	movs	r3, #67	; 0x43
 800fbf4:	4a1e      	ldr	r2, [pc, #120]	; (800fc70 <dhcp_discover+0x13c>)
 800fbf6:	6939      	ldr	r1, [r7, #16]
 800fbf8:	f7ff f82c 	bl	800ec54 <udp_sendto_if_src>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: deleting()ing\n"));
    pbuf_free(p_out);
 800fbfc:	6938      	ldr	r0, [r7, #16]
 800fbfe:	f7f9 f877 	bl	8008cf0 <pbuf_free>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover: SELECTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_discover: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 800fc02:	69bb      	ldr	r3, [r7, #24]
 800fc04:	799b      	ldrb	r3, [r3, #6]
 800fc06:	2bff      	cmp	r3, #255	; 0xff
 800fc08:	d005      	beq.n	800fc16 <dhcp_discover+0xe2>
    dhcp->tries++;
 800fc0a:	69bb      	ldr	r3, [r7, #24]
 800fc0c:	799b      	ldrb	r3, [r3, #6]
 800fc0e:	3301      	adds	r3, #1
 800fc10:	b2da      	uxtb	r2, r3
 800fc12:	69bb      	ldr	r3, [r7, #24]
 800fc14:	719a      	strb	r2, [r3, #6]
  if (dhcp->tries >= LWIP_DHCP_AUTOIP_COOP_TRIES && dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_OFF) {
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_ON;
    autoip_start(netif);
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 800fc16:	69bb      	ldr	r3, [r7, #24]
 800fc18:	799b      	ldrb	r3, [r3, #6]
 800fc1a:	2b05      	cmp	r3, #5
 800fc1c:	d80d      	bhi.n	800fc3a <dhcp_discover+0x106>
 800fc1e:	69bb      	ldr	r3, [r7, #24]
 800fc20:	799b      	ldrb	r3, [r3, #6]
 800fc22:	461a      	mov	r2, r3
 800fc24:	2301      	movs	r3, #1
 800fc26:	4093      	lsls	r3, r2
 800fc28:	b29b      	uxth	r3, r3
 800fc2a:	461a      	mov	r2, r3
 800fc2c:	0152      	lsls	r2, r2, #5
 800fc2e:	1ad2      	subs	r2, r2, r3
 800fc30:	0092      	lsls	r2, r2, #2
 800fc32:	4413      	add	r3, r2
 800fc34:	00db      	lsls	r3, r3, #3
 800fc36:	b29b      	uxth	r3, r3
 800fc38:	e001      	b.n	800fc3e <dhcp_discover+0x10a>
 800fc3a:	f64e 2360 	movw	r3, #60000	; 0xea60
 800fc3e:	817b      	strh	r3, [r7, #10]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800fc40:	897b      	ldrh	r3, [r7, #10]
 800fc42:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800fc46:	4a0b      	ldr	r2, [pc, #44]	; (800fc74 <dhcp_discover+0x140>)
 800fc48:	fb82 1203 	smull	r1, r2, r2, r3
 800fc4c:	1152      	asrs	r2, r2, #5
 800fc4e:	17db      	asrs	r3, r3, #31
 800fc50:	1ad3      	subs	r3, r2, r3
 800fc52:	b29a      	uxth	r2, r3
 800fc54:	69bb      	ldr	r3, [r7, #24]
 800fc56:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 800fc58:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800fc5c:	4618      	mov	r0, r3
 800fc5e:	3720      	adds	r7, #32
 800fc60:	46bd      	mov	sp, r7
 800fc62:	bd80      	pop	{r7, pc}
 800fc64:	2000001c 	.word	0x2000001c
 800fc68:	200084e0 	.word	0x200084e0
 800fc6c:	08017598 	.word	0x08017598
 800fc70:	0801759c 	.word	0x0801759c
 800fc74:	10624dd3 	.word	0x10624dd3

0800fc78 <dhcp_bind>:
 *
 * @param netif network interface to bind to the offered address
 */
static void
dhcp_bind(struct netif *netif)
{
 800fc78:	b580      	push	{r7, lr}
 800fc7a:	b088      	sub	sp, #32
 800fc7c:	af00      	add	r7, sp, #0
 800fc7e:	6078      	str	r0, [r7, #4]
  u32_t timeout;
  struct dhcp *dhcp;
  ip4_addr_t sn_mask, gw_addr;
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 800fc80:	687b      	ldr	r3, [r7, #4]
 800fc82:	2b00      	cmp	r3, #0
 800fc84:	d107      	bne.n	800fc96 <dhcp_bind+0x1e>
 800fc86:	4b64      	ldr	r3, [pc, #400]	; (800fe18 <dhcp_bind+0x1a0>)
 800fc88:	f240 4215 	movw	r2, #1045	; 0x415
 800fc8c:	4963      	ldr	r1, [pc, #396]	; (800fe1c <dhcp_bind+0x1a4>)
 800fc8e:	4864      	ldr	r0, [pc, #400]	; (800fe20 <dhcp_bind+0x1a8>)
 800fc90:	f003 fd40 	bl	8013714 <iprintf>
 800fc94:	e0bc      	b.n	800fe10 <dhcp_bind+0x198>
  dhcp = netif_dhcp_data(netif);
 800fc96:	687b      	ldr	r3, [r7, #4]
 800fc98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fc9a:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 800fc9c:	69bb      	ldr	r3, [r7, #24]
 800fc9e:	2b00      	cmp	r3, #0
 800fca0:	d107      	bne.n	800fcb2 <dhcp_bind+0x3a>
 800fca2:	4b5d      	ldr	r3, [pc, #372]	; (800fe18 <dhcp_bind+0x1a0>)
 800fca4:	f240 4217 	movw	r2, #1047	; 0x417
 800fca8:	495e      	ldr	r1, [pc, #376]	; (800fe24 <dhcp_bind+0x1ac>)
 800fcaa:	485d      	ldr	r0, [pc, #372]	; (800fe20 <dhcp_bind+0x1a8>)
 800fcac:	f003 fd32 	bl	8013714 <iprintf>
 800fcb0:	e0ae      	b.n	800fe10 <dhcp_bind+0x198>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* reset time used of lease */
  dhcp->lease_used = 0;
 800fcb2:	69bb      	ldr	r3, [r7, #24]
 800fcb4:	2200      	movs	r2, #0
 800fcb6:	825a      	strh	r2, [r3, #18]

  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 800fcb8:	69bb      	ldr	r3, [r7, #24]
 800fcba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fcbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fcc0:	d019      	beq.n	800fcf6 <dhcp_bind+0x7e>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t0 renewal timer %"U32_F" secs\n", dhcp->offered_t0_lease));
    timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 800fcc2:	69bb      	ldr	r3, [r7, #24]
 800fcc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fcc6:	331e      	adds	r3, #30
 800fcc8:	4a57      	ldr	r2, [pc, #348]	; (800fe28 <dhcp_bind+0x1b0>)
 800fcca:	fba2 2303 	umull	r2, r3, r2, r3
 800fcce:	095b      	lsrs	r3, r3, #5
 800fcd0:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 800fcd2:	69fb      	ldr	r3, [r7, #28]
 800fcd4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800fcd8:	d302      	bcc.n	800fce0 <dhcp_bind+0x68>
      timeout = 0xffff;
 800fcda:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800fcde:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t0_timeout = (u16_t)timeout;
 800fce0:	69fb      	ldr	r3, [r7, #28]
 800fce2:	b29a      	uxth	r2, r3
 800fce4:	69bb      	ldr	r3, [r7, #24]
 800fce6:	829a      	strh	r2, [r3, #20]
    if (dhcp->t0_timeout == 0) {
 800fce8:	69bb      	ldr	r3, [r7, #24]
 800fcea:	8a9b      	ldrh	r3, [r3, #20]
 800fcec:	2b00      	cmp	r3, #0
 800fcee:	d102      	bne.n	800fcf6 <dhcp_bind+0x7e>
      dhcp->t0_timeout = 1;
 800fcf0:	69bb      	ldr	r3, [r7, #24]
 800fcf2:	2201      	movs	r2, #1
 800fcf4:	829a      	strh	r2, [r3, #20]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t0_lease * 1000));
  }

  /* temporary DHCP lease? */
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 800fcf6:	69bb      	ldr	r3, [r7, #24]
 800fcf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fcfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fcfe:	d01d      	beq.n	800fd3c <dhcp_bind+0xc4>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t1 renewal timer %"U32_F" secs\n", dhcp->offered_t1_renew));
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 800fd00:	69bb      	ldr	r3, [r7, #24]
 800fd02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fd04:	331e      	adds	r3, #30
 800fd06:	4a48      	ldr	r2, [pc, #288]	; (800fe28 <dhcp_bind+0x1b0>)
 800fd08:	fba2 2303 	umull	r2, r3, r2, r3
 800fd0c:	095b      	lsrs	r3, r3, #5
 800fd0e:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 800fd10:	69fb      	ldr	r3, [r7, #28]
 800fd12:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800fd16:	d302      	bcc.n	800fd1e <dhcp_bind+0xa6>
      timeout = 0xffff;
 800fd18:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800fd1c:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t1_timeout = (u16_t)timeout;
 800fd1e:	69fb      	ldr	r3, [r7, #28]
 800fd20:	b29a      	uxth	r2, r3
 800fd22:	69bb      	ldr	r3, [r7, #24]
 800fd24:	815a      	strh	r2, [r3, #10]
    if (dhcp->t1_timeout == 0) {
 800fd26:	69bb      	ldr	r3, [r7, #24]
 800fd28:	895b      	ldrh	r3, [r3, #10]
 800fd2a:	2b00      	cmp	r3, #0
 800fd2c:	d102      	bne.n	800fd34 <dhcp_bind+0xbc>
      dhcp->t1_timeout = 1;
 800fd2e:	69bb      	ldr	r3, [r7, #24]
 800fd30:	2201      	movs	r2, #1
 800fd32:	815a      	strh	r2, [r3, #10]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t1_renew * 1000));
    dhcp->t1_renew_time = dhcp->t1_timeout;
 800fd34:	69bb      	ldr	r3, [r7, #24]
 800fd36:	895a      	ldrh	r2, [r3, #10]
 800fd38:	69bb      	ldr	r3, [r7, #24]
 800fd3a:	81da      	strh	r2, [r3, #14]
  }
  /* set renewal period timer */
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 800fd3c:	69bb      	ldr	r3, [r7, #24]
 800fd3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fd40:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fd44:	d01d      	beq.n	800fd82 <dhcp_bind+0x10a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t2 rebind timer %"U32_F" secs\n", dhcp->offered_t2_rebind));
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 800fd46:	69bb      	ldr	r3, [r7, #24]
 800fd48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fd4a:	331e      	adds	r3, #30
 800fd4c:	4a36      	ldr	r2, [pc, #216]	; (800fe28 <dhcp_bind+0x1b0>)
 800fd4e:	fba2 2303 	umull	r2, r3, r2, r3
 800fd52:	095b      	lsrs	r3, r3, #5
 800fd54:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 800fd56:	69fb      	ldr	r3, [r7, #28]
 800fd58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800fd5c:	d302      	bcc.n	800fd64 <dhcp_bind+0xec>
      timeout = 0xffff;
 800fd5e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800fd62:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t2_timeout = (u16_t)timeout;
 800fd64:	69fb      	ldr	r3, [r7, #28]
 800fd66:	b29a      	uxth	r2, r3
 800fd68:	69bb      	ldr	r3, [r7, #24]
 800fd6a:	819a      	strh	r2, [r3, #12]
    if (dhcp->t2_timeout == 0) {
 800fd6c:	69bb      	ldr	r3, [r7, #24]
 800fd6e:	899b      	ldrh	r3, [r3, #12]
 800fd70:	2b00      	cmp	r3, #0
 800fd72:	d102      	bne.n	800fd7a <dhcp_bind+0x102>
      dhcp->t2_timeout = 1;
 800fd74:	69bb      	ldr	r3, [r7, #24]
 800fd76:	2201      	movs	r2, #1
 800fd78:	819a      	strh	r2, [r3, #12]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t2_rebind * 1000));
    dhcp->t2_rebind_time = dhcp->t2_timeout;
 800fd7a:	69bb      	ldr	r3, [r7, #24]
 800fd7c:	899a      	ldrh	r2, [r3, #12]
 800fd7e:	69bb      	ldr	r3, [r7, #24]
 800fd80:	821a      	strh	r2, [r3, #16]
  }

  /* If we have sub 1 minute lease, t2 and t1 will kick in at the same time. */
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 800fd82:	69bb      	ldr	r3, [r7, #24]
 800fd84:	895a      	ldrh	r2, [r3, #10]
 800fd86:	69bb      	ldr	r3, [r7, #24]
 800fd88:	899b      	ldrh	r3, [r3, #12]
 800fd8a:	429a      	cmp	r2, r3
 800fd8c:	d306      	bcc.n	800fd9c <dhcp_bind+0x124>
 800fd8e:	69bb      	ldr	r3, [r7, #24]
 800fd90:	899b      	ldrh	r3, [r3, #12]
 800fd92:	2b00      	cmp	r3, #0
 800fd94:	d002      	beq.n	800fd9c <dhcp_bind+0x124>
    dhcp->t1_timeout = 0;
 800fd96:	69bb      	ldr	r3, [r7, #24]
 800fd98:	2200      	movs	r2, #0
 800fd9a:	815a      	strh	r2, [r3, #10]
  }

  if (dhcp->subnet_mask_given) {
 800fd9c:	69bb      	ldr	r3, [r7, #24]
 800fd9e:	79db      	ldrb	r3, [r3, #7]
 800fda0:	2b00      	cmp	r3, #0
 800fda2:	d003      	beq.n	800fdac <dhcp_bind+0x134>
    /* copy offered network mask */
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
 800fda4:	69bb      	ldr	r3, [r7, #24]
 800fda6:	6a1b      	ldr	r3, [r3, #32]
 800fda8:	613b      	str	r3, [r7, #16]
 800fdaa:	e014      	b.n	800fdd6 <dhcp_bind+0x15e>
  } else {
    /* subnet mask not given, choose a safe subnet mask given the network class */
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
 800fdac:	69bb      	ldr	r3, [r7, #24]
 800fdae:	331c      	adds	r3, #28
 800fdb0:	781b      	ldrb	r3, [r3, #0]
 800fdb2:	75fb      	strb	r3, [r7, #23]
    if (first_octet <= 127) {
 800fdb4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800fdb8:	2b00      	cmp	r3, #0
 800fdba:	db02      	blt.n	800fdc2 <dhcp_bind+0x14a>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
 800fdbc:	23ff      	movs	r3, #255	; 0xff
 800fdbe:	613b      	str	r3, [r7, #16]
 800fdc0:	e009      	b.n	800fdd6 <dhcp_bind+0x15e>
    } else if (first_octet >= 192) {
 800fdc2:	7dfb      	ldrb	r3, [r7, #23]
 800fdc4:	2bbf      	cmp	r3, #191	; 0xbf
 800fdc6:	d903      	bls.n	800fdd0 <dhcp_bind+0x158>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
 800fdc8:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 800fdcc:	613b      	str	r3, [r7, #16]
 800fdce:	e002      	b.n	800fdd6 <dhcp_bind+0x15e>
    } else {
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 800fdd0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800fdd4:	613b      	str	r3, [r7, #16]
    }
  }

  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
 800fdd6:	69bb      	ldr	r3, [r7, #24]
 800fdd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fdda:	60fb      	str	r3, [r7, #12]
  /* gateway address not given? */
  if (ip4_addr_isany_val(gw_addr)) {
 800fddc:	68fb      	ldr	r3, [r7, #12]
 800fdde:	2b00      	cmp	r3, #0
 800fde0:	d108      	bne.n	800fdf4 <dhcp_bind+0x17c>
    /* copy network address */
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
 800fde2:	69bb      	ldr	r3, [r7, #24]
 800fde4:	69da      	ldr	r2, [r3, #28]
 800fde6:	693b      	ldr	r3, [r7, #16]
 800fde8:	4013      	ands	r3, r2
 800fdea:	60fb      	str	r3, [r7, #12]
    /* use first host address on network as gateway */
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
 800fdec:	68fb      	ldr	r3, [r7, #12]
 800fdee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800fdf2:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): IP: 0x%08"X32_F" SN: 0x%08"X32_F" GW: 0x%08"X32_F"\n",
              ip4_addr_get_u32(&dhcp->offered_ip_addr), ip4_addr_get_u32(&sn_mask), ip4_addr_get_u32(&gw_addr)));
  /* netif is now bound to DHCP leased address - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BOUND);
 800fdf4:	210a      	movs	r1, #10
 800fdf6:	69b8      	ldr	r0, [r7, #24]
 800fdf8:	f000 faa0 	bl	801033c <dhcp_set_state>

  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
 800fdfc:	69bb      	ldr	r3, [r7, #24]
 800fdfe:	f103 011c 	add.w	r1, r3, #28
 800fe02:	f107 030c 	add.w	r3, r7, #12
 800fe06:	f107 0210 	add.w	r2, r7, #16
 800fe0a:	6878      	ldr	r0, [r7, #4]
 800fe0c:	f7f8 fa66 	bl	80082dc <netif_set_addr>
  /* interface is used by routing now that an address is set */
}
 800fe10:	3720      	adds	r7, #32
 800fe12:	46bd      	mov	sp, r7
 800fe14:	bd80      	pop	{r7, pc}
 800fe16:	bf00      	nop
 800fe18:	080169fc 	.word	0x080169fc
 800fe1c:	08016b5c 	.word	0x08016b5c
 800fe20:	08016a5c 	.word	0x08016a5c
 800fe24:	08016b78 	.word	0x08016b78
 800fe28:	88888889 	.word	0x88888889

0800fe2c <dhcp_renew>:
 *
 * @param netif network interface which must renew its lease
 */
err_t
dhcp_renew(struct netif *netif)
{
 800fe2c:	b580      	push	{r7, lr}
 800fe2e:	b08a      	sub	sp, #40	; 0x28
 800fe30:	af02      	add	r7, sp, #8
 800fe32:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800fe34:	687b      	ldr	r3, [r7, #4]
 800fe36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fe38:	61bb      	str	r3, [r7, #24]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_renew()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_RENEWING);
 800fe3a:	2105      	movs	r1, #5
 800fe3c:	69b8      	ldr	r0, [r7, #24]
 800fe3e:	f000 fa7d 	bl	801033c <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 800fe42:	f107 030c 	add.w	r3, r7, #12
 800fe46:	2203      	movs	r2, #3
 800fe48:	69b9      	ldr	r1, [r7, #24]
 800fe4a:	6878      	ldr	r0, [r7, #4]
 800fe4c:	f000 ff00 	bl	8010c50 <dhcp_create_msg>
 800fe50:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 800fe52:	697b      	ldr	r3, [r7, #20]
 800fe54:	2b00      	cmp	r3, #0
 800fe56:	d04e      	beq.n	800fef6 <dhcp_renew+0xca>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 800fe58:	697b      	ldr	r3, [r7, #20]
 800fe5a:	685b      	ldr	r3, [r3, #4]
 800fe5c:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800fe5e:	89b8      	ldrh	r0, [r7, #12]
 800fe60:	693b      	ldr	r3, [r7, #16]
 800fe62:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800fe66:	2302      	movs	r3, #2
 800fe68:	2239      	movs	r2, #57	; 0x39
 800fe6a:	f000 fa81 	bl	8010370 <dhcp_option>
 800fe6e:	4603      	mov	r3, r0
 800fe70:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 800fe72:	89b8      	ldrh	r0, [r7, #12]
 800fe74:	693b      	ldr	r3, [r7, #16]
 800fe76:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800fe7a:	687b      	ldr	r3, [r7, #4]
 800fe7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800fe7e:	461a      	mov	r2, r3
 800fe80:	f000 fad0 	bl	8010424 <dhcp_option_short>
 800fe84:	4603      	mov	r3, r0
 800fe86:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800fe88:	89b8      	ldrh	r0, [r7, #12]
 800fe8a:	693b      	ldr	r3, [r7, #16]
 800fe8c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800fe90:	2303      	movs	r3, #3
 800fe92:	2237      	movs	r2, #55	; 0x37
 800fe94:	f000 fa6c 	bl	8010370 <dhcp_option>
 800fe98:	4603      	mov	r3, r0
 800fe9a:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800fe9c:	2300      	movs	r3, #0
 800fe9e:	77bb      	strb	r3, [r7, #30]
 800fea0:	e00e      	b.n	800fec0 <dhcp_renew+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 800fea2:	89b8      	ldrh	r0, [r7, #12]
 800fea4:	693b      	ldr	r3, [r7, #16]
 800fea6:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800feaa:	7fbb      	ldrb	r3, [r7, #30]
 800feac:	4a2a      	ldr	r2, [pc, #168]	; (800ff58 <dhcp_renew+0x12c>)
 800feae:	5cd3      	ldrb	r3, [r2, r3]
 800feb0:	461a      	mov	r2, r3
 800feb2:	f000 fa91 	bl	80103d8 <dhcp_option_byte>
 800feb6:	4603      	mov	r3, r0
 800feb8:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800feba:	7fbb      	ldrb	r3, [r7, #30]
 800febc:	3301      	adds	r3, #1
 800febe:	77bb      	strb	r3, [r7, #30]
 800fec0:	7fbb      	ldrb	r3, [r7, #30]
 800fec2:	2b02      	cmp	r3, #2
 800fec4:	d9ed      	bls.n	800fea2 <dhcp_renew+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_RENEWING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800fec6:	89b8      	ldrh	r0, [r7, #12]
 800fec8:	693b      	ldr	r3, [r7, #16]
 800feca:	33f0      	adds	r3, #240	; 0xf0
 800fecc:	697a      	ldr	r2, [r7, #20]
 800fece:	4619      	mov	r1, r3
 800fed0:	f000 ff94 	bl	8010dfc <dhcp_option_trailer>

    result = udp_sendto_if(dhcp_pcb, p_out, &dhcp->server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 800fed4:	4b21      	ldr	r3, [pc, #132]	; (800ff5c <dhcp_renew+0x130>)
 800fed6:	6818      	ldr	r0, [r3, #0]
 800fed8:	69bb      	ldr	r3, [r7, #24]
 800feda:	f103 0218 	add.w	r2, r3, #24
 800fede:	687b      	ldr	r3, [r7, #4]
 800fee0:	9300      	str	r3, [sp, #0]
 800fee2:	2343      	movs	r3, #67	; 0x43
 800fee4:	6979      	ldr	r1, [r7, #20]
 800fee6:	f7fe fe41 	bl	800eb6c <udp_sendto_if>
 800feea:	4603      	mov	r3, r0
 800feec:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 800feee:	6978      	ldr	r0, [r7, #20]
 800fef0:	f7f8 fefe 	bl	8008cf0 <pbuf_free>
 800fef4:	e001      	b.n	800fefa <dhcp_renew+0xce>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew: RENEWING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_renew: could not allocate DHCP request\n"));
    result = ERR_MEM;
 800fef6:	23ff      	movs	r3, #255	; 0xff
 800fef8:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 800fefa:	69bb      	ldr	r3, [r7, #24]
 800fefc:	799b      	ldrb	r3, [r3, #6]
 800fefe:	2bff      	cmp	r3, #255	; 0xff
 800ff00:	d005      	beq.n	800ff0e <dhcp_renew+0xe2>
    dhcp->tries++;
 800ff02:	69bb      	ldr	r3, [r7, #24]
 800ff04:	799b      	ldrb	r3, [r3, #6]
 800ff06:	3301      	adds	r3, #1
 800ff08:	b2da      	uxtb	r2, r3
 800ff0a:	69bb      	ldr	r3, [r7, #24]
 800ff0c:	719a      	strb	r2, [r3, #6]
  }
  /* back-off on retries, but to a maximum of 20 seconds */
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 800ff0e:	69bb      	ldr	r3, [r7, #24]
 800ff10:	799b      	ldrb	r3, [r3, #6]
 800ff12:	2b09      	cmp	r3, #9
 800ff14:	d80a      	bhi.n	800ff2c <dhcp_renew+0x100>
 800ff16:	69bb      	ldr	r3, [r7, #24]
 800ff18:	799b      	ldrb	r3, [r3, #6]
 800ff1a:	b29b      	uxth	r3, r3
 800ff1c:	461a      	mov	r2, r3
 800ff1e:	0152      	lsls	r2, r2, #5
 800ff20:	1ad2      	subs	r2, r2, r3
 800ff22:	0092      	lsls	r2, r2, #2
 800ff24:	4413      	add	r3, r2
 800ff26:	011b      	lsls	r3, r3, #4
 800ff28:	b29b      	uxth	r3, r3
 800ff2a:	e001      	b.n	800ff30 <dhcp_renew+0x104>
 800ff2c:	f644 6320 	movw	r3, #20000	; 0x4e20
 800ff30:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800ff32:	89fb      	ldrh	r3, [r7, #14]
 800ff34:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800ff38:	4a09      	ldr	r2, [pc, #36]	; (800ff60 <dhcp_renew+0x134>)
 800ff3a:	fb82 1203 	smull	r1, r2, r2, r3
 800ff3e:	1152      	asrs	r2, r2, #5
 800ff40:	17db      	asrs	r3, r3, #31
 800ff42:	1ad3      	subs	r3, r2, r3
 800ff44:	b29a      	uxth	r2, r3
 800ff46:	69bb      	ldr	r3, [r7, #24]
 800ff48:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 800ff4a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800ff4e:	4618      	mov	r0, r3
 800ff50:	3720      	adds	r7, #32
 800ff52:	46bd      	mov	sp, r7
 800ff54:	bd80      	pop	{r7, pc}
 800ff56:	bf00      	nop
 800ff58:	2000001c 	.word	0x2000001c
 800ff5c:	200084e0 	.word	0x200084e0
 800ff60:	10624dd3 	.word	0x10624dd3

0800ff64 <dhcp_rebind>:
 *
 * @param netif network interface which must rebind with a DHCP server
 */
static err_t
dhcp_rebind(struct netif *netif)
{
 800ff64:	b580      	push	{r7, lr}
 800ff66:	b08a      	sub	sp, #40	; 0x28
 800ff68:	af02      	add	r7, sp, #8
 800ff6a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800ff6c:	687b      	ldr	r3, [r7, #4]
 800ff6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ff70:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBINDING);
 800ff72:	2104      	movs	r1, #4
 800ff74:	69b8      	ldr	r0, [r7, #24]
 800ff76:	f000 f9e1 	bl	801033c <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 800ff7a:	f107 030c 	add.w	r3, r7, #12
 800ff7e:	2203      	movs	r2, #3
 800ff80:	69b9      	ldr	r1, [r7, #24]
 800ff82:	6878      	ldr	r0, [r7, #4]
 800ff84:	f000 fe64 	bl	8010c50 <dhcp_create_msg>
 800ff88:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 800ff8a:	697b      	ldr	r3, [r7, #20]
 800ff8c:	2b00      	cmp	r3, #0
 800ff8e:	d04c      	beq.n	801002a <dhcp_rebind+0xc6>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 800ff90:	697b      	ldr	r3, [r7, #20]
 800ff92:	685b      	ldr	r3, [r3, #4]
 800ff94:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800ff96:	89b8      	ldrh	r0, [r7, #12]
 800ff98:	693b      	ldr	r3, [r7, #16]
 800ff9a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800ff9e:	2302      	movs	r3, #2
 800ffa0:	2239      	movs	r2, #57	; 0x39
 800ffa2:	f000 f9e5 	bl	8010370 <dhcp_option>
 800ffa6:	4603      	mov	r3, r0
 800ffa8:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 800ffaa:	89b8      	ldrh	r0, [r7, #12]
 800ffac:	693b      	ldr	r3, [r7, #16]
 800ffae:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800ffb2:	687b      	ldr	r3, [r7, #4]
 800ffb4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ffb6:	461a      	mov	r2, r3
 800ffb8:	f000 fa34 	bl	8010424 <dhcp_option_short>
 800ffbc:	4603      	mov	r3, r0
 800ffbe:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800ffc0:	89b8      	ldrh	r0, [r7, #12]
 800ffc2:	693b      	ldr	r3, [r7, #16]
 800ffc4:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800ffc8:	2303      	movs	r3, #3
 800ffca:	2237      	movs	r2, #55	; 0x37
 800ffcc:	f000 f9d0 	bl	8010370 <dhcp_option>
 800ffd0:	4603      	mov	r3, r0
 800ffd2:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800ffd4:	2300      	movs	r3, #0
 800ffd6:	77bb      	strb	r3, [r7, #30]
 800ffd8:	e00e      	b.n	800fff8 <dhcp_rebind+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 800ffda:	89b8      	ldrh	r0, [r7, #12]
 800ffdc:	693b      	ldr	r3, [r7, #16]
 800ffde:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800ffe2:	7fbb      	ldrb	r3, [r7, #30]
 800ffe4:	4a29      	ldr	r2, [pc, #164]	; (801008c <dhcp_rebind+0x128>)
 800ffe6:	5cd3      	ldrb	r3, [r2, r3]
 800ffe8:	461a      	mov	r2, r3
 800ffea:	f000 f9f5 	bl	80103d8 <dhcp_option_byte>
 800ffee:	4603      	mov	r3, r0
 800fff0:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800fff2:	7fbb      	ldrb	r3, [r7, #30]
 800fff4:	3301      	adds	r3, #1
 800fff6:	77bb      	strb	r3, [r7, #30]
 800fff8:	7fbb      	ldrb	r3, [r7, #30]
 800fffa:	2b02      	cmp	r3, #2
 800fffc:	d9ed      	bls.n	800ffda <dhcp_rebind+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBINDING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800fffe:	89b8      	ldrh	r0, [r7, #12]
 8010000:	693b      	ldr	r3, [r7, #16]
 8010002:	33f0      	adds	r3, #240	; 0xf0
 8010004:	697a      	ldr	r2, [r7, #20]
 8010006:	4619      	mov	r1, r3
 8010008:	f000 fef8 	bl	8010dfc <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 801000c:	4b20      	ldr	r3, [pc, #128]	; (8010090 <dhcp_rebind+0x12c>)
 801000e:	6818      	ldr	r0, [r3, #0]
 8010010:	687b      	ldr	r3, [r7, #4]
 8010012:	9300      	str	r3, [sp, #0]
 8010014:	2343      	movs	r3, #67	; 0x43
 8010016:	4a1f      	ldr	r2, [pc, #124]	; (8010094 <dhcp_rebind+0x130>)
 8010018:	6979      	ldr	r1, [r7, #20]
 801001a:	f7fe fda7 	bl	800eb6c <udp_sendto_if>
 801001e:	4603      	mov	r3, r0
 8010020:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8010022:	6978      	ldr	r0, [r7, #20]
 8010024:	f7f8 fe64 	bl	8008cf0 <pbuf_free>
 8010028:	e001      	b.n	801002e <dhcp_rebind+0xca>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind: REBINDING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_rebind: could not allocate DHCP request\n"));
    result = ERR_MEM;
 801002a:	23ff      	movs	r3, #255	; 0xff
 801002c:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 801002e:	69bb      	ldr	r3, [r7, #24]
 8010030:	799b      	ldrb	r3, [r3, #6]
 8010032:	2bff      	cmp	r3, #255	; 0xff
 8010034:	d005      	beq.n	8010042 <dhcp_rebind+0xde>
    dhcp->tries++;
 8010036:	69bb      	ldr	r3, [r7, #24]
 8010038:	799b      	ldrb	r3, [r3, #6]
 801003a:	3301      	adds	r3, #1
 801003c:	b2da      	uxtb	r2, r3
 801003e:	69bb      	ldr	r3, [r7, #24]
 8010040:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 8010042:	69bb      	ldr	r3, [r7, #24]
 8010044:	799b      	ldrb	r3, [r3, #6]
 8010046:	2b09      	cmp	r3, #9
 8010048:	d80a      	bhi.n	8010060 <dhcp_rebind+0xfc>
 801004a:	69bb      	ldr	r3, [r7, #24]
 801004c:	799b      	ldrb	r3, [r3, #6]
 801004e:	b29b      	uxth	r3, r3
 8010050:	461a      	mov	r2, r3
 8010052:	0152      	lsls	r2, r2, #5
 8010054:	1ad2      	subs	r2, r2, r3
 8010056:	0092      	lsls	r2, r2, #2
 8010058:	4413      	add	r3, r2
 801005a:	00db      	lsls	r3, r3, #3
 801005c:	b29b      	uxth	r3, r3
 801005e:	e001      	b.n	8010064 <dhcp_rebind+0x100>
 8010060:	f242 7310 	movw	r3, #10000	; 0x2710
 8010064:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8010066:	89fb      	ldrh	r3, [r7, #14]
 8010068:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 801006c:	4a0a      	ldr	r2, [pc, #40]	; (8010098 <dhcp_rebind+0x134>)
 801006e:	fb82 1203 	smull	r1, r2, r2, r3
 8010072:	1152      	asrs	r2, r2, #5
 8010074:	17db      	asrs	r3, r3, #31
 8010076:	1ad3      	subs	r3, r2, r3
 8010078:	b29a      	uxth	r2, r3
 801007a:	69bb      	ldr	r3, [r7, #24]
 801007c:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 801007e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8010082:	4618      	mov	r0, r3
 8010084:	3720      	adds	r7, #32
 8010086:	46bd      	mov	sp, r7
 8010088:	bd80      	pop	{r7, pc}
 801008a:	bf00      	nop
 801008c:	2000001c 	.word	0x2000001c
 8010090:	200084e0 	.word	0x200084e0
 8010094:	0801759c 	.word	0x0801759c
 8010098:	10624dd3 	.word	0x10624dd3

0801009c <dhcp_reboot>:
 *
 * @param netif network interface which must reboot
 */
static err_t
dhcp_reboot(struct netif *netif)
{
 801009c:	b5b0      	push	{r4, r5, r7, lr}
 801009e:	b08a      	sub	sp, #40	; 0x28
 80100a0:	af02      	add	r7, sp, #8
 80100a2:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80100a4:	687b      	ldr	r3, [r7, #4]
 80100a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80100a8:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBOOTING);
 80100aa:	2103      	movs	r1, #3
 80100ac:	69b8      	ldr	r0, [r7, #24]
 80100ae:	f000 f945 	bl	801033c <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 80100b2:	f107 030c 	add.w	r3, r7, #12
 80100b6:	2203      	movs	r2, #3
 80100b8:	69b9      	ldr	r1, [r7, #24]
 80100ba:	6878      	ldr	r0, [r7, #4]
 80100bc:	f000 fdc8 	bl	8010c50 <dhcp_create_msg>
 80100c0:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 80100c2:	697b      	ldr	r3, [r7, #20]
 80100c4:	2b00      	cmp	r3, #0
 80100c6:	d066      	beq.n	8010196 <dhcp_reboot+0xfa>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 80100c8:	697b      	ldr	r3, [r7, #20]
 80100ca:	685b      	ldr	r3, [r3, #4]
 80100cc:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 80100ce:	89b8      	ldrh	r0, [r7, #12]
 80100d0:	693b      	ldr	r3, [r7, #16]
 80100d2:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80100d6:	2302      	movs	r3, #2
 80100d8:	2239      	movs	r2, #57	; 0x39
 80100da:	f000 f949 	bl	8010370 <dhcp_option>
 80100de:	4603      	mov	r3, r0
 80100e0:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 80100e2:	89b8      	ldrh	r0, [r7, #12]
 80100e4:	693b      	ldr	r3, [r7, #16]
 80100e6:	33f0      	adds	r3, #240	; 0xf0
 80100e8:	f44f 7210 	mov.w	r2, #576	; 0x240
 80100ec:	4619      	mov	r1, r3
 80100ee:	f000 f999 	bl	8010424 <dhcp_option_short>
 80100f2:	4603      	mov	r3, r0
 80100f4:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 80100f6:	89b8      	ldrh	r0, [r7, #12]
 80100f8:	693b      	ldr	r3, [r7, #16]
 80100fa:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80100fe:	2304      	movs	r3, #4
 8010100:	2232      	movs	r2, #50	; 0x32
 8010102:	f000 f935 	bl	8010370 <dhcp_option>
 8010106:	4603      	mov	r3, r0
 8010108:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 801010a:	89bc      	ldrh	r4, [r7, #12]
 801010c:	693b      	ldr	r3, [r7, #16]
 801010e:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8010112:	69bb      	ldr	r3, [r7, #24]
 8010114:	69db      	ldr	r3, [r3, #28]
 8010116:	4618      	mov	r0, r3
 8010118:	f7f7 fa4b 	bl	80075b2 <lwip_htonl>
 801011c:	4603      	mov	r3, r0
 801011e:	461a      	mov	r2, r3
 8010120:	4629      	mov	r1, r5
 8010122:	4620      	mov	r0, r4
 8010124:	f000 f9b0 	bl	8010488 <dhcp_option_long>
 8010128:	4603      	mov	r3, r0
 801012a:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801012c:	89b8      	ldrh	r0, [r7, #12]
 801012e:	693b      	ldr	r3, [r7, #16]
 8010130:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8010134:	2303      	movs	r3, #3
 8010136:	2237      	movs	r2, #55	; 0x37
 8010138:	f000 f91a 	bl	8010370 <dhcp_option>
 801013c:	4603      	mov	r3, r0
 801013e:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8010140:	2300      	movs	r3, #0
 8010142:	77bb      	strb	r3, [r7, #30]
 8010144:	e00e      	b.n	8010164 <dhcp_reboot+0xc8>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8010146:	89b8      	ldrh	r0, [r7, #12]
 8010148:	693b      	ldr	r3, [r7, #16]
 801014a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801014e:	7fbb      	ldrb	r3, [r7, #30]
 8010150:	4a29      	ldr	r2, [pc, #164]	; (80101f8 <dhcp_reboot+0x15c>)
 8010152:	5cd3      	ldrb	r3, [r2, r3]
 8010154:	461a      	mov	r2, r3
 8010156:	f000 f93f 	bl	80103d8 <dhcp_option_byte>
 801015a:	4603      	mov	r3, r0
 801015c:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801015e:	7fbb      	ldrb	r3, [r7, #30]
 8010160:	3301      	adds	r3, #1
 8010162:	77bb      	strb	r3, [r7, #30]
 8010164:	7fbb      	ldrb	r3, [r7, #30]
 8010166:	2b02      	cmp	r3, #2
 8010168:	d9ed      	bls.n	8010146 <dhcp_reboot+0xaa>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBOOTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801016a:	89b8      	ldrh	r0, [r7, #12]
 801016c:	693b      	ldr	r3, [r7, #16]
 801016e:	33f0      	adds	r3, #240	; 0xf0
 8010170:	697a      	ldr	r2, [r7, #20]
 8010172:	4619      	mov	r1, r3
 8010174:	f000 fe42 	bl	8010dfc <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8010178:	4b20      	ldr	r3, [pc, #128]	; (80101fc <dhcp_reboot+0x160>)
 801017a:	6818      	ldr	r0, [r3, #0]
 801017c:	687b      	ldr	r3, [r7, #4]
 801017e:	9300      	str	r3, [sp, #0]
 8010180:	2343      	movs	r3, #67	; 0x43
 8010182:	4a1f      	ldr	r2, [pc, #124]	; (8010200 <dhcp_reboot+0x164>)
 8010184:	6979      	ldr	r1, [r7, #20]
 8010186:	f7fe fcf1 	bl	800eb6c <udp_sendto_if>
 801018a:	4603      	mov	r3, r0
 801018c:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 801018e:	6978      	ldr	r0, [r7, #20]
 8010190:	f7f8 fdae 	bl	8008cf0 <pbuf_free>
 8010194:	e001      	b.n	801019a <dhcp_reboot+0xfe>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot: REBOOTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_reboot: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8010196:	23ff      	movs	r3, #255	; 0xff
 8010198:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 801019a:	69bb      	ldr	r3, [r7, #24]
 801019c:	799b      	ldrb	r3, [r3, #6]
 801019e:	2bff      	cmp	r3, #255	; 0xff
 80101a0:	d005      	beq.n	80101ae <dhcp_reboot+0x112>
    dhcp->tries++;
 80101a2:	69bb      	ldr	r3, [r7, #24]
 80101a4:	799b      	ldrb	r3, [r3, #6]
 80101a6:	3301      	adds	r3, #1
 80101a8:	b2da      	uxtb	r2, r3
 80101aa:	69bb      	ldr	r3, [r7, #24]
 80101ac:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 80101ae:	69bb      	ldr	r3, [r7, #24]
 80101b0:	799b      	ldrb	r3, [r3, #6]
 80101b2:	2b09      	cmp	r3, #9
 80101b4:	d80a      	bhi.n	80101cc <dhcp_reboot+0x130>
 80101b6:	69bb      	ldr	r3, [r7, #24]
 80101b8:	799b      	ldrb	r3, [r3, #6]
 80101ba:	b29b      	uxth	r3, r3
 80101bc:	461a      	mov	r2, r3
 80101be:	0152      	lsls	r2, r2, #5
 80101c0:	1ad2      	subs	r2, r2, r3
 80101c2:	0092      	lsls	r2, r2, #2
 80101c4:	4413      	add	r3, r2
 80101c6:	00db      	lsls	r3, r3, #3
 80101c8:	b29b      	uxth	r3, r3
 80101ca:	e001      	b.n	80101d0 <dhcp_reboot+0x134>
 80101cc:	f242 7310 	movw	r3, #10000	; 0x2710
 80101d0:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80101d2:	89fb      	ldrh	r3, [r7, #14]
 80101d4:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 80101d8:	4a0a      	ldr	r2, [pc, #40]	; (8010204 <dhcp_reboot+0x168>)
 80101da:	fb82 1203 	smull	r1, r2, r2, r3
 80101de:	1152      	asrs	r2, r2, #5
 80101e0:	17db      	asrs	r3, r3, #31
 80101e2:	1ad3      	subs	r3, r2, r3
 80101e4:	b29a      	uxth	r2, r3
 80101e6:	69bb      	ldr	r3, [r7, #24]
 80101e8:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 80101ea:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80101ee:	4618      	mov	r0, r3
 80101f0:	3720      	adds	r7, #32
 80101f2:	46bd      	mov	sp, r7
 80101f4:	bdb0      	pop	{r4, r5, r7, pc}
 80101f6:	bf00      	nop
 80101f8:	2000001c 	.word	0x2000001c
 80101fc:	200084e0 	.word	0x200084e0
 8010200:	0801759c 	.word	0x0801759c
 8010204:	10624dd3 	.word	0x10624dd3

08010208 <dhcp_release_and_stop>:
 *
 * @param netif network interface
 */
void
dhcp_release_and_stop(struct netif *netif)
{
 8010208:	b5b0      	push	{r4, r5, r7, lr}
 801020a:	b08a      	sub	sp, #40	; 0x28
 801020c:	af02      	add	r7, sp, #8
 801020e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8010210:	687b      	ldr	r3, [r7, #4]
 8010212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010214:	61fb      	str	r3, [r7, #28]
  ip_addr_t server_ip_addr;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_release_and_stop()\n"));
  if (dhcp == NULL) {
 8010216:	69fb      	ldr	r3, [r7, #28]
 8010218:	2b00      	cmp	r3, #0
 801021a:	f000 8084 	beq.w	8010326 <dhcp_release_and_stop+0x11e>
    return;
  }

  /* already off? -> nothing to do */
  if (dhcp->state == DHCP_STATE_OFF) {
 801021e:	69fb      	ldr	r3, [r7, #28]
 8010220:	795b      	ldrb	r3, [r3, #5]
 8010222:	2b00      	cmp	r3, #0
 8010224:	f000 8081 	beq.w	801032a <dhcp_release_and_stop+0x122>
    return;
  }

  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 8010228:	69fb      	ldr	r3, [r7, #28]
 801022a:	699b      	ldr	r3, [r3, #24]
 801022c:	613b      	str	r3, [r7, #16]

  /* clean old DHCP offer */
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 801022e:	69fb      	ldr	r3, [r7, #28]
 8010230:	2200      	movs	r2, #0
 8010232:	619a      	str	r2, [r3, #24]
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
 8010234:	69fb      	ldr	r3, [r7, #28]
 8010236:	2200      	movs	r2, #0
 8010238:	61da      	str	r2, [r3, #28]
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 801023a:	69fb      	ldr	r3, [r7, #28]
 801023c:	2200      	movs	r2, #0
 801023e:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 8010240:	69fb      	ldr	r3, [r7, #28]
 8010242:	2200      	movs	r2, #0
 8010244:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 8010246:	69fb      	ldr	r3, [r7, #28]
 8010248:	2200      	movs	r2, #0
 801024a:	631a      	str	r2, [r3, #48]	; 0x30
 801024c:	69fb      	ldr	r3, [r7, #28]
 801024e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8010250:	69fb      	ldr	r3, [r7, #28]
 8010252:	62da      	str	r2, [r3, #44]	; 0x2c
 8010254:	69fb      	ldr	r3, [r7, #28]
 8010256:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010258:	69fb      	ldr	r3, [r7, #28]
 801025a:	629a      	str	r2, [r3, #40]	; 0x28
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
 801025c:	69fb      	ldr	r3, [r7, #28]
 801025e:	2200      	movs	r2, #0
 8010260:	829a      	strh	r2, [r3, #20]
 8010262:	69fb      	ldr	r3, [r7, #28]
 8010264:	8a9a      	ldrh	r2, [r3, #20]
 8010266:	69fb      	ldr	r3, [r7, #28]
 8010268:	825a      	strh	r2, [r3, #18]
 801026a:	69fb      	ldr	r3, [r7, #28]
 801026c:	8a5a      	ldrh	r2, [r3, #18]
 801026e:	69fb      	ldr	r3, [r7, #28]
 8010270:	821a      	strh	r2, [r3, #16]
 8010272:	69fb      	ldr	r3, [r7, #28]
 8010274:	8a1a      	ldrh	r2, [r3, #16]
 8010276:	69fb      	ldr	r3, [r7, #28]
 8010278:	81da      	strh	r2, [r3, #14]

  /* send release message when current IP was assigned via DHCP */
  if (dhcp_supplied_address(netif)) {
 801027a:	6878      	ldr	r0, [r7, #4]
 801027c:	f000 fdec 	bl	8010e58 <dhcp_supplied_address>
 8010280:	4603      	mov	r3, r0
 8010282:	2b00      	cmp	r3, #0
 8010284:	d03b      	beq.n	80102fe <dhcp_release_and_stop+0xf6>
    /* create and initialize the DHCP message header */
    struct pbuf *p_out;
    u16_t options_out_len;
    p_out = dhcp_create_msg(netif, dhcp, DHCP_RELEASE, &options_out_len);
 8010286:	f107 030e 	add.w	r3, r7, #14
 801028a:	2207      	movs	r2, #7
 801028c:	69f9      	ldr	r1, [r7, #28]
 801028e:	6878      	ldr	r0, [r7, #4]
 8010290:	f000 fcde 	bl	8010c50 <dhcp_create_msg>
 8010294:	61b8      	str	r0, [r7, #24]
    if (p_out != NULL) {
 8010296:	69bb      	ldr	r3, [r7, #24]
 8010298:	2b00      	cmp	r3, #0
 801029a:	d030      	beq.n	80102fe <dhcp_release_and_stop+0xf6>
      struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 801029c:	69bb      	ldr	r3, [r7, #24]
 801029e:	685b      	ldr	r3, [r3, #4]
 80102a0:	617b      	str	r3, [r7, #20]
      options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 80102a2:	89f8      	ldrh	r0, [r7, #14]
 80102a4:	697b      	ldr	r3, [r7, #20]
 80102a6:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80102aa:	2304      	movs	r3, #4
 80102ac:	2236      	movs	r2, #54	; 0x36
 80102ae:	f000 f85f 	bl	8010370 <dhcp_option>
 80102b2:	4603      	mov	r3, r0
 80102b4:	81fb      	strh	r3, [r7, #14]
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 80102b6:	89fc      	ldrh	r4, [r7, #14]
 80102b8:	697b      	ldr	r3, [r7, #20]
 80102ba:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 80102be:	693b      	ldr	r3, [r7, #16]
 80102c0:	4618      	mov	r0, r3
 80102c2:	f7f7 f976 	bl	80075b2 <lwip_htonl>
 80102c6:	4603      	mov	r3, r0
 80102c8:	461a      	mov	r2, r3
 80102ca:	4629      	mov	r1, r5
 80102cc:	4620      	mov	r0, r4
 80102ce:	f000 f8db 	bl	8010488 <dhcp_option_long>
 80102d2:	4603      	mov	r3, r0
 80102d4:	81fb      	strh	r3, [r7, #14]

      LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, dhcp->state, msg_out, DHCP_RELEASE, &options_out_len);
      dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80102d6:	89f8      	ldrh	r0, [r7, #14]
 80102d8:	697b      	ldr	r3, [r7, #20]
 80102da:	33f0      	adds	r3, #240	; 0xf0
 80102dc:	69ba      	ldr	r2, [r7, #24]
 80102de:	4619      	mov	r1, r3
 80102e0:	f000 fd8c 	bl	8010dfc <dhcp_option_trailer>

      udp_sendto_if(dhcp_pcb, p_out, &server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 80102e4:	4b13      	ldr	r3, [pc, #76]	; (8010334 <dhcp_release_and_stop+0x12c>)
 80102e6:	6818      	ldr	r0, [r3, #0]
 80102e8:	f107 0210 	add.w	r2, r7, #16
 80102ec:	687b      	ldr	r3, [r7, #4]
 80102ee:	9300      	str	r3, [sp, #0]
 80102f0:	2343      	movs	r3, #67	; 0x43
 80102f2:	69b9      	ldr	r1, [r7, #24]
 80102f4:	f7fe fc3a 	bl	800eb6c <udp_sendto_if>
      pbuf_free(p_out);
 80102f8:	69b8      	ldr	r0, [r7, #24]
 80102fa:	f7f8 fcf9 	bl	8008cf0 <pbuf_free>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_release: could not allocate DHCP request\n"));
    }
  }

  /* remove IP address from interface (prevents routing from selecting this interface) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 80102fe:	4b0e      	ldr	r3, [pc, #56]	; (8010338 <dhcp_release_and_stop+0x130>)
 8010300:	4a0d      	ldr	r2, [pc, #52]	; (8010338 <dhcp_release_and_stop+0x130>)
 8010302:	490d      	ldr	r1, [pc, #52]	; (8010338 <dhcp_release_and_stop+0x130>)
 8010304:	6878      	ldr	r0, [r7, #4]
 8010306:	f7f7 ffe9 	bl	80082dc <netif_set_addr>
    autoip_stop(netif);
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */

  dhcp_set_state(dhcp, DHCP_STATE_OFF);
 801030a:	2100      	movs	r1, #0
 801030c:	69f8      	ldr	r0, [r7, #28]
 801030e:	f000 f815 	bl	801033c <dhcp_set_state>

  if (dhcp->pcb_allocated != 0) {
 8010312:	69fb      	ldr	r3, [r7, #28]
 8010314:	791b      	ldrb	r3, [r3, #4]
 8010316:	2b00      	cmp	r3, #0
 8010318:	d008      	beq.n	801032c <dhcp_release_and_stop+0x124>
    dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 801031a:	f7fe ff73 	bl	800f204 <dhcp_dec_pcb_refcount>
    dhcp->pcb_allocated = 0;
 801031e:	69fb      	ldr	r3, [r7, #28]
 8010320:	2200      	movs	r2, #0
 8010322:	711a      	strb	r2, [r3, #4]
 8010324:	e002      	b.n	801032c <dhcp_release_and_stop+0x124>
    return;
 8010326:	bf00      	nop
 8010328:	e000      	b.n	801032c <dhcp_release_and_stop+0x124>
    return;
 801032a:	bf00      	nop
  }
}
 801032c:	3720      	adds	r7, #32
 801032e:	46bd      	mov	sp, r7
 8010330:	bdb0      	pop	{r4, r5, r7, pc}
 8010332:	bf00      	nop
 8010334:	200084e0 	.word	0x200084e0
 8010338:	08017598 	.word	0x08017598

0801033c <dhcp_set_state>:
 *
 * If the state changed, reset the number of tries.
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
 801033c:	b480      	push	{r7}
 801033e:	b083      	sub	sp, #12
 8010340:	af00      	add	r7, sp, #0
 8010342:	6078      	str	r0, [r7, #4]
 8010344:	460b      	mov	r3, r1
 8010346:	70fb      	strb	r3, [r7, #3]
  if (new_state != dhcp->state) {
 8010348:	687b      	ldr	r3, [r7, #4]
 801034a:	795b      	ldrb	r3, [r3, #5]
 801034c:	78fa      	ldrb	r2, [r7, #3]
 801034e:	429a      	cmp	r2, r3
 8010350:	d008      	beq.n	8010364 <dhcp_set_state+0x28>
    dhcp->state = new_state;
 8010352:	687b      	ldr	r3, [r7, #4]
 8010354:	78fa      	ldrb	r2, [r7, #3]
 8010356:	715a      	strb	r2, [r3, #5]
    dhcp->tries = 0;
 8010358:	687b      	ldr	r3, [r7, #4]
 801035a:	2200      	movs	r2, #0
 801035c:	719a      	strb	r2, [r3, #6]
    dhcp->request_timeout = 0;
 801035e:	687b      	ldr	r3, [r7, #4]
 8010360:	2200      	movs	r2, #0
 8010362:	811a      	strh	r2, [r3, #8]
  }
}
 8010364:	bf00      	nop
 8010366:	370c      	adds	r7, #12
 8010368:	46bd      	mov	sp, r7
 801036a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801036e:	4770      	bx	lr

08010370 <dhcp_option>:
 * DHCP message.
 *
 */
static u16_t
dhcp_option(u16_t options_out_len, u8_t *options, u8_t option_type, u8_t option_len)
{
 8010370:	b580      	push	{r7, lr}
 8010372:	b082      	sub	sp, #8
 8010374:	af00      	add	r7, sp, #0
 8010376:	6039      	str	r1, [r7, #0]
 8010378:	4611      	mov	r1, r2
 801037a:	461a      	mov	r2, r3
 801037c:	4603      	mov	r3, r0
 801037e:	80fb      	strh	r3, [r7, #6]
 8010380:	460b      	mov	r3, r1
 8010382:	717b      	strb	r3, [r7, #5]
 8010384:	4613      	mov	r3, r2
 8010386:	713b      	strb	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8010388:	88fa      	ldrh	r2, [r7, #6]
 801038a:	793b      	ldrb	r3, [r7, #4]
 801038c:	4413      	add	r3, r2
 801038e:	3302      	adds	r3, #2
 8010390:	2b44      	cmp	r3, #68	; 0x44
 8010392:	d906      	bls.n	80103a2 <dhcp_option+0x32>
 8010394:	4b0d      	ldr	r3, [pc, #52]	; (80103cc <dhcp_option+0x5c>)
 8010396:	f240 529a 	movw	r2, #1434	; 0x59a
 801039a:	490d      	ldr	r1, [pc, #52]	; (80103d0 <dhcp_option+0x60>)
 801039c:	480d      	ldr	r0, [pc, #52]	; (80103d4 <dhcp_option+0x64>)
 801039e:	f003 f9b9 	bl	8013714 <iprintf>
  options[options_out_len++] = option_type;
 80103a2:	88fb      	ldrh	r3, [r7, #6]
 80103a4:	1c5a      	adds	r2, r3, #1
 80103a6:	80fa      	strh	r2, [r7, #6]
 80103a8:	461a      	mov	r2, r3
 80103aa:	683b      	ldr	r3, [r7, #0]
 80103ac:	4413      	add	r3, r2
 80103ae:	797a      	ldrb	r2, [r7, #5]
 80103b0:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = option_len;
 80103b2:	88fb      	ldrh	r3, [r7, #6]
 80103b4:	1c5a      	adds	r2, r3, #1
 80103b6:	80fa      	strh	r2, [r7, #6]
 80103b8:	461a      	mov	r2, r3
 80103ba:	683b      	ldr	r3, [r7, #0]
 80103bc:	4413      	add	r3, r2
 80103be:	793a      	ldrb	r2, [r7, #4]
 80103c0:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 80103c2:	88fb      	ldrh	r3, [r7, #6]
}
 80103c4:	4618      	mov	r0, r3
 80103c6:	3708      	adds	r7, #8
 80103c8:	46bd      	mov	sp, r7
 80103ca:	bd80      	pop	{r7, pc}
 80103cc:	080169fc 	.word	0x080169fc
 80103d0:	08016b90 	.word	0x08016b90
 80103d4:	08016a5c 	.word	0x08016a5c

080103d8 <dhcp_option_byte>:
 * Concatenate a single byte to the outgoing DHCP message.
 *
 */
static u16_t
dhcp_option_byte(u16_t options_out_len, u8_t *options, u8_t value)
{
 80103d8:	b580      	push	{r7, lr}
 80103da:	b082      	sub	sp, #8
 80103dc:	af00      	add	r7, sp, #0
 80103de:	4603      	mov	r3, r0
 80103e0:	6039      	str	r1, [r7, #0]
 80103e2:	80fb      	strh	r3, [r7, #6]
 80103e4:	4613      	mov	r3, r2
 80103e6:	717b      	strb	r3, [r7, #5]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 80103e8:	88fb      	ldrh	r3, [r7, #6]
 80103ea:	2b43      	cmp	r3, #67	; 0x43
 80103ec:	d906      	bls.n	80103fc <dhcp_option_byte+0x24>
 80103ee:	4b0a      	ldr	r3, [pc, #40]	; (8010418 <dhcp_option_byte+0x40>)
 80103f0:	f240 52a6 	movw	r2, #1446	; 0x5a6
 80103f4:	4909      	ldr	r1, [pc, #36]	; (801041c <dhcp_option_byte+0x44>)
 80103f6:	480a      	ldr	r0, [pc, #40]	; (8010420 <dhcp_option_byte+0x48>)
 80103f8:	f003 f98c 	bl	8013714 <iprintf>
  options[options_out_len++] = value;
 80103fc:	88fb      	ldrh	r3, [r7, #6]
 80103fe:	1c5a      	adds	r2, r3, #1
 8010400:	80fa      	strh	r2, [r7, #6]
 8010402:	461a      	mov	r2, r3
 8010404:	683b      	ldr	r3, [r7, #0]
 8010406:	4413      	add	r3, r2
 8010408:	797a      	ldrb	r2, [r7, #5]
 801040a:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 801040c:	88fb      	ldrh	r3, [r7, #6]
}
 801040e:	4618      	mov	r0, r3
 8010410:	3708      	adds	r7, #8
 8010412:	46bd      	mov	sp, r7
 8010414:	bd80      	pop	{r7, pc}
 8010416:	bf00      	nop
 8010418:	080169fc 	.word	0x080169fc
 801041c:	08016bd4 	.word	0x08016bd4
 8010420:	08016a5c 	.word	0x08016a5c

08010424 <dhcp_option_short>:

static u16_t
dhcp_option_short(u16_t options_out_len, u8_t *options, u16_t value)
{
 8010424:	b580      	push	{r7, lr}
 8010426:	b082      	sub	sp, #8
 8010428:	af00      	add	r7, sp, #0
 801042a:	4603      	mov	r3, r0
 801042c:	6039      	str	r1, [r7, #0]
 801042e:	80fb      	strh	r3, [r7, #6]
 8010430:	4613      	mov	r3, r2
 8010432:	80bb      	strh	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 8010434:	88fb      	ldrh	r3, [r7, #6]
 8010436:	3302      	adds	r3, #2
 8010438:	2b44      	cmp	r3, #68	; 0x44
 801043a:	d906      	bls.n	801044a <dhcp_option_short+0x26>
 801043c:	4b0f      	ldr	r3, [pc, #60]	; (801047c <dhcp_option_short+0x58>)
 801043e:	f240 52ae 	movw	r2, #1454	; 0x5ae
 8010442:	490f      	ldr	r1, [pc, #60]	; (8010480 <dhcp_option_short+0x5c>)
 8010444:	480f      	ldr	r0, [pc, #60]	; (8010484 <dhcp_option_short+0x60>)
 8010446:	f003 f965 	bl	8013714 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 801044a:	88bb      	ldrh	r3, [r7, #4]
 801044c:	0a1b      	lsrs	r3, r3, #8
 801044e:	b29a      	uxth	r2, r3
 8010450:	88fb      	ldrh	r3, [r7, #6]
 8010452:	1c59      	adds	r1, r3, #1
 8010454:	80f9      	strh	r1, [r7, #6]
 8010456:	4619      	mov	r1, r3
 8010458:	683b      	ldr	r3, [r7, #0]
 801045a:	440b      	add	r3, r1
 801045c:	b2d2      	uxtb	r2, r2
 801045e:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 8010460:	88fb      	ldrh	r3, [r7, #6]
 8010462:	1c5a      	adds	r2, r3, #1
 8010464:	80fa      	strh	r2, [r7, #6]
 8010466:	461a      	mov	r2, r3
 8010468:	683b      	ldr	r3, [r7, #0]
 801046a:	4413      	add	r3, r2
 801046c:	88ba      	ldrh	r2, [r7, #4]
 801046e:	b2d2      	uxtb	r2, r2
 8010470:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8010472:	88fb      	ldrh	r3, [r7, #6]
}
 8010474:	4618      	mov	r0, r3
 8010476:	3708      	adds	r7, #8
 8010478:	46bd      	mov	sp, r7
 801047a:	bd80      	pop	{r7, pc}
 801047c:	080169fc 	.word	0x080169fc
 8010480:	08016c0c 	.word	0x08016c0c
 8010484:	08016a5c 	.word	0x08016a5c

08010488 <dhcp_option_long>:

static u16_t
dhcp_option_long(u16_t options_out_len, u8_t *options, u32_t value)
{
 8010488:	b580      	push	{r7, lr}
 801048a:	b084      	sub	sp, #16
 801048c:	af00      	add	r7, sp, #0
 801048e:	4603      	mov	r3, r0
 8010490:	60b9      	str	r1, [r7, #8]
 8010492:	607a      	str	r2, [r7, #4]
 8010494:	81fb      	strh	r3, [r7, #14]
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 8010496:	89fb      	ldrh	r3, [r7, #14]
 8010498:	3304      	adds	r3, #4
 801049a:	2b44      	cmp	r3, #68	; 0x44
 801049c:	d906      	bls.n	80104ac <dhcp_option_long+0x24>
 801049e:	4b19      	ldr	r3, [pc, #100]	; (8010504 <dhcp_option_long+0x7c>)
 80104a0:	f240 52b7 	movw	r2, #1463	; 0x5b7
 80104a4:	4918      	ldr	r1, [pc, #96]	; (8010508 <dhcp_option_long+0x80>)
 80104a6:	4819      	ldr	r0, [pc, #100]	; (801050c <dhcp_option_long+0x84>)
 80104a8:	f003 f934 	bl	8013714 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 80104ac:	687b      	ldr	r3, [r7, #4]
 80104ae:	0e1a      	lsrs	r2, r3, #24
 80104b0:	89fb      	ldrh	r3, [r7, #14]
 80104b2:	1c59      	adds	r1, r3, #1
 80104b4:	81f9      	strh	r1, [r7, #14]
 80104b6:	4619      	mov	r1, r3
 80104b8:	68bb      	ldr	r3, [r7, #8]
 80104ba:	440b      	add	r3, r1
 80104bc:	b2d2      	uxtb	r2, r2
 80104be:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 80104c0:	687b      	ldr	r3, [r7, #4]
 80104c2:	0c1a      	lsrs	r2, r3, #16
 80104c4:	89fb      	ldrh	r3, [r7, #14]
 80104c6:	1c59      	adds	r1, r3, #1
 80104c8:	81f9      	strh	r1, [r7, #14]
 80104ca:	4619      	mov	r1, r3
 80104cc:	68bb      	ldr	r3, [r7, #8]
 80104ce:	440b      	add	r3, r1
 80104d0:	b2d2      	uxtb	r2, r2
 80104d2:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 80104d4:	687b      	ldr	r3, [r7, #4]
 80104d6:	0a1a      	lsrs	r2, r3, #8
 80104d8:	89fb      	ldrh	r3, [r7, #14]
 80104da:	1c59      	adds	r1, r3, #1
 80104dc:	81f9      	strh	r1, [r7, #14]
 80104de:	4619      	mov	r1, r3
 80104e0:	68bb      	ldr	r3, [r7, #8]
 80104e2:	440b      	add	r3, r1
 80104e4:	b2d2      	uxtb	r2, r2
 80104e6:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
 80104e8:	89fb      	ldrh	r3, [r7, #14]
 80104ea:	1c5a      	adds	r2, r3, #1
 80104ec:	81fa      	strh	r2, [r7, #14]
 80104ee:	461a      	mov	r2, r3
 80104f0:	68bb      	ldr	r3, [r7, #8]
 80104f2:	4413      	add	r3, r2
 80104f4:	687a      	ldr	r2, [r7, #4]
 80104f6:	b2d2      	uxtb	r2, r2
 80104f8:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 80104fa:	89fb      	ldrh	r3, [r7, #14]
}
 80104fc:	4618      	mov	r0, r3
 80104fe:	3710      	adds	r7, #16
 8010500:	46bd      	mov	sp, r7
 8010502:	bd80      	pop	{r7, pc}
 8010504:	080169fc 	.word	0x080169fc
 8010508:	08016c48 	.word	0x08016c48
 801050c:	08016a5c 	.word	0x08016a5c

08010510 <dhcp_parse_reply>:
 * use that further on.
 *
 */
static err_t
dhcp_parse_reply(struct pbuf *p, struct dhcp *dhcp)
{
 8010510:	b580      	push	{r7, lr}
 8010512:	b090      	sub	sp, #64	; 0x40
 8010514:	af00      	add	r7, sp, #0
 8010516:	6078      	str	r0, [r7, #4]
 8010518:	6039      	str	r1, [r7, #0]
  u16_t offset;
  u16_t offset_max;
  u16_t options_idx;
  u16_t options_idx_max;
  struct pbuf *q;
  int parse_file_as_options = 0;
 801051a:	2300      	movs	r3, #0
 801051c:	62fb      	str	r3, [r7, #44]	; 0x2c
  int parse_sname_as_options = 0;
 801051e:	2300      	movs	r3, #0
 8010520:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

  LWIP_UNUSED_ARG(dhcp);

  /* clear received options */
  dhcp_clear_all_options(dhcp);
 8010522:	2208      	movs	r2, #8
 8010524:	2100      	movs	r1, #0
 8010526:	48be      	ldr	r0, [pc, #760]	; (8010820 <dhcp_parse_reply+0x310>)
 8010528:	f003 f8ec 	bl	8013704 <memset>
  /* check that beginning of dhcp_msg (up to and including chaddr) is in first pbuf */
  if (p->len < DHCP_SNAME_OFS) {
 801052c:	687b      	ldr	r3, [r7, #4]
 801052e:	895b      	ldrh	r3, [r3, #10]
 8010530:	2b2b      	cmp	r3, #43	; 0x2b
 8010532:	d802      	bhi.n	801053a <dhcp_parse_reply+0x2a>
    return ERR_BUF;
 8010534:	f06f 0301 	mvn.w	r3, #1
 8010538:	e2a8      	b.n	8010a8c <dhcp_parse_reply+0x57c>
  }
  msg_in = (struct dhcp_msg *)p->payload;
 801053a:	687b      	ldr	r3, [r7, #4]
 801053c:	685b      	ldr	r3, [r3, #4]
 801053e:	61bb      	str	r3, [r7, #24]
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* parse options */

  /* start with options field */
  options_idx = DHCP_OPTIONS_OFS;
 8010540:	23f0      	movs	r3, #240	; 0xf0
 8010542:	86fb      	strh	r3, [r7, #54]	; 0x36
  /* parse options to the end of the received packet */
  options_idx_max = p->tot_len;
 8010544:	687b      	ldr	r3, [r7, #4]
 8010546:	891b      	ldrh	r3, [r3, #8]
 8010548:	86bb      	strh	r3, [r7, #52]	; 0x34
again:
  q = p;
 801054a:	687b      	ldr	r3, [r7, #4]
 801054c:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 801054e:	e00c      	b.n	801056a <dhcp_parse_reply+0x5a>
    options_idx = (u16_t)(options_idx - q->len);
 8010550:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010552:	895b      	ldrh	r3, [r3, #10]
 8010554:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8010556:	1ad3      	subs	r3, r2, r3
 8010558:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = (u16_t)(options_idx_max - q->len);
 801055a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801055c:	895b      	ldrh	r3, [r3, #10]
 801055e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8010560:	1ad3      	subs	r3, r2, r3
 8010562:	86bb      	strh	r3, [r7, #52]	; 0x34
    q = q->next;
 8010564:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010566:	681b      	ldr	r3, [r3, #0]
 8010568:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 801056a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801056c:	2b00      	cmp	r3, #0
 801056e:	d004      	beq.n	801057a <dhcp_parse_reply+0x6a>
 8010570:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010572:	895b      	ldrh	r3, [r3, #10]
 8010574:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8010576:	429a      	cmp	r2, r3
 8010578:	d2ea      	bcs.n	8010550 <dhcp_parse_reply+0x40>
  }
  if (q == NULL) {
 801057a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801057c:	2b00      	cmp	r3, #0
 801057e:	d102      	bne.n	8010586 <dhcp_parse_reply+0x76>
    return ERR_BUF;
 8010580:	f06f 0301 	mvn.w	r3, #1
 8010584:	e282      	b.n	8010a8c <dhcp_parse_reply+0x57c>
  }
  offset = options_idx;
 8010586:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8010588:	877b      	strh	r3, [r7, #58]	; 0x3a
  offset_max = options_idx_max;
 801058a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801058c:	873b      	strh	r3, [r7, #56]	; 0x38
  options = (u8_t *)q->payload;
 801058e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010590:	685b      	ldr	r3, [r3, #4]
 8010592:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* at least 1 byte to read and no end marker, then at least 3 bytes to read? */
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 8010594:	e23a      	b.n	8010a0c <dhcp_parse_reply+0x4fc>
    u8_t op = options[offset];
 8010596:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8010598:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801059a:	4413      	add	r3, r2
 801059c:	781b      	ldrb	r3, [r3, #0]
 801059e:	75fb      	strb	r3, [r7, #23]
    u8_t len;
    u8_t decode_len = 0;
 80105a0:	2300      	movs	r3, #0
 80105a2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    int decode_idx = -1;
 80105a6:	f04f 33ff 	mov.w	r3, #4294967295
 80105aa:	623b      	str	r3, [r7, #32]
    u16_t val_offset = (u16_t)(offset + 2);
 80105ac:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80105ae:	3302      	adds	r3, #2
 80105b0:	83fb      	strh	r3, [r7, #30]
    if (val_offset < offset) {
 80105b2:	8bfa      	ldrh	r2, [r7, #30]
 80105b4:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80105b6:	429a      	cmp	r2, r3
 80105b8:	d202      	bcs.n	80105c0 <dhcp_parse_reply+0xb0>
      /* overflow */
      return ERR_BUF;
 80105ba:	f06f 0301 	mvn.w	r3, #1
 80105be:	e265      	b.n	8010a8c <dhcp_parse_reply+0x57c>
    }
    /* len byte might be in the next pbuf */
    if ((offset + 1) < q->len) {
 80105c0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80105c2:	3301      	adds	r3, #1
 80105c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80105c6:	8952      	ldrh	r2, [r2, #10]
 80105c8:	4293      	cmp	r3, r2
 80105ca:	da07      	bge.n	80105dc <dhcp_parse_reply+0xcc>
      len = options[offset + 1];
 80105cc:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80105ce:	3301      	adds	r3, #1
 80105d0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80105d2:	4413      	add	r3, r2
 80105d4:	781b      	ldrb	r3, [r3, #0]
 80105d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80105da:	e00b      	b.n	80105f4 <dhcp_parse_reply+0xe4>
    } else {
      len = (q->next != NULL ? ((u8_t *)q->next->payload)[0] : 0);
 80105dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80105de:	681b      	ldr	r3, [r3, #0]
 80105e0:	2b00      	cmp	r3, #0
 80105e2:	d004      	beq.n	80105ee <dhcp_parse_reply+0xde>
 80105e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80105e6:	681b      	ldr	r3, [r3, #0]
 80105e8:	685b      	ldr	r3, [r3, #4]
 80105ea:	781b      	ldrb	r3, [r3, #0]
 80105ec:	e000      	b.n	80105f0 <dhcp_parse_reply+0xe0>
 80105ee:	2300      	movs	r3, #0
 80105f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
    /* LWIP_DEBUGF(DHCP_DEBUG, ("msg_offset=%"U16_F", q->len=%"U16_F, msg_offset, q->len)); */
    decode_len = len;
 80105f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80105f8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    switch (op) {
 80105fc:	7dfb      	ldrb	r3, [r7, #23]
 80105fe:	2b3b      	cmp	r3, #59	; 0x3b
 8010600:	f200 812d 	bhi.w	801085e <dhcp_parse_reply+0x34e>
 8010604:	a201      	add	r2, pc, #4	; (adr r2, 801060c <dhcp_parse_reply+0xfc>)
 8010606:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801060a:	bf00      	nop
 801060c:	080106fd 	.word	0x080106fd
 8010610:	0801070d 	.word	0x0801070d
 8010614:	0801085f 	.word	0x0801085f
 8010618:	0801072f 	.word	0x0801072f
 801061c:	0801085f 	.word	0x0801085f
 8010620:	0801085f 	.word	0x0801085f
 8010624:	0801085f 	.word	0x0801085f
 8010628:	0801085f 	.word	0x0801085f
 801062c:	0801085f 	.word	0x0801085f
 8010630:	0801085f 	.word	0x0801085f
 8010634:	0801085f 	.word	0x0801085f
 8010638:	0801085f 	.word	0x0801085f
 801063c:	0801085f 	.word	0x0801085f
 8010640:	0801085f 	.word	0x0801085f
 8010644:	0801085f 	.word	0x0801085f
 8010648:	0801085f 	.word	0x0801085f
 801064c:	0801085f 	.word	0x0801085f
 8010650:	0801085f 	.word	0x0801085f
 8010654:	0801085f 	.word	0x0801085f
 8010658:	0801085f 	.word	0x0801085f
 801065c:	0801085f 	.word	0x0801085f
 8010660:	0801085f 	.word	0x0801085f
 8010664:	0801085f 	.word	0x0801085f
 8010668:	0801085f 	.word	0x0801085f
 801066c:	0801085f 	.word	0x0801085f
 8010670:	0801085f 	.word	0x0801085f
 8010674:	0801085f 	.word	0x0801085f
 8010678:	0801085f 	.word	0x0801085f
 801067c:	0801085f 	.word	0x0801085f
 8010680:	0801085f 	.word	0x0801085f
 8010684:	0801085f 	.word	0x0801085f
 8010688:	0801085f 	.word	0x0801085f
 801068c:	0801085f 	.word	0x0801085f
 8010690:	0801085f 	.word	0x0801085f
 8010694:	0801085f 	.word	0x0801085f
 8010698:	0801085f 	.word	0x0801085f
 801069c:	0801085f 	.word	0x0801085f
 80106a0:	0801085f 	.word	0x0801085f
 80106a4:	0801085f 	.word	0x0801085f
 80106a8:	0801085f 	.word	0x0801085f
 80106ac:	0801085f 	.word	0x0801085f
 80106b0:	0801085f 	.word	0x0801085f
 80106b4:	0801085f 	.word	0x0801085f
 80106b8:	0801085f 	.word	0x0801085f
 80106bc:	0801085f 	.word	0x0801085f
 80106c0:	0801085f 	.word	0x0801085f
 80106c4:	0801085f 	.word	0x0801085f
 80106c8:	0801085f 	.word	0x0801085f
 80106cc:	0801085f 	.word	0x0801085f
 80106d0:	0801085f 	.word	0x0801085f
 80106d4:	0801085f 	.word	0x0801085f
 80106d8:	0801075b 	.word	0x0801075b
 80106dc:	0801077d 	.word	0x0801077d
 80106e0:	080107b9 	.word	0x080107b9
 80106e4:	080107db 	.word	0x080107db
 80106e8:	0801085f 	.word	0x0801085f
 80106ec:	0801085f 	.word	0x0801085f
 80106f0:	0801085f 	.word	0x0801085f
 80106f4:	080107fd 	.word	0x080107fd
 80106f8:	0801083d 	.word	0x0801083d
      /* case(DHCP_OPTION_END): handled above */
      case (DHCP_OPTION_PAD):
        /* special option: no len encoded */
        decode_len = len = 0;
 80106fc:	2300      	movs	r3, #0
 80106fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8010702:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010706:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        /* will be increased below */
        break;
 801070a:	e0ac      	b.n	8010866 <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_SUBNET_MASK):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801070c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010710:	2b04      	cmp	r3, #4
 8010712:	d009      	beq.n	8010728 <dhcp_parse_reply+0x218>
 8010714:	4b43      	ldr	r3, [pc, #268]	; (8010824 <dhcp_parse_reply+0x314>)
 8010716:	f240 622e 	movw	r2, #1582	; 0x62e
 801071a:	4943      	ldr	r1, [pc, #268]	; (8010828 <dhcp_parse_reply+0x318>)
 801071c:	4843      	ldr	r0, [pc, #268]	; (801082c <dhcp_parse_reply+0x31c>)
 801071e:	f002 fff9 	bl	8013714 <iprintf>
 8010722:	f06f 0305 	mvn.w	r3, #5
 8010726:	e1b1      	b.n	8010a8c <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
 8010728:	2306      	movs	r3, #6
 801072a:	623b      	str	r3, [r7, #32]
        break;
 801072c:	e09b      	b.n	8010866 <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_ROUTER):
        decode_len = 4; /* only copy the first given router */
 801072e:	2304      	movs	r3, #4
 8010730:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 8010734:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8010738:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801073c:	429a      	cmp	r2, r3
 801073e:	d209      	bcs.n	8010754 <dhcp_parse_reply+0x244>
 8010740:	4b38      	ldr	r3, [pc, #224]	; (8010824 <dhcp_parse_reply+0x314>)
 8010742:	f240 6233 	movw	r2, #1587	; 0x633
 8010746:	493a      	ldr	r1, [pc, #232]	; (8010830 <dhcp_parse_reply+0x320>)
 8010748:	4838      	ldr	r0, [pc, #224]	; (801082c <dhcp_parse_reply+0x31c>)
 801074a:	f002 ffe3 	bl	8013714 <iprintf>
 801074e:	f06f 0305 	mvn.w	r3, #5
 8010752:	e19b      	b.n	8010a8c <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_ROUTER;
 8010754:	2307      	movs	r3, #7
 8010756:	623b      	str	r3, [r7, #32]
        break;
 8010758:	e085      	b.n	8010866 <dhcp_parse_reply+0x356>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_DNS_SERVER;
        break;
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
      case (DHCP_OPTION_LEASE_TIME):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801075a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801075e:	2b04      	cmp	r3, #4
 8010760:	d009      	beq.n	8010776 <dhcp_parse_reply+0x266>
 8010762:	4b30      	ldr	r3, [pc, #192]	; (8010824 <dhcp_parse_reply+0x314>)
 8010764:	f240 6241 	movw	r2, #1601	; 0x641
 8010768:	492f      	ldr	r1, [pc, #188]	; (8010828 <dhcp_parse_reply+0x318>)
 801076a:	4830      	ldr	r0, [pc, #192]	; (801082c <dhcp_parse_reply+0x31c>)
 801076c:	f002 ffd2 	bl	8013714 <iprintf>
 8010770:	f06f 0305 	mvn.w	r3, #5
 8010774:	e18a      	b.n	8010a8c <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
 8010776:	2303      	movs	r3, #3
 8010778:	623b      	str	r3, [r7, #32]
        break;
 801077a:	e074      	b.n	8010866 <dhcp_parse_reply+0x356>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_NTP_SERVER;
        break;
#endif /* LWIP_DHCP_GET_NTP_SRV*/
      case (DHCP_OPTION_OVERLOAD):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 801077c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010780:	2b01      	cmp	r3, #1
 8010782:	d009      	beq.n	8010798 <dhcp_parse_reply+0x288>
 8010784:	4b27      	ldr	r3, [pc, #156]	; (8010824 <dhcp_parse_reply+0x314>)
 8010786:	f240 624f 	movw	r2, #1615	; 0x64f
 801078a:	492a      	ldr	r1, [pc, #168]	; (8010834 <dhcp_parse_reply+0x324>)
 801078c:	4827      	ldr	r0, [pc, #156]	; (801082c <dhcp_parse_reply+0x31c>)
 801078e:	f002 ffc1 	bl	8013714 <iprintf>
 8010792:	f06f 0305 	mvn.w	r3, #5
 8010796:	e179      	b.n	8010a8c <dhcp_parse_reply+0x57c>
        /* decode overload only in options, not in file/sname: invalid packet */
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 8010798:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 801079a:	2bf0      	cmp	r3, #240	; 0xf0
 801079c:	d009      	beq.n	80107b2 <dhcp_parse_reply+0x2a2>
 801079e:	4b21      	ldr	r3, [pc, #132]	; (8010824 <dhcp_parse_reply+0x314>)
 80107a0:	f240 6251 	movw	r2, #1617	; 0x651
 80107a4:	4924      	ldr	r1, [pc, #144]	; (8010838 <dhcp_parse_reply+0x328>)
 80107a6:	4821      	ldr	r0, [pc, #132]	; (801082c <dhcp_parse_reply+0x31c>)
 80107a8:	f002 ffb4 	bl	8013714 <iprintf>
 80107ac:	f06f 0305 	mvn.w	r3, #5
 80107b0:	e16c      	b.n	8010a8c <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
 80107b2:	2300      	movs	r3, #0
 80107b4:	623b      	str	r3, [r7, #32]
        break;
 80107b6:	e056      	b.n	8010866 <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_MESSAGE_TYPE):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 80107b8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80107bc:	2b01      	cmp	r3, #1
 80107be:	d009      	beq.n	80107d4 <dhcp_parse_reply+0x2c4>
 80107c0:	4b18      	ldr	r3, [pc, #96]	; (8010824 <dhcp_parse_reply+0x314>)
 80107c2:	f240 6255 	movw	r2, #1621	; 0x655
 80107c6:	491b      	ldr	r1, [pc, #108]	; (8010834 <dhcp_parse_reply+0x324>)
 80107c8:	4818      	ldr	r0, [pc, #96]	; (801082c <dhcp_parse_reply+0x31c>)
 80107ca:	f002 ffa3 	bl	8013714 <iprintf>
 80107ce:	f06f 0305 	mvn.w	r3, #5
 80107d2:	e15b      	b.n	8010a8c <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_MSG_TYPE;
 80107d4:	2301      	movs	r3, #1
 80107d6:	623b      	str	r3, [r7, #32]
        break;
 80107d8:	e045      	b.n	8010866 <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_SERVER_ID):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 80107da:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80107de:	2b04      	cmp	r3, #4
 80107e0:	d009      	beq.n	80107f6 <dhcp_parse_reply+0x2e6>
 80107e2:	4b10      	ldr	r3, [pc, #64]	; (8010824 <dhcp_parse_reply+0x314>)
 80107e4:	f240 6259 	movw	r2, #1625	; 0x659
 80107e8:	490f      	ldr	r1, [pc, #60]	; (8010828 <dhcp_parse_reply+0x318>)
 80107ea:	4810      	ldr	r0, [pc, #64]	; (801082c <dhcp_parse_reply+0x31c>)
 80107ec:	f002 ff92 	bl	8013714 <iprintf>
 80107f0:	f06f 0305 	mvn.w	r3, #5
 80107f4:	e14a      	b.n	8010a8c <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
 80107f6:	2302      	movs	r3, #2
 80107f8:	623b      	str	r3, [r7, #32]
        break;
 80107fa:	e034      	b.n	8010866 <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_T1):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 80107fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010800:	2b04      	cmp	r3, #4
 8010802:	d009      	beq.n	8010818 <dhcp_parse_reply+0x308>
 8010804:	4b07      	ldr	r3, [pc, #28]	; (8010824 <dhcp_parse_reply+0x314>)
 8010806:	f240 625d 	movw	r2, #1629	; 0x65d
 801080a:	4907      	ldr	r1, [pc, #28]	; (8010828 <dhcp_parse_reply+0x318>)
 801080c:	4807      	ldr	r0, [pc, #28]	; (801082c <dhcp_parse_reply+0x31c>)
 801080e:	f002 ff81 	bl	8013714 <iprintf>
 8010812:	f06f 0305 	mvn.w	r3, #5
 8010816:	e139      	b.n	8010a8c <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_T1;
 8010818:	2304      	movs	r3, #4
 801081a:	623b      	str	r3, [r7, #32]
        break;
 801081c:	e023      	b.n	8010866 <dhcp_parse_reply+0x356>
 801081e:	bf00      	nop
 8010820:	2000ef00 	.word	0x2000ef00
 8010824:	080169fc 	.word	0x080169fc
 8010828:	08016c84 	.word	0x08016c84
 801082c:	08016a5c 	.word	0x08016a5c
 8010830:	08016c90 	.word	0x08016c90
 8010834:	08016ca4 	.word	0x08016ca4
 8010838:	08016cb0 	.word	0x08016cb0
      case (DHCP_OPTION_T2):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801083c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010840:	2b04      	cmp	r3, #4
 8010842:	d009      	beq.n	8010858 <dhcp_parse_reply+0x348>
 8010844:	4b93      	ldr	r3, [pc, #588]	; (8010a94 <dhcp_parse_reply+0x584>)
 8010846:	f240 6261 	movw	r2, #1633	; 0x661
 801084a:	4993      	ldr	r1, [pc, #588]	; (8010a98 <dhcp_parse_reply+0x588>)
 801084c:	4893      	ldr	r0, [pc, #588]	; (8010a9c <dhcp_parse_reply+0x58c>)
 801084e:	f002 ff61 	bl	8013714 <iprintf>
 8010852:	f06f 0305 	mvn.w	r3, #5
 8010856:	e119      	b.n	8010a8c <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_T2;
 8010858:	2305      	movs	r3, #5
 801085a:	623b      	str	r3, [r7, #32]
        break;
 801085c:	e003      	b.n	8010866 <dhcp_parse_reply+0x356>
      default:
        decode_len = 0;
 801085e:	2300      	movs	r3, #0
 8010860:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_DEBUGF(DHCP_DEBUG, ("skipping option %"U16_F" in options\n", (u16_t)op));
        LWIP_HOOK_DHCP_PARSE_OPTION(ip_current_netif(), dhcp, dhcp->state, msg_in,
                                    dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE) ? (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE) : 0,
                                    op, len, q, val_offset);
        break;
 8010864:	bf00      	nop
    }
    if (op == DHCP_OPTION_PAD) {
 8010866:	7dfb      	ldrb	r3, [r7, #23]
 8010868:	2b00      	cmp	r3, #0
 801086a:	d103      	bne.n	8010874 <dhcp_parse_reply+0x364>
      offset++;
 801086c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801086e:	3301      	adds	r3, #1
 8010870:	877b      	strh	r3, [r7, #58]	; 0x3a
 8010872:	e0a1      	b.n	80109b8 <dhcp_parse_reply+0x4a8>
    } else {
      if (offset + len + 2 > 0xFFFF) {
 8010874:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8010876:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801087a:	4413      	add	r3, r2
 801087c:	3302      	adds	r3, #2
 801087e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010882:	db02      	blt.n	801088a <dhcp_parse_reply+0x37a>
        /* overflow */
        return ERR_BUF;
 8010884:	f06f 0301 	mvn.w	r3, #1
 8010888:	e100      	b.n	8010a8c <dhcp_parse_reply+0x57c>
      }
      offset = (u16_t)(offset + len + 2);
 801088a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801088e:	b29a      	uxth	r2, r3
 8010890:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8010892:	4413      	add	r3, r2
 8010894:	b29b      	uxth	r3, r3
 8010896:	3302      	adds	r3, #2
 8010898:	877b      	strh	r3, [r7, #58]	; 0x3a
      if (decode_len > 0) {
 801089a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801089e:	2b00      	cmp	r3, #0
 80108a0:	f000 808a 	beq.w	80109b8 <dhcp_parse_reply+0x4a8>
        u32_t value = 0;
 80108a4:	2300      	movs	r3, #0
 80108a6:	60bb      	str	r3, [r7, #8]
        u16_t copy_len;
decode_next:
        LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 80108a8:	6a3b      	ldr	r3, [r7, #32]
 80108aa:	2b00      	cmp	r3, #0
 80108ac:	db02      	blt.n	80108b4 <dhcp_parse_reply+0x3a4>
 80108ae:	6a3b      	ldr	r3, [r7, #32]
 80108b0:	2b07      	cmp	r3, #7
 80108b2:	dd06      	ble.n	80108c2 <dhcp_parse_reply+0x3b2>
 80108b4:	4b77      	ldr	r3, [pc, #476]	; (8010a94 <dhcp_parse_reply+0x584>)
 80108b6:	f44f 62cf 	mov.w	r2, #1656	; 0x678
 80108ba:	4979      	ldr	r1, [pc, #484]	; (8010aa0 <dhcp_parse_reply+0x590>)
 80108bc:	4877      	ldr	r0, [pc, #476]	; (8010a9c <dhcp_parse_reply+0x58c>)
 80108be:	f002 ff29 	bl	8013714 <iprintf>
        if (!dhcp_option_given(dhcp, decode_idx)) {
 80108c2:	4a78      	ldr	r2, [pc, #480]	; (8010aa4 <dhcp_parse_reply+0x594>)
 80108c4:	6a3b      	ldr	r3, [r7, #32]
 80108c6:	4413      	add	r3, r2
 80108c8:	781b      	ldrb	r3, [r3, #0]
 80108ca:	2b00      	cmp	r3, #0
 80108cc:	d174      	bne.n	80109b8 <dhcp_parse_reply+0x4a8>
          copy_len = LWIP_MIN(decode_len, 4);
 80108ce:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80108d2:	2b04      	cmp	r3, #4
 80108d4:	bf28      	it	cs
 80108d6:	2304      	movcs	r3, #4
 80108d8:	b2db      	uxtb	r3, r3
 80108da:	82bb      	strh	r3, [r7, #20]
          if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 80108dc:	8bfb      	ldrh	r3, [r7, #30]
 80108de:	8aba      	ldrh	r2, [r7, #20]
 80108e0:	f107 0108 	add.w	r1, r7, #8
 80108e4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80108e6:	f7f8 fc09 	bl	80090fc <pbuf_copy_partial>
 80108ea:	4603      	mov	r3, r0
 80108ec:	461a      	mov	r2, r3
 80108ee:	8abb      	ldrh	r3, [r7, #20]
 80108f0:	4293      	cmp	r3, r2
 80108f2:	d002      	beq.n	80108fa <dhcp_parse_reply+0x3ea>
            return ERR_BUF;
 80108f4:	f06f 0301 	mvn.w	r3, #1
 80108f8:	e0c8      	b.n	8010a8c <dhcp_parse_reply+0x57c>
          }
          if (decode_len > 4) {
 80108fa:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80108fe:	2b04      	cmp	r3, #4
 8010900:	d933      	bls.n	801096a <dhcp_parse_reply+0x45a>
            /* decode more than one u32_t */
            u16_t next_val_offset;
            LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 8010902:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8010906:	f003 0303 	and.w	r3, r3, #3
 801090a:	b2db      	uxtb	r3, r3
 801090c:	2b00      	cmp	r3, #0
 801090e:	d009      	beq.n	8010924 <dhcp_parse_reply+0x414>
 8010910:	4b60      	ldr	r3, [pc, #384]	; (8010a94 <dhcp_parse_reply+0x584>)
 8010912:	f240 6281 	movw	r2, #1665	; 0x681
 8010916:	4964      	ldr	r1, [pc, #400]	; (8010aa8 <dhcp_parse_reply+0x598>)
 8010918:	4860      	ldr	r0, [pc, #384]	; (8010a9c <dhcp_parse_reply+0x58c>)
 801091a:	f002 fefb 	bl	8013714 <iprintf>
 801091e:	f06f 0305 	mvn.w	r3, #5
 8010922:	e0b3      	b.n	8010a8c <dhcp_parse_reply+0x57c>
            dhcp_got_option(dhcp, decode_idx);
 8010924:	4a5f      	ldr	r2, [pc, #380]	; (8010aa4 <dhcp_parse_reply+0x594>)
 8010926:	6a3b      	ldr	r3, [r7, #32]
 8010928:	4413      	add	r3, r2
 801092a:	2201      	movs	r2, #1
 801092c:	701a      	strb	r2, [r3, #0]
            dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 801092e:	68bb      	ldr	r3, [r7, #8]
 8010930:	4618      	mov	r0, r3
 8010932:	f7f6 fe3e 	bl	80075b2 <lwip_htonl>
 8010936:	4601      	mov	r1, r0
 8010938:	4a5c      	ldr	r2, [pc, #368]	; (8010aac <dhcp_parse_reply+0x59c>)
 801093a:	6a3b      	ldr	r3, [r7, #32]
 801093c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            decode_len = (u8_t)(decode_len - 4);
 8010940:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8010944:	3b04      	subs	r3, #4
 8010946:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            next_val_offset = (u16_t)(val_offset + 4);
 801094a:	8bfb      	ldrh	r3, [r7, #30]
 801094c:	3304      	adds	r3, #4
 801094e:	827b      	strh	r3, [r7, #18]
            if (next_val_offset < val_offset) {
 8010950:	8a7a      	ldrh	r2, [r7, #18]
 8010952:	8bfb      	ldrh	r3, [r7, #30]
 8010954:	429a      	cmp	r2, r3
 8010956:	d202      	bcs.n	801095e <dhcp_parse_reply+0x44e>
              /* overflow */
              return ERR_BUF;
 8010958:	f06f 0301 	mvn.w	r3, #1
 801095c:	e096      	b.n	8010a8c <dhcp_parse_reply+0x57c>
            }
            val_offset = next_val_offset;
 801095e:	8a7b      	ldrh	r3, [r7, #18]
 8010960:	83fb      	strh	r3, [r7, #30]
            decode_idx++;
 8010962:	6a3b      	ldr	r3, [r7, #32]
 8010964:	3301      	adds	r3, #1
 8010966:	623b      	str	r3, [r7, #32]
            goto decode_next;
 8010968:	e79e      	b.n	80108a8 <dhcp_parse_reply+0x398>
          } else if (decode_len == 4) {
 801096a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801096e:	2b04      	cmp	r3, #4
 8010970:	d106      	bne.n	8010980 <dhcp_parse_reply+0x470>
            value = lwip_ntohl(value);
 8010972:	68bb      	ldr	r3, [r7, #8]
 8010974:	4618      	mov	r0, r3
 8010976:	f7f6 fe1c 	bl	80075b2 <lwip_htonl>
 801097a:	4603      	mov	r3, r0
 801097c:	60bb      	str	r3, [r7, #8]
 801097e:	e011      	b.n	80109a4 <dhcp_parse_reply+0x494>
          } else {
            LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 8010980:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8010984:	2b01      	cmp	r3, #1
 8010986:	d009      	beq.n	801099c <dhcp_parse_reply+0x48c>
 8010988:	4b42      	ldr	r3, [pc, #264]	; (8010a94 <dhcp_parse_reply+0x584>)
 801098a:	f44f 62d2 	mov.w	r2, #1680	; 0x690
 801098e:	4948      	ldr	r1, [pc, #288]	; (8010ab0 <dhcp_parse_reply+0x5a0>)
 8010990:	4842      	ldr	r0, [pc, #264]	; (8010a9c <dhcp_parse_reply+0x58c>)
 8010992:	f002 febf 	bl	8013714 <iprintf>
 8010996:	f06f 0305 	mvn.w	r3, #5
 801099a:	e077      	b.n	8010a8c <dhcp_parse_reply+0x57c>
            value = ((u8_t *)&value)[0];
 801099c:	f107 0308 	add.w	r3, r7, #8
 80109a0:	781b      	ldrb	r3, [r3, #0]
 80109a2:	60bb      	str	r3, [r7, #8]
          }
          dhcp_got_option(dhcp, decode_idx);
 80109a4:	4a3f      	ldr	r2, [pc, #252]	; (8010aa4 <dhcp_parse_reply+0x594>)
 80109a6:	6a3b      	ldr	r3, [r7, #32]
 80109a8:	4413      	add	r3, r2
 80109aa:	2201      	movs	r2, #1
 80109ac:	701a      	strb	r2, [r3, #0]
          dhcp_set_option_value(dhcp, decode_idx, value);
 80109ae:	68ba      	ldr	r2, [r7, #8]
 80109b0:	493e      	ldr	r1, [pc, #248]	; (8010aac <dhcp_parse_reply+0x59c>)
 80109b2:	6a3b      	ldr	r3, [r7, #32]
 80109b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        }
      }
    }
    if (offset >= q->len) {
 80109b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80109ba:	895b      	ldrh	r3, [r3, #10]
 80109bc:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80109be:	429a      	cmp	r2, r3
 80109c0:	d324      	bcc.n	8010a0c <dhcp_parse_reply+0x4fc>
      offset = (u16_t)(offset - q->len);
 80109c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80109c4:	895b      	ldrh	r3, [r3, #10]
 80109c6:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80109c8:	1ad3      	subs	r3, r2, r3
 80109ca:	877b      	strh	r3, [r7, #58]	; 0x3a
      offset_max = (u16_t)(offset_max - q->len);
 80109cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80109ce:	895b      	ldrh	r3, [r3, #10]
 80109d0:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 80109d2:	1ad3      	subs	r3, r2, r3
 80109d4:	873b      	strh	r3, [r7, #56]	; 0x38
      if (offset < offset_max) {
 80109d6:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80109d8:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80109da:	429a      	cmp	r2, r3
 80109dc:	d213      	bcs.n	8010a06 <dhcp_parse_reply+0x4f6>
        q = q->next;
 80109de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80109e0:	681b      	ldr	r3, [r3, #0]
 80109e2:	633b      	str	r3, [r7, #48]	; 0x30
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 80109e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80109e6:	2b00      	cmp	r3, #0
 80109e8:	d109      	bne.n	80109fe <dhcp_parse_reply+0x4ee>
 80109ea:	4b2a      	ldr	r3, [pc, #168]	; (8010a94 <dhcp_parse_reply+0x584>)
 80109ec:	f240 629d 	movw	r2, #1693	; 0x69d
 80109f0:	4930      	ldr	r1, [pc, #192]	; (8010ab4 <dhcp_parse_reply+0x5a4>)
 80109f2:	482a      	ldr	r0, [pc, #168]	; (8010a9c <dhcp_parse_reply+0x58c>)
 80109f4:	f002 fe8e 	bl	8013714 <iprintf>
 80109f8:	f06f 0305 	mvn.w	r3, #5
 80109fc:	e046      	b.n	8010a8c <dhcp_parse_reply+0x57c>
        options = (u8_t *)q->payload;
 80109fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a00:	685b      	ldr	r3, [r3, #4]
 8010a02:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010a04:	e002      	b.n	8010a0c <dhcp_parse_reply+0x4fc>
      } else {
        /* We've run out of bytes, probably no end marker. Don't proceed. */
        return ERR_BUF;
 8010a06:	f06f 0301 	mvn.w	r3, #1
 8010a0a:	e03f      	b.n	8010a8c <dhcp_parse_reply+0x57c>
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 8010a0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a0e:	2b00      	cmp	r3, #0
 8010a10:	d00a      	beq.n	8010a28 <dhcp_parse_reply+0x518>
 8010a12:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8010a14:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8010a16:	429a      	cmp	r2, r3
 8010a18:	d206      	bcs.n	8010a28 <dhcp_parse_reply+0x518>
 8010a1a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8010a1c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8010a1e:	4413      	add	r3, r2
 8010a20:	781b      	ldrb	r3, [r3, #0]
 8010a22:	2bff      	cmp	r3, #255	; 0xff
 8010a24:	f47f adb7 	bne.w	8010596 <dhcp_parse_reply+0x86>
      }
    }
  }
  /* is this an overloaded message? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
 8010a28:	4b1e      	ldr	r3, [pc, #120]	; (8010aa4 <dhcp_parse_reply+0x594>)
 8010a2a:	781b      	ldrb	r3, [r3, #0]
 8010a2c:	2b00      	cmp	r3, #0
 8010a2e:	d018      	beq.n	8010a62 <dhcp_parse_reply+0x552>
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 8010a30:	4b1e      	ldr	r3, [pc, #120]	; (8010aac <dhcp_parse_reply+0x59c>)
 8010a32:	681b      	ldr	r3, [r3, #0]
 8010a34:	60fb      	str	r3, [r7, #12]
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 8010a36:	4b1b      	ldr	r3, [pc, #108]	; (8010aa4 <dhcp_parse_reply+0x594>)
 8010a38:	2200      	movs	r2, #0
 8010a3a:	701a      	strb	r2, [r3, #0]
    if (overload == DHCP_OVERLOAD_FILE) {
 8010a3c:	68fb      	ldr	r3, [r7, #12]
 8010a3e:	2b01      	cmp	r3, #1
 8010a40:	d102      	bne.n	8010a48 <dhcp_parse_reply+0x538>
      parse_file_as_options = 1;
 8010a42:	2301      	movs	r3, #1
 8010a44:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010a46:	e00c      	b.n	8010a62 <dhcp_parse_reply+0x552>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded file field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME) {
 8010a48:	68fb      	ldr	r3, [r7, #12]
 8010a4a:	2b02      	cmp	r3, #2
 8010a4c:	d102      	bne.n	8010a54 <dhcp_parse_reply+0x544>
      parse_sname_as_options = 1;
 8010a4e:	2301      	movs	r3, #1
 8010a50:	62bb      	str	r3, [r7, #40]	; 0x28
 8010a52:	e006      	b.n	8010a62 <dhcp_parse_reply+0x552>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
 8010a54:	68fb      	ldr	r3, [r7, #12]
 8010a56:	2b03      	cmp	r3, #3
 8010a58:	d103      	bne.n	8010a62 <dhcp_parse_reply+0x552>
      parse_sname_as_options = 1;
 8010a5a:	2301      	movs	r3, #1
 8010a5c:	62bb      	str	r3, [r7, #40]	; 0x28
      parse_file_as_options = 1;
 8010a5e:	2301      	movs	r3, #1
 8010a60:	62fb      	str	r3, [r7, #44]	; 0x2c
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname and file field\n"));
    } else {
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("invalid overload option: %d\n", (int)overload));
    }
  }
  if (parse_file_as_options) {
 8010a62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010a64:	2b00      	cmp	r3, #0
 8010a66:	d006      	beq.n	8010a76 <dhcp_parse_reply+0x566>
    /* if both are overloaded, parse file first and then sname (RFC 2131 ch. 4.1) */
    parse_file_as_options = 0;
 8010a68:	2300      	movs	r3, #0
 8010a6a:	62fb      	str	r3, [r7, #44]	; 0x2c
    options_idx = DHCP_FILE_OFS;
 8010a6c:	236c      	movs	r3, #108	; 0x6c
 8010a6e:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
 8010a70:	23ec      	movs	r3, #236	; 0xec
 8010a72:	86bb      	strh	r3, [r7, #52]	; 0x34
#if LWIP_DHCP_BOOTP_FILE
    file_overloaded = 1;
#endif
    goto again;
 8010a74:	e569      	b.n	801054a <dhcp_parse_reply+0x3a>
  } else if (parse_sname_as_options) {
 8010a76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010a78:	2b00      	cmp	r3, #0
 8010a7a:	d006      	beq.n	8010a8a <dhcp_parse_reply+0x57a>
    parse_sname_as_options = 0;
 8010a7c:	2300      	movs	r3, #0
 8010a7e:	62bb      	str	r3, [r7, #40]	; 0x28
    options_idx = DHCP_SNAME_OFS;
 8010a80:	232c      	movs	r3, #44	; 0x2c
 8010a82:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
 8010a84:	236c      	movs	r3, #108	; 0x6c
 8010a86:	86bb      	strh	r3, [r7, #52]	; 0x34
    goto again;
 8010a88:	e55f      	b.n	801054a <dhcp_parse_reply+0x3a>
    }
    /* make sure the string is really NULL-terminated */
    dhcp->boot_file_name[DHCP_FILE_LEN-1] = 0;
  }
#endif /* LWIP_DHCP_BOOTP_FILE */ 
  return ERR_OK;
 8010a8a:	2300      	movs	r3, #0
}
 8010a8c:	4618      	mov	r0, r3
 8010a8e:	3740      	adds	r7, #64	; 0x40
 8010a90:	46bd      	mov	sp, r7
 8010a92:	bd80      	pop	{r7, pc}
 8010a94:	080169fc 	.word	0x080169fc
 8010a98:	08016c84 	.word	0x08016c84
 8010a9c:	08016a5c 	.word	0x08016a5c
 8010aa0:	08016cc8 	.word	0x08016cc8
 8010aa4:	2000ef00 	.word	0x2000ef00
 8010aa8:	08016cdc 	.word	0x08016cdc
 8010aac:	2000ef08 	.word	0x2000ef08
 8010ab0:	08016cf4 	.word	0x08016cf4
 8010ab4:	08016d08 	.word	0x08016d08

08010ab8 <dhcp_recv>:
/**
 * If an incoming DHCP message is in response to us, then trigger the state machine
 */
static void
dhcp_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 8010ab8:	b580      	push	{r7, lr}
 8010aba:	b08a      	sub	sp, #40	; 0x28
 8010abc:	af00      	add	r7, sp, #0
 8010abe:	60f8      	str	r0, [r7, #12]
 8010ac0:	60b9      	str	r1, [r7, #8]
 8010ac2:	607a      	str	r2, [r7, #4]
 8010ac4:	603b      	str	r3, [r7, #0]
  struct netif *netif = ip_current_input_netif();
 8010ac6:	4b5f      	ldr	r3, [pc, #380]	; (8010c44 <dhcp_recv+0x18c>)
 8010ac8:	685b      	ldr	r3, [r3, #4]
 8010aca:	623b      	str	r3, [r7, #32]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8010acc:	6a3b      	ldr	r3, [r7, #32]
 8010ace:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010ad0:	61fb      	str	r3, [r7, #28]
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
 8010ad2:	687b      	ldr	r3, [r7, #4]
 8010ad4:	685b      	ldr	r3, [r3, #4]
 8010ad6:	61bb      	str	r3, [r7, #24]
  struct dhcp_msg *msg_in;

  LWIP_UNUSED_ARG(arg);

  /* Caught DHCP message from netif that does not have DHCP enabled? -> not interested */
  if ((dhcp == NULL) || (dhcp->pcb_allocated == 0)) {
 8010ad8:	69fb      	ldr	r3, [r7, #28]
 8010ada:	2b00      	cmp	r3, #0
 8010adc:	f000 809d 	beq.w	8010c1a <dhcp_recv+0x162>
 8010ae0:	69fb      	ldr	r3, [r7, #28]
 8010ae2:	791b      	ldrb	r3, [r3, #4]
 8010ae4:	2b00      	cmp	r3, #0
 8010ae6:	f000 8098 	beq.w	8010c1a <dhcp_recv+0x162>
  /* prevent warnings about unused arguments */
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(addr);
  LWIP_UNUSED_ARG(port);

  if (p->len < DHCP_MIN_REPLY_LEN) {
 8010aea:	687b      	ldr	r3, [r7, #4]
 8010aec:	895b      	ldrh	r3, [r3, #10]
 8010aee:	2b2b      	cmp	r3, #43	; 0x2b
 8010af0:	f240 8095 	bls.w	8010c1e <dhcp_recv+0x166>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP reply message or pbuf too short\n"));
    goto free_pbuf_and_return;
  }

  if (reply_msg->op != DHCP_BOOTREPLY) {
 8010af4:	69bb      	ldr	r3, [r7, #24]
 8010af6:	781b      	ldrb	r3, [r3, #0]
 8010af8:	2b02      	cmp	r3, #2
 8010afa:	f040 8092 	bne.w	8010c22 <dhcp_recv+0x16a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("not a DHCP reply message, but type %"U16_F"\n", (u16_t)reply_msg->op));
    goto free_pbuf_and_return;
  }
  /* iterate through hardware address and match against DHCP message */
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8010afe:	2300      	movs	r3, #0
 8010b00:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8010b04:	e012      	b.n	8010b2c <dhcp_recv+0x74>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 8010b06:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010b0a:	6a3a      	ldr	r2, [r7, #32]
 8010b0c:	4413      	add	r3, r2
 8010b0e:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 8010b12:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010b16:	69b9      	ldr	r1, [r7, #24]
 8010b18:	440b      	add	r3, r1
 8010b1a:	7f1b      	ldrb	r3, [r3, #28]
 8010b1c:	429a      	cmp	r2, r3
 8010b1e:	f040 8082 	bne.w	8010c26 <dhcp_recv+0x16e>
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8010b22:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010b26:	3301      	adds	r3, #1
 8010b28:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8010b2c:	6a3b      	ldr	r3, [r7, #32]
 8010b2e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010b32:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8010b36:	429a      	cmp	r2, r3
 8010b38:	d203      	bcs.n	8010b42 <dhcp_recv+0x8a>
 8010b3a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010b3e:	2b05      	cmp	r3, #5
 8010b40:	d9e1      	bls.n	8010b06 <dhcp_recv+0x4e>
                   (u16_t)i, (u16_t)netif->hwaddr[i], (u16_t)i, (u16_t)reply_msg->chaddr[i]));
      goto free_pbuf_and_return;
    }
  }
  /* match transaction ID against what we expected */
  if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
 8010b42:	69bb      	ldr	r3, [r7, #24]
 8010b44:	685b      	ldr	r3, [r3, #4]
 8010b46:	4618      	mov	r0, r3
 8010b48:	f7f6 fd33 	bl	80075b2 <lwip_htonl>
 8010b4c:	4602      	mov	r2, r0
 8010b4e:	69fb      	ldr	r3, [r7, #28]
 8010b50:	681b      	ldr	r3, [r3, #0]
 8010b52:	429a      	cmp	r2, r3
 8010b54:	d169      	bne.n	8010c2a <dhcp_recv+0x172>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("transaction id mismatch reply_msg->xid(%"X32_F")!=dhcp->xid(%"X32_F")\n", lwip_ntohl(reply_msg->xid), dhcp->xid));
    goto free_pbuf_and_return;
  }
  /* option fields could be unfold? */
  if (dhcp_parse_reply(p, dhcp) != ERR_OK) {
 8010b56:	69f9      	ldr	r1, [r7, #28]
 8010b58:	6878      	ldr	r0, [r7, #4]
 8010b5a:	f7ff fcd9 	bl	8010510 <dhcp_parse_reply>
 8010b5e:	4603      	mov	r3, r0
 8010b60:	2b00      	cmp	r3, #0
 8010b62:	d164      	bne.n	8010c2e <dhcp_recv+0x176>
    goto free_pbuf_and_return;
  }

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("searching DHCP_OPTION_MESSAGE_TYPE\n"));
  /* obtain pointer to DHCP message type */
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
 8010b64:	4b38      	ldr	r3, [pc, #224]	; (8010c48 <dhcp_recv+0x190>)
 8010b66:	785b      	ldrb	r3, [r3, #1]
 8010b68:	2b00      	cmp	r3, #0
 8010b6a:	d062      	beq.n	8010c32 <dhcp_recv+0x17a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP_OPTION_MESSAGE_TYPE option not found\n"));
    goto free_pbuf_and_return;
  }

  msg_in = (struct dhcp_msg *)p->payload;
 8010b6c:	687b      	ldr	r3, [r7, #4]
 8010b6e:	685b      	ldr	r3, [r3, #4]
 8010b70:	617b      	str	r3, [r7, #20]
  /* read DHCP message type */
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 8010b72:	4b36      	ldr	r3, [pc, #216]	; (8010c4c <dhcp_recv+0x194>)
 8010b74:	685b      	ldr	r3, [r3, #4]
 8010b76:	74fb      	strb	r3, [r7, #19]
  /* message type is DHCP ACK? */
  if (msg_type == DHCP_ACK) {
 8010b78:	7cfb      	ldrb	r3, [r7, #19]
 8010b7a:	2b05      	cmp	r3, #5
 8010b7c:	d12a      	bne.n	8010bd4 <dhcp_recv+0x11c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_ACK received\n"));
    /* in requesting state? */
    if (dhcp->state == DHCP_STATE_REQUESTING) {
 8010b7e:	69fb      	ldr	r3, [r7, #28]
 8010b80:	795b      	ldrb	r3, [r3, #5]
 8010b82:	2b01      	cmp	r3, #1
 8010b84:	d112      	bne.n	8010bac <dhcp_recv+0xf4>
      dhcp_handle_ack(netif, msg_in);
 8010b86:	6979      	ldr	r1, [r7, #20]
 8010b88:	6a38      	ldr	r0, [r7, #32]
 8010b8a:	f7fe fe05 	bl	800f798 <dhcp_handle_ack>
#if DHCP_DOES_ARP_CHECK
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 8010b8e:	6a3b      	ldr	r3, [r7, #32]
 8010b90:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8010b94:	f003 0308 	and.w	r3, r3, #8
 8010b98:	2b00      	cmp	r3, #0
 8010b9a:	d003      	beq.n	8010ba4 <dhcp_recv+0xec>
        /* check if the acknowledged lease address is already in use */
        dhcp_check(netif);
 8010b9c:	6a38      	ldr	r0, [r7, #32]
 8010b9e:	f7fe fb75 	bl	800f28c <dhcp_check>
 8010ba2:	e047      	b.n	8010c34 <dhcp_recv+0x17c>
      } else {
        /* bind interface to the acknowledged lease address */
        dhcp_bind(netif);
 8010ba4:	6a38      	ldr	r0, [r7, #32]
 8010ba6:	f7ff f867 	bl	800fc78 <dhcp_bind>
 8010baa:	e043      	b.n	8010c34 <dhcp_recv+0x17c>
      /* bind interface to the acknowledged lease address */
      dhcp_bind(netif);
#endif
    }
    /* already bound to the given lease address? */
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 8010bac:	69fb      	ldr	r3, [r7, #28]
 8010bae:	795b      	ldrb	r3, [r3, #5]
 8010bb0:	2b03      	cmp	r3, #3
 8010bb2:	d007      	beq.n	8010bc4 <dhcp_recv+0x10c>
 8010bb4:	69fb      	ldr	r3, [r7, #28]
 8010bb6:	795b      	ldrb	r3, [r3, #5]
 8010bb8:	2b04      	cmp	r3, #4
 8010bba:	d003      	beq.n	8010bc4 <dhcp_recv+0x10c>
             (dhcp->state == DHCP_STATE_RENEWING)) {
 8010bbc:	69fb      	ldr	r3, [r7, #28]
 8010bbe:	795b      	ldrb	r3, [r3, #5]
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 8010bc0:	2b05      	cmp	r3, #5
 8010bc2:	d137      	bne.n	8010c34 <dhcp_recv+0x17c>
      dhcp_handle_ack(netif, msg_in);
 8010bc4:	6979      	ldr	r1, [r7, #20]
 8010bc6:	6a38      	ldr	r0, [r7, #32]
 8010bc8:	f7fe fde6 	bl	800f798 <dhcp_handle_ack>
      dhcp_bind(netif);
 8010bcc:	6a38      	ldr	r0, [r7, #32]
 8010bce:	f7ff f853 	bl	800fc78 <dhcp_bind>
 8010bd2:	e02f      	b.n	8010c34 <dhcp_recv+0x17c>
    }
  }
  /* received a DHCP_NAK in appropriate state? */
  else if ((msg_type == DHCP_NAK) &&
 8010bd4:	7cfb      	ldrb	r3, [r7, #19]
 8010bd6:	2b06      	cmp	r3, #6
 8010bd8:	d113      	bne.n	8010c02 <dhcp_recv+0x14a>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8010bda:	69fb      	ldr	r3, [r7, #28]
 8010bdc:	795b      	ldrb	r3, [r3, #5]
  else if ((msg_type == DHCP_NAK) &&
 8010bde:	2b03      	cmp	r3, #3
 8010be0:	d00b      	beq.n	8010bfa <dhcp_recv+0x142>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8010be2:	69fb      	ldr	r3, [r7, #28]
 8010be4:	795b      	ldrb	r3, [r3, #5]
 8010be6:	2b01      	cmp	r3, #1
 8010be8:	d007      	beq.n	8010bfa <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 8010bea:	69fb      	ldr	r3, [r7, #28]
 8010bec:	795b      	ldrb	r3, [r3, #5]
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8010bee:	2b04      	cmp	r3, #4
 8010bf0:	d003      	beq.n	8010bfa <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 8010bf2:	69fb      	ldr	r3, [r7, #28]
 8010bf4:	795b      	ldrb	r3, [r3, #5]
 8010bf6:	2b05      	cmp	r3, #5
 8010bf8:	d103      	bne.n	8010c02 <dhcp_recv+0x14a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_NAK received\n"));
    dhcp_handle_nak(netif);
 8010bfa:	6a38      	ldr	r0, [r7, #32]
 8010bfc:	f7fe fb2c 	bl	800f258 <dhcp_handle_nak>
 8010c00:	e018      	b.n	8010c34 <dhcp_recv+0x17c>
  }
  /* received a DHCP_OFFER in DHCP_STATE_SELECTING state? */
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
 8010c02:	7cfb      	ldrb	r3, [r7, #19]
 8010c04:	2b02      	cmp	r3, #2
 8010c06:	d108      	bne.n	8010c1a <dhcp_recv+0x162>
 8010c08:	69fb      	ldr	r3, [r7, #28]
 8010c0a:	795b      	ldrb	r3, [r3, #5]
 8010c0c:	2b06      	cmp	r3, #6
 8010c0e:	d104      	bne.n	8010c1a <dhcp_recv+0x162>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_OFFER received in DHCP_STATE_SELECTING state\n"));
    /* remember offered lease */
    dhcp_handle_offer(netif, msg_in);
 8010c10:	6979      	ldr	r1, [r7, #20]
 8010c12:	6a38      	ldr	r0, [r7, #32]
 8010c14:	f7fe fb6e 	bl	800f2f4 <dhcp_handle_offer>
 8010c18:	e00c      	b.n	8010c34 <dhcp_recv+0x17c>
  }

free_pbuf_and_return:
 8010c1a:	bf00      	nop
 8010c1c:	e00a      	b.n	8010c34 <dhcp_recv+0x17c>
    goto free_pbuf_and_return;
 8010c1e:	bf00      	nop
 8010c20:	e008      	b.n	8010c34 <dhcp_recv+0x17c>
    goto free_pbuf_and_return;
 8010c22:	bf00      	nop
 8010c24:	e006      	b.n	8010c34 <dhcp_recv+0x17c>
      goto free_pbuf_and_return;
 8010c26:	bf00      	nop
 8010c28:	e004      	b.n	8010c34 <dhcp_recv+0x17c>
    goto free_pbuf_and_return;
 8010c2a:	bf00      	nop
 8010c2c:	e002      	b.n	8010c34 <dhcp_recv+0x17c>
    goto free_pbuf_and_return;
 8010c2e:	bf00      	nop
 8010c30:	e000      	b.n	8010c34 <dhcp_recv+0x17c>
    goto free_pbuf_and_return;
 8010c32:	bf00      	nop
  pbuf_free(p);
 8010c34:	6878      	ldr	r0, [r7, #4]
 8010c36:	f7f8 f85b 	bl	8008cf0 <pbuf_free>
}
 8010c3a:	bf00      	nop
 8010c3c:	3728      	adds	r7, #40	; 0x28
 8010c3e:	46bd      	mov	sp, r7
 8010c40:	bd80      	pop	{r7, pc}
 8010c42:	bf00      	nop
 8010c44:	2000b7b0 	.word	0x2000b7b0
 8010c48:	2000ef00 	.word	0x2000ef00
 8010c4c:	2000ef08 	.word	0x2000ef08

08010c50 <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static struct pbuf *
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type, u16_t *options_out_len)
{
 8010c50:	b580      	push	{r7, lr}
 8010c52:	b088      	sub	sp, #32
 8010c54:	af00      	add	r7, sp, #0
 8010c56:	60f8      	str	r0, [r7, #12]
 8010c58:	60b9      	str	r1, [r7, #8]
 8010c5a:	603b      	str	r3, [r7, #0]
 8010c5c:	4613      	mov	r3, r2
 8010c5e:	71fb      	strb	r3, [r7, #7]
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return NULL;);
 8010c60:	68fb      	ldr	r3, [r7, #12]
 8010c62:	2b00      	cmp	r3, #0
 8010c64:	d108      	bne.n	8010c78 <dhcp_create_msg+0x28>
 8010c66:	4b5f      	ldr	r3, [pc, #380]	; (8010de4 <dhcp_create_msg+0x194>)
 8010c68:	f240 7269 	movw	r2, #1897	; 0x769
 8010c6c:	495e      	ldr	r1, [pc, #376]	; (8010de8 <dhcp_create_msg+0x198>)
 8010c6e:	485f      	ldr	r0, [pc, #380]	; (8010dec <dhcp_create_msg+0x19c>)
 8010c70:	f002 fd50 	bl	8013714 <iprintf>
 8010c74:	2300      	movs	r3, #0
 8010c76:	e0b1      	b.n	8010ddc <dhcp_create_msg+0x18c>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return NULL;);
 8010c78:	68bb      	ldr	r3, [r7, #8]
 8010c7a:	2b00      	cmp	r3, #0
 8010c7c:	d108      	bne.n	8010c90 <dhcp_create_msg+0x40>
 8010c7e:	4b59      	ldr	r3, [pc, #356]	; (8010de4 <dhcp_create_msg+0x194>)
 8010c80:	f240 726a 	movw	r2, #1898	; 0x76a
 8010c84:	495a      	ldr	r1, [pc, #360]	; (8010df0 <dhcp_create_msg+0x1a0>)
 8010c86:	4859      	ldr	r0, [pc, #356]	; (8010dec <dhcp_create_msg+0x19c>)
 8010c88:	f002 fd44 	bl	8013714 <iprintf>
 8010c8c:	2300      	movs	r3, #0
 8010c8e:	e0a5      	b.n	8010ddc <dhcp_create_msg+0x18c>
  p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
 8010c90:	f44f 7220 	mov.w	r2, #640	; 0x280
 8010c94:	f44f 719a 	mov.w	r1, #308	; 0x134
 8010c98:	2036      	movs	r0, #54	; 0x36
 8010c9a:	f7f7 fd49 	bl	8008730 <pbuf_alloc>
 8010c9e:	61b8      	str	r0, [r7, #24]
  if (p_out == NULL) {
 8010ca0:	69bb      	ldr	r3, [r7, #24]
 8010ca2:	2b00      	cmp	r3, #0
 8010ca4:	d101      	bne.n	8010caa <dhcp_create_msg+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_create_msg(): could not allocate pbuf\n"));
    return NULL;
 8010ca6:	2300      	movs	r3, #0
 8010ca8:	e098      	b.n	8010ddc <dhcp_create_msg+0x18c>
  }
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 8010caa:	69bb      	ldr	r3, [r7, #24]
 8010cac:	895b      	ldrh	r3, [r3, #10]
 8010cae:	f5b3 7f9a 	cmp.w	r3, #308	; 0x134
 8010cb2:	d206      	bcs.n	8010cc2 <dhcp_create_msg+0x72>
 8010cb4:	4b4b      	ldr	r3, [pc, #300]	; (8010de4 <dhcp_create_msg+0x194>)
 8010cb6:	f240 7272 	movw	r2, #1906	; 0x772
 8010cba:	494e      	ldr	r1, [pc, #312]	; (8010df4 <dhcp_create_msg+0x1a4>)
 8010cbc:	484b      	ldr	r0, [pc, #300]	; (8010dec <dhcp_create_msg+0x19c>)
 8010cbe:	f002 fd29 	bl	8013714 <iprintf>
              (p_out->len >= sizeof(struct dhcp_msg)));

  /* DHCP_REQUEST should reuse 'xid' from DHCPOFFER */
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 8010cc2:	79fb      	ldrb	r3, [r7, #7]
 8010cc4:	2b03      	cmp	r3, #3
 8010cc6:	d103      	bne.n	8010cd0 <dhcp_create_msg+0x80>
 8010cc8:	68bb      	ldr	r3, [r7, #8]
 8010cca:	795b      	ldrb	r3, [r3, #5]
 8010ccc:	2b03      	cmp	r3, #3
 8010cce:	d10d      	bne.n	8010cec <dhcp_create_msg+0x9c>
    /* reuse transaction identifier in retransmissions */
    if (dhcp->tries == 0) {
 8010cd0:	68bb      	ldr	r3, [r7, #8]
 8010cd2:	799b      	ldrb	r3, [r3, #6]
 8010cd4:	2b00      	cmp	r3, #0
 8010cd6:	d105      	bne.n	8010ce4 <dhcp_create_msg+0x94>
#if DHCP_CREATE_RAND_XID && defined(LWIP_RAND)
      xid = LWIP_RAND();
 8010cd8:	f002 fd34 	bl	8013744 <rand>
 8010cdc:	4603      	mov	r3, r0
 8010cde:	461a      	mov	r2, r3
 8010ce0:	4b45      	ldr	r3, [pc, #276]	; (8010df8 <dhcp_create_msg+0x1a8>)
 8010ce2:	601a      	str	r2, [r3, #0]
#else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
      xid++;
#endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
    }
    dhcp->xid = xid;
 8010ce4:	4b44      	ldr	r3, [pc, #272]	; (8010df8 <dhcp_create_msg+0x1a8>)
 8010ce6:	681a      	ldr	r2, [r3, #0]
 8010ce8:	68bb      	ldr	r3, [r7, #8]
 8010cea:	601a      	str	r2, [r3, #0]
  }
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
              ("transaction id xid(%"X32_F")\n", xid));

  msg_out = (struct dhcp_msg *)p_out->payload;
 8010cec:	69bb      	ldr	r3, [r7, #24]
 8010cee:	685b      	ldr	r3, [r3, #4]
 8010cf0:	617b      	str	r3, [r7, #20]
  memset(msg_out, 0, sizeof(struct dhcp_msg));
 8010cf2:	f44f 729a 	mov.w	r2, #308	; 0x134
 8010cf6:	2100      	movs	r1, #0
 8010cf8:	6978      	ldr	r0, [r7, #20]
 8010cfa:	f002 fd03 	bl	8013704 <memset>

  msg_out->op = DHCP_BOOTREQUEST;
 8010cfe:	697b      	ldr	r3, [r7, #20]
 8010d00:	2201      	movs	r2, #1
 8010d02:	701a      	strb	r2, [r3, #0]
  /* @todo: make link layer independent */
  msg_out->htype = LWIP_IANA_HWTYPE_ETHERNET;
 8010d04:	697b      	ldr	r3, [r7, #20]
 8010d06:	2201      	movs	r2, #1
 8010d08:	705a      	strb	r2, [r3, #1]
  msg_out->hlen = netif->hwaddr_len;
 8010d0a:	68fb      	ldr	r3, [r7, #12]
 8010d0c:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8010d10:	697b      	ldr	r3, [r7, #20]
 8010d12:	709a      	strb	r2, [r3, #2]
  msg_out->xid = lwip_htonl(dhcp->xid);
 8010d14:	68bb      	ldr	r3, [r7, #8]
 8010d16:	681b      	ldr	r3, [r3, #0]
 8010d18:	4618      	mov	r0, r3
 8010d1a:	f7f6 fc4a 	bl	80075b2 <lwip_htonl>
 8010d1e:	4602      	mov	r2, r0
 8010d20:	697b      	ldr	r3, [r7, #20]
 8010d22:	605a      	str	r2, [r3, #4]
  /* we don't need the broadcast flag since we can receive unicast traffic
     before being fully configured! */
  /* set ciaddr to netif->ip_addr based on message_type and state */
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 8010d24:	79fb      	ldrb	r3, [r7, #7]
 8010d26:	2b08      	cmp	r3, #8
 8010d28:	d010      	beq.n	8010d4c <dhcp_create_msg+0xfc>
 8010d2a:	79fb      	ldrb	r3, [r7, #7]
 8010d2c:	2b04      	cmp	r3, #4
 8010d2e:	d00d      	beq.n	8010d4c <dhcp_create_msg+0xfc>
 8010d30:	79fb      	ldrb	r3, [r7, #7]
 8010d32:	2b07      	cmp	r3, #7
 8010d34:	d00a      	beq.n	8010d4c <dhcp_create_msg+0xfc>
 8010d36:	79fb      	ldrb	r3, [r7, #7]
 8010d38:	2b03      	cmp	r3, #3
 8010d3a:	d10c      	bne.n	8010d56 <dhcp_create_msg+0x106>
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 8010d3c:	68bb      	ldr	r3, [r7, #8]
 8010d3e:	795b      	ldrb	r3, [r3, #5]
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
 8010d40:	2b05      	cmp	r3, #5
 8010d42:	d003      	beq.n	8010d4c <dhcp_create_msg+0xfc>
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 8010d44:	68bb      	ldr	r3, [r7, #8]
 8010d46:	795b      	ldrb	r3, [r3, #5]
 8010d48:	2b04      	cmp	r3, #4
 8010d4a:	d104      	bne.n	8010d56 <dhcp_create_msg+0x106>
    ip4_addr_copy(msg_out->ciaddr, *netif_ip4_addr(netif));
 8010d4c:	68fb      	ldr	r3, [r7, #12]
 8010d4e:	3304      	adds	r3, #4
 8010d50:	681a      	ldr	r2, [r3, #0]
 8010d52:	697b      	ldr	r3, [r7, #20]
 8010d54:	60da      	str	r2, [r3, #12]
  }
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8010d56:	2300      	movs	r3, #0
 8010d58:	83fb      	strh	r3, [r7, #30]
 8010d5a:	e00c      	b.n	8010d76 <dhcp_create_msg+0x126>
    /* copy netif hardware address (padded with zeroes through memset already) */
    msg_out->chaddr[i] = netif->hwaddr[i];
 8010d5c:	8bfa      	ldrh	r2, [r7, #30]
 8010d5e:	8bfb      	ldrh	r3, [r7, #30]
 8010d60:	68f9      	ldr	r1, [r7, #12]
 8010d62:	440a      	add	r2, r1
 8010d64:	f892 102a 	ldrb.w	r1, [r2, #42]	; 0x2a
 8010d68:	697a      	ldr	r2, [r7, #20]
 8010d6a:	4413      	add	r3, r2
 8010d6c:	460a      	mov	r2, r1
 8010d6e:	771a      	strb	r2, [r3, #28]
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8010d70:	8bfb      	ldrh	r3, [r7, #30]
 8010d72:	3301      	adds	r3, #1
 8010d74:	83fb      	strh	r3, [r7, #30]
 8010d76:	8bfb      	ldrh	r3, [r7, #30]
 8010d78:	2b05      	cmp	r3, #5
 8010d7a:	d9ef      	bls.n	8010d5c <dhcp_create_msg+0x10c>
  }
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 8010d7c:	697b      	ldr	r3, [r7, #20]
 8010d7e:	2200      	movs	r2, #0
 8010d80:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 8010d84:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
 8010d88:	2200      	movs	r2, #0
 8010d8a:	f062 027d 	orn	r2, r2, #125	; 0x7d
 8010d8e:	f883 20ed 	strb.w	r2, [r3, #237]	; 0xed
 8010d92:	2200      	movs	r2, #0
 8010d94:	f042 0253 	orr.w	r2, r2, #83	; 0x53
 8010d98:	f883 20ee 	strb.w	r2, [r3, #238]	; 0xee
 8010d9c:	2200      	movs	r2, #0
 8010d9e:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 8010da2:	f883 20ef 	strb.w	r2, [r3, #239]	; 0xef
  /* Add option MESSAGE_TYPE */
  options_out_len_loc = dhcp_option(0, msg_out->options, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 8010da6:	697b      	ldr	r3, [r7, #20]
 8010da8:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8010dac:	2301      	movs	r3, #1
 8010dae:	2235      	movs	r2, #53	; 0x35
 8010db0:	2000      	movs	r0, #0
 8010db2:	f7ff fadd 	bl	8010370 <dhcp_option>
 8010db6:	4603      	mov	r3, r0
 8010db8:	827b      	strh	r3, [r7, #18]
  options_out_len_loc = dhcp_option_byte(options_out_len_loc, msg_out->options, message_type);
 8010dba:	697b      	ldr	r3, [r7, #20]
 8010dbc:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8010dc0:	79fa      	ldrb	r2, [r7, #7]
 8010dc2:	8a7b      	ldrh	r3, [r7, #18]
 8010dc4:	4618      	mov	r0, r3
 8010dc6:	f7ff fb07 	bl	80103d8 <dhcp_option_byte>
 8010dca:	4603      	mov	r3, r0
 8010dcc:	827b      	strh	r3, [r7, #18]
  if (options_out_len) {
 8010dce:	683b      	ldr	r3, [r7, #0]
 8010dd0:	2b00      	cmp	r3, #0
 8010dd2:	d002      	beq.n	8010dda <dhcp_create_msg+0x18a>
    *options_out_len = options_out_len_loc;
 8010dd4:	683b      	ldr	r3, [r7, #0]
 8010dd6:	8a7a      	ldrh	r2, [r7, #18]
 8010dd8:	801a      	strh	r2, [r3, #0]
  }
  return p_out;
 8010dda:	69bb      	ldr	r3, [r7, #24]
}
 8010ddc:	4618      	mov	r0, r3
 8010dde:	3720      	adds	r7, #32
 8010de0:	46bd      	mov	sp, r7
 8010de2:	bd80      	pop	{r7, pc}
 8010de4:	080169fc 	.word	0x080169fc
 8010de8:	08016d1c 	.word	0x08016d1c
 8010dec:	08016a5c 	.word	0x08016a5c
 8010df0:	08016d3c 	.word	0x08016d3c
 8010df4:	08016d5c 	.word	0x08016d5c
 8010df8:	200084e8 	.word	0x200084e8

08010dfc <dhcp_option_trailer>:
 * Adds the END option to the DHCP message, and if
 * necessary, up to three padding bytes.
 */
static void
dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out)
{
 8010dfc:	b580      	push	{r7, lr}
 8010dfe:	b084      	sub	sp, #16
 8010e00:	af00      	add	r7, sp, #0
 8010e02:	4603      	mov	r3, r0
 8010e04:	60b9      	str	r1, [r7, #8]
 8010e06:	607a      	str	r2, [r7, #4]
 8010e08:	81fb      	strh	r3, [r7, #14]
  options[options_out_len++] = DHCP_OPTION_END;
 8010e0a:	89fb      	ldrh	r3, [r7, #14]
 8010e0c:	1c5a      	adds	r2, r3, #1
 8010e0e:	81fa      	strh	r2, [r7, #14]
 8010e10:	461a      	mov	r2, r3
 8010e12:	68bb      	ldr	r3, [r7, #8]
 8010e14:	4413      	add	r3, r2
 8010e16:	22ff      	movs	r2, #255	; 0xff
 8010e18:	701a      	strb	r2, [r3, #0]
  /* packet is too small, or not 4 byte aligned? */
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 8010e1a:	e007      	b.n	8010e2c <dhcp_option_trailer+0x30>
         (options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    options[options_out_len++] = 0;
 8010e1c:	89fb      	ldrh	r3, [r7, #14]
 8010e1e:	1c5a      	adds	r2, r3, #1
 8010e20:	81fa      	strh	r2, [r7, #14]
 8010e22:	461a      	mov	r2, r3
 8010e24:	68bb      	ldr	r3, [r7, #8]
 8010e26:	4413      	add	r3, r2
 8010e28:	2200      	movs	r2, #0
 8010e2a:	701a      	strb	r2, [r3, #0]
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 8010e2c:	89fb      	ldrh	r3, [r7, #14]
 8010e2e:	2b43      	cmp	r3, #67	; 0x43
 8010e30:	d904      	bls.n	8010e3c <dhcp_option_trailer+0x40>
 8010e32:	89fb      	ldrh	r3, [r7, #14]
 8010e34:	f003 0303 	and.w	r3, r3, #3
 8010e38:	2b00      	cmp	r3, #0
 8010e3a:	d002      	beq.n	8010e42 <dhcp_option_trailer+0x46>
 8010e3c:	89fb      	ldrh	r3, [r7, #14]
 8010e3e:	2b43      	cmp	r3, #67	; 0x43
 8010e40:	d9ec      	bls.n	8010e1c <dhcp_option_trailer+0x20>
  }
  /* shrink the pbuf to the actual content length */
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 8010e42:	89fb      	ldrh	r3, [r7, #14]
 8010e44:	33f0      	adds	r3, #240	; 0xf0
 8010e46:	b29b      	uxth	r3, r3
 8010e48:	4619      	mov	r1, r3
 8010e4a:	6878      	ldr	r0, [r7, #4]
 8010e4c:	f7f7 fdca 	bl	80089e4 <pbuf_realloc>
}
 8010e50:	bf00      	nop
 8010e52:	3710      	adds	r7, #16
 8010e54:	46bd      	mov	sp, r7
 8010e56:	bd80      	pop	{r7, pc}

08010e58 <dhcp_supplied_address>:
 * @return 1 if DHCP supplied netif->ip_addr (states BOUND or RENEWING),
 *         0 otherwise
 */
u8_t
dhcp_supplied_address(const struct netif *netif)
{
 8010e58:	b480      	push	{r7}
 8010e5a:	b085      	sub	sp, #20
 8010e5c:	af00      	add	r7, sp, #0
 8010e5e:	6078      	str	r0, [r7, #4]
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
 8010e60:	687b      	ldr	r3, [r7, #4]
 8010e62:	2b00      	cmp	r3, #0
 8010e64:	d017      	beq.n	8010e96 <dhcp_supplied_address+0x3e>
 8010e66:	687b      	ldr	r3, [r7, #4]
 8010e68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010e6a:	2b00      	cmp	r3, #0
 8010e6c:	d013      	beq.n	8010e96 <dhcp_supplied_address+0x3e>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8010e6e:	687b      	ldr	r3, [r7, #4]
 8010e70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010e72:	60fb      	str	r3, [r7, #12]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 8010e74:	68fb      	ldr	r3, [r7, #12]
 8010e76:	795b      	ldrb	r3, [r3, #5]
 8010e78:	2b0a      	cmp	r3, #10
 8010e7a:	d007      	beq.n	8010e8c <dhcp_supplied_address+0x34>
 8010e7c:	68fb      	ldr	r3, [r7, #12]
 8010e7e:	795b      	ldrb	r3, [r3, #5]
 8010e80:	2b05      	cmp	r3, #5
 8010e82:	d003      	beq.n	8010e8c <dhcp_supplied_address+0x34>
           (dhcp->state == DHCP_STATE_REBINDING);
 8010e84:	68fb      	ldr	r3, [r7, #12]
 8010e86:	795b      	ldrb	r3, [r3, #5]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 8010e88:	2b04      	cmp	r3, #4
 8010e8a:	d101      	bne.n	8010e90 <dhcp_supplied_address+0x38>
 8010e8c:	2301      	movs	r3, #1
 8010e8e:	e000      	b.n	8010e92 <dhcp_supplied_address+0x3a>
 8010e90:	2300      	movs	r3, #0
 8010e92:	b2db      	uxtb	r3, r3
 8010e94:	e000      	b.n	8010e98 <dhcp_supplied_address+0x40>
  }
  return 0;
 8010e96:	2300      	movs	r3, #0
}
 8010e98:	4618      	mov	r0, r3
 8010e9a:	3714      	adds	r7, #20
 8010e9c:	46bd      	mov	sp, r7
 8010e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ea2:	4770      	bx	lr

08010ea4 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8010ea4:	b580      	push	{r7, lr}
 8010ea6:	b082      	sub	sp, #8
 8010ea8:	af00      	add	r7, sp, #0
 8010eaa:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8010eac:	4915      	ldr	r1, [pc, #84]	; (8010f04 <etharp_free_entry+0x60>)
 8010eae:	687a      	ldr	r2, [r7, #4]
 8010eb0:	4613      	mov	r3, r2
 8010eb2:	005b      	lsls	r3, r3, #1
 8010eb4:	4413      	add	r3, r2
 8010eb6:	00db      	lsls	r3, r3, #3
 8010eb8:	440b      	add	r3, r1
 8010eba:	681b      	ldr	r3, [r3, #0]
 8010ebc:	2b00      	cmp	r3, #0
 8010ebe:	d013      	beq.n	8010ee8 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8010ec0:	4910      	ldr	r1, [pc, #64]	; (8010f04 <etharp_free_entry+0x60>)
 8010ec2:	687a      	ldr	r2, [r7, #4]
 8010ec4:	4613      	mov	r3, r2
 8010ec6:	005b      	lsls	r3, r3, #1
 8010ec8:	4413      	add	r3, r2
 8010eca:	00db      	lsls	r3, r3, #3
 8010ecc:	440b      	add	r3, r1
 8010ece:	681b      	ldr	r3, [r3, #0]
 8010ed0:	4618      	mov	r0, r3
 8010ed2:	f7f7 ff0d 	bl	8008cf0 <pbuf_free>
    arp_table[i].q = NULL;
 8010ed6:	490b      	ldr	r1, [pc, #44]	; (8010f04 <etharp_free_entry+0x60>)
 8010ed8:	687a      	ldr	r2, [r7, #4]
 8010eda:	4613      	mov	r3, r2
 8010edc:	005b      	lsls	r3, r3, #1
 8010ede:	4413      	add	r3, r2
 8010ee0:	00db      	lsls	r3, r3, #3
 8010ee2:	440b      	add	r3, r1
 8010ee4:	2200      	movs	r2, #0
 8010ee6:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8010ee8:	4906      	ldr	r1, [pc, #24]	; (8010f04 <etharp_free_entry+0x60>)
 8010eea:	687a      	ldr	r2, [r7, #4]
 8010eec:	4613      	mov	r3, r2
 8010eee:	005b      	lsls	r3, r3, #1
 8010ef0:	4413      	add	r3, r2
 8010ef2:	00db      	lsls	r3, r3, #3
 8010ef4:	440b      	add	r3, r1
 8010ef6:	3314      	adds	r3, #20
 8010ef8:	2200      	movs	r2, #0
 8010efa:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8010efc:	bf00      	nop
 8010efe:	3708      	adds	r7, #8
 8010f00:	46bd      	mov	sp, r7
 8010f02:	bd80      	pop	{r7, pc}
 8010f04:	200084ec 	.word	0x200084ec

08010f08 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8010f08:	b580      	push	{r7, lr}
 8010f0a:	b082      	sub	sp, #8
 8010f0c:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8010f0e:	2300      	movs	r3, #0
 8010f10:	607b      	str	r3, [r7, #4]
 8010f12:	e096      	b.n	8011042 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8010f14:	494f      	ldr	r1, [pc, #316]	; (8011054 <etharp_tmr+0x14c>)
 8010f16:	687a      	ldr	r2, [r7, #4]
 8010f18:	4613      	mov	r3, r2
 8010f1a:	005b      	lsls	r3, r3, #1
 8010f1c:	4413      	add	r3, r2
 8010f1e:	00db      	lsls	r3, r3, #3
 8010f20:	440b      	add	r3, r1
 8010f22:	3314      	adds	r3, #20
 8010f24:	781b      	ldrb	r3, [r3, #0]
 8010f26:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8010f28:	78fb      	ldrb	r3, [r7, #3]
 8010f2a:	2b00      	cmp	r3, #0
 8010f2c:	f000 8086 	beq.w	801103c <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8010f30:	4948      	ldr	r1, [pc, #288]	; (8011054 <etharp_tmr+0x14c>)
 8010f32:	687a      	ldr	r2, [r7, #4]
 8010f34:	4613      	mov	r3, r2
 8010f36:	005b      	lsls	r3, r3, #1
 8010f38:	4413      	add	r3, r2
 8010f3a:	00db      	lsls	r3, r3, #3
 8010f3c:	440b      	add	r3, r1
 8010f3e:	3312      	adds	r3, #18
 8010f40:	881b      	ldrh	r3, [r3, #0]
 8010f42:	3301      	adds	r3, #1
 8010f44:	b298      	uxth	r0, r3
 8010f46:	4943      	ldr	r1, [pc, #268]	; (8011054 <etharp_tmr+0x14c>)
 8010f48:	687a      	ldr	r2, [r7, #4]
 8010f4a:	4613      	mov	r3, r2
 8010f4c:	005b      	lsls	r3, r3, #1
 8010f4e:	4413      	add	r3, r2
 8010f50:	00db      	lsls	r3, r3, #3
 8010f52:	440b      	add	r3, r1
 8010f54:	3312      	adds	r3, #18
 8010f56:	4602      	mov	r2, r0
 8010f58:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8010f5a:	493e      	ldr	r1, [pc, #248]	; (8011054 <etharp_tmr+0x14c>)
 8010f5c:	687a      	ldr	r2, [r7, #4]
 8010f5e:	4613      	mov	r3, r2
 8010f60:	005b      	lsls	r3, r3, #1
 8010f62:	4413      	add	r3, r2
 8010f64:	00db      	lsls	r3, r3, #3
 8010f66:	440b      	add	r3, r1
 8010f68:	3312      	adds	r3, #18
 8010f6a:	881b      	ldrh	r3, [r3, #0]
 8010f6c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8010f70:	d215      	bcs.n	8010f9e <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8010f72:	4938      	ldr	r1, [pc, #224]	; (8011054 <etharp_tmr+0x14c>)
 8010f74:	687a      	ldr	r2, [r7, #4]
 8010f76:	4613      	mov	r3, r2
 8010f78:	005b      	lsls	r3, r3, #1
 8010f7a:	4413      	add	r3, r2
 8010f7c:	00db      	lsls	r3, r3, #3
 8010f7e:	440b      	add	r3, r1
 8010f80:	3314      	adds	r3, #20
 8010f82:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8010f84:	2b01      	cmp	r3, #1
 8010f86:	d10e      	bne.n	8010fa6 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8010f88:	4932      	ldr	r1, [pc, #200]	; (8011054 <etharp_tmr+0x14c>)
 8010f8a:	687a      	ldr	r2, [r7, #4]
 8010f8c:	4613      	mov	r3, r2
 8010f8e:	005b      	lsls	r3, r3, #1
 8010f90:	4413      	add	r3, r2
 8010f92:	00db      	lsls	r3, r3, #3
 8010f94:	440b      	add	r3, r1
 8010f96:	3312      	adds	r3, #18
 8010f98:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8010f9a:	2b04      	cmp	r3, #4
 8010f9c:	d903      	bls.n	8010fa6 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8010f9e:	6878      	ldr	r0, [r7, #4]
 8010fa0:	f7ff ff80 	bl	8010ea4 <etharp_free_entry>
 8010fa4:	e04a      	b.n	801103c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8010fa6:	492b      	ldr	r1, [pc, #172]	; (8011054 <etharp_tmr+0x14c>)
 8010fa8:	687a      	ldr	r2, [r7, #4]
 8010faa:	4613      	mov	r3, r2
 8010fac:	005b      	lsls	r3, r3, #1
 8010fae:	4413      	add	r3, r2
 8010fb0:	00db      	lsls	r3, r3, #3
 8010fb2:	440b      	add	r3, r1
 8010fb4:	3314      	adds	r3, #20
 8010fb6:	781b      	ldrb	r3, [r3, #0]
 8010fb8:	2b03      	cmp	r3, #3
 8010fba:	d10a      	bne.n	8010fd2 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8010fbc:	4925      	ldr	r1, [pc, #148]	; (8011054 <etharp_tmr+0x14c>)
 8010fbe:	687a      	ldr	r2, [r7, #4]
 8010fc0:	4613      	mov	r3, r2
 8010fc2:	005b      	lsls	r3, r3, #1
 8010fc4:	4413      	add	r3, r2
 8010fc6:	00db      	lsls	r3, r3, #3
 8010fc8:	440b      	add	r3, r1
 8010fca:	3314      	adds	r3, #20
 8010fcc:	2204      	movs	r2, #4
 8010fce:	701a      	strb	r2, [r3, #0]
 8010fd0:	e034      	b.n	801103c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8010fd2:	4920      	ldr	r1, [pc, #128]	; (8011054 <etharp_tmr+0x14c>)
 8010fd4:	687a      	ldr	r2, [r7, #4]
 8010fd6:	4613      	mov	r3, r2
 8010fd8:	005b      	lsls	r3, r3, #1
 8010fda:	4413      	add	r3, r2
 8010fdc:	00db      	lsls	r3, r3, #3
 8010fde:	440b      	add	r3, r1
 8010fe0:	3314      	adds	r3, #20
 8010fe2:	781b      	ldrb	r3, [r3, #0]
 8010fe4:	2b04      	cmp	r3, #4
 8010fe6:	d10a      	bne.n	8010ffe <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8010fe8:	491a      	ldr	r1, [pc, #104]	; (8011054 <etharp_tmr+0x14c>)
 8010fea:	687a      	ldr	r2, [r7, #4]
 8010fec:	4613      	mov	r3, r2
 8010fee:	005b      	lsls	r3, r3, #1
 8010ff0:	4413      	add	r3, r2
 8010ff2:	00db      	lsls	r3, r3, #3
 8010ff4:	440b      	add	r3, r1
 8010ff6:	3314      	adds	r3, #20
 8010ff8:	2202      	movs	r2, #2
 8010ffa:	701a      	strb	r2, [r3, #0]
 8010ffc:	e01e      	b.n	801103c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8010ffe:	4915      	ldr	r1, [pc, #84]	; (8011054 <etharp_tmr+0x14c>)
 8011000:	687a      	ldr	r2, [r7, #4]
 8011002:	4613      	mov	r3, r2
 8011004:	005b      	lsls	r3, r3, #1
 8011006:	4413      	add	r3, r2
 8011008:	00db      	lsls	r3, r3, #3
 801100a:	440b      	add	r3, r1
 801100c:	3314      	adds	r3, #20
 801100e:	781b      	ldrb	r3, [r3, #0]
 8011010:	2b01      	cmp	r3, #1
 8011012:	d113      	bne.n	801103c <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8011014:	490f      	ldr	r1, [pc, #60]	; (8011054 <etharp_tmr+0x14c>)
 8011016:	687a      	ldr	r2, [r7, #4]
 8011018:	4613      	mov	r3, r2
 801101a:	005b      	lsls	r3, r3, #1
 801101c:	4413      	add	r3, r2
 801101e:	00db      	lsls	r3, r3, #3
 8011020:	440b      	add	r3, r1
 8011022:	3308      	adds	r3, #8
 8011024:	6818      	ldr	r0, [r3, #0]
 8011026:	687a      	ldr	r2, [r7, #4]
 8011028:	4613      	mov	r3, r2
 801102a:	005b      	lsls	r3, r3, #1
 801102c:	4413      	add	r3, r2
 801102e:	00db      	lsls	r3, r3, #3
 8011030:	4a08      	ldr	r2, [pc, #32]	; (8011054 <etharp_tmr+0x14c>)
 8011032:	4413      	add	r3, r2
 8011034:	3304      	adds	r3, #4
 8011036:	4619      	mov	r1, r3
 8011038:	f000 fe72 	bl	8011d20 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801103c:	687b      	ldr	r3, [r7, #4]
 801103e:	3301      	adds	r3, #1
 8011040:	607b      	str	r3, [r7, #4]
 8011042:	687b      	ldr	r3, [r7, #4]
 8011044:	2b09      	cmp	r3, #9
 8011046:	f77f af65 	ble.w	8010f14 <etharp_tmr+0xc>
      }
    }
  }
}
 801104a:	bf00      	nop
 801104c:	3708      	adds	r7, #8
 801104e:	46bd      	mov	sp, r7
 8011050:	bd80      	pop	{r7, pc}
 8011052:	bf00      	nop
 8011054:	200084ec 	.word	0x200084ec

08011058 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8011058:	b580      	push	{r7, lr}
 801105a:	b08a      	sub	sp, #40	; 0x28
 801105c:	af00      	add	r7, sp, #0
 801105e:	60f8      	str	r0, [r7, #12]
 8011060:	460b      	mov	r3, r1
 8011062:	607a      	str	r2, [r7, #4]
 8011064:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8011066:	230a      	movs	r3, #10
 8011068:	84fb      	strh	r3, [r7, #38]	; 0x26
 801106a:	230a      	movs	r3, #10
 801106c:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 801106e:	230a      	movs	r3, #10
 8011070:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 8011072:	2300      	movs	r3, #0
 8011074:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8011076:	230a      	movs	r3, #10
 8011078:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 801107a:	2300      	movs	r3, #0
 801107c:	83bb      	strh	r3, [r7, #28]
 801107e:	2300      	movs	r3, #0
 8011080:	837b      	strh	r3, [r7, #26]
 8011082:	2300      	movs	r3, #0
 8011084:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8011086:	2300      	movs	r3, #0
 8011088:	843b      	strh	r3, [r7, #32]
 801108a:	e0ae      	b.n	80111ea <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 801108c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011090:	49a6      	ldr	r1, [pc, #664]	; (801132c <etharp_find_entry+0x2d4>)
 8011092:	4613      	mov	r3, r2
 8011094:	005b      	lsls	r3, r3, #1
 8011096:	4413      	add	r3, r2
 8011098:	00db      	lsls	r3, r3, #3
 801109a:	440b      	add	r3, r1
 801109c:	3314      	adds	r3, #20
 801109e:	781b      	ldrb	r3, [r3, #0]
 80110a0:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 80110a2:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80110a6:	2b0a      	cmp	r3, #10
 80110a8:	d105      	bne.n	80110b6 <etharp_find_entry+0x5e>
 80110aa:	7dfb      	ldrb	r3, [r7, #23]
 80110ac:	2b00      	cmp	r3, #0
 80110ae:	d102      	bne.n	80110b6 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 80110b0:	8c3b      	ldrh	r3, [r7, #32]
 80110b2:	847b      	strh	r3, [r7, #34]	; 0x22
 80110b4:	e095      	b.n	80111e2 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 80110b6:	7dfb      	ldrb	r3, [r7, #23]
 80110b8:	2b00      	cmp	r3, #0
 80110ba:	f000 8092 	beq.w	80111e2 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 80110be:	7dfb      	ldrb	r3, [r7, #23]
 80110c0:	2b01      	cmp	r3, #1
 80110c2:	d009      	beq.n	80110d8 <etharp_find_entry+0x80>
 80110c4:	7dfb      	ldrb	r3, [r7, #23]
 80110c6:	2b01      	cmp	r3, #1
 80110c8:	d806      	bhi.n	80110d8 <etharp_find_entry+0x80>
 80110ca:	4b99      	ldr	r3, [pc, #612]	; (8011330 <etharp_find_entry+0x2d8>)
 80110cc:	f44f 7292 	mov.w	r2, #292	; 0x124
 80110d0:	4998      	ldr	r1, [pc, #608]	; (8011334 <etharp_find_entry+0x2dc>)
 80110d2:	4899      	ldr	r0, [pc, #612]	; (8011338 <etharp_find_entry+0x2e0>)
 80110d4:	f002 fb1e 	bl	8013714 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 80110d8:	68fb      	ldr	r3, [r7, #12]
 80110da:	2b00      	cmp	r3, #0
 80110dc:	d020      	beq.n	8011120 <etharp_find_entry+0xc8>
 80110de:	68fb      	ldr	r3, [r7, #12]
 80110e0:	6819      	ldr	r1, [r3, #0]
 80110e2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80110e6:	4891      	ldr	r0, [pc, #580]	; (801132c <etharp_find_entry+0x2d4>)
 80110e8:	4613      	mov	r3, r2
 80110ea:	005b      	lsls	r3, r3, #1
 80110ec:	4413      	add	r3, r2
 80110ee:	00db      	lsls	r3, r3, #3
 80110f0:	4403      	add	r3, r0
 80110f2:	3304      	adds	r3, #4
 80110f4:	681b      	ldr	r3, [r3, #0]
 80110f6:	4299      	cmp	r1, r3
 80110f8:	d112      	bne.n	8011120 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 80110fa:	687b      	ldr	r3, [r7, #4]
 80110fc:	2b00      	cmp	r3, #0
 80110fe:	d00c      	beq.n	801111a <etharp_find_entry+0xc2>
 8011100:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011104:	4989      	ldr	r1, [pc, #548]	; (801132c <etharp_find_entry+0x2d4>)
 8011106:	4613      	mov	r3, r2
 8011108:	005b      	lsls	r3, r3, #1
 801110a:	4413      	add	r3, r2
 801110c:	00db      	lsls	r3, r3, #3
 801110e:	440b      	add	r3, r1
 8011110:	3308      	adds	r3, #8
 8011112:	681b      	ldr	r3, [r3, #0]
 8011114:	687a      	ldr	r2, [r7, #4]
 8011116:	429a      	cmp	r2, r3
 8011118:	d102      	bne.n	8011120 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 801111a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801111e:	e100      	b.n	8011322 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8011120:	7dfb      	ldrb	r3, [r7, #23]
 8011122:	2b01      	cmp	r3, #1
 8011124:	d140      	bne.n	80111a8 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8011126:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801112a:	4980      	ldr	r1, [pc, #512]	; (801132c <etharp_find_entry+0x2d4>)
 801112c:	4613      	mov	r3, r2
 801112e:	005b      	lsls	r3, r3, #1
 8011130:	4413      	add	r3, r2
 8011132:	00db      	lsls	r3, r3, #3
 8011134:	440b      	add	r3, r1
 8011136:	681b      	ldr	r3, [r3, #0]
 8011138:	2b00      	cmp	r3, #0
 801113a:	d01a      	beq.n	8011172 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 801113c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011140:	497a      	ldr	r1, [pc, #488]	; (801132c <etharp_find_entry+0x2d4>)
 8011142:	4613      	mov	r3, r2
 8011144:	005b      	lsls	r3, r3, #1
 8011146:	4413      	add	r3, r2
 8011148:	00db      	lsls	r3, r3, #3
 801114a:	440b      	add	r3, r1
 801114c:	3312      	adds	r3, #18
 801114e:	881b      	ldrh	r3, [r3, #0]
 8011150:	8bba      	ldrh	r2, [r7, #28]
 8011152:	429a      	cmp	r2, r3
 8011154:	d845      	bhi.n	80111e2 <etharp_find_entry+0x18a>
            old_queue = i;
 8011156:	8c3b      	ldrh	r3, [r7, #32]
 8011158:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 801115a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801115e:	4973      	ldr	r1, [pc, #460]	; (801132c <etharp_find_entry+0x2d4>)
 8011160:	4613      	mov	r3, r2
 8011162:	005b      	lsls	r3, r3, #1
 8011164:	4413      	add	r3, r2
 8011166:	00db      	lsls	r3, r3, #3
 8011168:	440b      	add	r3, r1
 801116a:	3312      	adds	r3, #18
 801116c:	881b      	ldrh	r3, [r3, #0]
 801116e:	83bb      	strh	r3, [r7, #28]
 8011170:	e037      	b.n	80111e2 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8011172:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011176:	496d      	ldr	r1, [pc, #436]	; (801132c <etharp_find_entry+0x2d4>)
 8011178:	4613      	mov	r3, r2
 801117a:	005b      	lsls	r3, r3, #1
 801117c:	4413      	add	r3, r2
 801117e:	00db      	lsls	r3, r3, #3
 8011180:	440b      	add	r3, r1
 8011182:	3312      	adds	r3, #18
 8011184:	881b      	ldrh	r3, [r3, #0]
 8011186:	8b7a      	ldrh	r2, [r7, #26]
 8011188:	429a      	cmp	r2, r3
 801118a:	d82a      	bhi.n	80111e2 <etharp_find_entry+0x18a>
            old_pending = i;
 801118c:	8c3b      	ldrh	r3, [r7, #32]
 801118e:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 8011190:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011194:	4965      	ldr	r1, [pc, #404]	; (801132c <etharp_find_entry+0x2d4>)
 8011196:	4613      	mov	r3, r2
 8011198:	005b      	lsls	r3, r3, #1
 801119a:	4413      	add	r3, r2
 801119c:	00db      	lsls	r3, r3, #3
 801119e:	440b      	add	r3, r1
 80111a0:	3312      	adds	r3, #18
 80111a2:	881b      	ldrh	r3, [r3, #0]
 80111a4:	837b      	strh	r3, [r7, #26]
 80111a6:	e01c      	b.n	80111e2 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 80111a8:	7dfb      	ldrb	r3, [r7, #23]
 80111aa:	2b01      	cmp	r3, #1
 80111ac:	d919      	bls.n	80111e2 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 80111ae:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80111b2:	495e      	ldr	r1, [pc, #376]	; (801132c <etharp_find_entry+0x2d4>)
 80111b4:	4613      	mov	r3, r2
 80111b6:	005b      	lsls	r3, r3, #1
 80111b8:	4413      	add	r3, r2
 80111ba:	00db      	lsls	r3, r3, #3
 80111bc:	440b      	add	r3, r1
 80111be:	3312      	adds	r3, #18
 80111c0:	881b      	ldrh	r3, [r3, #0]
 80111c2:	8b3a      	ldrh	r2, [r7, #24]
 80111c4:	429a      	cmp	r2, r3
 80111c6:	d80c      	bhi.n	80111e2 <etharp_find_entry+0x18a>
            old_stable = i;
 80111c8:	8c3b      	ldrh	r3, [r7, #32]
 80111ca:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 80111cc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80111d0:	4956      	ldr	r1, [pc, #344]	; (801132c <etharp_find_entry+0x2d4>)
 80111d2:	4613      	mov	r3, r2
 80111d4:	005b      	lsls	r3, r3, #1
 80111d6:	4413      	add	r3, r2
 80111d8:	00db      	lsls	r3, r3, #3
 80111da:	440b      	add	r3, r1
 80111dc:	3312      	adds	r3, #18
 80111de:	881b      	ldrh	r3, [r3, #0]
 80111e0:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80111e2:	8c3b      	ldrh	r3, [r7, #32]
 80111e4:	3301      	adds	r3, #1
 80111e6:	b29b      	uxth	r3, r3
 80111e8:	843b      	strh	r3, [r7, #32]
 80111ea:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80111ee:	2b09      	cmp	r3, #9
 80111f0:	f77f af4c 	ble.w	801108c <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 80111f4:	7afb      	ldrb	r3, [r7, #11]
 80111f6:	f003 0302 	and.w	r3, r3, #2
 80111fa:	2b00      	cmp	r3, #0
 80111fc:	d108      	bne.n	8011210 <etharp_find_entry+0x1b8>
 80111fe:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8011202:	2b0a      	cmp	r3, #10
 8011204:	d107      	bne.n	8011216 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8011206:	7afb      	ldrb	r3, [r7, #11]
 8011208:	f003 0301 	and.w	r3, r3, #1
 801120c:	2b00      	cmp	r3, #0
 801120e:	d102      	bne.n	8011216 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8011210:	f04f 33ff 	mov.w	r3, #4294967295
 8011214:	e085      	b.n	8011322 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8011216:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801121a:	2b09      	cmp	r3, #9
 801121c:	dc02      	bgt.n	8011224 <etharp_find_entry+0x1cc>
    i = empty;
 801121e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011220:	843b      	strh	r3, [r7, #32]
 8011222:	e039      	b.n	8011298 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8011224:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8011228:	2b09      	cmp	r3, #9
 801122a:	dc14      	bgt.n	8011256 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 801122c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801122e:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8011230:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011234:	493d      	ldr	r1, [pc, #244]	; (801132c <etharp_find_entry+0x2d4>)
 8011236:	4613      	mov	r3, r2
 8011238:	005b      	lsls	r3, r3, #1
 801123a:	4413      	add	r3, r2
 801123c:	00db      	lsls	r3, r3, #3
 801123e:	440b      	add	r3, r1
 8011240:	681b      	ldr	r3, [r3, #0]
 8011242:	2b00      	cmp	r3, #0
 8011244:	d018      	beq.n	8011278 <etharp_find_entry+0x220>
 8011246:	4b3a      	ldr	r3, [pc, #232]	; (8011330 <etharp_find_entry+0x2d8>)
 8011248:	f240 126d 	movw	r2, #365	; 0x16d
 801124c:	493b      	ldr	r1, [pc, #236]	; (801133c <etharp_find_entry+0x2e4>)
 801124e:	483a      	ldr	r0, [pc, #232]	; (8011338 <etharp_find_entry+0x2e0>)
 8011250:	f002 fa60 	bl	8013714 <iprintf>
 8011254:	e010      	b.n	8011278 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8011256:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 801125a:	2b09      	cmp	r3, #9
 801125c:	dc02      	bgt.n	8011264 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 801125e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8011260:	843b      	strh	r3, [r7, #32]
 8011262:	e009      	b.n	8011278 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8011264:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8011268:	2b09      	cmp	r3, #9
 801126a:	dc02      	bgt.n	8011272 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 801126c:	8bfb      	ldrh	r3, [r7, #30]
 801126e:	843b      	strh	r3, [r7, #32]
 8011270:	e002      	b.n	8011278 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8011272:	f04f 33ff 	mov.w	r3, #4294967295
 8011276:	e054      	b.n	8011322 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8011278:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801127c:	2b09      	cmp	r3, #9
 801127e:	dd06      	ble.n	801128e <etharp_find_entry+0x236>
 8011280:	4b2b      	ldr	r3, [pc, #172]	; (8011330 <etharp_find_entry+0x2d8>)
 8011282:	f240 127f 	movw	r2, #383	; 0x17f
 8011286:	492e      	ldr	r1, [pc, #184]	; (8011340 <etharp_find_entry+0x2e8>)
 8011288:	482b      	ldr	r0, [pc, #172]	; (8011338 <etharp_find_entry+0x2e0>)
 801128a:	f002 fa43 	bl	8013714 <iprintf>
    etharp_free_entry(i);
 801128e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8011292:	4618      	mov	r0, r3
 8011294:	f7ff fe06 	bl	8010ea4 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8011298:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801129c:	2b09      	cmp	r3, #9
 801129e:	dd06      	ble.n	80112ae <etharp_find_entry+0x256>
 80112a0:	4b23      	ldr	r3, [pc, #140]	; (8011330 <etharp_find_entry+0x2d8>)
 80112a2:	f240 1283 	movw	r2, #387	; 0x183
 80112a6:	4926      	ldr	r1, [pc, #152]	; (8011340 <etharp_find_entry+0x2e8>)
 80112a8:	4823      	ldr	r0, [pc, #140]	; (8011338 <etharp_find_entry+0x2e0>)
 80112aa:	f002 fa33 	bl	8013714 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 80112ae:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80112b2:	491e      	ldr	r1, [pc, #120]	; (801132c <etharp_find_entry+0x2d4>)
 80112b4:	4613      	mov	r3, r2
 80112b6:	005b      	lsls	r3, r3, #1
 80112b8:	4413      	add	r3, r2
 80112ba:	00db      	lsls	r3, r3, #3
 80112bc:	440b      	add	r3, r1
 80112be:	3314      	adds	r3, #20
 80112c0:	781b      	ldrb	r3, [r3, #0]
 80112c2:	2b00      	cmp	r3, #0
 80112c4:	d006      	beq.n	80112d4 <etharp_find_entry+0x27c>
 80112c6:	4b1a      	ldr	r3, [pc, #104]	; (8011330 <etharp_find_entry+0x2d8>)
 80112c8:	f240 1285 	movw	r2, #389	; 0x185
 80112cc:	491d      	ldr	r1, [pc, #116]	; (8011344 <etharp_find_entry+0x2ec>)
 80112ce:	481a      	ldr	r0, [pc, #104]	; (8011338 <etharp_find_entry+0x2e0>)
 80112d0:	f002 fa20 	bl	8013714 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 80112d4:	68fb      	ldr	r3, [r7, #12]
 80112d6:	2b00      	cmp	r3, #0
 80112d8:	d00b      	beq.n	80112f2 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 80112da:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80112de:	68fb      	ldr	r3, [r7, #12]
 80112e0:	6819      	ldr	r1, [r3, #0]
 80112e2:	4812      	ldr	r0, [pc, #72]	; (801132c <etharp_find_entry+0x2d4>)
 80112e4:	4613      	mov	r3, r2
 80112e6:	005b      	lsls	r3, r3, #1
 80112e8:	4413      	add	r3, r2
 80112ea:	00db      	lsls	r3, r3, #3
 80112ec:	4403      	add	r3, r0
 80112ee:	3304      	adds	r3, #4
 80112f0:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 80112f2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80112f6:	490d      	ldr	r1, [pc, #52]	; (801132c <etharp_find_entry+0x2d4>)
 80112f8:	4613      	mov	r3, r2
 80112fa:	005b      	lsls	r3, r3, #1
 80112fc:	4413      	add	r3, r2
 80112fe:	00db      	lsls	r3, r3, #3
 8011300:	440b      	add	r3, r1
 8011302:	3312      	adds	r3, #18
 8011304:	2200      	movs	r2, #0
 8011306:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8011308:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801130c:	4907      	ldr	r1, [pc, #28]	; (801132c <etharp_find_entry+0x2d4>)
 801130e:	4613      	mov	r3, r2
 8011310:	005b      	lsls	r3, r3, #1
 8011312:	4413      	add	r3, r2
 8011314:	00db      	lsls	r3, r3, #3
 8011316:	440b      	add	r3, r1
 8011318:	3308      	adds	r3, #8
 801131a:	687a      	ldr	r2, [r7, #4]
 801131c:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 801131e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 8011322:	4618      	mov	r0, r3
 8011324:	3728      	adds	r7, #40	; 0x28
 8011326:	46bd      	mov	sp, r7
 8011328:	bd80      	pop	{r7, pc}
 801132a:	bf00      	nop
 801132c:	200084ec 	.word	0x200084ec
 8011330:	08016d9c 	.word	0x08016d9c
 8011334:	08016dd4 	.word	0x08016dd4
 8011338:	08016e14 	.word	0x08016e14
 801133c:	08016e3c 	.word	0x08016e3c
 8011340:	08016e54 	.word	0x08016e54
 8011344:	08016e68 	.word	0x08016e68

08011348 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8011348:	b580      	push	{r7, lr}
 801134a:	b088      	sub	sp, #32
 801134c:	af02      	add	r7, sp, #8
 801134e:	60f8      	str	r0, [r7, #12]
 8011350:	60b9      	str	r1, [r7, #8]
 8011352:	607a      	str	r2, [r7, #4]
 8011354:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8011356:	68fb      	ldr	r3, [r7, #12]
 8011358:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801135c:	2b06      	cmp	r3, #6
 801135e:	d006      	beq.n	801136e <etharp_update_arp_entry+0x26>
 8011360:	4b48      	ldr	r3, [pc, #288]	; (8011484 <etharp_update_arp_entry+0x13c>)
 8011362:	f240 12a9 	movw	r2, #425	; 0x1a9
 8011366:	4948      	ldr	r1, [pc, #288]	; (8011488 <etharp_update_arp_entry+0x140>)
 8011368:	4848      	ldr	r0, [pc, #288]	; (801148c <etharp_update_arp_entry+0x144>)
 801136a:	f002 f9d3 	bl	8013714 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 801136e:	68bb      	ldr	r3, [r7, #8]
 8011370:	2b00      	cmp	r3, #0
 8011372:	d012      	beq.n	801139a <etharp_update_arp_entry+0x52>
 8011374:	68bb      	ldr	r3, [r7, #8]
 8011376:	681b      	ldr	r3, [r3, #0]
 8011378:	2b00      	cmp	r3, #0
 801137a:	d00e      	beq.n	801139a <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801137c:	68bb      	ldr	r3, [r7, #8]
 801137e:	681b      	ldr	r3, [r3, #0]
 8011380:	68f9      	ldr	r1, [r7, #12]
 8011382:	4618      	mov	r0, r3
 8011384:	f001 f91e 	bl	80125c4 <ip4_addr_isbroadcast_u32>
 8011388:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 801138a:	2b00      	cmp	r3, #0
 801138c:	d105      	bne.n	801139a <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 801138e:	68bb      	ldr	r3, [r7, #8]
 8011390:	681b      	ldr	r3, [r3, #0]
 8011392:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8011396:	2be0      	cmp	r3, #224	; 0xe0
 8011398:	d102      	bne.n	80113a0 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801139a:	f06f 030f 	mvn.w	r3, #15
 801139e:	e06c      	b.n	801147a <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 80113a0:	78fb      	ldrb	r3, [r7, #3]
 80113a2:	68fa      	ldr	r2, [r7, #12]
 80113a4:	4619      	mov	r1, r3
 80113a6:	68b8      	ldr	r0, [r7, #8]
 80113a8:	f7ff fe56 	bl	8011058 <etharp_find_entry>
 80113ac:	4603      	mov	r3, r0
 80113ae:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 80113b0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80113b4:	2b00      	cmp	r3, #0
 80113b6:	da02      	bge.n	80113be <etharp_update_arp_entry+0x76>
    return (err_t)i;
 80113b8:	8afb      	ldrh	r3, [r7, #22]
 80113ba:	b25b      	sxtb	r3, r3
 80113bc:	e05d      	b.n	801147a <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 80113be:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80113c2:	4933      	ldr	r1, [pc, #204]	; (8011490 <etharp_update_arp_entry+0x148>)
 80113c4:	4613      	mov	r3, r2
 80113c6:	005b      	lsls	r3, r3, #1
 80113c8:	4413      	add	r3, r2
 80113ca:	00db      	lsls	r3, r3, #3
 80113cc:	440b      	add	r3, r1
 80113ce:	3314      	adds	r3, #20
 80113d0:	2202      	movs	r2, #2
 80113d2:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 80113d4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80113d8:	492d      	ldr	r1, [pc, #180]	; (8011490 <etharp_update_arp_entry+0x148>)
 80113da:	4613      	mov	r3, r2
 80113dc:	005b      	lsls	r3, r3, #1
 80113de:	4413      	add	r3, r2
 80113e0:	00db      	lsls	r3, r3, #3
 80113e2:	440b      	add	r3, r1
 80113e4:	3308      	adds	r3, #8
 80113e6:	68fa      	ldr	r2, [r7, #12]
 80113e8:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 80113ea:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80113ee:	4613      	mov	r3, r2
 80113f0:	005b      	lsls	r3, r3, #1
 80113f2:	4413      	add	r3, r2
 80113f4:	00db      	lsls	r3, r3, #3
 80113f6:	3308      	adds	r3, #8
 80113f8:	4a25      	ldr	r2, [pc, #148]	; (8011490 <etharp_update_arp_entry+0x148>)
 80113fa:	4413      	add	r3, r2
 80113fc:	3304      	adds	r3, #4
 80113fe:	2206      	movs	r2, #6
 8011400:	6879      	ldr	r1, [r7, #4]
 8011402:	4618      	mov	r0, r3
 8011404:	f002 f973 	bl	80136ee <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8011408:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801140c:	4920      	ldr	r1, [pc, #128]	; (8011490 <etharp_update_arp_entry+0x148>)
 801140e:	4613      	mov	r3, r2
 8011410:	005b      	lsls	r3, r3, #1
 8011412:	4413      	add	r3, r2
 8011414:	00db      	lsls	r3, r3, #3
 8011416:	440b      	add	r3, r1
 8011418:	3312      	adds	r3, #18
 801141a:	2200      	movs	r2, #0
 801141c:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 801141e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8011422:	491b      	ldr	r1, [pc, #108]	; (8011490 <etharp_update_arp_entry+0x148>)
 8011424:	4613      	mov	r3, r2
 8011426:	005b      	lsls	r3, r3, #1
 8011428:	4413      	add	r3, r2
 801142a:	00db      	lsls	r3, r3, #3
 801142c:	440b      	add	r3, r1
 801142e:	681b      	ldr	r3, [r3, #0]
 8011430:	2b00      	cmp	r3, #0
 8011432:	d021      	beq.n	8011478 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8011434:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8011438:	4915      	ldr	r1, [pc, #84]	; (8011490 <etharp_update_arp_entry+0x148>)
 801143a:	4613      	mov	r3, r2
 801143c:	005b      	lsls	r3, r3, #1
 801143e:	4413      	add	r3, r2
 8011440:	00db      	lsls	r3, r3, #3
 8011442:	440b      	add	r3, r1
 8011444:	681b      	ldr	r3, [r3, #0]
 8011446:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8011448:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801144c:	4910      	ldr	r1, [pc, #64]	; (8011490 <etharp_update_arp_entry+0x148>)
 801144e:	4613      	mov	r3, r2
 8011450:	005b      	lsls	r3, r3, #1
 8011452:	4413      	add	r3, r2
 8011454:	00db      	lsls	r3, r3, #3
 8011456:	440b      	add	r3, r1
 8011458:	2200      	movs	r2, #0
 801145a:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 801145c:	68fb      	ldr	r3, [r7, #12]
 801145e:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 8011462:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8011466:	9300      	str	r3, [sp, #0]
 8011468:	687b      	ldr	r3, [r7, #4]
 801146a:	6939      	ldr	r1, [r7, #16]
 801146c:	68f8      	ldr	r0, [r7, #12]
 801146e:	f001 ffad 	bl	80133cc <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8011472:	6938      	ldr	r0, [r7, #16]
 8011474:	f7f7 fc3c 	bl	8008cf0 <pbuf_free>
  }
  return ERR_OK;
 8011478:	2300      	movs	r3, #0
}
 801147a:	4618      	mov	r0, r3
 801147c:	3718      	adds	r7, #24
 801147e:	46bd      	mov	sp, r7
 8011480:	bd80      	pop	{r7, pc}
 8011482:	bf00      	nop
 8011484:	08016d9c 	.word	0x08016d9c
 8011488:	08016e94 	.word	0x08016e94
 801148c:	08016e14 	.word	0x08016e14
 8011490:	200084ec 	.word	0x200084ec

08011494 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8011494:	b580      	push	{r7, lr}
 8011496:	b084      	sub	sp, #16
 8011498:	af00      	add	r7, sp, #0
 801149a:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801149c:	2300      	movs	r3, #0
 801149e:	60fb      	str	r3, [r7, #12]
 80114a0:	e01e      	b.n	80114e0 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 80114a2:	4913      	ldr	r1, [pc, #76]	; (80114f0 <etharp_cleanup_netif+0x5c>)
 80114a4:	68fa      	ldr	r2, [r7, #12]
 80114a6:	4613      	mov	r3, r2
 80114a8:	005b      	lsls	r3, r3, #1
 80114aa:	4413      	add	r3, r2
 80114ac:	00db      	lsls	r3, r3, #3
 80114ae:	440b      	add	r3, r1
 80114b0:	3314      	adds	r3, #20
 80114b2:	781b      	ldrb	r3, [r3, #0]
 80114b4:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 80114b6:	7afb      	ldrb	r3, [r7, #11]
 80114b8:	2b00      	cmp	r3, #0
 80114ba:	d00e      	beq.n	80114da <etharp_cleanup_netif+0x46>
 80114bc:	490c      	ldr	r1, [pc, #48]	; (80114f0 <etharp_cleanup_netif+0x5c>)
 80114be:	68fa      	ldr	r2, [r7, #12]
 80114c0:	4613      	mov	r3, r2
 80114c2:	005b      	lsls	r3, r3, #1
 80114c4:	4413      	add	r3, r2
 80114c6:	00db      	lsls	r3, r3, #3
 80114c8:	440b      	add	r3, r1
 80114ca:	3308      	adds	r3, #8
 80114cc:	681b      	ldr	r3, [r3, #0]
 80114ce:	687a      	ldr	r2, [r7, #4]
 80114d0:	429a      	cmp	r2, r3
 80114d2:	d102      	bne.n	80114da <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 80114d4:	68f8      	ldr	r0, [r7, #12]
 80114d6:	f7ff fce5 	bl	8010ea4 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80114da:	68fb      	ldr	r3, [r7, #12]
 80114dc:	3301      	adds	r3, #1
 80114de:	60fb      	str	r3, [r7, #12]
 80114e0:	68fb      	ldr	r3, [r7, #12]
 80114e2:	2b09      	cmp	r3, #9
 80114e4:	dddd      	ble.n	80114a2 <etharp_cleanup_netif+0xe>
    }
  }
}
 80114e6:	bf00      	nop
 80114e8:	3710      	adds	r7, #16
 80114ea:	46bd      	mov	sp, r7
 80114ec:	bd80      	pop	{r7, pc}
 80114ee:	bf00      	nop
 80114f0:	200084ec 	.word	0x200084ec

080114f4 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 80114f4:	b5b0      	push	{r4, r5, r7, lr}
 80114f6:	b08a      	sub	sp, #40	; 0x28
 80114f8:	af04      	add	r7, sp, #16
 80114fa:	6078      	str	r0, [r7, #4]
 80114fc:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 80114fe:	683b      	ldr	r3, [r7, #0]
 8011500:	2b00      	cmp	r3, #0
 8011502:	d107      	bne.n	8011514 <etharp_input+0x20>
 8011504:	4b3f      	ldr	r3, [pc, #252]	; (8011604 <etharp_input+0x110>)
 8011506:	f240 228a 	movw	r2, #650	; 0x28a
 801150a:	493f      	ldr	r1, [pc, #252]	; (8011608 <etharp_input+0x114>)
 801150c:	483f      	ldr	r0, [pc, #252]	; (801160c <etharp_input+0x118>)
 801150e:	f002 f901 	bl	8013714 <iprintf>
 8011512:	e074      	b.n	80115fe <etharp_input+0x10a>

  hdr = (struct etharp_hdr *)p->payload;
 8011514:	687b      	ldr	r3, [r7, #4]
 8011516:	685b      	ldr	r3, [r3, #4]
 8011518:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801151a:	693b      	ldr	r3, [r7, #16]
 801151c:	881b      	ldrh	r3, [r3, #0]
 801151e:	b29b      	uxth	r3, r3
 8011520:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011524:	d10c      	bne.n	8011540 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8011526:	693b      	ldr	r3, [r7, #16]
 8011528:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801152a:	2b06      	cmp	r3, #6
 801152c:	d108      	bne.n	8011540 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801152e:	693b      	ldr	r3, [r7, #16]
 8011530:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8011532:	2b04      	cmp	r3, #4
 8011534:	d104      	bne.n	8011540 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8011536:	693b      	ldr	r3, [r7, #16]
 8011538:	885b      	ldrh	r3, [r3, #2]
 801153a:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801153c:	2b08      	cmp	r3, #8
 801153e:	d003      	beq.n	8011548 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8011540:	6878      	ldr	r0, [r7, #4]
 8011542:	f7f7 fbd5 	bl	8008cf0 <pbuf_free>
    return;
 8011546:	e05a      	b.n	80115fe <etharp_input+0x10a>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8011548:	693b      	ldr	r3, [r7, #16]
 801154a:	330e      	adds	r3, #14
 801154c:	681b      	ldr	r3, [r3, #0]
 801154e:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8011550:	693b      	ldr	r3, [r7, #16]
 8011552:	3318      	adds	r3, #24
 8011554:	681b      	ldr	r3, [r3, #0]
 8011556:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8011558:	683b      	ldr	r3, [r7, #0]
 801155a:	3304      	adds	r3, #4
 801155c:	681b      	ldr	r3, [r3, #0]
 801155e:	2b00      	cmp	r3, #0
 8011560:	d102      	bne.n	8011568 <etharp_input+0x74>
    for_us = 0;
 8011562:	2300      	movs	r3, #0
 8011564:	75fb      	strb	r3, [r7, #23]
 8011566:	e009      	b.n	801157c <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8011568:	68ba      	ldr	r2, [r7, #8]
 801156a:	683b      	ldr	r3, [r7, #0]
 801156c:	3304      	adds	r3, #4
 801156e:	681b      	ldr	r3, [r3, #0]
 8011570:	429a      	cmp	r2, r3
 8011572:	bf0c      	ite	eq
 8011574:	2301      	moveq	r3, #1
 8011576:	2300      	movne	r3, #0
 8011578:	b2db      	uxtb	r3, r3
 801157a:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 801157c:	693b      	ldr	r3, [r7, #16]
 801157e:	f103 0208 	add.w	r2, r3, #8
 8011582:	7dfb      	ldrb	r3, [r7, #23]
 8011584:	2b00      	cmp	r3, #0
 8011586:	d001      	beq.n	801158c <etharp_input+0x98>
 8011588:	2301      	movs	r3, #1
 801158a:	e000      	b.n	801158e <etharp_input+0x9a>
 801158c:	2302      	movs	r3, #2
 801158e:	f107 010c 	add.w	r1, r7, #12
 8011592:	6838      	ldr	r0, [r7, #0]
 8011594:	f7ff fed8 	bl	8011348 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8011598:	693b      	ldr	r3, [r7, #16]
 801159a:	88db      	ldrh	r3, [r3, #6]
 801159c:	b29b      	uxth	r3, r3
 801159e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80115a2:	d003      	beq.n	80115ac <etharp_input+0xb8>
 80115a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80115a8:	d01e      	beq.n	80115e8 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 80115aa:	e025      	b.n	80115f8 <etharp_input+0x104>
      if (for_us) {
 80115ac:	7dfb      	ldrb	r3, [r7, #23]
 80115ae:	2b00      	cmp	r3, #0
 80115b0:	d021      	beq.n	80115f6 <etharp_input+0x102>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 80115b2:	683b      	ldr	r3, [r7, #0]
 80115b4:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 80115b8:	693b      	ldr	r3, [r7, #16]
 80115ba:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 80115be:	683b      	ldr	r3, [r7, #0]
 80115c0:	f103 052a 	add.w	r5, r3, #42	; 0x2a
 80115c4:	683b      	ldr	r3, [r7, #0]
 80115c6:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 80115c8:	693a      	ldr	r2, [r7, #16]
 80115ca:	3208      	adds	r2, #8
        etharp_raw(netif,
 80115cc:	2102      	movs	r1, #2
 80115ce:	9103      	str	r1, [sp, #12]
 80115d0:	f107 010c 	add.w	r1, r7, #12
 80115d4:	9102      	str	r1, [sp, #8]
 80115d6:	9201      	str	r2, [sp, #4]
 80115d8:	9300      	str	r3, [sp, #0]
 80115da:	462b      	mov	r3, r5
 80115dc:	4622      	mov	r2, r4
 80115de:	4601      	mov	r1, r0
 80115e0:	6838      	ldr	r0, [r7, #0]
 80115e2:	f000 faef 	bl	8011bc4 <etharp_raw>
      break;
 80115e6:	e006      	b.n	80115f6 <etharp_input+0x102>
      dhcp_arp_reply(netif, &sipaddr);
 80115e8:	f107 030c 	add.w	r3, r7, #12
 80115ec:	4619      	mov	r1, r3
 80115ee:	6838      	ldr	r0, [r7, #0]
 80115f0:	f7fe f9fe 	bl	800f9f0 <dhcp_arp_reply>
      break;
 80115f4:	e000      	b.n	80115f8 <etharp_input+0x104>
      break;
 80115f6:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 80115f8:	6878      	ldr	r0, [r7, #4]
 80115fa:	f7f7 fb79 	bl	8008cf0 <pbuf_free>
}
 80115fe:	3718      	adds	r7, #24
 8011600:	46bd      	mov	sp, r7
 8011602:	bdb0      	pop	{r4, r5, r7, pc}
 8011604:	08016d9c 	.word	0x08016d9c
 8011608:	08016eec 	.word	0x08016eec
 801160c:	08016e14 	.word	0x08016e14

08011610 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8011610:	b580      	push	{r7, lr}
 8011612:	b086      	sub	sp, #24
 8011614:	af02      	add	r7, sp, #8
 8011616:	60f8      	str	r0, [r7, #12]
 8011618:	60b9      	str	r1, [r7, #8]
 801161a:	4613      	mov	r3, r2
 801161c:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 801161e:	79fa      	ldrb	r2, [r7, #7]
 8011620:	4944      	ldr	r1, [pc, #272]	; (8011734 <etharp_output_to_arp_index+0x124>)
 8011622:	4613      	mov	r3, r2
 8011624:	005b      	lsls	r3, r3, #1
 8011626:	4413      	add	r3, r2
 8011628:	00db      	lsls	r3, r3, #3
 801162a:	440b      	add	r3, r1
 801162c:	3314      	adds	r3, #20
 801162e:	781b      	ldrb	r3, [r3, #0]
 8011630:	2b01      	cmp	r3, #1
 8011632:	d806      	bhi.n	8011642 <etharp_output_to_arp_index+0x32>
 8011634:	4b40      	ldr	r3, [pc, #256]	; (8011738 <etharp_output_to_arp_index+0x128>)
 8011636:	f240 22ef 	movw	r2, #751	; 0x2ef
 801163a:	4940      	ldr	r1, [pc, #256]	; (801173c <etharp_output_to_arp_index+0x12c>)
 801163c:	4840      	ldr	r0, [pc, #256]	; (8011740 <etharp_output_to_arp_index+0x130>)
 801163e:	f002 f869 	bl	8013714 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8011642:	79fa      	ldrb	r2, [r7, #7]
 8011644:	493b      	ldr	r1, [pc, #236]	; (8011734 <etharp_output_to_arp_index+0x124>)
 8011646:	4613      	mov	r3, r2
 8011648:	005b      	lsls	r3, r3, #1
 801164a:	4413      	add	r3, r2
 801164c:	00db      	lsls	r3, r3, #3
 801164e:	440b      	add	r3, r1
 8011650:	3314      	adds	r3, #20
 8011652:	781b      	ldrb	r3, [r3, #0]
 8011654:	2b02      	cmp	r3, #2
 8011656:	d153      	bne.n	8011700 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8011658:	79fa      	ldrb	r2, [r7, #7]
 801165a:	4936      	ldr	r1, [pc, #216]	; (8011734 <etharp_output_to_arp_index+0x124>)
 801165c:	4613      	mov	r3, r2
 801165e:	005b      	lsls	r3, r3, #1
 8011660:	4413      	add	r3, r2
 8011662:	00db      	lsls	r3, r3, #3
 8011664:	440b      	add	r3, r1
 8011666:	3312      	adds	r3, #18
 8011668:	881b      	ldrh	r3, [r3, #0]
 801166a:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 801166e:	d919      	bls.n	80116a4 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8011670:	79fa      	ldrb	r2, [r7, #7]
 8011672:	4613      	mov	r3, r2
 8011674:	005b      	lsls	r3, r3, #1
 8011676:	4413      	add	r3, r2
 8011678:	00db      	lsls	r3, r3, #3
 801167a:	4a2e      	ldr	r2, [pc, #184]	; (8011734 <etharp_output_to_arp_index+0x124>)
 801167c:	4413      	add	r3, r2
 801167e:	3304      	adds	r3, #4
 8011680:	4619      	mov	r1, r3
 8011682:	68f8      	ldr	r0, [r7, #12]
 8011684:	f000 fb4c 	bl	8011d20 <etharp_request>
 8011688:	4603      	mov	r3, r0
 801168a:	2b00      	cmp	r3, #0
 801168c:	d138      	bne.n	8011700 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801168e:	79fa      	ldrb	r2, [r7, #7]
 8011690:	4928      	ldr	r1, [pc, #160]	; (8011734 <etharp_output_to_arp_index+0x124>)
 8011692:	4613      	mov	r3, r2
 8011694:	005b      	lsls	r3, r3, #1
 8011696:	4413      	add	r3, r2
 8011698:	00db      	lsls	r3, r3, #3
 801169a:	440b      	add	r3, r1
 801169c:	3314      	adds	r3, #20
 801169e:	2203      	movs	r2, #3
 80116a0:	701a      	strb	r2, [r3, #0]
 80116a2:	e02d      	b.n	8011700 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 80116a4:	79fa      	ldrb	r2, [r7, #7]
 80116a6:	4923      	ldr	r1, [pc, #140]	; (8011734 <etharp_output_to_arp_index+0x124>)
 80116a8:	4613      	mov	r3, r2
 80116aa:	005b      	lsls	r3, r3, #1
 80116ac:	4413      	add	r3, r2
 80116ae:	00db      	lsls	r3, r3, #3
 80116b0:	440b      	add	r3, r1
 80116b2:	3312      	adds	r3, #18
 80116b4:	881b      	ldrh	r3, [r3, #0]
 80116b6:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 80116ba:	d321      	bcc.n	8011700 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 80116bc:	79fa      	ldrb	r2, [r7, #7]
 80116be:	4613      	mov	r3, r2
 80116c0:	005b      	lsls	r3, r3, #1
 80116c2:	4413      	add	r3, r2
 80116c4:	00db      	lsls	r3, r3, #3
 80116c6:	4a1b      	ldr	r2, [pc, #108]	; (8011734 <etharp_output_to_arp_index+0x124>)
 80116c8:	4413      	add	r3, r2
 80116ca:	1d19      	adds	r1, r3, #4
 80116cc:	79fa      	ldrb	r2, [r7, #7]
 80116ce:	4613      	mov	r3, r2
 80116d0:	005b      	lsls	r3, r3, #1
 80116d2:	4413      	add	r3, r2
 80116d4:	00db      	lsls	r3, r3, #3
 80116d6:	3308      	adds	r3, #8
 80116d8:	4a16      	ldr	r2, [pc, #88]	; (8011734 <etharp_output_to_arp_index+0x124>)
 80116da:	4413      	add	r3, r2
 80116dc:	3304      	adds	r3, #4
 80116de:	461a      	mov	r2, r3
 80116e0:	68f8      	ldr	r0, [r7, #12]
 80116e2:	f000 fafb 	bl	8011cdc <etharp_request_dst>
 80116e6:	4603      	mov	r3, r0
 80116e8:	2b00      	cmp	r3, #0
 80116ea:	d109      	bne.n	8011700 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 80116ec:	79fa      	ldrb	r2, [r7, #7]
 80116ee:	4911      	ldr	r1, [pc, #68]	; (8011734 <etharp_output_to_arp_index+0x124>)
 80116f0:	4613      	mov	r3, r2
 80116f2:	005b      	lsls	r3, r3, #1
 80116f4:	4413      	add	r3, r2
 80116f6:	00db      	lsls	r3, r3, #3
 80116f8:	440b      	add	r3, r1
 80116fa:	3314      	adds	r3, #20
 80116fc:	2203      	movs	r2, #3
 80116fe:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8011700:	68fb      	ldr	r3, [r7, #12]
 8011702:	f103 012a 	add.w	r1, r3, #42	; 0x2a
 8011706:	79fa      	ldrb	r2, [r7, #7]
 8011708:	4613      	mov	r3, r2
 801170a:	005b      	lsls	r3, r3, #1
 801170c:	4413      	add	r3, r2
 801170e:	00db      	lsls	r3, r3, #3
 8011710:	3308      	adds	r3, #8
 8011712:	4a08      	ldr	r2, [pc, #32]	; (8011734 <etharp_output_to_arp_index+0x124>)
 8011714:	4413      	add	r3, r2
 8011716:	1d1a      	adds	r2, r3, #4
 8011718:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801171c:	9300      	str	r3, [sp, #0]
 801171e:	4613      	mov	r3, r2
 8011720:	460a      	mov	r2, r1
 8011722:	68b9      	ldr	r1, [r7, #8]
 8011724:	68f8      	ldr	r0, [r7, #12]
 8011726:	f001 fe51 	bl	80133cc <ethernet_output>
 801172a:	4603      	mov	r3, r0
}
 801172c:	4618      	mov	r0, r3
 801172e:	3710      	adds	r7, #16
 8011730:	46bd      	mov	sp, r7
 8011732:	bd80      	pop	{r7, pc}
 8011734:	200084ec 	.word	0x200084ec
 8011738:	08016d9c 	.word	0x08016d9c
 801173c:	08016f0c 	.word	0x08016f0c
 8011740:	08016e14 	.word	0x08016e14

08011744 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8011744:	b580      	push	{r7, lr}
 8011746:	b08a      	sub	sp, #40	; 0x28
 8011748:	af02      	add	r7, sp, #8
 801174a:	60f8      	str	r0, [r7, #12]
 801174c:	60b9      	str	r1, [r7, #8]
 801174e:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8011750:	687b      	ldr	r3, [r7, #4]
 8011752:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8011754:	68fb      	ldr	r3, [r7, #12]
 8011756:	2b00      	cmp	r3, #0
 8011758:	d106      	bne.n	8011768 <etharp_output+0x24>
 801175a:	4b73      	ldr	r3, [pc, #460]	; (8011928 <etharp_output+0x1e4>)
 801175c:	f240 321e 	movw	r2, #798	; 0x31e
 8011760:	4972      	ldr	r1, [pc, #456]	; (801192c <etharp_output+0x1e8>)
 8011762:	4873      	ldr	r0, [pc, #460]	; (8011930 <etharp_output+0x1ec>)
 8011764:	f001 ffd6 	bl	8013714 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8011768:	68bb      	ldr	r3, [r7, #8]
 801176a:	2b00      	cmp	r3, #0
 801176c:	d106      	bne.n	801177c <etharp_output+0x38>
 801176e:	4b6e      	ldr	r3, [pc, #440]	; (8011928 <etharp_output+0x1e4>)
 8011770:	f240 321f 	movw	r2, #799	; 0x31f
 8011774:	496f      	ldr	r1, [pc, #444]	; (8011934 <etharp_output+0x1f0>)
 8011776:	486e      	ldr	r0, [pc, #440]	; (8011930 <etharp_output+0x1ec>)
 8011778:	f001 ffcc 	bl	8013714 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 801177c:	687b      	ldr	r3, [r7, #4]
 801177e:	2b00      	cmp	r3, #0
 8011780:	d106      	bne.n	8011790 <etharp_output+0x4c>
 8011782:	4b69      	ldr	r3, [pc, #420]	; (8011928 <etharp_output+0x1e4>)
 8011784:	f44f 7248 	mov.w	r2, #800	; 0x320
 8011788:	496b      	ldr	r1, [pc, #428]	; (8011938 <etharp_output+0x1f4>)
 801178a:	4869      	ldr	r0, [pc, #420]	; (8011930 <etharp_output+0x1ec>)
 801178c:	f001 ffc2 	bl	8013714 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8011790:	687b      	ldr	r3, [r7, #4]
 8011792:	681b      	ldr	r3, [r3, #0]
 8011794:	68f9      	ldr	r1, [r7, #12]
 8011796:	4618      	mov	r0, r3
 8011798:	f000 ff14 	bl	80125c4 <ip4_addr_isbroadcast_u32>
 801179c:	4603      	mov	r3, r0
 801179e:	2b00      	cmp	r3, #0
 80117a0:	d002      	beq.n	80117a8 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 80117a2:	4b66      	ldr	r3, [pc, #408]	; (801193c <etharp_output+0x1f8>)
 80117a4:	61fb      	str	r3, [r7, #28]
 80117a6:	e0af      	b.n	8011908 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 80117a8:	687b      	ldr	r3, [r7, #4]
 80117aa:	681b      	ldr	r3, [r3, #0]
 80117ac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80117b0:	2be0      	cmp	r3, #224	; 0xe0
 80117b2:	d118      	bne.n	80117e6 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 80117b4:	2301      	movs	r3, #1
 80117b6:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 80117b8:	2300      	movs	r3, #0
 80117ba:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 80117bc:	235e      	movs	r3, #94	; 0x5e
 80117be:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 80117c0:	687b      	ldr	r3, [r7, #4]
 80117c2:	3301      	adds	r3, #1
 80117c4:	781b      	ldrb	r3, [r3, #0]
 80117c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80117ca:	b2db      	uxtb	r3, r3
 80117cc:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 80117ce:	687b      	ldr	r3, [r7, #4]
 80117d0:	3302      	adds	r3, #2
 80117d2:	781b      	ldrb	r3, [r3, #0]
 80117d4:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 80117d6:	687b      	ldr	r3, [r7, #4]
 80117d8:	3303      	adds	r3, #3
 80117da:	781b      	ldrb	r3, [r3, #0]
 80117dc:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 80117de:	f107 0310 	add.w	r3, r7, #16
 80117e2:	61fb      	str	r3, [r7, #28]
 80117e4:	e090      	b.n	8011908 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 80117e6:	687b      	ldr	r3, [r7, #4]
 80117e8:	681a      	ldr	r2, [r3, #0]
 80117ea:	68fb      	ldr	r3, [r7, #12]
 80117ec:	3304      	adds	r3, #4
 80117ee:	681b      	ldr	r3, [r3, #0]
 80117f0:	405a      	eors	r2, r3
 80117f2:	68fb      	ldr	r3, [r7, #12]
 80117f4:	3308      	adds	r3, #8
 80117f6:	681b      	ldr	r3, [r3, #0]
 80117f8:	4013      	ands	r3, r2
 80117fa:	2b00      	cmp	r3, #0
 80117fc:	d012      	beq.n	8011824 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 80117fe:	687b      	ldr	r3, [r7, #4]
 8011800:	681b      	ldr	r3, [r3, #0]
 8011802:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8011804:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8011808:	4293      	cmp	r3, r2
 801180a:	d00b      	beq.n	8011824 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 801180c:	68fb      	ldr	r3, [r7, #12]
 801180e:	330c      	adds	r3, #12
 8011810:	681b      	ldr	r3, [r3, #0]
 8011812:	2b00      	cmp	r3, #0
 8011814:	d003      	beq.n	801181e <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8011816:	68fb      	ldr	r3, [r7, #12]
 8011818:	330c      	adds	r3, #12
 801181a:	61bb      	str	r3, [r7, #24]
 801181c:	e002      	b.n	8011824 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 801181e:	f06f 0303 	mvn.w	r3, #3
 8011822:	e07d      	b.n	8011920 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8011824:	4b46      	ldr	r3, [pc, #280]	; (8011940 <etharp_output+0x1fc>)
 8011826:	781b      	ldrb	r3, [r3, #0]
 8011828:	4619      	mov	r1, r3
 801182a:	4a46      	ldr	r2, [pc, #280]	; (8011944 <etharp_output+0x200>)
 801182c:	460b      	mov	r3, r1
 801182e:	005b      	lsls	r3, r3, #1
 8011830:	440b      	add	r3, r1
 8011832:	00db      	lsls	r3, r3, #3
 8011834:	4413      	add	r3, r2
 8011836:	3314      	adds	r3, #20
 8011838:	781b      	ldrb	r3, [r3, #0]
 801183a:	2b01      	cmp	r3, #1
 801183c:	d925      	bls.n	801188a <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 801183e:	4b40      	ldr	r3, [pc, #256]	; (8011940 <etharp_output+0x1fc>)
 8011840:	781b      	ldrb	r3, [r3, #0]
 8011842:	4619      	mov	r1, r3
 8011844:	4a3f      	ldr	r2, [pc, #252]	; (8011944 <etharp_output+0x200>)
 8011846:	460b      	mov	r3, r1
 8011848:	005b      	lsls	r3, r3, #1
 801184a:	440b      	add	r3, r1
 801184c:	00db      	lsls	r3, r3, #3
 801184e:	4413      	add	r3, r2
 8011850:	3308      	adds	r3, #8
 8011852:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8011854:	68fa      	ldr	r2, [r7, #12]
 8011856:	429a      	cmp	r2, r3
 8011858:	d117      	bne.n	801188a <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 801185a:	69bb      	ldr	r3, [r7, #24]
 801185c:	681a      	ldr	r2, [r3, #0]
 801185e:	4b38      	ldr	r3, [pc, #224]	; (8011940 <etharp_output+0x1fc>)
 8011860:	781b      	ldrb	r3, [r3, #0]
 8011862:	4618      	mov	r0, r3
 8011864:	4937      	ldr	r1, [pc, #220]	; (8011944 <etharp_output+0x200>)
 8011866:	4603      	mov	r3, r0
 8011868:	005b      	lsls	r3, r3, #1
 801186a:	4403      	add	r3, r0
 801186c:	00db      	lsls	r3, r3, #3
 801186e:	440b      	add	r3, r1
 8011870:	3304      	adds	r3, #4
 8011872:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8011874:	429a      	cmp	r2, r3
 8011876:	d108      	bne.n	801188a <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8011878:	4b31      	ldr	r3, [pc, #196]	; (8011940 <etharp_output+0x1fc>)
 801187a:	781b      	ldrb	r3, [r3, #0]
 801187c:	461a      	mov	r2, r3
 801187e:	68b9      	ldr	r1, [r7, #8]
 8011880:	68f8      	ldr	r0, [r7, #12]
 8011882:	f7ff fec5 	bl	8011610 <etharp_output_to_arp_index>
 8011886:	4603      	mov	r3, r0
 8011888:	e04a      	b.n	8011920 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801188a:	2300      	movs	r3, #0
 801188c:	75fb      	strb	r3, [r7, #23]
 801188e:	e031      	b.n	80118f4 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8011890:	7dfa      	ldrb	r2, [r7, #23]
 8011892:	492c      	ldr	r1, [pc, #176]	; (8011944 <etharp_output+0x200>)
 8011894:	4613      	mov	r3, r2
 8011896:	005b      	lsls	r3, r3, #1
 8011898:	4413      	add	r3, r2
 801189a:	00db      	lsls	r3, r3, #3
 801189c:	440b      	add	r3, r1
 801189e:	3314      	adds	r3, #20
 80118a0:	781b      	ldrb	r3, [r3, #0]
 80118a2:	2b01      	cmp	r3, #1
 80118a4:	d923      	bls.n	80118ee <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 80118a6:	7dfa      	ldrb	r2, [r7, #23]
 80118a8:	4926      	ldr	r1, [pc, #152]	; (8011944 <etharp_output+0x200>)
 80118aa:	4613      	mov	r3, r2
 80118ac:	005b      	lsls	r3, r3, #1
 80118ae:	4413      	add	r3, r2
 80118b0:	00db      	lsls	r3, r3, #3
 80118b2:	440b      	add	r3, r1
 80118b4:	3308      	adds	r3, #8
 80118b6:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 80118b8:	68fa      	ldr	r2, [r7, #12]
 80118ba:	429a      	cmp	r2, r3
 80118bc:	d117      	bne.n	80118ee <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 80118be:	69bb      	ldr	r3, [r7, #24]
 80118c0:	6819      	ldr	r1, [r3, #0]
 80118c2:	7dfa      	ldrb	r2, [r7, #23]
 80118c4:	481f      	ldr	r0, [pc, #124]	; (8011944 <etharp_output+0x200>)
 80118c6:	4613      	mov	r3, r2
 80118c8:	005b      	lsls	r3, r3, #1
 80118ca:	4413      	add	r3, r2
 80118cc:	00db      	lsls	r3, r3, #3
 80118ce:	4403      	add	r3, r0
 80118d0:	3304      	adds	r3, #4
 80118d2:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 80118d4:	4299      	cmp	r1, r3
 80118d6:	d10a      	bne.n	80118ee <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 80118d8:	4a19      	ldr	r2, [pc, #100]	; (8011940 <etharp_output+0x1fc>)
 80118da:	7dfb      	ldrb	r3, [r7, #23]
 80118dc:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 80118de:	7dfb      	ldrb	r3, [r7, #23]
 80118e0:	461a      	mov	r2, r3
 80118e2:	68b9      	ldr	r1, [r7, #8]
 80118e4:	68f8      	ldr	r0, [r7, #12]
 80118e6:	f7ff fe93 	bl	8011610 <etharp_output_to_arp_index>
 80118ea:	4603      	mov	r3, r0
 80118ec:	e018      	b.n	8011920 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 80118ee:	7dfb      	ldrb	r3, [r7, #23]
 80118f0:	3301      	adds	r3, #1
 80118f2:	75fb      	strb	r3, [r7, #23]
 80118f4:	7dfb      	ldrb	r3, [r7, #23]
 80118f6:	2b09      	cmp	r3, #9
 80118f8:	d9ca      	bls.n	8011890 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 80118fa:	68ba      	ldr	r2, [r7, #8]
 80118fc:	69b9      	ldr	r1, [r7, #24]
 80118fe:	68f8      	ldr	r0, [r7, #12]
 8011900:	f000 f822 	bl	8011948 <etharp_query>
 8011904:	4603      	mov	r3, r0
 8011906:	e00b      	b.n	8011920 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8011908:	68fb      	ldr	r3, [r7, #12]
 801190a:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 801190e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8011912:	9300      	str	r3, [sp, #0]
 8011914:	69fb      	ldr	r3, [r7, #28]
 8011916:	68b9      	ldr	r1, [r7, #8]
 8011918:	68f8      	ldr	r0, [r7, #12]
 801191a:	f001 fd57 	bl	80133cc <ethernet_output>
 801191e:	4603      	mov	r3, r0
}
 8011920:	4618      	mov	r0, r3
 8011922:	3720      	adds	r7, #32
 8011924:	46bd      	mov	sp, r7
 8011926:	bd80      	pop	{r7, pc}
 8011928:	08016d9c 	.word	0x08016d9c
 801192c:	08016eec 	.word	0x08016eec
 8011930:	08016e14 	.word	0x08016e14
 8011934:	08016f3c 	.word	0x08016f3c
 8011938:	08016edc 	.word	0x08016edc
 801193c:	080175a0 	.word	0x080175a0
 8011940:	200085dc 	.word	0x200085dc
 8011944:	200084ec 	.word	0x200084ec

08011948 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8011948:	b580      	push	{r7, lr}
 801194a:	b08c      	sub	sp, #48	; 0x30
 801194c:	af02      	add	r7, sp, #8
 801194e:	60f8      	str	r0, [r7, #12]
 8011950:	60b9      	str	r1, [r7, #8]
 8011952:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8011954:	68fb      	ldr	r3, [r7, #12]
 8011956:	332a      	adds	r3, #42	; 0x2a
 8011958:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 801195a:	23ff      	movs	r3, #255	; 0xff
 801195c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 8011960:	2300      	movs	r3, #0
 8011962:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8011964:	68bb      	ldr	r3, [r7, #8]
 8011966:	681b      	ldr	r3, [r3, #0]
 8011968:	68f9      	ldr	r1, [r7, #12]
 801196a:	4618      	mov	r0, r3
 801196c:	f000 fe2a 	bl	80125c4 <ip4_addr_isbroadcast_u32>
 8011970:	4603      	mov	r3, r0
 8011972:	2b00      	cmp	r3, #0
 8011974:	d10c      	bne.n	8011990 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8011976:	68bb      	ldr	r3, [r7, #8]
 8011978:	681b      	ldr	r3, [r3, #0]
 801197a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801197e:	2be0      	cmp	r3, #224	; 0xe0
 8011980:	d006      	beq.n	8011990 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8011982:	68bb      	ldr	r3, [r7, #8]
 8011984:	2b00      	cmp	r3, #0
 8011986:	d003      	beq.n	8011990 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8011988:	68bb      	ldr	r3, [r7, #8]
 801198a:	681b      	ldr	r3, [r3, #0]
 801198c:	2b00      	cmp	r3, #0
 801198e:	d102      	bne.n	8011996 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8011990:	f06f 030f 	mvn.w	r3, #15
 8011994:	e102      	b.n	8011b9c <etharp_query+0x254>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8011996:	68fa      	ldr	r2, [r7, #12]
 8011998:	2101      	movs	r1, #1
 801199a:	68b8      	ldr	r0, [r7, #8]
 801199c:	f7ff fb5c 	bl	8011058 <etharp_find_entry>
 80119a0:	4603      	mov	r3, r0
 80119a2:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 80119a4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80119a8:	2b00      	cmp	r3, #0
 80119aa:	da02      	bge.n	80119b2 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 80119ac:	8a7b      	ldrh	r3, [r7, #18]
 80119ae:	b25b      	sxtb	r3, r3
 80119b0:	e0f4      	b.n	8011b9c <etharp_query+0x254>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 80119b2:	8a7b      	ldrh	r3, [r7, #18]
 80119b4:	2b7e      	cmp	r3, #126	; 0x7e
 80119b6:	d906      	bls.n	80119c6 <etharp_query+0x7e>
 80119b8:	4b7a      	ldr	r3, [pc, #488]	; (8011ba4 <etharp_query+0x25c>)
 80119ba:	f240 32c1 	movw	r2, #961	; 0x3c1
 80119be:	497a      	ldr	r1, [pc, #488]	; (8011ba8 <etharp_query+0x260>)
 80119c0:	487a      	ldr	r0, [pc, #488]	; (8011bac <etharp_query+0x264>)
 80119c2:	f001 fea7 	bl	8013714 <iprintf>
  i = (netif_addr_idx_t)i_err;
 80119c6:	8a7b      	ldrh	r3, [r7, #18]
 80119c8:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 80119ca:	7c7a      	ldrb	r2, [r7, #17]
 80119cc:	4978      	ldr	r1, [pc, #480]	; (8011bb0 <etharp_query+0x268>)
 80119ce:	4613      	mov	r3, r2
 80119d0:	005b      	lsls	r3, r3, #1
 80119d2:	4413      	add	r3, r2
 80119d4:	00db      	lsls	r3, r3, #3
 80119d6:	440b      	add	r3, r1
 80119d8:	3314      	adds	r3, #20
 80119da:	781b      	ldrb	r3, [r3, #0]
 80119dc:	2b00      	cmp	r3, #0
 80119de:	d115      	bne.n	8011a0c <etharp_query+0xc4>
    is_new_entry = 1;
 80119e0:	2301      	movs	r3, #1
 80119e2:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 80119e4:	7c7a      	ldrb	r2, [r7, #17]
 80119e6:	4972      	ldr	r1, [pc, #456]	; (8011bb0 <etharp_query+0x268>)
 80119e8:	4613      	mov	r3, r2
 80119ea:	005b      	lsls	r3, r3, #1
 80119ec:	4413      	add	r3, r2
 80119ee:	00db      	lsls	r3, r3, #3
 80119f0:	440b      	add	r3, r1
 80119f2:	3314      	adds	r3, #20
 80119f4:	2201      	movs	r2, #1
 80119f6:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 80119f8:	7c7a      	ldrb	r2, [r7, #17]
 80119fa:	496d      	ldr	r1, [pc, #436]	; (8011bb0 <etharp_query+0x268>)
 80119fc:	4613      	mov	r3, r2
 80119fe:	005b      	lsls	r3, r3, #1
 8011a00:	4413      	add	r3, r2
 8011a02:	00db      	lsls	r3, r3, #3
 8011a04:	440b      	add	r3, r1
 8011a06:	3308      	adds	r3, #8
 8011a08:	68fa      	ldr	r2, [r7, #12]
 8011a0a:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8011a0c:	7c7a      	ldrb	r2, [r7, #17]
 8011a0e:	4968      	ldr	r1, [pc, #416]	; (8011bb0 <etharp_query+0x268>)
 8011a10:	4613      	mov	r3, r2
 8011a12:	005b      	lsls	r3, r3, #1
 8011a14:	4413      	add	r3, r2
 8011a16:	00db      	lsls	r3, r3, #3
 8011a18:	440b      	add	r3, r1
 8011a1a:	3314      	adds	r3, #20
 8011a1c:	781b      	ldrb	r3, [r3, #0]
 8011a1e:	2b01      	cmp	r3, #1
 8011a20:	d011      	beq.n	8011a46 <etharp_query+0xfe>
 8011a22:	7c7a      	ldrb	r2, [r7, #17]
 8011a24:	4962      	ldr	r1, [pc, #392]	; (8011bb0 <etharp_query+0x268>)
 8011a26:	4613      	mov	r3, r2
 8011a28:	005b      	lsls	r3, r3, #1
 8011a2a:	4413      	add	r3, r2
 8011a2c:	00db      	lsls	r3, r3, #3
 8011a2e:	440b      	add	r3, r1
 8011a30:	3314      	adds	r3, #20
 8011a32:	781b      	ldrb	r3, [r3, #0]
 8011a34:	2b01      	cmp	r3, #1
 8011a36:	d806      	bhi.n	8011a46 <etharp_query+0xfe>
 8011a38:	4b5a      	ldr	r3, [pc, #360]	; (8011ba4 <etharp_query+0x25c>)
 8011a3a:	f240 32cf 	movw	r2, #975	; 0x3cf
 8011a3e:	495d      	ldr	r1, [pc, #372]	; (8011bb4 <etharp_query+0x26c>)
 8011a40:	485a      	ldr	r0, [pc, #360]	; (8011bac <etharp_query+0x264>)
 8011a42:	f001 fe67 	bl	8013714 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8011a46:	6a3b      	ldr	r3, [r7, #32]
 8011a48:	2b00      	cmp	r3, #0
 8011a4a:	d102      	bne.n	8011a52 <etharp_query+0x10a>
 8011a4c:	687b      	ldr	r3, [r7, #4]
 8011a4e:	2b00      	cmp	r3, #0
 8011a50:	d10c      	bne.n	8011a6c <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8011a52:	68b9      	ldr	r1, [r7, #8]
 8011a54:	68f8      	ldr	r0, [r7, #12]
 8011a56:	f000 f963 	bl	8011d20 <etharp_request>
 8011a5a:	4603      	mov	r3, r0
 8011a5c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8011a60:	687b      	ldr	r3, [r7, #4]
 8011a62:	2b00      	cmp	r3, #0
 8011a64:	d102      	bne.n	8011a6c <etharp_query+0x124>
      return result;
 8011a66:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8011a6a:	e097      	b.n	8011b9c <etharp_query+0x254>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8011a6c:	687b      	ldr	r3, [r7, #4]
 8011a6e:	2b00      	cmp	r3, #0
 8011a70:	d106      	bne.n	8011a80 <etharp_query+0x138>
 8011a72:	4b4c      	ldr	r3, [pc, #304]	; (8011ba4 <etharp_query+0x25c>)
 8011a74:	f240 32e1 	movw	r2, #993	; 0x3e1
 8011a78:	494f      	ldr	r1, [pc, #316]	; (8011bb8 <etharp_query+0x270>)
 8011a7a:	484c      	ldr	r0, [pc, #304]	; (8011bac <etharp_query+0x264>)
 8011a7c:	f001 fe4a 	bl	8013714 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8011a80:	7c7a      	ldrb	r2, [r7, #17]
 8011a82:	494b      	ldr	r1, [pc, #300]	; (8011bb0 <etharp_query+0x268>)
 8011a84:	4613      	mov	r3, r2
 8011a86:	005b      	lsls	r3, r3, #1
 8011a88:	4413      	add	r3, r2
 8011a8a:	00db      	lsls	r3, r3, #3
 8011a8c:	440b      	add	r3, r1
 8011a8e:	3314      	adds	r3, #20
 8011a90:	781b      	ldrb	r3, [r3, #0]
 8011a92:	2b01      	cmp	r3, #1
 8011a94:	d918      	bls.n	8011ac8 <etharp_query+0x180>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8011a96:	4a49      	ldr	r2, [pc, #292]	; (8011bbc <etharp_query+0x274>)
 8011a98:	7c7b      	ldrb	r3, [r7, #17]
 8011a9a:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8011a9c:	7c7a      	ldrb	r2, [r7, #17]
 8011a9e:	4613      	mov	r3, r2
 8011aa0:	005b      	lsls	r3, r3, #1
 8011aa2:	4413      	add	r3, r2
 8011aa4:	00db      	lsls	r3, r3, #3
 8011aa6:	3308      	adds	r3, #8
 8011aa8:	4a41      	ldr	r2, [pc, #260]	; (8011bb0 <etharp_query+0x268>)
 8011aaa:	4413      	add	r3, r2
 8011aac:	1d1a      	adds	r2, r3, #4
 8011aae:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8011ab2:	9300      	str	r3, [sp, #0]
 8011ab4:	4613      	mov	r3, r2
 8011ab6:	697a      	ldr	r2, [r7, #20]
 8011ab8:	6879      	ldr	r1, [r7, #4]
 8011aba:	68f8      	ldr	r0, [r7, #12]
 8011abc:	f001 fc86 	bl	80133cc <ethernet_output>
 8011ac0:	4603      	mov	r3, r0
 8011ac2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8011ac6:	e067      	b.n	8011b98 <etharp_query+0x250>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8011ac8:	7c7a      	ldrb	r2, [r7, #17]
 8011aca:	4939      	ldr	r1, [pc, #228]	; (8011bb0 <etharp_query+0x268>)
 8011acc:	4613      	mov	r3, r2
 8011ace:	005b      	lsls	r3, r3, #1
 8011ad0:	4413      	add	r3, r2
 8011ad2:	00db      	lsls	r3, r3, #3
 8011ad4:	440b      	add	r3, r1
 8011ad6:	3314      	adds	r3, #20
 8011ad8:	781b      	ldrb	r3, [r3, #0]
 8011ada:	2b01      	cmp	r3, #1
 8011adc:	d15c      	bne.n	8011b98 <etharp_query+0x250>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8011ade:	2300      	movs	r3, #0
 8011ae0:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8011ae2:	687b      	ldr	r3, [r7, #4]
 8011ae4:	61fb      	str	r3, [r7, #28]
    while (p) {
 8011ae6:	e01c      	b.n	8011b22 <etharp_query+0x1da>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8011ae8:	69fb      	ldr	r3, [r7, #28]
 8011aea:	895a      	ldrh	r2, [r3, #10]
 8011aec:	69fb      	ldr	r3, [r7, #28]
 8011aee:	891b      	ldrh	r3, [r3, #8]
 8011af0:	429a      	cmp	r2, r3
 8011af2:	d10a      	bne.n	8011b0a <etharp_query+0x1c2>
 8011af4:	69fb      	ldr	r3, [r7, #28]
 8011af6:	681b      	ldr	r3, [r3, #0]
 8011af8:	2b00      	cmp	r3, #0
 8011afa:	d006      	beq.n	8011b0a <etharp_query+0x1c2>
 8011afc:	4b29      	ldr	r3, [pc, #164]	; (8011ba4 <etharp_query+0x25c>)
 8011afe:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8011b02:	492f      	ldr	r1, [pc, #188]	; (8011bc0 <etharp_query+0x278>)
 8011b04:	4829      	ldr	r0, [pc, #164]	; (8011bac <etharp_query+0x264>)
 8011b06:	f001 fe05 	bl	8013714 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8011b0a:	69fb      	ldr	r3, [r7, #28]
 8011b0c:	7b1b      	ldrb	r3, [r3, #12]
 8011b0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011b12:	2b00      	cmp	r3, #0
 8011b14:	d002      	beq.n	8011b1c <etharp_query+0x1d4>
        copy_needed = 1;
 8011b16:	2301      	movs	r3, #1
 8011b18:	61bb      	str	r3, [r7, #24]
        break;
 8011b1a:	e005      	b.n	8011b28 <etharp_query+0x1e0>
      }
      p = p->next;
 8011b1c:	69fb      	ldr	r3, [r7, #28]
 8011b1e:	681b      	ldr	r3, [r3, #0]
 8011b20:	61fb      	str	r3, [r7, #28]
    while (p) {
 8011b22:	69fb      	ldr	r3, [r7, #28]
 8011b24:	2b00      	cmp	r3, #0
 8011b26:	d1df      	bne.n	8011ae8 <etharp_query+0x1a0>
    }
    if (copy_needed) {
 8011b28:	69bb      	ldr	r3, [r7, #24]
 8011b2a:	2b00      	cmp	r3, #0
 8011b2c:	d007      	beq.n	8011b3e <etharp_query+0x1f6>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8011b2e:	687a      	ldr	r2, [r7, #4]
 8011b30:	f44f 7120 	mov.w	r1, #640	; 0x280
 8011b34:	200e      	movs	r0, #14
 8011b36:	f7f7 fb53 	bl	80091e0 <pbuf_clone>
 8011b3a:	61f8      	str	r0, [r7, #28]
 8011b3c:	e004      	b.n	8011b48 <etharp_query+0x200>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8011b3e:	687b      	ldr	r3, [r7, #4]
 8011b40:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8011b42:	69f8      	ldr	r0, [r7, #28]
 8011b44:	f7f7 f97a 	bl	8008e3c <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8011b48:	69fb      	ldr	r3, [r7, #28]
 8011b4a:	2b00      	cmp	r3, #0
 8011b4c:	d021      	beq.n	8011b92 <etharp_query+0x24a>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8011b4e:	7c7a      	ldrb	r2, [r7, #17]
 8011b50:	4917      	ldr	r1, [pc, #92]	; (8011bb0 <etharp_query+0x268>)
 8011b52:	4613      	mov	r3, r2
 8011b54:	005b      	lsls	r3, r3, #1
 8011b56:	4413      	add	r3, r2
 8011b58:	00db      	lsls	r3, r3, #3
 8011b5a:	440b      	add	r3, r1
 8011b5c:	681b      	ldr	r3, [r3, #0]
 8011b5e:	2b00      	cmp	r3, #0
 8011b60:	d00a      	beq.n	8011b78 <etharp_query+0x230>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8011b62:	7c7a      	ldrb	r2, [r7, #17]
 8011b64:	4912      	ldr	r1, [pc, #72]	; (8011bb0 <etharp_query+0x268>)
 8011b66:	4613      	mov	r3, r2
 8011b68:	005b      	lsls	r3, r3, #1
 8011b6a:	4413      	add	r3, r2
 8011b6c:	00db      	lsls	r3, r3, #3
 8011b6e:	440b      	add	r3, r1
 8011b70:	681b      	ldr	r3, [r3, #0]
 8011b72:	4618      	mov	r0, r3
 8011b74:	f7f7 f8bc 	bl	8008cf0 <pbuf_free>
      }
      arp_table[i].q = p;
 8011b78:	7c7a      	ldrb	r2, [r7, #17]
 8011b7a:	490d      	ldr	r1, [pc, #52]	; (8011bb0 <etharp_query+0x268>)
 8011b7c:	4613      	mov	r3, r2
 8011b7e:	005b      	lsls	r3, r3, #1
 8011b80:	4413      	add	r3, r2
 8011b82:	00db      	lsls	r3, r3, #3
 8011b84:	440b      	add	r3, r1
 8011b86:	69fa      	ldr	r2, [r7, #28]
 8011b88:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8011b8a:	2300      	movs	r3, #0
 8011b8c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8011b90:	e002      	b.n	8011b98 <etharp_query+0x250>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8011b92:	23ff      	movs	r3, #255	; 0xff
 8011b94:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 8011b98:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8011b9c:	4618      	mov	r0, r3
 8011b9e:	3728      	adds	r7, #40	; 0x28
 8011ba0:	46bd      	mov	sp, r7
 8011ba2:	bd80      	pop	{r7, pc}
 8011ba4:	08016d9c 	.word	0x08016d9c
 8011ba8:	08016f48 	.word	0x08016f48
 8011bac:	08016e14 	.word	0x08016e14
 8011bb0:	200084ec 	.word	0x200084ec
 8011bb4:	08016f58 	.word	0x08016f58
 8011bb8:	08016f3c 	.word	0x08016f3c
 8011bbc:	200085dc 	.word	0x200085dc
 8011bc0:	08016f80 	.word	0x08016f80

08011bc4 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8011bc4:	b580      	push	{r7, lr}
 8011bc6:	b08a      	sub	sp, #40	; 0x28
 8011bc8:	af02      	add	r7, sp, #8
 8011bca:	60f8      	str	r0, [r7, #12]
 8011bcc:	60b9      	str	r1, [r7, #8]
 8011bce:	607a      	str	r2, [r7, #4]
 8011bd0:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8011bd2:	2300      	movs	r3, #0
 8011bd4:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8011bd6:	68fb      	ldr	r3, [r7, #12]
 8011bd8:	2b00      	cmp	r3, #0
 8011bda:	d106      	bne.n	8011bea <etharp_raw+0x26>
 8011bdc:	4b3a      	ldr	r3, [pc, #232]	; (8011cc8 <etharp_raw+0x104>)
 8011bde:	f240 4257 	movw	r2, #1111	; 0x457
 8011be2:	493a      	ldr	r1, [pc, #232]	; (8011ccc <etharp_raw+0x108>)
 8011be4:	483a      	ldr	r0, [pc, #232]	; (8011cd0 <etharp_raw+0x10c>)
 8011be6:	f001 fd95 	bl	8013714 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8011bea:	f44f 7220 	mov.w	r2, #640	; 0x280
 8011bee:	211c      	movs	r1, #28
 8011bf0:	200e      	movs	r0, #14
 8011bf2:	f7f6 fd9d 	bl	8008730 <pbuf_alloc>
 8011bf6:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8011bf8:	69bb      	ldr	r3, [r7, #24]
 8011bfa:	2b00      	cmp	r3, #0
 8011bfc:	d102      	bne.n	8011c04 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8011bfe:	f04f 33ff 	mov.w	r3, #4294967295
 8011c02:	e05d      	b.n	8011cc0 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8011c04:	69bb      	ldr	r3, [r7, #24]
 8011c06:	895b      	ldrh	r3, [r3, #10]
 8011c08:	2b1b      	cmp	r3, #27
 8011c0a:	d806      	bhi.n	8011c1a <etharp_raw+0x56>
 8011c0c:	4b2e      	ldr	r3, [pc, #184]	; (8011cc8 <etharp_raw+0x104>)
 8011c0e:	f240 4263 	movw	r2, #1123	; 0x463
 8011c12:	4930      	ldr	r1, [pc, #192]	; (8011cd4 <etharp_raw+0x110>)
 8011c14:	482e      	ldr	r0, [pc, #184]	; (8011cd0 <etharp_raw+0x10c>)
 8011c16:	f001 fd7d 	bl	8013714 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8011c1a:	69bb      	ldr	r3, [r7, #24]
 8011c1c:	685b      	ldr	r3, [r3, #4]
 8011c1e:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8011c20:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8011c22:	4618      	mov	r0, r3
 8011c24:	f7f5 fcb0 	bl	8007588 <lwip_htons>
 8011c28:	4603      	mov	r3, r0
 8011c2a:	461a      	mov	r2, r3
 8011c2c:	697b      	ldr	r3, [r7, #20]
 8011c2e:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8011c30:	68fb      	ldr	r3, [r7, #12]
 8011c32:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8011c36:	2b06      	cmp	r3, #6
 8011c38:	d006      	beq.n	8011c48 <etharp_raw+0x84>
 8011c3a:	4b23      	ldr	r3, [pc, #140]	; (8011cc8 <etharp_raw+0x104>)
 8011c3c:	f240 426a 	movw	r2, #1130	; 0x46a
 8011c40:	4925      	ldr	r1, [pc, #148]	; (8011cd8 <etharp_raw+0x114>)
 8011c42:	4823      	ldr	r0, [pc, #140]	; (8011cd0 <etharp_raw+0x10c>)
 8011c44:	f001 fd66 	bl	8013714 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8011c48:	697b      	ldr	r3, [r7, #20]
 8011c4a:	3308      	adds	r3, #8
 8011c4c:	2206      	movs	r2, #6
 8011c4e:	6839      	ldr	r1, [r7, #0]
 8011c50:	4618      	mov	r0, r3
 8011c52:	f001 fd4c 	bl	80136ee <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8011c56:	697b      	ldr	r3, [r7, #20]
 8011c58:	3312      	adds	r3, #18
 8011c5a:	2206      	movs	r2, #6
 8011c5c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011c5e:	4618      	mov	r0, r3
 8011c60:	f001 fd45 	bl	80136ee <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8011c64:	697b      	ldr	r3, [r7, #20]
 8011c66:	330e      	adds	r3, #14
 8011c68:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011c6a:	6812      	ldr	r2, [r2, #0]
 8011c6c:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8011c6e:	697b      	ldr	r3, [r7, #20]
 8011c70:	3318      	adds	r3, #24
 8011c72:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011c74:	6812      	ldr	r2, [r2, #0]
 8011c76:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8011c78:	697b      	ldr	r3, [r7, #20]
 8011c7a:	2200      	movs	r2, #0
 8011c7c:	701a      	strb	r2, [r3, #0]
 8011c7e:	2200      	movs	r2, #0
 8011c80:	f042 0201 	orr.w	r2, r2, #1
 8011c84:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8011c86:	697b      	ldr	r3, [r7, #20]
 8011c88:	2200      	movs	r2, #0
 8011c8a:	f042 0208 	orr.w	r2, r2, #8
 8011c8e:	709a      	strb	r2, [r3, #2]
 8011c90:	2200      	movs	r2, #0
 8011c92:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8011c94:	697b      	ldr	r3, [r7, #20]
 8011c96:	2206      	movs	r2, #6
 8011c98:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8011c9a:	697b      	ldr	r3, [r7, #20]
 8011c9c:	2204      	movs	r2, #4
 8011c9e:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8011ca0:	f640 0306 	movw	r3, #2054	; 0x806
 8011ca4:	9300      	str	r3, [sp, #0]
 8011ca6:	687b      	ldr	r3, [r7, #4]
 8011ca8:	68ba      	ldr	r2, [r7, #8]
 8011caa:	69b9      	ldr	r1, [r7, #24]
 8011cac:	68f8      	ldr	r0, [r7, #12]
 8011cae:	f001 fb8d 	bl	80133cc <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8011cb2:	69b8      	ldr	r0, [r7, #24]
 8011cb4:	f7f7 f81c 	bl	8008cf0 <pbuf_free>
  p = NULL;
 8011cb8:	2300      	movs	r3, #0
 8011cba:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8011cbc:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8011cc0:	4618      	mov	r0, r3
 8011cc2:	3720      	adds	r7, #32
 8011cc4:	46bd      	mov	sp, r7
 8011cc6:	bd80      	pop	{r7, pc}
 8011cc8:	08016d9c 	.word	0x08016d9c
 8011ccc:	08016eec 	.word	0x08016eec
 8011cd0:	08016e14 	.word	0x08016e14
 8011cd4:	08016f9c 	.word	0x08016f9c
 8011cd8:	08016fd0 	.word	0x08016fd0

08011cdc <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8011cdc:	b580      	push	{r7, lr}
 8011cde:	b088      	sub	sp, #32
 8011ce0:	af04      	add	r7, sp, #16
 8011ce2:	60f8      	str	r0, [r7, #12]
 8011ce4:	60b9      	str	r1, [r7, #8]
 8011ce6:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8011ce8:	68fb      	ldr	r3, [r7, #12]
 8011cea:	f103 012a 	add.w	r1, r3, #42	; 0x2a
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8011cee:	68fb      	ldr	r3, [r7, #12]
 8011cf0:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 8011cf4:	68fb      	ldr	r3, [r7, #12]
 8011cf6:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8011cf8:	2201      	movs	r2, #1
 8011cfa:	9203      	str	r2, [sp, #12]
 8011cfc:	68ba      	ldr	r2, [r7, #8]
 8011cfe:	9202      	str	r2, [sp, #8]
 8011d00:	4a06      	ldr	r2, [pc, #24]	; (8011d1c <etharp_request_dst+0x40>)
 8011d02:	9201      	str	r2, [sp, #4]
 8011d04:	9300      	str	r3, [sp, #0]
 8011d06:	4603      	mov	r3, r0
 8011d08:	687a      	ldr	r2, [r7, #4]
 8011d0a:	68f8      	ldr	r0, [r7, #12]
 8011d0c:	f7ff ff5a 	bl	8011bc4 <etharp_raw>
 8011d10:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8011d12:	4618      	mov	r0, r3
 8011d14:	3710      	adds	r7, #16
 8011d16:	46bd      	mov	sp, r7
 8011d18:	bd80      	pop	{r7, pc}
 8011d1a:	bf00      	nop
 8011d1c:	080175a8 	.word	0x080175a8

08011d20 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8011d20:	b580      	push	{r7, lr}
 8011d22:	b082      	sub	sp, #8
 8011d24:	af00      	add	r7, sp, #0
 8011d26:	6078      	str	r0, [r7, #4]
 8011d28:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8011d2a:	4a05      	ldr	r2, [pc, #20]	; (8011d40 <etharp_request+0x20>)
 8011d2c:	6839      	ldr	r1, [r7, #0]
 8011d2e:	6878      	ldr	r0, [r7, #4]
 8011d30:	f7ff ffd4 	bl	8011cdc <etharp_request_dst>
 8011d34:	4603      	mov	r3, r0
}
 8011d36:	4618      	mov	r0, r3
 8011d38:	3708      	adds	r7, #8
 8011d3a:	46bd      	mov	sp, r7
 8011d3c:	bd80      	pop	{r7, pc}
 8011d3e:	bf00      	nop
 8011d40:	080175a0 	.word	0x080175a0

08011d44 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8011d44:	b580      	push	{r7, lr}
 8011d46:	b08e      	sub	sp, #56	; 0x38
 8011d48:	af04      	add	r7, sp, #16
 8011d4a:	6078      	str	r0, [r7, #4]
 8011d4c:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8011d4e:	4b79      	ldr	r3, [pc, #484]	; (8011f34 <icmp_input+0x1f0>)
 8011d50:	689b      	ldr	r3, [r3, #8]
 8011d52:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8011d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d56:	781b      	ldrb	r3, [r3, #0]
 8011d58:	f003 030f 	and.w	r3, r3, #15
 8011d5c:	b2db      	uxtb	r3, r3
 8011d5e:	009b      	lsls	r3, r3, #2
 8011d60:	b2db      	uxtb	r3, r3
 8011d62:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 8011d64:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011d66:	2b13      	cmp	r3, #19
 8011d68:	f240 80cd 	bls.w	8011f06 <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8011d6c:	687b      	ldr	r3, [r7, #4]
 8011d6e:	895b      	ldrh	r3, [r3, #10]
 8011d70:	2b03      	cmp	r3, #3
 8011d72:	f240 80ca 	bls.w	8011f0a <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8011d76:	687b      	ldr	r3, [r7, #4]
 8011d78:	685b      	ldr	r3, [r3, #4]
 8011d7a:	781b      	ldrb	r3, [r3, #0]
 8011d7c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8011d80:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8011d84:	2b00      	cmp	r3, #0
 8011d86:	f000 80b7 	beq.w	8011ef8 <icmp_input+0x1b4>
 8011d8a:	2b08      	cmp	r3, #8
 8011d8c:	f040 80b7 	bne.w	8011efe <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8011d90:	4b69      	ldr	r3, [pc, #420]	; (8011f38 <icmp_input+0x1f4>)
 8011d92:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8011d94:	4b67      	ldr	r3, [pc, #412]	; (8011f34 <icmp_input+0x1f0>)
 8011d96:	695b      	ldr	r3, [r3, #20]
 8011d98:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8011d9c:	2be0      	cmp	r3, #224	; 0xe0
 8011d9e:	f000 80bb 	beq.w	8011f18 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8011da2:	4b64      	ldr	r3, [pc, #400]	; (8011f34 <icmp_input+0x1f0>)
 8011da4:	695a      	ldr	r2, [r3, #20]
 8011da6:	4b63      	ldr	r3, [pc, #396]	; (8011f34 <icmp_input+0x1f0>)
 8011da8:	681b      	ldr	r3, [r3, #0]
 8011daa:	4619      	mov	r1, r3
 8011dac:	4610      	mov	r0, r2
 8011dae:	f000 fc09 	bl	80125c4 <ip4_addr_isbroadcast_u32>
 8011db2:	4603      	mov	r3, r0
 8011db4:	2b00      	cmp	r3, #0
 8011db6:	f040 80b1 	bne.w	8011f1c <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8011dba:	687b      	ldr	r3, [r7, #4]
 8011dbc:	891b      	ldrh	r3, [r3, #8]
 8011dbe:	2b07      	cmp	r3, #7
 8011dc0:	f240 80a5 	bls.w	8011f0e <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8011dc4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011dc6:	330e      	adds	r3, #14
 8011dc8:	4619      	mov	r1, r3
 8011dca:	6878      	ldr	r0, [r7, #4]
 8011dcc:	f7f6 fefa 	bl	8008bc4 <pbuf_add_header>
 8011dd0:	4603      	mov	r3, r0
 8011dd2:	2b00      	cmp	r3, #0
 8011dd4:	d04b      	beq.n	8011e6e <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8011dd6:	687b      	ldr	r3, [r7, #4]
 8011dd8:	891a      	ldrh	r2, [r3, #8]
 8011dda:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011ddc:	4413      	add	r3, r2
 8011dde:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8011de0:	687b      	ldr	r3, [r7, #4]
 8011de2:	891b      	ldrh	r3, [r3, #8]
 8011de4:	8b7a      	ldrh	r2, [r7, #26]
 8011de6:	429a      	cmp	r2, r3
 8011de8:	f0c0 809a 	bcc.w	8011f20 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8011dec:	8b7b      	ldrh	r3, [r7, #26]
 8011dee:	f44f 7220 	mov.w	r2, #640	; 0x280
 8011df2:	4619      	mov	r1, r3
 8011df4:	200e      	movs	r0, #14
 8011df6:	f7f6 fc9b 	bl	8008730 <pbuf_alloc>
 8011dfa:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8011dfc:	697b      	ldr	r3, [r7, #20]
 8011dfe:	2b00      	cmp	r3, #0
 8011e00:	f000 8090 	beq.w	8011f24 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8011e04:	697b      	ldr	r3, [r7, #20]
 8011e06:	895b      	ldrh	r3, [r3, #10]
 8011e08:	461a      	mov	r2, r3
 8011e0a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011e0c:	3308      	adds	r3, #8
 8011e0e:	429a      	cmp	r2, r3
 8011e10:	d203      	bcs.n	8011e1a <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 8011e12:	6978      	ldr	r0, [r7, #20]
 8011e14:	f7f6 ff6c 	bl	8008cf0 <pbuf_free>
          goto icmperr;
 8011e18:	e085      	b.n	8011f26 <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8011e1a:	697b      	ldr	r3, [r7, #20]
 8011e1c:	685b      	ldr	r3, [r3, #4]
 8011e1e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8011e20:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8011e22:	4618      	mov	r0, r3
 8011e24:	f001 fc63 	bl	80136ee <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8011e28:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011e2a:	4619      	mov	r1, r3
 8011e2c:	6978      	ldr	r0, [r7, #20]
 8011e2e:	f7f6 fed9 	bl	8008be4 <pbuf_remove_header>
 8011e32:	4603      	mov	r3, r0
 8011e34:	2b00      	cmp	r3, #0
 8011e36:	d009      	beq.n	8011e4c <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8011e38:	4b40      	ldr	r3, [pc, #256]	; (8011f3c <icmp_input+0x1f8>)
 8011e3a:	22b6      	movs	r2, #182	; 0xb6
 8011e3c:	4940      	ldr	r1, [pc, #256]	; (8011f40 <icmp_input+0x1fc>)
 8011e3e:	4841      	ldr	r0, [pc, #260]	; (8011f44 <icmp_input+0x200>)
 8011e40:	f001 fc68 	bl	8013714 <iprintf>
          pbuf_free(r);
 8011e44:	6978      	ldr	r0, [r7, #20]
 8011e46:	f7f6 ff53 	bl	8008cf0 <pbuf_free>
          goto icmperr;
 8011e4a:	e06c      	b.n	8011f26 <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8011e4c:	6879      	ldr	r1, [r7, #4]
 8011e4e:	6978      	ldr	r0, [r7, #20]
 8011e50:	f7f7 f882 	bl	8008f58 <pbuf_copy>
 8011e54:	4603      	mov	r3, r0
 8011e56:	2b00      	cmp	r3, #0
 8011e58:	d003      	beq.n	8011e62 <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8011e5a:	6978      	ldr	r0, [r7, #20]
 8011e5c:	f7f6 ff48 	bl	8008cf0 <pbuf_free>
          goto icmperr;
 8011e60:	e061      	b.n	8011f26 <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 8011e62:	6878      	ldr	r0, [r7, #4]
 8011e64:	f7f6 ff44 	bl	8008cf0 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8011e68:	697b      	ldr	r3, [r7, #20]
 8011e6a:	607b      	str	r3, [r7, #4]
 8011e6c:	e00f      	b.n	8011e8e <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8011e6e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011e70:	330e      	adds	r3, #14
 8011e72:	4619      	mov	r1, r3
 8011e74:	6878      	ldr	r0, [r7, #4]
 8011e76:	f7f6 feb5 	bl	8008be4 <pbuf_remove_header>
 8011e7a:	4603      	mov	r3, r0
 8011e7c:	2b00      	cmp	r3, #0
 8011e7e:	d006      	beq.n	8011e8e <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8011e80:	4b2e      	ldr	r3, [pc, #184]	; (8011f3c <icmp_input+0x1f8>)
 8011e82:	22c7      	movs	r2, #199	; 0xc7
 8011e84:	4930      	ldr	r1, [pc, #192]	; (8011f48 <icmp_input+0x204>)
 8011e86:	482f      	ldr	r0, [pc, #188]	; (8011f44 <icmp_input+0x200>)
 8011e88:	f001 fc44 	bl	8013714 <iprintf>
          goto icmperr;
 8011e8c:	e04b      	b.n	8011f26 <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 8011e8e:	687b      	ldr	r3, [r7, #4]
 8011e90:	685b      	ldr	r3, [r3, #4]
 8011e92:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8011e94:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011e96:	4619      	mov	r1, r3
 8011e98:	6878      	ldr	r0, [r7, #4]
 8011e9a:	f7f6 fe93 	bl	8008bc4 <pbuf_add_header>
 8011e9e:	4603      	mov	r3, r0
 8011ea0:	2b00      	cmp	r3, #0
 8011ea2:	d12b      	bne.n	8011efc <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8011ea4:	687b      	ldr	r3, [r7, #4]
 8011ea6:	685b      	ldr	r3, [r3, #4]
 8011ea8:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8011eaa:	69fb      	ldr	r3, [r7, #28]
 8011eac:	681a      	ldr	r2, [r3, #0]
 8011eae:	68fb      	ldr	r3, [r7, #12]
 8011eb0:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8011eb2:	4b20      	ldr	r3, [pc, #128]	; (8011f34 <icmp_input+0x1f0>)
 8011eb4:	691a      	ldr	r2, [r3, #16]
 8011eb6:	68fb      	ldr	r3, [r7, #12]
 8011eb8:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8011eba:	693b      	ldr	r3, [r7, #16]
 8011ebc:	2200      	movs	r2, #0
 8011ebe:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 8011ec0:	693b      	ldr	r3, [r7, #16]
 8011ec2:	2200      	movs	r2, #0
 8011ec4:	709a      	strb	r2, [r3, #2]
 8011ec6:	2200      	movs	r2, #0
 8011ec8:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8011eca:	68fb      	ldr	r3, [r7, #12]
 8011ecc:	22ff      	movs	r2, #255	; 0xff
 8011ece:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8011ed0:	68fb      	ldr	r3, [r7, #12]
 8011ed2:	2200      	movs	r2, #0
 8011ed4:	729a      	strb	r2, [r3, #10]
 8011ed6:	2200      	movs	r2, #0
 8011ed8:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8011eda:	683b      	ldr	r3, [r7, #0]
 8011edc:	9302      	str	r3, [sp, #8]
 8011ede:	2301      	movs	r3, #1
 8011ee0:	9301      	str	r3, [sp, #4]
 8011ee2:	2300      	movs	r3, #0
 8011ee4:	9300      	str	r3, [sp, #0]
 8011ee6:	23ff      	movs	r3, #255	; 0xff
 8011ee8:	2200      	movs	r2, #0
 8011eea:	69f9      	ldr	r1, [r7, #28]
 8011eec:	6878      	ldr	r0, [r7, #4]
 8011eee:	f000 fa91 	bl	8012414 <ip4_output_if>
 8011ef2:	4603      	mov	r3, r0
 8011ef4:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8011ef6:	e001      	b.n	8011efc <icmp_input+0x1b8>
      break;
 8011ef8:	bf00      	nop
 8011efa:	e000      	b.n	8011efe <icmp_input+0x1ba>
      break;
 8011efc:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8011efe:	6878      	ldr	r0, [r7, #4]
 8011f00:	f7f6 fef6 	bl	8008cf0 <pbuf_free>
  return;
 8011f04:	e013      	b.n	8011f2e <icmp_input+0x1ea>
    goto lenerr;
 8011f06:	bf00      	nop
 8011f08:	e002      	b.n	8011f10 <icmp_input+0x1cc>
    goto lenerr;
 8011f0a:	bf00      	nop
 8011f0c:	e000      	b.n	8011f10 <icmp_input+0x1cc>
        goto lenerr;
 8011f0e:	bf00      	nop
lenerr:
  pbuf_free(p);
 8011f10:	6878      	ldr	r0, [r7, #4]
 8011f12:	f7f6 feed 	bl	8008cf0 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8011f16:	e00a      	b.n	8011f2e <icmp_input+0x1ea>
        goto icmperr;
 8011f18:	bf00      	nop
 8011f1a:	e004      	b.n	8011f26 <icmp_input+0x1e2>
        goto icmperr;
 8011f1c:	bf00      	nop
 8011f1e:	e002      	b.n	8011f26 <icmp_input+0x1e2>
          goto icmperr;
 8011f20:	bf00      	nop
 8011f22:	e000      	b.n	8011f26 <icmp_input+0x1e2>
          goto icmperr;
 8011f24:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8011f26:	6878      	ldr	r0, [r7, #4]
 8011f28:	f7f6 fee2 	bl	8008cf0 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8011f2c:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8011f2e:	3728      	adds	r7, #40	; 0x28
 8011f30:	46bd      	mov	sp, r7
 8011f32:	bd80      	pop	{r7, pc}
 8011f34:	2000b7b0 	.word	0x2000b7b0
 8011f38:	2000b7c4 	.word	0x2000b7c4
 8011f3c:	08017014 	.word	0x08017014
 8011f40:	0801704c 	.word	0x0801704c
 8011f44:	08017084 	.word	0x08017084
 8011f48:	080170ac 	.word	0x080170ac

08011f4c <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8011f4c:	b580      	push	{r7, lr}
 8011f4e:	b082      	sub	sp, #8
 8011f50:	af00      	add	r7, sp, #0
 8011f52:	6078      	str	r0, [r7, #4]
 8011f54:	460b      	mov	r3, r1
 8011f56:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8011f58:	78fb      	ldrb	r3, [r7, #3]
 8011f5a:	461a      	mov	r2, r3
 8011f5c:	2103      	movs	r1, #3
 8011f5e:	6878      	ldr	r0, [r7, #4]
 8011f60:	f000 f814 	bl	8011f8c <icmp_send_response>
}
 8011f64:	bf00      	nop
 8011f66:	3708      	adds	r7, #8
 8011f68:	46bd      	mov	sp, r7
 8011f6a:	bd80      	pop	{r7, pc}

08011f6c <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8011f6c:	b580      	push	{r7, lr}
 8011f6e:	b082      	sub	sp, #8
 8011f70:	af00      	add	r7, sp, #0
 8011f72:	6078      	str	r0, [r7, #4]
 8011f74:	460b      	mov	r3, r1
 8011f76:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8011f78:	78fb      	ldrb	r3, [r7, #3]
 8011f7a:	461a      	mov	r2, r3
 8011f7c:	210b      	movs	r1, #11
 8011f7e:	6878      	ldr	r0, [r7, #4]
 8011f80:	f000 f804 	bl	8011f8c <icmp_send_response>
}
 8011f84:	bf00      	nop
 8011f86:	3708      	adds	r7, #8
 8011f88:	46bd      	mov	sp, r7
 8011f8a:	bd80      	pop	{r7, pc}

08011f8c <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8011f8c:	b580      	push	{r7, lr}
 8011f8e:	b08c      	sub	sp, #48	; 0x30
 8011f90:	af04      	add	r7, sp, #16
 8011f92:	6078      	str	r0, [r7, #4]
 8011f94:	460b      	mov	r3, r1
 8011f96:	70fb      	strb	r3, [r7, #3]
 8011f98:	4613      	mov	r3, r2
 8011f9a:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8011f9c:	f44f 7220 	mov.w	r2, #640	; 0x280
 8011fa0:	2124      	movs	r1, #36	; 0x24
 8011fa2:	2022      	movs	r0, #34	; 0x22
 8011fa4:	f7f6 fbc4 	bl	8008730 <pbuf_alloc>
 8011fa8:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8011faa:	69fb      	ldr	r3, [r7, #28]
 8011fac:	2b00      	cmp	r3, #0
 8011fae:	d04c      	beq.n	801204a <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8011fb0:	69fb      	ldr	r3, [r7, #28]
 8011fb2:	895b      	ldrh	r3, [r3, #10]
 8011fb4:	2b23      	cmp	r3, #35	; 0x23
 8011fb6:	d806      	bhi.n	8011fc6 <icmp_send_response+0x3a>
 8011fb8:	4b26      	ldr	r3, [pc, #152]	; (8012054 <icmp_send_response+0xc8>)
 8011fba:	f240 1269 	movw	r2, #361	; 0x169
 8011fbe:	4926      	ldr	r1, [pc, #152]	; (8012058 <icmp_send_response+0xcc>)
 8011fc0:	4826      	ldr	r0, [pc, #152]	; (801205c <icmp_send_response+0xd0>)
 8011fc2:	f001 fba7 	bl	8013714 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8011fc6:	687b      	ldr	r3, [r7, #4]
 8011fc8:	685b      	ldr	r3, [r3, #4]
 8011fca:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8011fcc:	69fb      	ldr	r3, [r7, #28]
 8011fce:	685b      	ldr	r3, [r3, #4]
 8011fd0:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8011fd2:	697b      	ldr	r3, [r7, #20]
 8011fd4:	78fa      	ldrb	r2, [r7, #3]
 8011fd6:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8011fd8:	697b      	ldr	r3, [r7, #20]
 8011fda:	78ba      	ldrb	r2, [r7, #2]
 8011fdc:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8011fde:	697b      	ldr	r3, [r7, #20]
 8011fe0:	2200      	movs	r2, #0
 8011fe2:	711a      	strb	r2, [r3, #4]
 8011fe4:	2200      	movs	r2, #0
 8011fe6:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8011fe8:	697b      	ldr	r3, [r7, #20]
 8011fea:	2200      	movs	r2, #0
 8011fec:	719a      	strb	r2, [r3, #6]
 8011fee:	2200      	movs	r2, #0
 8011ff0:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8011ff2:	69fb      	ldr	r3, [r7, #28]
 8011ff4:	685b      	ldr	r3, [r3, #4]
 8011ff6:	f103 0008 	add.w	r0, r3, #8
 8011ffa:	687b      	ldr	r3, [r7, #4]
 8011ffc:	685b      	ldr	r3, [r3, #4]
 8011ffe:	221c      	movs	r2, #28
 8012000:	4619      	mov	r1, r3
 8012002:	f001 fb74 	bl	80136ee <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8012006:	69bb      	ldr	r3, [r7, #24]
 8012008:	68db      	ldr	r3, [r3, #12]
 801200a:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 801200c:	f107 030c 	add.w	r3, r7, #12
 8012010:	4618      	mov	r0, r3
 8012012:	f000 f825 	bl	8012060 <ip4_route>
 8012016:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8012018:	693b      	ldr	r3, [r7, #16]
 801201a:	2b00      	cmp	r3, #0
 801201c:	d011      	beq.n	8012042 <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 801201e:	697b      	ldr	r3, [r7, #20]
 8012020:	2200      	movs	r2, #0
 8012022:	709a      	strb	r2, [r3, #2]
 8012024:	2200      	movs	r2, #0
 8012026:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8012028:	f107 020c 	add.w	r2, r7, #12
 801202c:	693b      	ldr	r3, [r7, #16]
 801202e:	9302      	str	r3, [sp, #8]
 8012030:	2301      	movs	r3, #1
 8012032:	9301      	str	r3, [sp, #4]
 8012034:	2300      	movs	r3, #0
 8012036:	9300      	str	r3, [sp, #0]
 8012038:	23ff      	movs	r3, #255	; 0xff
 801203a:	2100      	movs	r1, #0
 801203c:	69f8      	ldr	r0, [r7, #28]
 801203e:	f000 f9e9 	bl	8012414 <ip4_output_if>
  }
  pbuf_free(q);
 8012042:	69f8      	ldr	r0, [r7, #28]
 8012044:	f7f6 fe54 	bl	8008cf0 <pbuf_free>
 8012048:	e000      	b.n	801204c <icmp_send_response+0xc0>
    return;
 801204a:	bf00      	nop
}
 801204c:	3720      	adds	r7, #32
 801204e:	46bd      	mov	sp, r7
 8012050:	bd80      	pop	{r7, pc}
 8012052:	bf00      	nop
 8012054:	08017014 	.word	0x08017014
 8012058:	080170e0 	.word	0x080170e0
 801205c:	08017084 	.word	0x08017084

08012060 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8012060:	b480      	push	{r7}
 8012062:	b085      	sub	sp, #20
 8012064:	af00      	add	r7, sp, #0
 8012066:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8012068:	4b33      	ldr	r3, [pc, #204]	; (8012138 <ip4_route+0xd8>)
 801206a:	681b      	ldr	r3, [r3, #0]
 801206c:	60fb      	str	r3, [r7, #12]
 801206e:	e036      	b.n	80120de <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8012070:	68fb      	ldr	r3, [r7, #12]
 8012072:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8012076:	f003 0301 	and.w	r3, r3, #1
 801207a:	b2db      	uxtb	r3, r3
 801207c:	2b00      	cmp	r3, #0
 801207e:	d02b      	beq.n	80120d8 <ip4_route+0x78>
 8012080:	68fb      	ldr	r3, [r7, #12]
 8012082:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8012086:	089b      	lsrs	r3, r3, #2
 8012088:	f003 0301 	and.w	r3, r3, #1
 801208c:	b2db      	uxtb	r3, r3
 801208e:	2b00      	cmp	r3, #0
 8012090:	d022      	beq.n	80120d8 <ip4_route+0x78>
 8012092:	68fb      	ldr	r3, [r7, #12]
 8012094:	3304      	adds	r3, #4
 8012096:	681b      	ldr	r3, [r3, #0]
 8012098:	2b00      	cmp	r3, #0
 801209a:	d01d      	beq.n	80120d8 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 801209c:	687b      	ldr	r3, [r7, #4]
 801209e:	681a      	ldr	r2, [r3, #0]
 80120a0:	68fb      	ldr	r3, [r7, #12]
 80120a2:	3304      	adds	r3, #4
 80120a4:	681b      	ldr	r3, [r3, #0]
 80120a6:	405a      	eors	r2, r3
 80120a8:	68fb      	ldr	r3, [r7, #12]
 80120aa:	3308      	adds	r3, #8
 80120ac:	681b      	ldr	r3, [r3, #0]
 80120ae:	4013      	ands	r3, r2
 80120b0:	2b00      	cmp	r3, #0
 80120b2:	d101      	bne.n	80120b8 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 80120b4:	68fb      	ldr	r3, [r7, #12]
 80120b6:	e038      	b.n	801212a <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 80120b8:	68fb      	ldr	r3, [r7, #12]
 80120ba:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80120be:	f003 0302 	and.w	r3, r3, #2
 80120c2:	2b00      	cmp	r3, #0
 80120c4:	d108      	bne.n	80120d8 <ip4_route+0x78>
 80120c6:	687b      	ldr	r3, [r7, #4]
 80120c8:	681a      	ldr	r2, [r3, #0]
 80120ca:	68fb      	ldr	r3, [r7, #12]
 80120cc:	330c      	adds	r3, #12
 80120ce:	681b      	ldr	r3, [r3, #0]
 80120d0:	429a      	cmp	r2, r3
 80120d2:	d101      	bne.n	80120d8 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 80120d4:	68fb      	ldr	r3, [r7, #12]
 80120d6:	e028      	b.n	801212a <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 80120d8:	68fb      	ldr	r3, [r7, #12]
 80120da:	681b      	ldr	r3, [r3, #0]
 80120dc:	60fb      	str	r3, [r7, #12]
 80120de:	68fb      	ldr	r3, [r7, #12]
 80120e0:	2b00      	cmp	r3, #0
 80120e2:	d1c5      	bne.n	8012070 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80120e4:	4b15      	ldr	r3, [pc, #84]	; (801213c <ip4_route+0xdc>)
 80120e6:	681b      	ldr	r3, [r3, #0]
 80120e8:	2b00      	cmp	r3, #0
 80120ea:	d01a      	beq.n	8012122 <ip4_route+0xc2>
 80120ec:	4b13      	ldr	r3, [pc, #76]	; (801213c <ip4_route+0xdc>)
 80120ee:	681b      	ldr	r3, [r3, #0]
 80120f0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80120f4:	f003 0301 	and.w	r3, r3, #1
 80120f8:	2b00      	cmp	r3, #0
 80120fa:	d012      	beq.n	8012122 <ip4_route+0xc2>
 80120fc:	4b0f      	ldr	r3, [pc, #60]	; (801213c <ip4_route+0xdc>)
 80120fe:	681b      	ldr	r3, [r3, #0]
 8012100:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8012104:	f003 0304 	and.w	r3, r3, #4
 8012108:	2b00      	cmp	r3, #0
 801210a:	d00a      	beq.n	8012122 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 801210c:	4b0b      	ldr	r3, [pc, #44]	; (801213c <ip4_route+0xdc>)
 801210e:	681b      	ldr	r3, [r3, #0]
 8012110:	3304      	adds	r3, #4
 8012112:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8012114:	2b00      	cmp	r3, #0
 8012116:	d004      	beq.n	8012122 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8012118:	687b      	ldr	r3, [r7, #4]
 801211a:	681b      	ldr	r3, [r3, #0]
 801211c:	b2db      	uxtb	r3, r3
 801211e:	2b7f      	cmp	r3, #127	; 0x7f
 8012120:	d101      	bne.n	8012126 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8012122:	2300      	movs	r3, #0
 8012124:	e001      	b.n	801212a <ip4_route+0xca>
  }

  return netif_default;
 8012126:	4b05      	ldr	r3, [pc, #20]	; (801213c <ip4_route+0xdc>)
 8012128:	681b      	ldr	r3, [r3, #0]
}
 801212a:	4618      	mov	r0, r3
 801212c:	3714      	adds	r7, #20
 801212e:	46bd      	mov	sp, r7
 8012130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012134:	4770      	bx	lr
 8012136:	bf00      	nop
 8012138:	2000eed4 	.word	0x2000eed4
 801213c:	2000eed8 	.word	0x2000eed8

08012140 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8012140:	b580      	push	{r7, lr}
 8012142:	b082      	sub	sp, #8
 8012144:	af00      	add	r7, sp, #0
 8012146:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8012148:	687b      	ldr	r3, [r7, #4]
 801214a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801214e:	f003 0301 	and.w	r3, r3, #1
 8012152:	b2db      	uxtb	r3, r3
 8012154:	2b00      	cmp	r3, #0
 8012156:	d016      	beq.n	8012186 <ip4_input_accept+0x46>
 8012158:	687b      	ldr	r3, [r7, #4]
 801215a:	3304      	adds	r3, #4
 801215c:	681b      	ldr	r3, [r3, #0]
 801215e:	2b00      	cmp	r3, #0
 8012160:	d011      	beq.n	8012186 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8012162:	4b0b      	ldr	r3, [pc, #44]	; (8012190 <ip4_input_accept+0x50>)
 8012164:	695a      	ldr	r2, [r3, #20]
 8012166:	687b      	ldr	r3, [r7, #4]
 8012168:	3304      	adds	r3, #4
 801216a:	681b      	ldr	r3, [r3, #0]
 801216c:	429a      	cmp	r2, r3
 801216e:	d008      	beq.n	8012182 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8012170:	4b07      	ldr	r3, [pc, #28]	; (8012190 <ip4_input_accept+0x50>)
 8012172:	695b      	ldr	r3, [r3, #20]
 8012174:	6879      	ldr	r1, [r7, #4]
 8012176:	4618      	mov	r0, r3
 8012178:	f000 fa24 	bl	80125c4 <ip4_addr_isbroadcast_u32>
 801217c:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801217e:	2b00      	cmp	r3, #0
 8012180:	d001      	beq.n	8012186 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8012182:	2301      	movs	r3, #1
 8012184:	e000      	b.n	8012188 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8012186:	2300      	movs	r3, #0
}
 8012188:	4618      	mov	r0, r3
 801218a:	3708      	adds	r7, #8
 801218c:	46bd      	mov	sp, r7
 801218e:	bd80      	pop	{r7, pc}
 8012190:	2000b7b0 	.word	0x2000b7b0

08012194 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8012194:	b580      	push	{r7, lr}
 8012196:	b088      	sub	sp, #32
 8012198:	af00      	add	r7, sp, #0
 801219a:	6078      	str	r0, [r7, #4]
 801219c:	6039      	str	r1, [r7, #0]
  const struct ip_hdr *iphdr;
  struct netif *netif;
  u16_t iphdr_hlen;
  u16_t iphdr_len;
#if IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP
  int check_ip_src = 1;
 801219e:	2301      	movs	r3, #1
 80121a0:	617b      	str	r3, [r7, #20]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 80121a2:	687b      	ldr	r3, [r7, #4]
 80121a4:	685b      	ldr	r3, [r3, #4]
 80121a6:	61fb      	str	r3, [r7, #28]
  if (IPH_V(iphdr) != 4) {
 80121a8:	69fb      	ldr	r3, [r7, #28]
 80121aa:	781b      	ldrb	r3, [r3, #0]
 80121ac:	091b      	lsrs	r3, r3, #4
 80121ae:	b2db      	uxtb	r3, r3
 80121b0:	2b04      	cmp	r3, #4
 80121b2:	d004      	beq.n	80121be <ip4_input+0x2a>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 80121b4:	6878      	ldr	r0, [r7, #4]
 80121b6:	f7f6 fd9b 	bl	8008cf0 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 80121ba:	2300      	movs	r3, #0
 80121bc:	e121      	b.n	8012402 <ip4_input+0x26e>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 80121be:	69fb      	ldr	r3, [r7, #28]
 80121c0:	781b      	ldrb	r3, [r3, #0]
 80121c2:	f003 030f 	and.w	r3, r3, #15
 80121c6:	b2db      	uxtb	r3, r3
 80121c8:	009b      	lsls	r3, r3, #2
 80121ca:	b2db      	uxtb	r3, r3
 80121cc:	827b      	strh	r3, [r7, #18]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 80121ce:	69fb      	ldr	r3, [r7, #28]
 80121d0:	885b      	ldrh	r3, [r3, #2]
 80121d2:	b29b      	uxth	r3, r3
 80121d4:	4618      	mov	r0, r3
 80121d6:	f7f5 f9d7 	bl	8007588 <lwip_htons>
 80121da:	4603      	mov	r3, r0
 80121dc:	823b      	strh	r3, [r7, #16]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 80121de:	687b      	ldr	r3, [r7, #4]
 80121e0:	891b      	ldrh	r3, [r3, #8]
 80121e2:	8a3a      	ldrh	r2, [r7, #16]
 80121e4:	429a      	cmp	r2, r3
 80121e6:	d204      	bcs.n	80121f2 <ip4_input+0x5e>
    pbuf_realloc(p, iphdr_len);
 80121e8:	8a3b      	ldrh	r3, [r7, #16]
 80121ea:	4619      	mov	r1, r3
 80121ec:	6878      	ldr	r0, [r7, #4]
 80121ee:	f7f6 fbf9 	bl	80089e4 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 80121f2:	687b      	ldr	r3, [r7, #4]
 80121f4:	895b      	ldrh	r3, [r3, #10]
 80121f6:	8a7a      	ldrh	r2, [r7, #18]
 80121f8:	429a      	cmp	r2, r3
 80121fa:	d807      	bhi.n	801220c <ip4_input+0x78>
 80121fc:	687b      	ldr	r3, [r7, #4]
 80121fe:	891b      	ldrh	r3, [r3, #8]
 8012200:	8a3a      	ldrh	r2, [r7, #16]
 8012202:	429a      	cmp	r2, r3
 8012204:	d802      	bhi.n	801220c <ip4_input+0x78>
 8012206:	8a7b      	ldrh	r3, [r7, #18]
 8012208:	2b13      	cmp	r3, #19
 801220a:	d804      	bhi.n	8012216 <ip4_input+0x82>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 801220c:	6878      	ldr	r0, [r7, #4]
 801220e:	f7f6 fd6f 	bl	8008cf0 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8012212:	2300      	movs	r3, #0
 8012214:	e0f5      	b.n	8012402 <ip4_input+0x26e>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8012216:	69fb      	ldr	r3, [r7, #28]
 8012218:	691b      	ldr	r3, [r3, #16]
 801221a:	4a7c      	ldr	r2, [pc, #496]	; (801240c <ip4_input+0x278>)
 801221c:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 801221e:	69fb      	ldr	r3, [r7, #28]
 8012220:	68db      	ldr	r3, [r3, #12]
 8012222:	4a7a      	ldr	r2, [pc, #488]	; (801240c <ip4_input+0x278>)
 8012224:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8012226:	4b79      	ldr	r3, [pc, #484]	; (801240c <ip4_input+0x278>)
 8012228:	695b      	ldr	r3, [r3, #20]
 801222a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801222e:	2be0      	cmp	r3, #224	; 0xe0
 8012230:	d112      	bne.n	8012258 <ip4_input+0xc4>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8012232:	683b      	ldr	r3, [r7, #0]
 8012234:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8012238:	f003 0301 	and.w	r3, r3, #1
 801223c:	b2db      	uxtb	r3, r3
 801223e:	2b00      	cmp	r3, #0
 8012240:	d007      	beq.n	8012252 <ip4_input+0xbe>
 8012242:	683b      	ldr	r3, [r7, #0]
 8012244:	3304      	adds	r3, #4
 8012246:	681b      	ldr	r3, [r3, #0]
 8012248:	2b00      	cmp	r3, #0
 801224a:	d002      	beq.n	8012252 <ip4_input+0xbe>
      netif = inp;
 801224c:	683b      	ldr	r3, [r7, #0]
 801224e:	61bb      	str	r3, [r7, #24]
 8012250:	e02a      	b.n	80122a8 <ip4_input+0x114>
    } else {
      netif = NULL;
 8012252:	2300      	movs	r3, #0
 8012254:	61bb      	str	r3, [r7, #24]
 8012256:	e027      	b.n	80122a8 <ip4_input+0x114>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8012258:	6838      	ldr	r0, [r7, #0]
 801225a:	f7ff ff71 	bl	8012140 <ip4_input_accept>
 801225e:	4603      	mov	r3, r0
 8012260:	2b00      	cmp	r3, #0
 8012262:	d002      	beq.n	801226a <ip4_input+0xd6>
      netif = inp;
 8012264:	683b      	ldr	r3, [r7, #0]
 8012266:	61bb      	str	r3, [r7, #24]
 8012268:	e01e      	b.n	80122a8 <ip4_input+0x114>
    } else {
      netif = NULL;
 801226a:	2300      	movs	r3, #0
 801226c:	61bb      	str	r3, [r7, #24]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 801226e:	4b67      	ldr	r3, [pc, #412]	; (801240c <ip4_input+0x278>)
 8012270:	695b      	ldr	r3, [r3, #20]
 8012272:	b2db      	uxtb	r3, r3
 8012274:	2b7f      	cmp	r3, #127	; 0x7f
 8012276:	d017      	beq.n	80122a8 <ip4_input+0x114>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8012278:	4b65      	ldr	r3, [pc, #404]	; (8012410 <ip4_input+0x27c>)
 801227a:	681b      	ldr	r3, [r3, #0]
 801227c:	61bb      	str	r3, [r7, #24]
 801227e:	e00e      	b.n	801229e <ip4_input+0x10a>
          if (netif == inp) {
 8012280:	69ba      	ldr	r2, [r7, #24]
 8012282:	683b      	ldr	r3, [r7, #0]
 8012284:	429a      	cmp	r2, r3
 8012286:	d006      	beq.n	8012296 <ip4_input+0x102>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8012288:	69b8      	ldr	r0, [r7, #24]
 801228a:	f7ff ff59 	bl	8012140 <ip4_input_accept>
 801228e:	4603      	mov	r3, r0
 8012290:	2b00      	cmp	r3, #0
 8012292:	d108      	bne.n	80122a6 <ip4_input+0x112>
 8012294:	e000      	b.n	8012298 <ip4_input+0x104>
            continue;
 8012296:	bf00      	nop
        NETIF_FOREACH(netif) {
 8012298:	69bb      	ldr	r3, [r7, #24]
 801229a:	681b      	ldr	r3, [r3, #0]
 801229c:	61bb      	str	r3, [r7, #24]
 801229e:	69bb      	ldr	r3, [r7, #24]
 80122a0:	2b00      	cmp	r3, #0
 80122a2:	d1ed      	bne.n	8012280 <ip4_input+0xec>
 80122a4:	e000      	b.n	80122a8 <ip4_input+0x114>
            break;
 80122a6:	bf00      	nop
   * If you want to accept private broadcast communication while a netif is down,
   * define LWIP_IP_ACCEPT_UDP_PORT(dst_port), e.g.:
   *
   * #define LWIP_IP_ACCEPT_UDP_PORT(dst_port) ((dst_port) == PP_NTOHS(12345))
   */
  if (netif == NULL) {
 80122a8:	69bb      	ldr	r3, [r7, #24]
 80122aa:	2b00      	cmp	r3, #0
 80122ac:	d111      	bne.n	80122d2 <ip4_input+0x13e>
    /* remote port is DHCP server? */
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 80122ae:	69fb      	ldr	r3, [r7, #28]
 80122b0:	7a5b      	ldrb	r3, [r3, #9]
 80122b2:	2b11      	cmp	r3, #17
 80122b4:	d10d      	bne.n	80122d2 <ip4_input+0x13e>
      const struct udp_hdr *udphdr = (const struct udp_hdr *)((const u8_t *)iphdr + iphdr_hlen);
 80122b6:	8a7b      	ldrh	r3, [r7, #18]
 80122b8:	69fa      	ldr	r2, [r7, #28]
 80122ba:	4413      	add	r3, r2
 80122bc:	60fb      	str	r3, [r7, #12]
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: UDP packet to DHCP client port %"U16_F"\n",
                                              lwip_ntohs(udphdr->dest)));
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 80122be:	68fb      	ldr	r3, [r7, #12]
 80122c0:	885b      	ldrh	r3, [r3, #2]
 80122c2:	b29b      	uxth	r3, r3
 80122c4:	f5b3 4f88 	cmp.w	r3, #17408	; 0x4400
 80122c8:	d103      	bne.n	80122d2 <ip4_input+0x13e>
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: DHCP packet accepted.\n"));
        netif = inp;
 80122ca:	683b      	ldr	r3, [r7, #0]
 80122cc:	61bb      	str	r3, [r7, #24]
        check_ip_src = 0;
 80122ce:	2300      	movs	r3, #0
 80122d0:	617b      	str	r3, [r7, #20]
  }
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */

  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING
  if (check_ip_src
 80122d2:	697b      	ldr	r3, [r7, #20]
 80122d4:	2b00      	cmp	r3, #0
 80122d6:	d017      	beq.n	8012308 <ip4_input+0x174>
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
      /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 80122d8:	4b4c      	ldr	r3, [pc, #304]	; (801240c <ip4_input+0x278>)
 80122da:	691b      	ldr	r3, [r3, #16]
 80122dc:	2b00      	cmp	r3, #0
 80122de:	d013      	beq.n	8012308 <ip4_input+0x174>
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 80122e0:	4b4a      	ldr	r3, [pc, #296]	; (801240c <ip4_input+0x278>)
 80122e2:	691b      	ldr	r3, [r3, #16]
 80122e4:	6839      	ldr	r1, [r7, #0]
 80122e6:	4618      	mov	r0, r3
 80122e8:	f000 f96c 	bl	80125c4 <ip4_addr_isbroadcast_u32>
 80122ec:	4603      	mov	r3, r0
 80122ee:	2b00      	cmp	r3, #0
 80122f0:	d105      	bne.n	80122fe <ip4_input+0x16a>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 80122f2:	4b46      	ldr	r3, [pc, #280]	; (801240c <ip4_input+0x278>)
 80122f4:	691b      	ldr	r3, [r3, #16]
 80122f6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 80122fa:	2be0      	cmp	r3, #224	; 0xe0
 80122fc:	d104      	bne.n	8012308 <ip4_input+0x174>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 80122fe:	6878      	ldr	r0, [r7, #4]
 8012300:	f7f6 fcf6 	bl	8008cf0 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8012304:	2300      	movs	r3, #0
 8012306:	e07c      	b.n	8012402 <ip4_input+0x26e>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8012308:	69bb      	ldr	r3, [r7, #24]
 801230a:	2b00      	cmp	r3, #0
 801230c:	d104      	bne.n	8012318 <ip4_input+0x184>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 801230e:	6878      	ldr	r0, [r7, #4]
 8012310:	f7f6 fcee 	bl	8008cf0 <pbuf_free>
    return ERR_OK;
 8012314:	2300      	movs	r3, #0
 8012316:	e074      	b.n	8012402 <ip4_input+0x26e>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8012318:	69fb      	ldr	r3, [r7, #28]
 801231a:	88db      	ldrh	r3, [r3, #6]
 801231c:	b29b      	uxth	r3, r3
 801231e:	461a      	mov	r2, r3
 8012320:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8012324:	4013      	ands	r3, r2
 8012326:	2b00      	cmp	r3, #0
 8012328:	d00b      	beq.n	8012342 <ip4_input+0x1ae>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 801232a:	6878      	ldr	r0, [r7, #4]
 801232c:	f000 fc90 	bl	8012c50 <ip4_reass>
 8012330:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8012332:	687b      	ldr	r3, [r7, #4]
 8012334:	2b00      	cmp	r3, #0
 8012336:	d101      	bne.n	801233c <ip4_input+0x1a8>
      return ERR_OK;
 8012338:	2300      	movs	r3, #0
 801233a:	e062      	b.n	8012402 <ip4_input+0x26e>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 801233c:	687b      	ldr	r3, [r7, #4]
 801233e:	685b      	ldr	r3, [r3, #4]
 8012340:	61fb      	str	r3, [r7, #28]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8012342:	4a32      	ldr	r2, [pc, #200]	; (801240c <ip4_input+0x278>)
 8012344:	69bb      	ldr	r3, [r7, #24]
 8012346:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8012348:	4a30      	ldr	r2, [pc, #192]	; (801240c <ip4_input+0x278>)
 801234a:	683b      	ldr	r3, [r7, #0]
 801234c:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 801234e:	4a2f      	ldr	r2, [pc, #188]	; (801240c <ip4_input+0x278>)
 8012350:	69fb      	ldr	r3, [r7, #28]
 8012352:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8012354:	69fb      	ldr	r3, [r7, #28]
 8012356:	781b      	ldrb	r3, [r3, #0]
 8012358:	f003 030f 	and.w	r3, r3, #15
 801235c:	b2db      	uxtb	r3, r3
 801235e:	009b      	lsls	r3, r3, #2
 8012360:	b2db      	uxtb	r3, r3
 8012362:	b29a      	uxth	r2, r3
 8012364:	4b29      	ldr	r3, [pc, #164]	; (801240c <ip4_input+0x278>)
 8012366:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8012368:	8a7b      	ldrh	r3, [r7, #18]
 801236a:	4619      	mov	r1, r3
 801236c:	6878      	ldr	r0, [r7, #4]
 801236e:	f7f6 fc39 	bl	8008be4 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8012372:	69fb      	ldr	r3, [r7, #28]
 8012374:	7a5b      	ldrb	r3, [r3, #9]
 8012376:	2b06      	cmp	r3, #6
 8012378:	d009      	beq.n	801238e <ip4_input+0x1fa>
 801237a:	2b11      	cmp	r3, #17
 801237c:	d002      	beq.n	8012384 <ip4_input+0x1f0>
 801237e:	2b01      	cmp	r3, #1
 8012380:	d00a      	beq.n	8012398 <ip4_input+0x204>
 8012382:	e00e      	b.n	80123a2 <ip4_input+0x20e>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8012384:	6839      	ldr	r1, [r7, #0]
 8012386:	6878      	ldr	r0, [r7, #4]
 8012388:	f7fc fadc 	bl	800e944 <udp_input>
        break;
 801238c:	e026      	b.n	80123dc <ip4_input+0x248>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 801238e:	6839      	ldr	r1, [r7, #0]
 8012390:	6878      	ldr	r0, [r7, #4]
 8012392:	f7f8 fae5 	bl	800a960 <tcp_input>
        break;
 8012396:	e021      	b.n	80123dc <ip4_input+0x248>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8012398:	6839      	ldr	r1, [r7, #0]
 801239a:	6878      	ldr	r0, [r7, #4]
 801239c:	f7ff fcd2 	bl	8011d44 <icmp_input>
        break;
 80123a0:	e01c      	b.n	80123dc <ip4_input+0x248>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 80123a2:	4b1a      	ldr	r3, [pc, #104]	; (801240c <ip4_input+0x278>)
 80123a4:	695b      	ldr	r3, [r3, #20]
 80123a6:	69b9      	ldr	r1, [r7, #24]
 80123a8:	4618      	mov	r0, r3
 80123aa:	f000 f90b 	bl	80125c4 <ip4_addr_isbroadcast_u32>
 80123ae:	4603      	mov	r3, r0
 80123b0:	2b00      	cmp	r3, #0
 80123b2:	d10f      	bne.n	80123d4 <ip4_input+0x240>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80123b4:	4b15      	ldr	r3, [pc, #84]	; (801240c <ip4_input+0x278>)
 80123b6:	695b      	ldr	r3, [r3, #20]
 80123b8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 80123bc:	2be0      	cmp	r3, #224	; 0xe0
 80123be:	d009      	beq.n	80123d4 <ip4_input+0x240>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 80123c0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80123c4:	4619      	mov	r1, r3
 80123c6:	6878      	ldr	r0, [r7, #4]
 80123c8:	f7f6 fc7f 	bl	8008cca <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 80123cc:	2102      	movs	r1, #2
 80123ce:	6878      	ldr	r0, [r7, #4]
 80123d0:	f7ff fdbc 	bl	8011f4c <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 80123d4:	6878      	ldr	r0, [r7, #4]
 80123d6:	f7f6 fc8b 	bl	8008cf0 <pbuf_free>
        break;
 80123da:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 80123dc:	4b0b      	ldr	r3, [pc, #44]	; (801240c <ip4_input+0x278>)
 80123de:	2200      	movs	r2, #0
 80123e0:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 80123e2:	4b0a      	ldr	r3, [pc, #40]	; (801240c <ip4_input+0x278>)
 80123e4:	2200      	movs	r2, #0
 80123e6:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 80123e8:	4b08      	ldr	r3, [pc, #32]	; (801240c <ip4_input+0x278>)
 80123ea:	2200      	movs	r2, #0
 80123ec:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 80123ee:	4b07      	ldr	r3, [pc, #28]	; (801240c <ip4_input+0x278>)
 80123f0:	2200      	movs	r2, #0
 80123f2:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 80123f4:	4b05      	ldr	r3, [pc, #20]	; (801240c <ip4_input+0x278>)
 80123f6:	2200      	movs	r2, #0
 80123f8:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 80123fa:	4b04      	ldr	r3, [pc, #16]	; (801240c <ip4_input+0x278>)
 80123fc:	2200      	movs	r2, #0
 80123fe:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8012400:	2300      	movs	r3, #0
}
 8012402:	4618      	mov	r0, r3
 8012404:	3720      	adds	r7, #32
 8012406:	46bd      	mov	sp, r7
 8012408:	bd80      	pop	{r7, pc}
 801240a:	bf00      	nop
 801240c:	2000b7b0 	.word	0x2000b7b0
 8012410:	2000eed4 	.word	0x2000eed4

08012414 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8012414:	b580      	push	{r7, lr}
 8012416:	b08a      	sub	sp, #40	; 0x28
 8012418:	af04      	add	r7, sp, #16
 801241a:	60f8      	str	r0, [r7, #12]
 801241c:	60b9      	str	r1, [r7, #8]
 801241e:	607a      	str	r2, [r7, #4]
 8012420:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8012422:	68bb      	ldr	r3, [r7, #8]
 8012424:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8012426:	687b      	ldr	r3, [r7, #4]
 8012428:	2b00      	cmp	r3, #0
 801242a:	d009      	beq.n	8012440 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 801242c:	68bb      	ldr	r3, [r7, #8]
 801242e:	2b00      	cmp	r3, #0
 8012430:	d003      	beq.n	801243a <ip4_output_if+0x26>
 8012432:	68bb      	ldr	r3, [r7, #8]
 8012434:	681b      	ldr	r3, [r3, #0]
 8012436:	2b00      	cmp	r3, #0
 8012438:	d102      	bne.n	8012440 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 801243a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801243c:	3304      	adds	r3, #4
 801243e:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8012440:	78fa      	ldrb	r2, [r7, #3]
 8012442:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012444:	9302      	str	r3, [sp, #8]
 8012446:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801244a:	9301      	str	r3, [sp, #4]
 801244c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8012450:	9300      	str	r3, [sp, #0]
 8012452:	4613      	mov	r3, r2
 8012454:	687a      	ldr	r2, [r7, #4]
 8012456:	6979      	ldr	r1, [r7, #20]
 8012458:	68f8      	ldr	r0, [r7, #12]
 801245a:	f000 f805 	bl	8012468 <ip4_output_if_src>
 801245e:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8012460:	4618      	mov	r0, r3
 8012462:	3718      	adds	r7, #24
 8012464:	46bd      	mov	sp, r7
 8012466:	bd80      	pop	{r7, pc}

08012468 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8012468:	b580      	push	{r7, lr}
 801246a:	b088      	sub	sp, #32
 801246c:	af00      	add	r7, sp, #0
 801246e:	60f8      	str	r0, [r7, #12]
 8012470:	60b9      	str	r1, [r7, #8]
 8012472:	607a      	str	r2, [r7, #4]
 8012474:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8012476:	68fb      	ldr	r3, [r7, #12]
 8012478:	7b9b      	ldrb	r3, [r3, #14]
 801247a:	2b01      	cmp	r3, #1
 801247c:	d006      	beq.n	801248c <ip4_output_if_src+0x24>
 801247e:	4b4b      	ldr	r3, [pc, #300]	; (80125ac <ip4_output_if_src+0x144>)
 8012480:	f44f 7255 	mov.w	r2, #852	; 0x354
 8012484:	494a      	ldr	r1, [pc, #296]	; (80125b0 <ip4_output_if_src+0x148>)
 8012486:	484b      	ldr	r0, [pc, #300]	; (80125b4 <ip4_output_if_src+0x14c>)
 8012488:	f001 f944 	bl	8013714 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 801248c:	687b      	ldr	r3, [r7, #4]
 801248e:	2b00      	cmp	r3, #0
 8012490:	d060      	beq.n	8012554 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8012492:	2314      	movs	r3, #20
 8012494:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8012496:	2114      	movs	r1, #20
 8012498:	68f8      	ldr	r0, [r7, #12]
 801249a:	f7f6 fb93 	bl	8008bc4 <pbuf_add_header>
 801249e:	4603      	mov	r3, r0
 80124a0:	2b00      	cmp	r3, #0
 80124a2:	d002      	beq.n	80124aa <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 80124a4:	f06f 0301 	mvn.w	r3, #1
 80124a8:	e07c      	b.n	80125a4 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 80124aa:	68fb      	ldr	r3, [r7, #12]
 80124ac:	685b      	ldr	r3, [r3, #4]
 80124ae:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 80124b0:	68fb      	ldr	r3, [r7, #12]
 80124b2:	895b      	ldrh	r3, [r3, #10]
 80124b4:	2b13      	cmp	r3, #19
 80124b6:	d806      	bhi.n	80124c6 <ip4_output_if_src+0x5e>
 80124b8:	4b3c      	ldr	r3, [pc, #240]	; (80125ac <ip4_output_if_src+0x144>)
 80124ba:	f240 3289 	movw	r2, #905	; 0x389
 80124be:	493e      	ldr	r1, [pc, #248]	; (80125b8 <ip4_output_if_src+0x150>)
 80124c0:	483c      	ldr	r0, [pc, #240]	; (80125b4 <ip4_output_if_src+0x14c>)
 80124c2:	f001 f927 	bl	8013714 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 80124c6:	69fb      	ldr	r3, [r7, #28]
 80124c8:	78fa      	ldrb	r2, [r7, #3]
 80124ca:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 80124cc:	69fb      	ldr	r3, [r7, #28]
 80124ce:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 80124d2:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 80124d4:	687b      	ldr	r3, [r7, #4]
 80124d6:	681a      	ldr	r2, [r3, #0]
 80124d8:	69fb      	ldr	r3, [r7, #28]
 80124da:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 80124dc:	8b7b      	ldrh	r3, [r7, #26]
 80124de:	089b      	lsrs	r3, r3, #2
 80124e0:	b29b      	uxth	r3, r3
 80124e2:	b2db      	uxtb	r3, r3
 80124e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80124e8:	b2da      	uxtb	r2, r3
 80124ea:	69fb      	ldr	r3, [r7, #28]
 80124ec:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 80124ee:	69fb      	ldr	r3, [r7, #28]
 80124f0:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80124f4:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 80124f6:	68fb      	ldr	r3, [r7, #12]
 80124f8:	891b      	ldrh	r3, [r3, #8]
 80124fa:	4618      	mov	r0, r3
 80124fc:	f7f5 f844 	bl	8007588 <lwip_htons>
 8012500:	4603      	mov	r3, r0
 8012502:	461a      	mov	r2, r3
 8012504:	69fb      	ldr	r3, [r7, #28]
 8012506:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8012508:	69fb      	ldr	r3, [r7, #28]
 801250a:	2200      	movs	r2, #0
 801250c:	719a      	strb	r2, [r3, #6]
 801250e:	2200      	movs	r2, #0
 8012510:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8012512:	4b2a      	ldr	r3, [pc, #168]	; (80125bc <ip4_output_if_src+0x154>)
 8012514:	881b      	ldrh	r3, [r3, #0]
 8012516:	4618      	mov	r0, r3
 8012518:	f7f5 f836 	bl	8007588 <lwip_htons>
 801251c:	4603      	mov	r3, r0
 801251e:	461a      	mov	r2, r3
 8012520:	69fb      	ldr	r3, [r7, #28]
 8012522:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8012524:	4b25      	ldr	r3, [pc, #148]	; (80125bc <ip4_output_if_src+0x154>)
 8012526:	881b      	ldrh	r3, [r3, #0]
 8012528:	3301      	adds	r3, #1
 801252a:	b29a      	uxth	r2, r3
 801252c:	4b23      	ldr	r3, [pc, #140]	; (80125bc <ip4_output_if_src+0x154>)
 801252e:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8012530:	68bb      	ldr	r3, [r7, #8]
 8012532:	2b00      	cmp	r3, #0
 8012534:	d104      	bne.n	8012540 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8012536:	4b22      	ldr	r3, [pc, #136]	; (80125c0 <ip4_output_if_src+0x158>)
 8012538:	681a      	ldr	r2, [r3, #0]
 801253a:	69fb      	ldr	r3, [r7, #28]
 801253c:	60da      	str	r2, [r3, #12]
 801253e:	e003      	b.n	8012548 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8012540:	68bb      	ldr	r3, [r7, #8]
 8012542:	681a      	ldr	r2, [r3, #0]
 8012544:	69fb      	ldr	r3, [r7, #28]
 8012546:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8012548:	69fb      	ldr	r3, [r7, #28]
 801254a:	2200      	movs	r2, #0
 801254c:	729a      	strb	r2, [r3, #10]
 801254e:	2200      	movs	r2, #0
 8012550:	72da      	strb	r2, [r3, #11]
 8012552:	e00f      	b.n	8012574 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8012554:	68fb      	ldr	r3, [r7, #12]
 8012556:	895b      	ldrh	r3, [r3, #10]
 8012558:	2b13      	cmp	r3, #19
 801255a:	d802      	bhi.n	8012562 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801255c:	f06f 0301 	mvn.w	r3, #1
 8012560:	e020      	b.n	80125a4 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8012562:	68fb      	ldr	r3, [r7, #12]
 8012564:	685b      	ldr	r3, [r3, #4]
 8012566:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8012568:	69fb      	ldr	r3, [r7, #28]
 801256a:	691b      	ldr	r3, [r3, #16]
 801256c:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 801256e:	f107 0314 	add.w	r3, r7, #20
 8012572:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8012574:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012576:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012578:	2b00      	cmp	r3, #0
 801257a:	d00c      	beq.n	8012596 <ip4_output_if_src+0x12e>
 801257c:	68fb      	ldr	r3, [r7, #12]
 801257e:	891a      	ldrh	r2, [r3, #8]
 8012580:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012582:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012584:	429a      	cmp	r2, r3
 8012586:	d906      	bls.n	8012596 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8012588:	687a      	ldr	r2, [r7, #4]
 801258a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801258c:	68f8      	ldr	r0, [r7, #12]
 801258e:	f000 fd4b 	bl	8013028 <ip4_frag>
 8012592:	4603      	mov	r3, r0
 8012594:	e006      	b.n	80125a4 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8012596:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012598:	695b      	ldr	r3, [r3, #20]
 801259a:	687a      	ldr	r2, [r7, #4]
 801259c:	68f9      	ldr	r1, [r7, #12]
 801259e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80125a0:	4798      	blx	r3
 80125a2:	4603      	mov	r3, r0
}
 80125a4:	4618      	mov	r0, r3
 80125a6:	3720      	adds	r7, #32
 80125a8:	46bd      	mov	sp, r7
 80125aa:	bd80      	pop	{r7, pc}
 80125ac:	0801710c 	.word	0x0801710c
 80125b0:	08017140 	.word	0x08017140
 80125b4:	0801714c 	.word	0x0801714c
 80125b8:	08017174 	.word	0x08017174
 80125bc:	200085de 	.word	0x200085de
 80125c0:	08017598 	.word	0x08017598

080125c4 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 80125c4:	b480      	push	{r7}
 80125c6:	b085      	sub	sp, #20
 80125c8:	af00      	add	r7, sp, #0
 80125ca:	6078      	str	r0, [r7, #4]
 80125cc:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 80125ce:	687b      	ldr	r3, [r7, #4]
 80125d0:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 80125d2:	687b      	ldr	r3, [r7, #4]
 80125d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80125d8:	d002      	beq.n	80125e0 <ip4_addr_isbroadcast_u32+0x1c>
 80125da:	687b      	ldr	r3, [r7, #4]
 80125dc:	2b00      	cmp	r3, #0
 80125de:	d101      	bne.n	80125e4 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 80125e0:	2301      	movs	r3, #1
 80125e2:	e02a      	b.n	801263a <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 80125e4:	683b      	ldr	r3, [r7, #0]
 80125e6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80125ea:	f003 0302 	and.w	r3, r3, #2
 80125ee:	2b00      	cmp	r3, #0
 80125f0:	d101      	bne.n	80125f6 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 80125f2:	2300      	movs	r3, #0
 80125f4:	e021      	b.n	801263a <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 80125f6:	683b      	ldr	r3, [r7, #0]
 80125f8:	3304      	adds	r3, #4
 80125fa:	681b      	ldr	r3, [r3, #0]
 80125fc:	687a      	ldr	r2, [r7, #4]
 80125fe:	429a      	cmp	r2, r3
 8012600:	d101      	bne.n	8012606 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8012602:	2300      	movs	r3, #0
 8012604:	e019      	b.n	801263a <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8012606:	68fa      	ldr	r2, [r7, #12]
 8012608:	683b      	ldr	r3, [r7, #0]
 801260a:	3304      	adds	r3, #4
 801260c:	681b      	ldr	r3, [r3, #0]
 801260e:	405a      	eors	r2, r3
 8012610:	683b      	ldr	r3, [r7, #0]
 8012612:	3308      	adds	r3, #8
 8012614:	681b      	ldr	r3, [r3, #0]
 8012616:	4013      	ands	r3, r2
 8012618:	2b00      	cmp	r3, #0
 801261a:	d10d      	bne.n	8012638 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801261c:	683b      	ldr	r3, [r7, #0]
 801261e:	3308      	adds	r3, #8
 8012620:	681b      	ldr	r3, [r3, #0]
 8012622:	43da      	mvns	r2, r3
 8012624:	687b      	ldr	r3, [r7, #4]
 8012626:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8012628:	683b      	ldr	r3, [r7, #0]
 801262a:	3308      	adds	r3, #8
 801262c:	681b      	ldr	r3, [r3, #0]
 801262e:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8012630:	429a      	cmp	r2, r3
 8012632:	d101      	bne.n	8012638 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8012634:	2301      	movs	r3, #1
 8012636:	e000      	b.n	801263a <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8012638:	2300      	movs	r3, #0
  }
}
 801263a:	4618      	mov	r0, r3
 801263c:	3714      	adds	r7, #20
 801263e:	46bd      	mov	sp, r7
 8012640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012644:	4770      	bx	lr
	...

08012648 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8012648:	b580      	push	{r7, lr}
 801264a:	b084      	sub	sp, #16
 801264c:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 801264e:	2300      	movs	r3, #0
 8012650:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8012652:	4b12      	ldr	r3, [pc, #72]	; (801269c <ip_reass_tmr+0x54>)
 8012654:	681b      	ldr	r3, [r3, #0]
 8012656:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8012658:	e018      	b.n	801268c <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 801265a:	68fb      	ldr	r3, [r7, #12]
 801265c:	7fdb      	ldrb	r3, [r3, #31]
 801265e:	2b00      	cmp	r3, #0
 8012660:	d00b      	beq.n	801267a <ip_reass_tmr+0x32>
      r->timer--;
 8012662:	68fb      	ldr	r3, [r7, #12]
 8012664:	7fdb      	ldrb	r3, [r3, #31]
 8012666:	3b01      	subs	r3, #1
 8012668:	b2da      	uxtb	r2, r3
 801266a:	68fb      	ldr	r3, [r7, #12]
 801266c:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 801266e:	68fb      	ldr	r3, [r7, #12]
 8012670:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8012672:	68fb      	ldr	r3, [r7, #12]
 8012674:	681b      	ldr	r3, [r3, #0]
 8012676:	60fb      	str	r3, [r7, #12]
 8012678:	e008      	b.n	801268c <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 801267a:	68fb      	ldr	r3, [r7, #12]
 801267c:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 801267e:	68fb      	ldr	r3, [r7, #12]
 8012680:	681b      	ldr	r3, [r3, #0]
 8012682:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8012684:	68b9      	ldr	r1, [r7, #8]
 8012686:	6878      	ldr	r0, [r7, #4]
 8012688:	f000 f80a 	bl	80126a0 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 801268c:	68fb      	ldr	r3, [r7, #12]
 801268e:	2b00      	cmp	r3, #0
 8012690:	d1e3      	bne.n	801265a <ip_reass_tmr+0x12>
    }
  }
}
 8012692:	bf00      	nop
 8012694:	3710      	adds	r7, #16
 8012696:	46bd      	mov	sp, r7
 8012698:	bd80      	pop	{r7, pc}
 801269a:	bf00      	nop
 801269c:	200085e0 	.word	0x200085e0

080126a0 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 80126a0:	b580      	push	{r7, lr}
 80126a2:	b088      	sub	sp, #32
 80126a4:	af00      	add	r7, sp, #0
 80126a6:	6078      	str	r0, [r7, #4]
 80126a8:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 80126aa:	2300      	movs	r3, #0
 80126ac:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 80126ae:	683a      	ldr	r2, [r7, #0]
 80126b0:	687b      	ldr	r3, [r7, #4]
 80126b2:	429a      	cmp	r2, r3
 80126b4:	d105      	bne.n	80126c2 <ip_reass_free_complete_datagram+0x22>
 80126b6:	4b45      	ldr	r3, [pc, #276]	; (80127cc <ip_reass_free_complete_datagram+0x12c>)
 80126b8:	22ab      	movs	r2, #171	; 0xab
 80126ba:	4945      	ldr	r1, [pc, #276]	; (80127d0 <ip_reass_free_complete_datagram+0x130>)
 80126bc:	4845      	ldr	r0, [pc, #276]	; (80127d4 <ip_reass_free_complete_datagram+0x134>)
 80126be:	f001 f829 	bl	8013714 <iprintf>
  if (prev != NULL) {
 80126c2:	683b      	ldr	r3, [r7, #0]
 80126c4:	2b00      	cmp	r3, #0
 80126c6:	d00a      	beq.n	80126de <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 80126c8:	683b      	ldr	r3, [r7, #0]
 80126ca:	681b      	ldr	r3, [r3, #0]
 80126cc:	687a      	ldr	r2, [r7, #4]
 80126ce:	429a      	cmp	r2, r3
 80126d0:	d005      	beq.n	80126de <ip_reass_free_complete_datagram+0x3e>
 80126d2:	4b3e      	ldr	r3, [pc, #248]	; (80127cc <ip_reass_free_complete_datagram+0x12c>)
 80126d4:	22ad      	movs	r2, #173	; 0xad
 80126d6:	4940      	ldr	r1, [pc, #256]	; (80127d8 <ip_reass_free_complete_datagram+0x138>)
 80126d8:	483e      	ldr	r0, [pc, #248]	; (80127d4 <ip_reass_free_complete_datagram+0x134>)
 80126da:	f001 f81b 	bl	8013714 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 80126de:	687b      	ldr	r3, [r7, #4]
 80126e0:	685b      	ldr	r3, [r3, #4]
 80126e2:	685b      	ldr	r3, [r3, #4]
 80126e4:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 80126e6:	697b      	ldr	r3, [r7, #20]
 80126e8:	889b      	ldrh	r3, [r3, #4]
 80126ea:	b29b      	uxth	r3, r3
 80126ec:	2b00      	cmp	r3, #0
 80126ee:	d12a      	bne.n	8012746 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 80126f0:	687b      	ldr	r3, [r7, #4]
 80126f2:	685b      	ldr	r3, [r3, #4]
 80126f4:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 80126f6:	697b      	ldr	r3, [r7, #20]
 80126f8:	681a      	ldr	r2, [r3, #0]
 80126fa:	687b      	ldr	r3, [r7, #4]
 80126fc:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 80126fe:	69bb      	ldr	r3, [r7, #24]
 8012700:	6858      	ldr	r0, [r3, #4]
 8012702:	687b      	ldr	r3, [r7, #4]
 8012704:	3308      	adds	r3, #8
 8012706:	2214      	movs	r2, #20
 8012708:	4619      	mov	r1, r3
 801270a:	f000 fff0 	bl	80136ee <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 801270e:	2101      	movs	r1, #1
 8012710:	69b8      	ldr	r0, [r7, #24]
 8012712:	f7ff fc2b 	bl	8011f6c <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8012716:	69b8      	ldr	r0, [r7, #24]
 8012718:	f7f6 fb78 	bl	8008e0c <pbuf_clen>
 801271c:	4603      	mov	r3, r0
 801271e:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8012720:	8bfa      	ldrh	r2, [r7, #30]
 8012722:	8a7b      	ldrh	r3, [r7, #18]
 8012724:	4413      	add	r3, r2
 8012726:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801272a:	db05      	blt.n	8012738 <ip_reass_free_complete_datagram+0x98>
 801272c:	4b27      	ldr	r3, [pc, #156]	; (80127cc <ip_reass_free_complete_datagram+0x12c>)
 801272e:	22bc      	movs	r2, #188	; 0xbc
 8012730:	492a      	ldr	r1, [pc, #168]	; (80127dc <ip_reass_free_complete_datagram+0x13c>)
 8012732:	4828      	ldr	r0, [pc, #160]	; (80127d4 <ip_reass_free_complete_datagram+0x134>)
 8012734:	f000 ffee 	bl	8013714 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8012738:	8bfa      	ldrh	r2, [r7, #30]
 801273a:	8a7b      	ldrh	r3, [r7, #18]
 801273c:	4413      	add	r3, r2
 801273e:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8012740:	69b8      	ldr	r0, [r7, #24]
 8012742:	f7f6 fad5 	bl	8008cf0 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8012746:	687b      	ldr	r3, [r7, #4]
 8012748:	685b      	ldr	r3, [r3, #4]
 801274a:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 801274c:	e01f      	b.n	801278e <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 801274e:	69bb      	ldr	r3, [r7, #24]
 8012750:	685b      	ldr	r3, [r3, #4]
 8012752:	617b      	str	r3, [r7, #20]
    pcur = p;
 8012754:	69bb      	ldr	r3, [r7, #24]
 8012756:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8012758:	697b      	ldr	r3, [r7, #20]
 801275a:	681b      	ldr	r3, [r3, #0]
 801275c:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 801275e:	68f8      	ldr	r0, [r7, #12]
 8012760:	f7f6 fb54 	bl	8008e0c <pbuf_clen>
 8012764:	4603      	mov	r3, r0
 8012766:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8012768:	8bfa      	ldrh	r2, [r7, #30]
 801276a:	8a7b      	ldrh	r3, [r7, #18]
 801276c:	4413      	add	r3, r2
 801276e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8012772:	db05      	blt.n	8012780 <ip_reass_free_complete_datagram+0xe0>
 8012774:	4b15      	ldr	r3, [pc, #84]	; (80127cc <ip_reass_free_complete_datagram+0x12c>)
 8012776:	22cc      	movs	r2, #204	; 0xcc
 8012778:	4918      	ldr	r1, [pc, #96]	; (80127dc <ip_reass_free_complete_datagram+0x13c>)
 801277a:	4816      	ldr	r0, [pc, #88]	; (80127d4 <ip_reass_free_complete_datagram+0x134>)
 801277c:	f000 ffca 	bl	8013714 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8012780:	8bfa      	ldrh	r2, [r7, #30]
 8012782:	8a7b      	ldrh	r3, [r7, #18]
 8012784:	4413      	add	r3, r2
 8012786:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8012788:	68f8      	ldr	r0, [r7, #12]
 801278a:	f7f6 fab1 	bl	8008cf0 <pbuf_free>
  while (p != NULL) {
 801278e:	69bb      	ldr	r3, [r7, #24]
 8012790:	2b00      	cmp	r3, #0
 8012792:	d1dc      	bne.n	801274e <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8012794:	6839      	ldr	r1, [r7, #0]
 8012796:	6878      	ldr	r0, [r7, #4]
 8012798:	f000 f8c2 	bl	8012920 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 801279c:	4b10      	ldr	r3, [pc, #64]	; (80127e0 <ip_reass_free_complete_datagram+0x140>)
 801279e:	881b      	ldrh	r3, [r3, #0]
 80127a0:	8bfa      	ldrh	r2, [r7, #30]
 80127a2:	429a      	cmp	r2, r3
 80127a4:	d905      	bls.n	80127b2 <ip_reass_free_complete_datagram+0x112>
 80127a6:	4b09      	ldr	r3, [pc, #36]	; (80127cc <ip_reass_free_complete_datagram+0x12c>)
 80127a8:	22d2      	movs	r2, #210	; 0xd2
 80127aa:	490e      	ldr	r1, [pc, #56]	; (80127e4 <ip_reass_free_complete_datagram+0x144>)
 80127ac:	4809      	ldr	r0, [pc, #36]	; (80127d4 <ip_reass_free_complete_datagram+0x134>)
 80127ae:	f000 ffb1 	bl	8013714 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 80127b2:	4b0b      	ldr	r3, [pc, #44]	; (80127e0 <ip_reass_free_complete_datagram+0x140>)
 80127b4:	881a      	ldrh	r2, [r3, #0]
 80127b6:	8bfb      	ldrh	r3, [r7, #30]
 80127b8:	1ad3      	subs	r3, r2, r3
 80127ba:	b29a      	uxth	r2, r3
 80127bc:	4b08      	ldr	r3, [pc, #32]	; (80127e0 <ip_reass_free_complete_datagram+0x140>)
 80127be:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 80127c0:	8bfb      	ldrh	r3, [r7, #30]
}
 80127c2:	4618      	mov	r0, r3
 80127c4:	3720      	adds	r7, #32
 80127c6:	46bd      	mov	sp, r7
 80127c8:	bd80      	pop	{r7, pc}
 80127ca:	bf00      	nop
 80127cc:	080171a4 	.word	0x080171a4
 80127d0:	080171e0 	.word	0x080171e0
 80127d4:	080171ec 	.word	0x080171ec
 80127d8:	08017214 	.word	0x08017214
 80127dc:	08017228 	.word	0x08017228
 80127e0:	200085e4 	.word	0x200085e4
 80127e4:	08017248 	.word	0x08017248

080127e8 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 80127e8:	b580      	push	{r7, lr}
 80127ea:	b08a      	sub	sp, #40	; 0x28
 80127ec:	af00      	add	r7, sp, #0
 80127ee:	6078      	str	r0, [r7, #4]
 80127f0:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 80127f2:	2300      	movs	r3, #0
 80127f4:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 80127f6:	2300      	movs	r3, #0
 80127f8:	623b      	str	r3, [r7, #32]
    prev = NULL;
 80127fa:	2300      	movs	r3, #0
 80127fc:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 80127fe:	2300      	movs	r3, #0
 8012800:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8012802:	2300      	movs	r3, #0
 8012804:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8012806:	4b28      	ldr	r3, [pc, #160]	; (80128a8 <ip_reass_remove_oldest_datagram+0xc0>)
 8012808:	681b      	ldr	r3, [r3, #0]
 801280a:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 801280c:	e030      	b.n	8012870 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 801280e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012810:	695a      	ldr	r2, [r3, #20]
 8012812:	687b      	ldr	r3, [r7, #4]
 8012814:	68db      	ldr	r3, [r3, #12]
 8012816:	429a      	cmp	r2, r3
 8012818:	d10c      	bne.n	8012834 <ip_reass_remove_oldest_datagram+0x4c>
 801281a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801281c:	699a      	ldr	r2, [r3, #24]
 801281e:	687b      	ldr	r3, [r7, #4]
 8012820:	691b      	ldr	r3, [r3, #16]
 8012822:	429a      	cmp	r2, r3
 8012824:	d106      	bne.n	8012834 <ip_reass_remove_oldest_datagram+0x4c>
 8012826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012828:	899a      	ldrh	r2, [r3, #12]
 801282a:	687b      	ldr	r3, [r7, #4]
 801282c:	889b      	ldrh	r3, [r3, #4]
 801282e:	b29b      	uxth	r3, r3
 8012830:	429a      	cmp	r2, r3
 8012832:	d014      	beq.n	801285e <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8012834:	693b      	ldr	r3, [r7, #16]
 8012836:	3301      	adds	r3, #1
 8012838:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 801283a:	6a3b      	ldr	r3, [r7, #32]
 801283c:	2b00      	cmp	r3, #0
 801283e:	d104      	bne.n	801284a <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8012840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012842:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8012844:	69fb      	ldr	r3, [r7, #28]
 8012846:	61bb      	str	r3, [r7, #24]
 8012848:	e009      	b.n	801285e <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 801284a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801284c:	7fda      	ldrb	r2, [r3, #31]
 801284e:	6a3b      	ldr	r3, [r7, #32]
 8012850:	7fdb      	ldrb	r3, [r3, #31]
 8012852:	429a      	cmp	r2, r3
 8012854:	d803      	bhi.n	801285e <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8012856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012858:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801285a:	69fb      	ldr	r3, [r7, #28]
 801285c:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 801285e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012860:	681b      	ldr	r3, [r3, #0]
 8012862:	2b00      	cmp	r3, #0
 8012864:	d001      	beq.n	801286a <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8012866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012868:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 801286a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801286c:	681b      	ldr	r3, [r3, #0]
 801286e:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8012870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012872:	2b00      	cmp	r3, #0
 8012874:	d1cb      	bne.n	801280e <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8012876:	6a3b      	ldr	r3, [r7, #32]
 8012878:	2b00      	cmp	r3, #0
 801287a:	d008      	beq.n	801288e <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 801287c:	69b9      	ldr	r1, [r7, #24]
 801287e:	6a38      	ldr	r0, [r7, #32]
 8012880:	f7ff ff0e 	bl	80126a0 <ip_reass_free_complete_datagram>
 8012884:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8012886:	697a      	ldr	r2, [r7, #20]
 8012888:	68fb      	ldr	r3, [r7, #12]
 801288a:	4413      	add	r3, r2
 801288c:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 801288e:	697a      	ldr	r2, [r7, #20]
 8012890:	683b      	ldr	r3, [r7, #0]
 8012892:	429a      	cmp	r2, r3
 8012894:	da02      	bge.n	801289c <ip_reass_remove_oldest_datagram+0xb4>
 8012896:	693b      	ldr	r3, [r7, #16]
 8012898:	2b01      	cmp	r3, #1
 801289a:	dcac      	bgt.n	80127f6 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 801289c:	697b      	ldr	r3, [r7, #20]
}
 801289e:	4618      	mov	r0, r3
 80128a0:	3728      	adds	r7, #40	; 0x28
 80128a2:	46bd      	mov	sp, r7
 80128a4:	bd80      	pop	{r7, pc}
 80128a6:	bf00      	nop
 80128a8:	200085e0 	.word	0x200085e0

080128ac <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 80128ac:	b580      	push	{r7, lr}
 80128ae:	b084      	sub	sp, #16
 80128b0:	af00      	add	r7, sp, #0
 80128b2:	6078      	str	r0, [r7, #4]
 80128b4:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 80128b6:	2004      	movs	r0, #4
 80128b8:	f7f5 fb1c 	bl	8007ef4 <memp_malloc>
 80128bc:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 80128be:	68fb      	ldr	r3, [r7, #12]
 80128c0:	2b00      	cmp	r3, #0
 80128c2:	d110      	bne.n	80128e6 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 80128c4:	6839      	ldr	r1, [r7, #0]
 80128c6:	6878      	ldr	r0, [r7, #4]
 80128c8:	f7ff ff8e 	bl	80127e8 <ip_reass_remove_oldest_datagram>
 80128cc:	4602      	mov	r2, r0
 80128ce:	683b      	ldr	r3, [r7, #0]
 80128d0:	4293      	cmp	r3, r2
 80128d2:	dc03      	bgt.n	80128dc <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 80128d4:	2004      	movs	r0, #4
 80128d6:	f7f5 fb0d 	bl	8007ef4 <memp_malloc>
 80128da:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 80128dc:	68fb      	ldr	r3, [r7, #12]
 80128de:	2b00      	cmp	r3, #0
 80128e0:	d101      	bne.n	80128e6 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 80128e2:	2300      	movs	r3, #0
 80128e4:	e016      	b.n	8012914 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 80128e6:	2220      	movs	r2, #32
 80128e8:	2100      	movs	r1, #0
 80128ea:	68f8      	ldr	r0, [r7, #12]
 80128ec:	f000 ff0a 	bl	8013704 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 80128f0:	68fb      	ldr	r3, [r7, #12]
 80128f2:	220f      	movs	r2, #15
 80128f4:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 80128f6:	4b09      	ldr	r3, [pc, #36]	; (801291c <ip_reass_enqueue_new_datagram+0x70>)
 80128f8:	681a      	ldr	r2, [r3, #0]
 80128fa:	68fb      	ldr	r3, [r7, #12]
 80128fc:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 80128fe:	4a07      	ldr	r2, [pc, #28]	; (801291c <ip_reass_enqueue_new_datagram+0x70>)
 8012900:	68fb      	ldr	r3, [r7, #12]
 8012902:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8012904:	68fb      	ldr	r3, [r7, #12]
 8012906:	3308      	adds	r3, #8
 8012908:	2214      	movs	r2, #20
 801290a:	6879      	ldr	r1, [r7, #4]
 801290c:	4618      	mov	r0, r3
 801290e:	f000 feee 	bl	80136ee <memcpy>
  return ipr;
 8012912:	68fb      	ldr	r3, [r7, #12]
}
 8012914:	4618      	mov	r0, r3
 8012916:	3710      	adds	r7, #16
 8012918:	46bd      	mov	sp, r7
 801291a:	bd80      	pop	{r7, pc}
 801291c:	200085e0 	.word	0x200085e0

08012920 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8012920:	b580      	push	{r7, lr}
 8012922:	b082      	sub	sp, #8
 8012924:	af00      	add	r7, sp, #0
 8012926:	6078      	str	r0, [r7, #4]
 8012928:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 801292a:	4b10      	ldr	r3, [pc, #64]	; (801296c <ip_reass_dequeue_datagram+0x4c>)
 801292c:	681b      	ldr	r3, [r3, #0]
 801292e:	687a      	ldr	r2, [r7, #4]
 8012930:	429a      	cmp	r2, r3
 8012932:	d104      	bne.n	801293e <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8012934:	687b      	ldr	r3, [r7, #4]
 8012936:	681b      	ldr	r3, [r3, #0]
 8012938:	4a0c      	ldr	r2, [pc, #48]	; (801296c <ip_reass_dequeue_datagram+0x4c>)
 801293a:	6013      	str	r3, [r2, #0]
 801293c:	e00d      	b.n	801295a <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 801293e:	683b      	ldr	r3, [r7, #0]
 8012940:	2b00      	cmp	r3, #0
 8012942:	d106      	bne.n	8012952 <ip_reass_dequeue_datagram+0x32>
 8012944:	4b0a      	ldr	r3, [pc, #40]	; (8012970 <ip_reass_dequeue_datagram+0x50>)
 8012946:	f240 1245 	movw	r2, #325	; 0x145
 801294a:	490a      	ldr	r1, [pc, #40]	; (8012974 <ip_reass_dequeue_datagram+0x54>)
 801294c:	480a      	ldr	r0, [pc, #40]	; (8012978 <ip_reass_dequeue_datagram+0x58>)
 801294e:	f000 fee1 	bl	8013714 <iprintf>
    prev->next = ipr->next;
 8012952:	687b      	ldr	r3, [r7, #4]
 8012954:	681a      	ldr	r2, [r3, #0]
 8012956:	683b      	ldr	r3, [r7, #0]
 8012958:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 801295a:	6879      	ldr	r1, [r7, #4]
 801295c:	2004      	movs	r0, #4
 801295e:	f7f5 fb1b 	bl	8007f98 <memp_free>
}
 8012962:	bf00      	nop
 8012964:	3708      	adds	r7, #8
 8012966:	46bd      	mov	sp, r7
 8012968:	bd80      	pop	{r7, pc}
 801296a:	bf00      	nop
 801296c:	200085e0 	.word	0x200085e0
 8012970:	080171a4 	.word	0x080171a4
 8012974:	0801726c 	.word	0x0801726c
 8012978:	080171ec 	.word	0x080171ec

0801297c <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 801297c:	b580      	push	{r7, lr}
 801297e:	b08c      	sub	sp, #48	; 0x30
 8012980:	af00      	add	r7, sp, #0
 8012982:	60f8      	str	r0, [r7, #12]
 8012984:	60b9      	str	r1, [r7, #8]
 8012986:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8012988:	2300      	movs	r3, #0
 801298a:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 801298c:	2301      	movs	r3, #1
 801298e:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8012990:	68bb      	ldr	r3, [r7, #8]
 8012992:	685b      	ldr	r3, [r3, #4]
 8012994:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8012996:	69fb      	ldr	r3, [r7, #28]
 8012998:	885b      	ldrh	r3, [r3, #2]
 801299a:	b29b      	uxth	r3, r3
 801299c:	4618      	mov	r0, r3
 801299e:	f7f4 fdf3 	bl	8007588 <lwip_htons>
 80129a2:	4603      	mov	r3, r0
 80129a4:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 80129a6:	69fb      	ldr	r3, [r7, #28]
 80129a8:	781b      	ldrb	r3, [r3, #0]
 80129aa:	f003 030f 	and.w	r3, r3, #15
 80129ae:	b2db      	uxtb	r3, r3
 80129b0:	009b      	lsls	r3, r3, #2
 80129b2:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 80129b4:	7e7b      	ldrb	r3, [r7, #25]
 80129b6:	b29b      	uxth	r3, r3
 80129b8:	8b7a      	ldrh	r2, [r7, #26]
 80129ba:	429a      	cmp	r2, r3
 80129bc:	d202      	bcs.n	80129c4 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 80129be:	f04f 33ff 	mov.w	r3, #4294967295
 80129c2:	e135      	b.n	8012c30 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 80129c4:	7e7b      	ldrb	r3, [r7, #25]
 80129c6:	b29b      	uxth	r3, r3
 80129c8:	8b7a      	ldrh	r2, [r7, #26]
 80129ca:	1ad3      	subs	r3, r2, r3
 80129cc:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 80129ce:	69fb      	ldr	r3, [r7, #28]
 80129d0:	88db      	ldrh	r3, [r3, #6]
 80129d2:	b29b      	uxth	r3, r3
 80129d4:	4618      	mov	r0, r3
 80129d6:	f7f4 fdd7 	bl	8007588 <lwip_htons>
 80129da:	4603      	mov	r3, r0
 80129dc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80129e0:	b29b      	uxth	r3, r3
 80129e2:	00db      	lsls	r3, r3, #3
 80129e4:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 80129e6:	68bb      	ldr	r3, [r7, #8]
 80129e8:	685b      	ldr	r3, [r3, #4]
 80129ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 80129ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80129ee:	2200      	movs	r2, #0
 80129f0:	701a      	strb	r2, [r3, #0]
 80129f2:	2200      	movs	r2, #0
 80129f4:	705a      	strb	r2, [r3, #1]
 80129f6:	2200      	movs	r2, #0
 80129f8:	709a      	strb	r2, [r3, #2]
 80129fa:	2200      	movs	r2, #0
 80129fc:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 80129fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a00:	8afa      	ldrh	r2, [r7, #22]
 8012a02:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8012a04:	8afa      	ldrh	r2, [r7, #22]
 8012a06:	8b7b      	ldrh	r3, [r7, #26]
 8012a08:	4413      	add	r3, r2
 8012a0a:	b29a      	uxth	r2, r3
 8012a0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a0e:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8012a10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a12:	88db      	ldrh	r3, [r3, #6]
 8012a14:	b29b      	uxth	r3, r3
 8012a16:	8afa      	ldrh	r2, [r7, #22]
 8012a18:	429a      	cmp	r2, r3
 8012a1a:	d902      	bls.n	8012a22 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8012a1c:	f04f 33ff 	mov.w	r3, #4294967295
 8012a20:	e106      	b.n	8012c30 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8012a22:	68fb      	ldr	r3, [r7, #12]
 8012a24:	685b      	ldr	r3, [r3, #4]
 8012a26:	627b      	str	r3, [r7, #36]	; 0x24
 8012a28:	e068      	b.n	8012afc <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8012a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a2c:	685b      	ldr	r3, [r3, #4]
 8012a2e:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8012a30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a32:	889b      	ldrh	r3, [r3, #4]
 8012a34:	b29a      	uxth	r2, r3
 8012a36:	693b      	ldr	r3, [r7, #16]
 8012a38:	889b      	ldrh	r3, [r3, #4]
 8012a3a:	b29b      	uxth	r3, r3
 8012a3c:	429a      	cmp	r2, r3
 8012a3e:	d235      	bcs.n	8012aac <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8012a40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012a44:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8012a46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012a48:	2b00      	cmp	r3, #0
 8012a4a:	d020      	beq.n	8012a8e <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8012a4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a4e:	889b      	ldrh	r3, [r3, #4]
 8012a50:	b29a      	uxth	r2, r3
 8012a52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012a54:	88db      	ldrh	r3, [r3, #6]
 8012a56:	b29b      	uxth	r3, r3
 8012a58:	429a      	cmp	r2, r3
 8012a5a:	d307      	bcc.n	8012a6c <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8012a5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a5e:	88db      	ldrh	r3, [r3, #6]
 8012a60:	b29a      	uxth	r2, r3
 8012a62:	693b      	ldr	r3, [r7, #16]
 8012a64:	889b      	ldrh	r3, [r3, #4]
 8012a66:	b29b      	uxth	r3, r3
 8012a68:	429a      	cmp	r2, r3
 8012a6a:	d902      	bls.n	8012a72 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8012a6c:	f04f 33ff 	mov.w	r3, #4294967295
 8012a70:	e0de      	b.n	8012c30 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8012a72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012a74:	68ba      	ldr	r2, [r7, #8]
 8012a76:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8012a78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012a7a:	88db      	ldrh	r3, [r3, #6]
 8012a7c:	b29a      	uxth	r2, r3
 8012a7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a80:	889b      	ldrh	r3, [r3, #4]
 8012a82:	b29b      	uxth	r3, r3
 8012a84:	429a      	cmp	r2, r3
 8012a86:	d03d      	beq.n	8012b04 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8012a88:	2300      	movs	r3, #0
 8012a8a:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8012a8c:	e03a      	b.n	8012b04 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 8012a8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a90:	88db      	ldrh	r3, [r3, #6]
 8012a92:	b29a      	uxth	r2, r3
 8012a94:	693b      	ldr	r3, [r7, #16]
 8012a96:	889b      	ldrh	r3, [r3, #4]
 8012a98:	b29b      	uxth	r3, r3
 8012a9a:	429a      	cmp	r2, r3
 8012a9c:	d902      	bls.n	8012aa4 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8012a9e:	f04f 33ff 	mov.w	r3, #4294967295
 8012aa2:	e0c5      	b.n	8012c30 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8012aa4:	68fb      	ldr	r3, [r7, #12]
 8012aa6:	68ba      	ldr	r2, [r7, #8]
 8012aa8:	605a      	str	r2, [r3, #4]
      break;
 8012aaa:	e02b      	b.n	8012b04 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8012aac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012aae:	889b      	ldrh	r3, [r3, #4]
 8012ab0:	b29a      	uxth	r2, r3
 8012ab2:	693b      	ldr	r3, [r7, #16]
 8012ab4:	889b      	ldrh	r3, [r3, #4]
 8012ab6:	b29b      	uxth	r3, r3
 8012ab8:	429a      	cmp	r2, r3
 8012aba:	d102      	bne.n	8012ac2 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8012abc:	f04f 33ff 	mov.w	r3, #4294967295
 8012ac0:	e0b6      	b.n	8012c30 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8012ac2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012ac4:	889b      	ldrh	r3, [r3, #4]
 8012ac6:	b29a      	uxth	r2, r3
 8012ac8:	693b      	ldr	r3, [r7, #16]
 8012aca:	88db      	ldrh	r3, [r3, #6]
 8012acc:	b29b      	uxth	r3, r3
 8012ace:	429a      	cmp	r2, r3
 8012ad0:	d202      	bcs.n	8012ad8 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8012ad2:	f04f 33ff 	mov.w	r3, #4294967295
 8012ad6:	e0ab      	b.n	8012c30 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8012ad8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012ada:	2b00      	cmp	r3, #0
 8012adc:	d009      	beq.n	8012af2 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8012ade:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012ae0:	88db      	ldrh	r3, [r3, #6]
 8012ae2:	b29a      	uxth	r2, r3
 8012ae4:	693b      	ldr	r3, [r7, #16]
 8012ae6:	889b      	ldrh	r3, [r3, #4]
 8012ae8:	b29b      	uxth	r3, r3
 8012aea:	429a      	cmp	r2, r3
 8012aec:	d001      	beq.n	8012af2 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8012aee:	2300      	movs	r3, #0
 8012af0:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8012af2:	693b      	ldr	r3, [r7, #16]
 8012af4:	681b      	ldr	r3, [r3, #0]
 8012af6:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 8012af8:	693b      	ldr	r3, [r7, #16]
 8012afa:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8012afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012afe:	2b00      	cmp	r3, #0
 8012b00:	d193      	bne.n	8012a2a <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8012b02:	e000      	b.n	8012b06 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8012b04:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8012b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b08:	2b00      	cmp	r3, #0
 8012b0a:	d12d      	bne.n	8012b68 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8012b0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012b0e:	2b00      	cmp	r3, #0
 8012b10:	d01c      	beq.n	8012b4c <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8012b12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012b14:	88db      	ldrh	r3, [r3, #6]
 8012b16:	b29a      	uxth	r2, r3
 8012b18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012b1a:	889b      	ldrh	r3, [r3, #4]
 8012b1c:	b29b      	uxth	r3, r3
 8012b1e:	429a      	cmp	r2, r3
 8012b20:	d906      	bls.n	8012b30 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8012b22:	4b45      	ldr	r3, [pc, #276]	; (8012c38 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8012b24:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8012b28:	4944      	ldr	r1, [pc, #272]	; (8012c3c <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8012b2a:	4845      	ldr	r0, [pc, #276]	; (8012c40 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8012b2c:	f000 fdf2 	bl	8013714 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8012b30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012b32:	68ba      	ldr	r2, [r7, #8]
 8012b34:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8012b36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012b38:	88db      	ldrh	r3, [r3, #6]
 8012b3a:	b29a      	uxth	r2, r3
 8012b3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012b3e:	889b      	ldrh	r3, [r3, #4]
 8012b40:	b29b      	uxth	r3, r3
 8012b42:	429a      	cmp	r2, r3
 8012b44:	d010      	beq.n	8012b68 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8012b46:	2300      	movs	r3, #0
 8012b48:	623b      	str	r3, [r7, #32]
 8012b4a:	e00d      	b.n	8012b68 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8012b4c:	68fb      	ldr	r3, [r7, #12]
 8012b4e:	685b      	ldr	r3, [r3, #4]
 8012b50:	2b00      	cmp	r3, #0
 8012b52:	d006      	beq.n	8012b62 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8012b54:	4b38      	ldr	r3, [pc, #224]	; (8012c38 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8012b56:	f240 12bf 	movw	r2, #447	; 0x1bf
 8012b5a:	493a      	ldr	r1, [pc, #232]	; (8012c44 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8012b5c:	4838      	ldr	r0, [pc, #224]	; (8012c40 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8012b5e:	f000 fdd9 	bl	8013714 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8012b62:	68fb      	ldr	r3, [r7, #12]
 8012b64:	68ba      	ldr	r2, [r7, #8]
 8012b66:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8012b68:	687b      	ldr	r3, [r7, #4]
 8012b6a:	2b00      	cmp	r3, #0
 8012b6c:	d105      	bne.n	8012b7a <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 8012b6e:	68fb      	ldr	r3, [r7, #12]
 8012b70:	7f9b      	ldrb	r3, [r3, #30]
 8012b72:	f003 0301 	and.w	r3, r3, #1
 8012b76:	2b00      	cmp	r3, #0
 8012b78:	d059      	beq.n	8012c2e <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 8012b7a:	6a3b      	ldr	r3, [r7, #32]
 8012b7c:	2b00      	cmp	r3, #0
 8012b7e:	d04f      	beq.n	8012c20 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8012b80:	68fb      	ldr	r3, [r7, #12]
 8012b82:	685b      	ldr	r3, [r3, #4]
 8012b84:	2b00      	cmp	r3, #0
 8012b86:	d006      	beq.n	8012b96 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8012b88:	68fb      	ldr	r3, [r7, #12]
 8012b8a:	685b      	ldr	r3, [r3, #4]
 8012b8c:	685b      	ldr	r3, [r3, #4]
 8012b8e:	889b      	ldrh	r3, [r3, #4]
 8012b90:	b29b      	uxth	r3, r3
 8012b92:	2b00      	cmp	r3, #0
 8012b94:	d002      	beq.n	8012b9c <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8012b96:	2300      	movs	r3, #0
 8012b98:	623b      	str	r3, [r7, #32]
 8012b9a:	e041      	b.n	8012c20 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8012b9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012b9e:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8012ba0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012ba2:	681b      	ldr	r3, [r3, #0]
 8012ba4:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8012ba6:	e012      	b.n	8012bce <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8012ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012baa:	685b      	ldr	r3, [r3, #4]
 8012bac:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 8012bae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012bb0:	88db      	ldrh	r3, [r3, #6]
 8012bb2:	b29a      	uxth	r2, r3
 8012bb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012bb6:	889b      	ldrh	r3, [r3, #4]
 8012bb8:	b29b      	uxth	r3, r3
 8012bba:	429a      	cmp	r2, r3
 8012bbc:	d002      	beq.n	8012bc4 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8012bbe:	2300      	movs	r3, #0
 8012bc0:	623b      	str	r3, [r7, #32]
            break;
 8012bc2:	e007      	b.n	8012bd4 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8012bc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012bc6:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8012bc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012bca:	681b      	ldr	r3, [r3, #0]
 8012bcc:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8012bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012bd0:	2b00      	cmp	r3, #0
 8012bd2:	d1e9      	bne.n	8012ba8 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8012bd4:	6a3b      	ldr	r3, [r7, #32]
 8012bd6:	2b00      	cmp	r3, #0
 8012bd8:	d022      	beq.n	8012c20 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8012bda:	68fb      	ldr	r3, [r7, #12]
 8012bdc:	685b      	ldr	r3, [r3, #4]
 8012bde:	2b00      	cmp	r3, #0
 8012be0:	d106      	bne.n	8012bf0 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8012be2:	4b15      	ldr	r3, [pc, #84]	; (8012c38 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8012be4:	f240 12df 	movw	r2, #479	; 0x1df
 8012be8:	4917      	ldr	r1, [pc, #92]	; (8012c48 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8012bea:	4815      	ldr	r0, [pc, #84]	; (8012c40 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8012bec:	f000 fd92 	bl	8013714 <iprintf>
          LWIP_ASSERT("sanity check",
 8012bf0:	68fb      	ldr	r3, [r7, #12]
 8012bf2:	685b      	ldr	r3, [r3, #4]
 8012bf4:	685b      	ldr	r3, [r3, #4]
 8012bf6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012bf8:	429a      	cmp	r2, r3
 8012bfa:	d106      	bne.n	8012c0a <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8012bfc:	4b0e      	ldr	r3, [pc, #56]	; (8012c38 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8012bfe:	f240 12e1 	movw	r2, #481	; 0x1e1
 8012c02:	4911      	ldr	r1, [pc, #68]	; (8012c48 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8012c04:	480e      	ldr	r0, [pc, #56]	; (8012c40 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8012c06:	f000 fd85 	bl	8013714 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8012c0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012c0c:	681b      	ldr	r3, [r3, #0]
 8012c0e:	2b00      	cmp	r3, #0
 8012c10:	d006      	beq.n	8012c20 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8012c12:	4b09      	ldr	r3, [pc, #36]	; (8012c38 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8012c14:	f240 12e3 	movw	r2, #483	; 0x1e3
 8012c18:	490c      	ldr	r1, [pc, #48]	; (8012c4c <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8012c1a:	4809      	ldr	r0, [pc, #36]	; (8012c40 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8012c1c:	f000 fd7a 	bl	8013714 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8012c20:	6a3b      	ldr	r3, [r7, #32]
 8012c22:	2b00      	cmp	r3, #0
 8012c24:	bf14      	ite	ne
 8012c26:	2301      	movne	r3, #1
 8012c28:	2300      	moveq	r3, #0
 8012c2a:	b2db      	uxtb	r3, r3
 8012c2c:	e000      	b.n	8012c30 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8012c2e:	2300      	movs	r3, #0
}
 8012c30:	4618      	mov	r0, r3
 8012c32:	3730      	adds	r7, #48	; 0x30
 8012c34:	46bd      	mov	sp, r7
 8012c36:	bd80      	pop	{r7, pc}
 8012c38:	080171a4 	.word	0x080171a4
 8012c3c:	08017288 	.word	0x08017288
 8012c40:	080171ec 	.word	0x080171ec
 8012c44:	080172a8 	.word	0x080172a8
 8012c48:	080172e0 	.word	0x080172e0
 8012c4c:	080172f0 	.word	0x080172f0

08012c50 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8012c50:	b580      	push	{r7, lr}
 8012c52:	b08e      	sub	sp, #56	; 0x38
 8012c54:	af00      	add	r7, sp, #0
 8012c56:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8012c58:	687b      	ldr	r3, [r7, #4]
 8012c5a:	685b      	ldr	r3, [r3, #4]
 8012c5c:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8012c5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012c60:	781b      	ldrb	r3, [r3, #0]
 8012c62:	f003 030f 	and.w	r3, r3, #15
 8012c66:	b2db      	uxtb	r3, r3
 8012c68:	009b      	lsls	r3, r3, #2
 8012c6a:	b2db      	uxtb	r3, r3
 8012c6c:	2b14      	cmp	r3, #20
 8012c6e:	f040 8167 	bne.w	8012f40 <ip4_reass+0x2f0>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 8012c72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012c74:	88db      	ldrh	r3, [r3, #6]
 8012c76:	b29b      	uxth	r3, r3
 8012c78:	4618      	mov	r0, r3
 8012c7a:	f7f4 fc85 	bl	8007588 <lwip_htons>
 8012c7e:	4603      	mov	r3, r0
 8012c80:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8012c84:	b29b      	uxth	r3, r3
 8012c86:	00db      	lsls	r3, r3, #3
 8012c88:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8012c8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012c8c:	885b      	ldrh	r3, [r3, #2]
 8012c8e:	b29b      	uxth	r3, r3
 8012c90:	4618      	mov	r0, r3
 8012c92:	f7f4 fc79 	bl	8007588 <lwip_htons>
 8012c96:	4603      	mov	r3, r0
 8012c98:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8012c9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012c9c:	781b      	ldrb	r3, [r3, #0]
 8012c9e:	f003 030f 	and.w	r3, r3, #15
 8012ca2:	b2db      	uxtb	r3, r3
 8012ca4:	009b      	lsls	r3, r3, #2
 8012ca6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 8012caa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8012cae:	b29b      	uxth	r3, r3
 8012cb0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8012cb2:	429a      	cmp	r2, r3
 8012cb4:	f0c0 8146 	bcc.w	8012f44 <ip4_reass+0x2f4>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8012cb8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8012cbc:	b29b      	uxth	r3, r3
 8012cbe:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8012cc0:	1ad3      	subs	r3, r2, r3
 8012cc2:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8012cc4:	6878      	ldr	r0, [r7, #4]
 8012cc6:	f7f6 f8a1 	bl	8008e0c <pbuf_clen>
 8012cca:	4603      	mov	r3, r0
 8012ccc:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8012cce:	4ba3      	ldr	r3, [pc, #652]	; (8012f5c <ip4_reass+0x30c>)
 8012cd0:	881b      	ldrh	r3, [r3, #0]
 8012cd2:	461a      	mov	r2, r3
 8012cd4:	8c3b      	ldrh	r3, [r7, #32]
 8012cd6:	4413      	add	r3, r2
 8012cd8:	2b0a      	cmp	r3, #10
 8012cda:	dd10      	ble.n	8012cfe <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8012cdc:	8c3b      	ldrh	r3, [r7, #32]
 8012cde:	4619      	mov	r1, r3
 8012ce0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012ce2:	f7ff fd81 	bl	80127e8 <ip_reass_remove_oldest_datagram>
 8012ce6:	4603      	mov	r3, r0
 8012ce8:	2b00      	cmp	r3, #0
 8012cea:	f000 812d 	beq.w	8012f48 <ip4_reass+0x2f8>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8012cee:	4b9b      	ldr	r3, [pc, #620]	; (8012f5c <ip4_reass+0x30c>)
 8012cf0:	881b      	ldrh	r3, [r3, #0]
 8012cf2:	461a      	mov	r2, r3
 8012cf4:	8c3b      	ldrh	r3, [r7, #32]
 8012cf6:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8012cf8:	2b0a      	cmp	r3, #10
 8012cfa:	f300 8125 	bgt.w	8012f48 <ip4_reass+0x2f8>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8012cfe:	4b98      	ldr	r3, [pc, #608]	; (8012f60 <ip4_reass+0x310>)
 8012d00:	681b      	ldr	r3, [r3, #0]
 8012d02:	633b      	str	r3, [r7, #48]	; 0x30
 8012d04:	e015      	b.n	8012d32 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8012d06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012d08:	695a      	ldr	r2, [r3, #20]
 8012d0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012d0c:	68db      	ldr	r3, [r3, #12]
 8012d0e:	429a      	cmp	r2, r3
 8012d10:	d10c      	bne.n	8012d2c <ip4_reass+0xdc>
 8012d12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012d14:	699a      	ldr	r2, [r3, #24]
 8012d16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012d18:	691b      	ldr	r3, [r3, #16]
 8012d1a:	429a      	cmp	r2, r3
 8012d1c:	d106      	bne.n	8012d2c <ip4_reass+0xdc>
 8012d1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012d20:	899a      	ldrh	r2, [r3, #12]
 8012d22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012d24:	889b      	ldrh	r3, [r3, #4]
 8012d26:	b29b      	uxth	r3, r3
 8012d28:	429a      	cmp	r2, r3
 8012d2a:	d006      	beq.n	8012d3a <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8012d2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012d2e:	681b      	ldr	r3, [r3, #0]
 8012d30:	633b      	str	r3, [r7, #48]	; 0x30
 8012d32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012d34:	2b00      	cmp	r3, #0
 8012d36:	d1e6      	bne.n	8012d06 <ip4_reass+0xb6>
 8012d38:	e000      	b.n	8012d3c <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8012d3a:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8012d3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012d3e:	2b00      	cmp	r3, #0
 8012d40:	d109      	bne.n	8012d56 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8012d42:	8c3b      	ldrh	r3, [r7, #32]
 8012d44:	4619      	mov	r1, r3
 8012d46:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012d48:	f7ff fdb0 	bl	80128ac <ip_reass_enqueue_new_datagram>
 8012d4c:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8012d4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012d50:	2b00      	cmp	r3, #0
 8012d52:	d11c      	bne.n	8012d8e <ip4_reass+0x13e>
      goto nullreturn;
 8012d54:	e0f9      	b.n	8012f4a <ip4_reass+0x2fa>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8012d56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012d58:	88db      	ldrh	r3, [r3, #6]
 8012d5a:	b29b      	uxth	r3, r3
 8012d5c:	4618      	mov	r0, r3
 8012d5e:	f7f4 fc13 	bl	8007588 <lwip_htons>
 8012d62:	4603      	mov	r3, r0
 8012d64:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8012d68:	2b00      	cmp	r3, #0
 8012d6a:	d110      	bne.n	8012d8e <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8012d6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012d6e:	89db      	ldrh	r3, [r3, #14]
 8012d70:	4618      	mov	r0, r3
 8012d72:	f7f4 fc09 	bl	8007588 <lwip_htons>
 8012d76:	4603      	mov	r3, r0
 8012d78:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8012d7c:	2b00      	cmp	r3, #0
 8012d7e:	d006      	beq.n	8012d8e <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8012d80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012d82:	3308      	adds	r3, #8
 8012d84:	2214      	movs	r2, #20
 8012d86:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8012d88:	4618      	mov	r0, r3
 8012d8a:	f000 fcb0 	bl	80136ee <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8012d8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012d90:	88db      	ldrh	r3, [r3, #6]
 8012d92:	b29b      	uxth	r3, r3
 8012d94:	f003 0320 	and.w	r3, r3, #32
 8012d98:	2b00      	cmp	r3, #0
 8012d9a:	bf0c      	ite	eq
 8012d9c:	2301      	moveq	r3, #1
 8012d9e:	2300      	movne	r3, #0
 8012da0:	b2db      	uxtb	r3, r3
 8012da2:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8012da4:	69fb      	ldr	r3, [r7, #28]
 8012da6:	2b00      	cmp	r3, #0
 8012da8:	d00e      	beq.n	8012dc8 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 8012daa:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8012dac:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012dae:	4413      	add	r3, r2
 8012db0:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8012db2:	8b7a      	ldrh	r2, [r7, #26]
 8012db4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8012db6:	429a      	cmp	r2, r3
 8012db8:	f0c0 80a0 	bcc.w	8012efc <ip4_reass+0x2ac>
 8012dbc:	8b7b      	ldrh	r3, [r7, #26]
 8012dbe:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 8012dc2:	4293      	cmp	r3, r2
 8012dc4:	f200 809a 	bhi.w	8012efc <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8012dc8:	69fa      	ldr	r2, [r7, #28]
 8012dca:	6879      	ldr	r1, [r7, #4]
 8012dcc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012dce:	f7ff fdd5 	bl	801297c <ip_reass_chain_frag_into_datagram_and_validate>
 8012dd2:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8012dd4:	697b      	ldr	r3, [r7, #20]
 8012dd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012dda:	f000 8091 	beq.w	8012f00 <ip4_reass+0x2b0>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8012dde:	4b5f      	ldr	r3, [pc, #380]	; (8012f5c <ip4_reass+0x30c>)
 8012de0:	881a      	ldrh	r2, [r3, #0]
 8012de2:	8c3b      	ldrh	r3, [r7, #32]
 8012de4:	4413      	add	r3, r2
 8012de6:	b29a      	uxth	r2, r3
 8012de8:	4b5c      	ldr	r3, [pc, #368]	; (8012f5c <ip4_reass+0x30c>)
 8012dea:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8012dec:	69fb      	ldr	r3, [r7, #28]
 8012dee:	2b00      	cmp	r3, #0
 8012df0:	d00d      	beq.n	8012e0e <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 8012df2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8012df4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012df6:	4413      	add	r3, r2
 8012df8:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8012dfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012dfc:	8a7a      	ldrh	r2, [r7, #18]
 8012dfe:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8012e00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012e02:	7f9b      	ldrb	r3, [r3, #30]
 8012e04:	f043 0301 	orr.w	r3, r3, #1
 8012e08:	b2da      	uxtb	r2, r3
 8012e0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012e0c:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8012e0e:	697b      	ldr	r3, [r7, #20]
 8012e10:	2b01      	cmp	r3, #1
 8012e12:	d171      	bne.n	8012ef8 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8012e14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012e16:	8b9b      	ldrh	r3, [r3, #28]
 8012e18:	3314      	adds	r3, #20
 8012e1a:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8012e1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012e1e:	685b      	ldr	r3, [r3, #4]
 8012e20:	685b      	ldr	r3, [r3, #4]
 8012e22:	681b      	ldr	r3, [r3, #0]
 8012e24:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 8012e26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012e28:	685b      	ldr	r3, [r3, #4]
 8012e2a:	685b      	ldr	r3, [r3, #4]
 8012e2c:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8012e2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012e30:	3308      	adds	r3, #8
 8012e32:	2214      	movs	r2, #20
 8012e34:	4619      	mov	r1, r3
 8012e36:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012e38:	f000 fc59 	bl	80136ee <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8012e3c:	8a3b      	ldrh	r3, [r7, #16]
 8012e3e:	4618      	mov	r0, r3
 8012e40:	f7f4 fba2 	bl	8007588 <lwip_htons>
 8012e44:	4603      	mov	r3, r0
 8012e46:	461a      	mov	r2, r3
 8012e48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012e4a:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8012e4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012e4e:	2200      	movs	r2, #0
 8012e50:	719a      	strb	r2, [r3, #6]
 8012e52:	2200      	movs	r2, #0
 8012e54:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8012e56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012e58:	2200      	movs	r2, #0
 8012e5a:	729a      	strb	r2, [r3, #10]
 8012e5c:	2200      	movs	r2, #0
 8012e5e:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8012e60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012e62:	685b      	ldr	r3, [r3, #4]
 8012e64:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8012e66:	e00d      	b.n	8012e84 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8012e68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012e6a:	685b      	ldr	r3, [r3, #4]
 8012e6c:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 8012e6e:	2114      	movs	r1, #20
 8012e70:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8012e72:	f7f5 feb7 	bl	8008be4 <pbuf_remove_header>
      pbuf_cat(p, r);
 8012e76:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8012e78:	6878      	ldr	r0, [r7, #4]
 8012e7a:	f7f6 f807 	bl	8008e8c <pbuf_cat>
      r = iprh->next_pbuf;
 8012e7e:	68fb      	ldr	r3, [r7, #12]
 8012e80:	681b      	ldr	r3, [r3, #0]
 8012e82:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 8012e84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012e86:	2b00      	cmp	r3, #0
 8012e88:	d1ee      	bne.n	8012e68 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8012e8a:	4b35      	ldr	r3, [pc, #212]	; (8012f60 <ip4_reass+0x310>)
 8012e8c:	681b      	ldr	r3, [r3, #0]
 8012e8e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012e90:	429a      	cmp	r2, r3
 8012e92:	d102      	bne.n	8012e9a <ip4_reass+0x24a>
      ipr_prev = NULL;
 8012e94:	2300      	movs	r3, #0
 8012e96:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012e98:	e010      	b.n	8012ebc <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8012e9a:	4b31      	ldr	r3, [pc, #196]	; (8012f60 <ip4_reass+0x310>)
 8012e9c:	681b      	ldr	r3, [r3, #0]
 8012e9e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012ea0:	e007      	b.n	8012eb2 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 8012ea2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012ea4:	681b      	ldr	r3, [r3, #0]
 8012ea6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012ea8:	429a      	cmp	r2, r3
 8012eaa:	d006      	beq.n	8012eba <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8012eac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012eae:	681b      	ldr	r3, [r3, #0]
 8012eb0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012eb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012eb4:	2b00      	cmp	r3, #0
 8012eb6:	d1f4      	bne.n	8012ea2 <ip4_reass+0x252>
 8012eb8:	e000      	b.n	8012ebc <ip4_reass+0x26c>
          break;
 8012eba:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8012ebc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8012ebe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012ec0:	f7ff fd2e 	bl	8012920 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8012ec4:	6878      	ldr	r0, [r7, #4]
 8012ec6:	f7f5 ffa1 	bl	8008e0c <pbuf_clen>
 8012eca:	4603      	mov	r3, r0
 8012ecc:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8012ece:	4b23      	ldr	r3, [pc, #140]	; (8012f5c <ip4_reass+0x30c>)
 8012ed0:	881b      	ldrh	r3, [r3, #0]
 8012ed2:	8c3a      	ldrh	r2, [r7, #32]
 8012ed4:	429a      	cmp	r2, r3
 8012ed6:	d906      	bls.n	8012ee6 <ip4_reass+0x296>
 8012ed8:	4b22      	ldr	r3, [pc, #136]	; (8012f64 <ip4_reass+0x314>)
 8012eda:	f240 229b 	movw	r2, #667	; 0x29b
 8012ede:	4922      	ldr	r1, [pc, #136]	; (8012f68 <ip4_reass+0x318>)
 8012ee0:	4822      	ldr	r0, [pc, #136]	; (8012f6c <ip4_reass+0x31c>)
 8012ee2:	f000 fc17 	bl	8013714 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8012ee6:	4b1d      	ldr	r3, [pc, #116]	; (8012f5c <ip4_reass+0x30c>)
 8012ee8:	881a      	ldrh	r2, [r3, #0]
 8012eea:	8c3b      	ldrh	r3, [r7, #32]
 8012eec:	1ad3      	subs	r3, r2, r3
 8012eee:	b29a      	uxth	r2, r3
 8012ef0:	4b1a      	ldr	r3, [pc, #104]	; (8012f5c <ip4_reass+0x30c>)
 8012ef2:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8012ef4:	687b      	ldr	r3, [r7, #4]
 8012ef6:	e02c      	b.n	8012f52 <ip4_reass+0x302>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8012ef8:	2300      	movs	r3, #0
 8012efa:	e02a      	b.n	8012f52 <ip4_reass+0x302>

nullreturn_ipr:
 8012efc:	bf00      	nop
 8012efe:	e000      	b.n	8012f02 <ip4_reass+0x2b2>
    goto nullreturn_ipr;
 8012f00:	bf00      	nop
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8012f02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012f04:	2b00      	cmp	r3, #0
 8012f06:	d106      	bne.n	8012f16 <ip4_reass+0x2c6>
 8012f08:	4b16      	ldr	r3, [pc, #88]	; (8012f64 <ip4_reass+0x314>)
 8012f0a:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 8012f0e:	4918      	ldr	r1, [pc, #96]	; (8012f70 <ip4_reass+0x320>)
 8012f10:	4816      	ldr	r0, [pc, #88]	; (8012f6c <ip4_reass+0x31c>)
 8012f12:	f000 fbff 	bl	8013714 <iprintf>
  if (ipr->p == NULL) {
 8012f16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012f18:	685b      	ldr	r3, [r3, #4]
 8012f1a:	2b00      	cmp	r3, #0
 8012f1c:	d114      	bne.n	8012f48 <ip4_reass+0x2f8>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8012f1e:	4b10      	ldr	r3, [pc, #64]	; (8012f60 <ip4_reass+0x310>)
 8012f20:	681b      	ldr	r3, [r3, #0]
 8012f22:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012f24:	429a      	cmp	r2, r3
 8012f26:	d006      	beq.n	8012f36 <ip4_reass+0x2e6>
 8012f28:	4b0e      	ldr	r3, [pc, #56]	; (8012f64 <ip4_reass+0x314>)
 8012f2a:	f240 22ab 	movw	r2, #683	; 0x2ab
 8012f2e:	4911      	ldr	r1, [pc, #68]	; (8012f74 <ip4_reass+0x324>)
 8012f30:	480e      	ldr	r0, [pc, #56]	; (8012f6c <ip4_reass+0x31c>)
 8012f32:	f000 fbef 	bl	8013714 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8012f36:	2100      	movs	r1, #0
 8012f38:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012f3a:	f7ff fcf1 	bl	8012920 <ip_reass_dequeue_datagram>
 8012f3e:	e004      	b.n	8012f4a <ip4_reass+0x2fa>
    goto nullreturn;
 8012f40:	bf00      	nop
 8012f42:	e002      	b.n	8012f4a <ip4_reass+0x2fa>
    goto nullreturn;
 8012f44:	bf00      	nop
 8012f46:	e000      	b.n	8012f4a <ip4_reass+0x2fa>
  }

nullreturn:
 8012f48:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8012f4a:	6878      	ldr	r0, [r7, #4]
 8012f4c:	f7f5 fed0 	bl	8008cf0 <pbuf_free>
  return NULL;
 8012f50:	2300      	movs	r3, #0
}
 8012f52:	4618      	mov	r0, r3
 8012f54:	3738      	adds	r7, #56	; 0x38
 8012f56:	46bd      	mov	sp, r7
 8012f58:	bd80      	pop	{r7, pc}
 8012f5a:	bf00      	nop
 8012f5c:	200085e4 	.word	0x200085e4
 8012f60:	200085e0 	.word	0x200085e0
 8012f64:	080171a4 	.word	0x080171a4
 8012f68:	08017314 	.word	0x08017314
 8012f6c:	080171ec 	.word	0x080171ec
 8012f70:	08017330 	.word	0x08017330
 8012f74:	0801733c 	.word	0x0801733c

08012f78 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8012f78:	b580      	push	{r7, lr}
 8012f7a:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8012f7c:	2005      	movs	r0, #5
 8012f7e:	f7f4 ffb9 	bl	8007ef4 <memp_malloc>
 8012f82:	4603      	mov	r3, r0
}
 8012f84:	4618      	mov	r0, r3
 8012f86:	bd80      	pop	{r7, pc}

08012f88 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8012f88:	b580      	push	{r7, lr}
 8012f8a:	b082      	sub	sp, #8
 8012f8c:	af00      	add	r7, sp, #0
 8012f8e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8012f90:	687b      	ldr	r3, [r7, #4]
 8012f92:	2b00      	cmp	r3, #0
 8012f94:	d106      	bne.n	8012fa4 <ip_frag_free_pbuf_custom_ref+0x1c>
 8012f96:	4b07      	ldr	r3, [pc, #28]	; (8012fb4 <ip_frag_free_pbuf_custom_ref+0x2c>)
 8012f98:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 8012f9c:	4906      	ldr	r1, [pc, #24]	; (8012fb8 <ip_frag_free_pbuf_custom_ref+0x30>)
 8012f9e:	4807      	ldr	r0, [pc, #28]	; (8012fbc <ip_frag_free_pbuf_custom_ref+0x34>)
 8012fa0:	f000 fbb8 	bl	8013714 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8012fa4:	6879      	ldr	r1, [r7, #4]
 8012fa6:	2005      	movs	r0, #5
 8012fa8:	f7f4 fff6 	bl	8007f98 <memp_free>
}
 8012fac:	bf00      	nop
 8012fae:	3708      	adds	r7, #8
 8012fb0:	46bd      	mov	sp, r7
 8012fb2:	bd80      	pop	{r7, pc}
 8012fb4:	080171a4 	.word	0x080171a4
 8012fb8:	0801735c 	.word	0x0801735c
 8012fbc:	080171ec 	.word	0x080171ec

08012fc0 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8012fc0:	b580      	push	{r7, lr}
 8012fc2:	b084      	sub	sp, #16
 8012fc4:	af00      	add	r7, sp, #0
 8012fc6:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8012fc8:	687b      	ldr	r3, [r7, #4]
 8012fca:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8012fcc:	68fb      	ldr	r3, [r7, #12]
 8012fce:	2b00      	cmp	r3, #0
 8012fd0:	d106      	bne.n	8012fe0 <ipfrag_free_pbuf_custom+0x20>
 8012fd2:	4b11      	ldr	r3, [pc, #68]	; (8013018 <ipfrag_free_pbuf_custom+0x58>)
 8012fd4:	f240 22ce 	movw	r2, #718	; 0x2ce
 8012fd8:	4910      	ldr	r1, [pc, #64]	; (801301c <ipfrag_free_pbuf_custom+0x5c>)
 8012fda:	4811      	ldr	r0, [pc, #68]	; (8013020 <ipfrag_free_pbuf_custom+0x60>)
 8012fdc:	f000 fb9a 	bl	8013714 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8012fe0:	68fa      	ldr	r2, [r7, #12]
 8012fe2:	687b      	ldr	r3, [r7, #4]
 8012fe4:	429a      	cmp	r2, r3
 8012fe6:	d006      	beq.n	8012ff6 <ipfrag_free_pbuf_custom+0x36>
 8012fe8:	4b0b      	ldr	r3, [pc, #44]	; (8013018 <ipfrag_free_pbuf_custom+0x58>)
 8012fea:	f240 22cf 	movw	r2, #719	; 0x2cf
 8012fee:	490d      	ldr	r1, [pc, #52]	; (8013024 <ipfrag_free_pbuf_custom+0x64>)
 8012ff0:	480b      	ldr	r0, [pc, #44]	; (8013020 <ipfrag_free_pbuf_custom+0x60>)
 8012ff2:	f000 fb8f 	bl	8013714 <iprintf>
  if (pcr->original != NULL) {
 8012ff6:	68fb      	ldr	r3, [r7, #12]
 8012ff8:	695b      	ldr	r3, [r3, #20]
 8012ffa:	2b00      	cmp	r3, #0
 8012ffc:	d004      	beq.n	8013008 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8012ffe:	68fb      	ldr	r3, [r7, #12]
 8013000:	695b      	ldr	r3, [r3, #20]
 8013002:	4618      	mov	r0, r3
 8013004:	f7f5 fe74 	bl	8008cf0 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8013008:	68f8      	ldr	r0, [r7, #12]
 801300a:	f7ff ffbd 	bl	8012f88 <ip_frag_free_pbuf_custom_ref>
}
 801300e:	bf00      	nop
 8013010:	3710      	adds	r7, #16
 8013012:	46bd      	mov	sp, r7
 8013014:	bd80      	pop	{r7, pc}
 8013016:	bf00      	nop
 8013018:	080171a4 	.word	0x080171a4
 801301c:	08017368 	.word	0x08017368
 8013020:	080171ec 	.word	0x080171ec
 8013024:	08017374 	.word	0x08017374

08013028 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8013028:	b580      	push	{r7, lr}
 801302a:	b094      	sub	sp, #80	; 0x50
 801302c:	af02      	add	r7, sp, #8
 801302e:	60f8      	str	r0, [r7, #12]
 8013030:	60b9      	str	r1, [r7, #8]
 8013032:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8013034:	2300      	movs	r3, #0
 8013036:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 801303a:	68bb      	ldr	r3, [r7, #8]
 801303c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801303e:	3b14      	subs	r3, #20
 8013040:	2b00      	cmp	r3, #0
 8013042:	da00      	bge.n	8013046 <ip4_frag+0x1e>
 8013044:	3307      	adds	r3, #7
 8013046:	10db      	asrs	r3, r3, #3
 8013048:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 801304a:	2314      	movs	r3, #20
 801304c:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 801304e:	68fb      	ldr	r3, [r7, #12]
 8013050:	685b      	ldr	r3, [r3, #4]
 8013052:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 8013054:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013056:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8013058:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801305a:	781b      	ldrb	r3, [r3, #0]
 801305c:	f003 030f 	and.w	r3, r3, #15
 8013060:	b2db      	uxtb	r3, r3
 8013062:	009b      	lsls	r3, r3, #2
 8013064:	b2db      	uxtb	r3, r3
 8013066:	2b14      	cmp	r3, #20
 8013068:	d002      	beq.n	8013070 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 801306a:	f06f 0305 	mvn.w	r3, #5
 801306e:	e10f      	b.n	8013290 <ip4_frag+0x268>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8013070:	68fb      	ldr	r3, [r7, #12]
 8013072:	895b      	ldrh	r3, [r3, #10]
 8013074:	2b13      	cmp	r3, #19
 8013076:	d809      	bhi.n	801308c <ip4_frag+0x64>
 8013078:	4b87      	ldr	r3, [pc, #540]	; (8013298 <ip4_frag+0x270>)
 801307a:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 801307e:	4987      	ldr	r1, [pc, #540]	; (801329c <ip4_frag+0x274>)
 8013080:	4887      	ldr	r0, [pc, #540]	; (80132a0 <ip4_frag+0x278>)
 8013082:	f000 fb47 	bl	8013714 <iprintf>
 8013086:	f06f 0305 	mvn.w	r3, #5
 801308a:	e101      	b.n	8013290 <ip4_frag+0x268>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 801308c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801308e:	88db      	ldrh	r3, [r3, #6]
 8013090:	b29b      	uxth	r3, r3
 8013092:	4618      	mov	r0, r3
 8013094:	f7f4 fa78 	bl	8007588 <lwip_htons>
 8013098:	4603      	mov	r3, r0
 801309a:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 801309c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801309e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80130a2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 80130a6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80130a8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80130ac:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 80130ae:	68fb      	ldr	r3, [r7, #12]
 80130b0:	891b      	ldrh	r3, [r3, #8]
 80130b2:	3b14      	subs	r3, #20
 80130b4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 80130b8:	e0e0      	b.n	801327c <ip4_frag+0x254>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 80130ba:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80130bc:	00db      	lsls	r3, r3, #3
 80130be:	b29b      	uxth	r3, r3
 80130c0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80130c4:	4293      	cmp	r3, r2
 80130c6:	bf28      	it	cs
 80130c8:	4613      	movcs	r3, r2
 80130ca:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 80130cc:	f44f 7220 	mov.w	r2, #640	; 0x280
 80130d0:	2114      	movs	r1, #20
 80130d2:	200e      	movs	r0, #14
 80130d4:	f7f5 fb2c 	bl	8008730 <pbuf_alloc>
 80130d8:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 80130da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80130dc:	2b00      	cmp	r3, #0
 80130de:	f000 80d4 	beq.w	801328a <ip4_frag+0x262>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 80130e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80130e4:	895b      	ldrh	r3, [r3, #10]
 80130e6:	2b13      	cmp	r3, #19
 80130e8:	d806      	bhi.n	80130f8 <ip4_frag+0xd0>
 80130ea:	4b6b      	ldr	r3, [pc, #428]	; (8013298 <ip4_frag+0x270>)
 80130ec:	f240 3225 	movw	r2, #805	; 0x325
 80130f0:	496c      	ldr	r1, [pc, #432]	; (80132a4 <ip4_frag+0x27c>)
 80130f2:	486b      	ldr	r0, [pc, #428]	; (80132a0 <ip4_frag+0x278>)
 80130f4:	f000 fb0e 	bl	8013714 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 80130f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80130fa:	685b      	ldr	r3, [r3, #4]
 80130fc:	2214      	movs	r2, #20
 80130fe:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8013100:	4618      	mov	r0, r3
 8013102:	f000 faf4 	bl	80136ee <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8013106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013108:	685b      	ldr	r3, [r3, #4]
 801310a:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 801310c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801310e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 8013112:	e064      	b.n	80131de <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8013114:	68fb      	ldr	r3, [r7, #12]
 8013116:	895a      	ldrh	r2, [r3, #10]
 8013118:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801311a:	1ad3      	subs	r3, r2, r3
 801311c:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 801311e:	68fb      	ldr	r3, [r7, #12]
 8013120:	895b      	ldrh	r3, [r3, #10]
 8013122:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8013124:	429a      	cmp	r2, r3
 8013126:	d906      	bls.n	8013136 <ip4_frag+0x10e>
 8013128:	4b5b      	ldr	r3, [pc, #364]	; (8013298 <ip4_frag+0x270>)
 801312a:	f240 322d 	movw	r2, #813	; 0x32d
 801312e:	495e      	ldr	r1, [pc, #376]	; (80132a8 <ip4_frag+0x280>)
 8013130:	485b      	ldr	r0, [pc, #364]	; (80132a0 <ip4_frag+0x278>)
 8013132:	f000 faef 	bl	8013714 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8013136:	8bfa      	ldrh	r2, [r7, #30]
 8013138:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801313c:	4293      	cmp	r3, r2
 801313e:	bf28      	it	cs
 8013140:	4613      	movcs	r3, r2
 8013142:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8013146:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801314a:	2b00      	cmp	r3, #0
 801314c:	d105      	bne.n	801315a <ip4_frag+0x132>
        poff = 0;
 801314e:	2300      	movs	r3, #0
 8013150:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8013152:	68fb      	ldr	r3, [r7, #12]
 8013154:	681b      	ldr	r3, [r3, #0]
 8013156:	60fb      	str	r3, [r7, #12]
        continue;
 8013158:	e041      	b.n	80131de <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 801315a:	f7ff ff0d 	bl	8012f78 <ip_frag_alloc_pbuf_custom_ref>
 801315e:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8013160:	69bb      	ldr	r3, [r7, #24]
 8013162:	2b00      	cmp	r3, #0
 8013164:	d103      	bne.n	801316e <ip4_frag+0x146>
        pbuf_free(rambuf);
 8013166:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013168:	f7f5 fdc2 	bl	8008cf0 <pbuf_free>
        goto memerr;
 801316c:	e08e      	b.n	801328c <ip4_frag+0x264>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801316e:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8013170:	68fb      	ldr	r3, [r7, #12]
 8013172:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8013174:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8013176:	4413      	add	r3, r2
 8013178:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 801317c:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8013180:	9201      	str	r2, [sp, #4]
 8013182:	9300      	str	r3, [sp, #0]
 8013184:	4603      	mov	r3, r0
 8013186:	2241      	movs	r2, #65	; 0x41
 8013188:	2000      	movs	r0, #0
 801318a:	f7f5 fbf7 	bl	800897c <pbuf_alloced_custom>
 801318e:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8013190:	697b      	ldr	r3, [r7, #20]
 8013192:	2b00      	cmp	r3, #0
 8013194:	d106      	bne.n	80131a4 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8013196:	69b8      	ldr	r0, [r7, #24]
 8013198:	f7ff fef6 	bl	8012f88 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 801319c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801319e:	f7f5 fda7 	bl	8008cf0 <pbuf_free>
        goto memerr;
 80131a2:	e073      	b.n	801328c <ip4_frag+0x264>
      }
      pbuf_ref(p);
 80131a4:	68f8      	ldr	r0, [r7, #12]
 80131a6:	f7f5 fe49 	bl	8008e3c <pbuf_ref>
      pcr->original = p;
 80131aa:	69bb      	ldr	r3, [r7, #24]
 80131ac:	68fa      	ldr	r2, [r7, #12]
 80131ae:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 80131b0:	69bb      	ldr	r3, [r7, #24]
 80131b2:	4a3e      	ldr	r2, [pc, #248]	; (80132ac <ip4_frag+0x284>)
 80131b4:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 80131b6:	6979      	ldr	r1, [r7, #20]
 80131b8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80131ba:	f7f5 fe67 	bl	8008e8c <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 80131be:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 80131c2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80131c6:	1ad3      	subs	r3, r2, r3
 80131c8:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 80131cc:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80131d0:	2b00      	cmp	r3, #0
 80131d2:	d004      	beq.n	80131de <ip4_frag+0x1b6>
        poff = 0;
 80131d4:	2300      	movs	r3, #0
 80131d6:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 80131d8:	68fb      	ldr	r3, [r7, #12]
 80131da:	681b      	ldr	r3, [r3, #0]
 80131dc:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 80131de:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80131e2:	2b00      	cmp	r3, #0
 80131e4:	d196      	bne.n	8013114 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 80131e6:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80131e8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80131ec:	4413      	add	r3, r2
 80131ee:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 80131f0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80131f4:	68bb      	ldr	r3, [r7, #8]
 80131f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80131f8:	3b14      	subs	r3, #20
 80131fa:	429a      	cmp	r2, r3
 80131fc:	bfd4      	ite	le
 80131fe:	2301      	movle	r3, #1
 8013200:	2300      	movgt	r3, #0
 8013202:	b2db      	uxtb	r3, r3
 8013204:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8013206:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801320a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801320e:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 8013210:	6a3b      	ldr	r3, [r7, #32]
 8013212:	2b00      	cmp	r3, #0
 8013214:	d002      	beq.n	801321c <ip4_frag+0x1f4>
 8013216:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013218:	2b00      	cmp	r3, #0
 801321a:	d003      	beq.n	8013224 <ip4_frag+0x1fc>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 801321c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801321e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8013222:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8013224:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8013226:	4618      	mov	r0, r3
 8013228:	f7f4 f9ae 	bl	8007588 <lwip_htons>
 801322c:	4603      	mov	r3, r0
 801322e:	461a      	mov	r2, r3
 8013230:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013232:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8013234:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8013236:	3314      	adds	r3, #20
 8013238:	b29b      	uxth	r3, r3
 801323a:	4618      	mov	r0, r3
 801323c:	f7f4 f9a4 	bl	8007588 <lwip_htons>
 8013240:	4603      	mov	r3, r0
 8013242:	461a      	mov	r2, r3
 8013244:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013246:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8013248:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801324a:	2200      	movs	r2, #0
 801324c:	729a      	strb	r2, [r3, #10]
 801324e:	2200      	movs	r2, #0
 8013250:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8013252:	68bb      	ldr	r3, [r7, #8]
 8013254:	695b      	ldr	r3, [r3, #20]
 8013256:	687a      	ldr	r2, [r7, #4]
 8013258:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801325a:	68b8      	ldr	r0, [r7, #8]
 801325c:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 801325e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013260:	f7f5 fd46 	bl	8008cf0 <pbuf_free>
    left = (u16_t)(left - fragsize);
 8013264:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8013268:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801326a:	1ad3      	subs	r3, r2, r3
 801326c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 8013270:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8013274:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8013276:	4413      	add	r3, r2
 8013278:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 801327c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8013280:	2b00      	cmp	r3, #0
 8013282:	f47f af1a 	bne.w	80130ba <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8013286:	2300      	movs	r3, #0
 8013288:	e002      	b.n	8013290 <ip4_frag+0x268>
      goto memerr;
 801328a:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 801328c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8013290:	4618      	mov	r0, r3
 8013292:	3748      	adds	r7, #72	; 0x48
 8013294:	46bd      	mov	sp, r7
 8013296:	bd80      	pop	{r7, pc}
 8013298:	080171a4 	.word	0x080171a4
 801329c:	08017380 	.word	0x08017380
 80132a0:	080171ec 	.word	0x080171ec
 80132a4:	0801739c 	.word	0x0801739c
 80132a8:	080173bc 	.word	0x080173bc
 80132ac:	08012fc1 	.word	0x08012fc1

080132b0 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 80132b0:	b580      	push	{r7, lr}
 80132b2:	b086      	sub	sp, #24
 80132b4:	af00      	add	r7, sp, #0
 80132b6:	6078      	str	r0, [r7, #4]
 80132b8:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 80132ba:	230e      	movs	r3, #14
 80132bc:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 80132be:	687b      	ldr	r3, [r7, #4]
 80132c0:	895b      	ldrh	r3, [r3, #10]
 80132c2:	2b0e      	cmp	r3, #14
 80132c4:	d96e      	bls.n	80133a4 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 80132c6:	687b      	ldr	r3, [r7, #4]
 80132c8:	7bdb      	ldrb	r3, [r3, #15]
 80132ca:	2b00      	cmp	r3, #0
 80132cc:	d106      	bne.n	80132dc <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 80132ce:	683b      	ldr	r3, [r7, #0]
 80132d0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80132d4:	3301      	adds	r3, #1
 80132d6:	b2da      	uxtb	r2, r3
 80132d8:	687b      	ldr	r3, [r7, #4]
 80132da:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 80132dc:	687b      	ldr	r3, [r7, #4]
 80132de:	685b      	ldr	r3, [r3, #4]
 80132e0:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 80132e2:	693b      	ldr	r3, [r7, #16]
 80132e4:	7b1a      	ldrb	r2, [r3, #12]
 80132e6:	7b5b      	ldrb	r3, [r3, #13]
 80132e8:	021b      	lsls	r3, r3, #8
 80132ea:	4313      	orrs	r3, r2
 80132ec:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 80132ee:	693b      	ldr	r3, [r7, #16]
 80132f0:	781b      	ldrb	r3, [r3, #0]
 80132f2:	f003 0301 	and.w	r3, r3, #1
 80132f6:	2b00      	cmp	r3, #0
 80132f8:	d023      	beq.n	8013342 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 80132fa:	693b      	ldr	r3, [r7, #16]
 80132fc:	781b      	ldrb	r3, [r3, #0]
 80132fe:	2b01      	cmp	r3, #1
 8013300:	d10f      	bne.n	8013322 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8013302:	693b      	ldr	r3, [r7, #16]
 8013304:	785b      	ldrb	r3, [r3, #1]
 8013306:	2b00      	cmp	r3, #0
 8013308:	d11b      	bne.n	8013342 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 801330a:	693b      	ldr	r3, [r7, #16]
 801330c:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801330e:	2b5e      	cmp	r3, #94	; 0x5e
 8013310:	d117      	bne.n	8013342 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8013312:	687b      	ldr	r3, [r7, #4]
 8013314:	7b5b      	ldrb	r3, [r3, #13]
 8013316:	f043 0310 	orr.w	r3, r3, #16
 801331a:	b2da      	uxtb	r2, r3
 801331c:	687b      	ldr	r3, [r7, #4]
 801331e:	735a      	strb	r2, [r3, #13]
 8013320:	e00f      	b.n	8013342 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8013322:	693b      	ldr	r3, [r7, #16]
 8013324:	2206      	movs	r2, #6
 8013326:	4928      	ldr	r1, [pc, #160]	; (80133c8 <ethernet_input+0x118>)
 8013328:	4618      	mov	r0, r3
 801332a:	f000 f9d1 	bl	80136d0 <memcmp>
 801332e:	4603      	mov	r3, r0
 8013330:	2b00      	cmp	r3, #0
 8013332:	d106      	bne.n	8013342 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8013334:	687b      	ldr	r3, [r7, #4]
 8013336:	7b5b      	ldrb	r3, [r3, #13]
 8013338:	f043 0308 	orr.w	r3, r3, #8
 801333c:	b2da      	uxtb	r2, r3
 801333e:	687b      	ldr	r3, [r7, #4]
 8013340:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8013342:	89fb      	ldrh	r3, [r7, #14]
 8013344:	2b08      	cmp	r3, #8
 8013346:	d003      	beq.n	8013350 <ethernet_input+0xa0>
 8013348:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 801334c:	d014      	beq.n	8013378 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 801334e:	e032      	b.n	80133b6 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8013350:	683b      	ldr	r3, [r7, #0]
 8013352:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8013356:	f003 0308 	and.w	r3, r3, #8
 801335a:	2b00      	cmp	r3, #0
 801335c:	d024      	beq.n	80133a8 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801335e:	8afb      	ldrh	r3, [r7, #22]
 8013360:	4619      	mov	r1, r3
 8013362:	6878      	ldr	r0, [r7, #4]
 8013364:	f7f5 fc3e 	bl	8008be4 <pbuf_remove_header>
 8013368:	4603      	mov	r3, r0
 801336a:	2b00      	cmp	r3, #0
 801336c:	d11e      	bne.n	80133ac <ethernet_input+0xfc>
        ip4_input(p, netif);
 801336e:	6839      	ldr	r1, [r7, #0]
 8013370:	6878      	ldr	r0, [r7, #4]
 8013372:	f7fe ff0f 	bl	8012194 <ip4_input>
      break;
 8013376:	e013      	b.n	80133a0 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8013378:	683b      	ldr	r3, [r7, #0]
 801337a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801337e:	f003 0308 	and.w	r3, r3, #8
 8013382:	2b00      	cmp	r3, #0
 8013384:	d014      	beq.n	80133b0 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8013386:	8afb      	ldrh	r3, [r7, #22]
 8013388:	4619      	mov	r1, r3
 801338a:	6878      	ldr	r0, [r7, #4]
 801338c:	f7f5 fc2a 	bl	8008be4 <pbuf_remove_header>
 8013390:	4603      	mov	r3, r0
 8013392:	2b00      	cmp	r3, #0
 8013394:	d10e      	bne.n	80133b4 <ethernet_input+0x104>
        etharp_input(p, netif);
 8013396:	6839      	ldr	r1, [r7, #0]
 8013398:	6878      	ldr	r0, [r7, #4]
 801339a:	f7fe f8ab 	bl	80114f4 <etharp_input>
      break;
 801339e:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 80133a0:	2300      	movs	r3, #0
 80133a2:	e00c      	b.n	80133be <ethernet_input+0x10e>
    goto free_and_return;
 80133a4:	bf00      	nop
 80133a6:	e006      	b.n	80133b6 <ethernet_input+0x106>
        goto free_and_return;
 80133a8:	bf00      	nop
 80133aa:	e004      	b.n	80133b6 <ethernet_input+0x106>
        goto free_and_return;
 80133ac:	bf00      	nop
 80133ae:	e002      	b.n	80133b6 <ethernet_input+0x106>
        goto free_and_return;
 80133b0:	bf00      	nop
 80133b2:	e000      	b.n	80133b6 <ethernet_input+0x106>
        goto free_and_return;
 80133b4:	bf00      	nop

free_and_return:
  pbuf_free(p);
 80133b6:	6878      	ldr	r0, [r7, #4]
 80133b8:	f7f5 fc9a 	bl	8008cf0 <pbuf_free>
  return ERR_OK;
 80133bc:	2300      	movs	r3, #0
}
 80133be:	4618      	mov	r0, r3
 80133c0:	3718      	adds	r7, #24
 80133c2:	46bd      	mov	sp, r7
 80133c4:	bd80      	pop	{r7, pc}
 80133c6:	bf00      	nop
 80133c8:	080175a0 	.word	0x080175a0

080133cc <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 80133cc:	b580      	push	{r7, lr}
 80133ce:	b086      	sub	sp, #24
 80133d0:	af00      	add	r7, sp, #0
 80133d2:	60f8      	str	r0, [r7, #12]
 80133d4:	60b9      	str	r1, [r7, #8]
 80133d6:	607a      	str	r2, [r7, #4]
 80133d8:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 80133da:	8c3b      	ldrh	r3, [r7, #32]
 80133dc:	4618      	mov	r0, r3
 80133de:	f7f4 f8d3 	bl	8007588 <lwip_htons>
 80133e2:	4603      	mov	r3, r0
 80133e4:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 80133e6:	210e      	movs	r1, #14
 80133e8:	68b8      	ldr	r0, [r7, #8]
 80133ea:	f7f5 fbeb 	bl	8008bc4 <pbuf_add_header>
 80133ee:	4603      	mov	r3, r0
 80133f0:	2b00      	cmp	r3, #0
 80133f2:	d125      	bne.n	8013440 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 80133f4:	68bb      	ldr	r3, [r7, #8]
 80133f6:	685b      	ldr	r3, [r3, #4]
 80133f8:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 80133fa:	693b      	ldr	r3, [r7, #16]
 80133fc:	8afa      	ldrh	r2, [r7, #22]
 80133fe:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8013400:	693b      	ldr	r3, [r7, #16]
 8013402:	2206      	movs	r2, #6
 8013404:	6839      	ldr	r1, [r7, #0]
 8013406:	4618      	mov	r0, r3
 8013408:	f000 f971 	bl	80136ee <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 801340c:	693b      	ldr	r3, [r7, #16]
 801340e:	3306      	adds	r3, #6
 8013410:	2206      	movs	r2, #6
 8013412:	6879      	ldr	r1, [r7, #4]
 8013414:	4618      	mov	r0, r3
 8013416:	f000 f96a 	bl	80136ee <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 801341a:	68fb      	ldr	r3, [r7, #12]
 801341c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8013420:	2b06      	cmp	r3, #6
 8013422:	d006      	beq.n	8013432 <ethernet_output+0x66>
 8013424:	4b0a      	ldr	r3, [pc, #40]	; (8013450 <ethernet_output+0x84>)
 8013426:	f240 1233 	movw	r2, #307	; 0x133
 801342a:	490a      	ldr	r1, [pc, #40]	; (8013454 <ethernet_output+0x88>)
 801342c:	480a      	ldr	r0, [pc, #40]	; (8013458 <ethernet_output+0x8c>)
 801342e:	f000 f971 	bl	8013714 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8013432:	68fb      	ldr	r3, [r7, #12]
 8013434:	699b      	ldr	r3, [r3, #24]
 8013436:	68b9      	ldr	r1, [r7, #8]
 8013438:	68f8      	ldr	r0, [r7, #12]
 801343a:	4798      	blx	r3
 801343c:	4603      	mov	r3, r0
 801343e:	e002      	b.n	8013446 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8013440:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8013442:	f06f 0301 	mvn.w	r3, #1
}
 8013446:	4618      	mov	r0, r3
 8013448:	3718      	adds	r7, #24
 801344a:	46bd      	mov	sp, r7
 801344c:	bd80      	pop	{r7, pc}
 801344e:	bf00      	nop
 8013450:	080173cc 	.word	0x080173cc
 8013454:	08017404 	.word	0x08017404
 8013458:	08017438 	.word	0x08017438

0801345c <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 801345c:	b580      	push	{r7, lr}
 801345e:	b086      	sub	sp, #24
 8013460:	af00      	add	r7, sp, #0
 8013462:	6078      	str	r0, [r7, #4]
 8013464:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 8013466:	683b      	ldr	r3, [r7, #0]
 8013468:	60bb      	str	r3, [r7, #8]
 801346a:	2304      	movs	r3, #4
 801346c:	60fb      	str	r3, [r7, #12]
 801346e:	2300      	movs	r3, #0
 8013470:	613b      	str	r3, [r7, #16]
 8013472:	2300      	movs	r3, #0
 8013474:	617b      	str	r3, [r7, #20]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 8013476:	f107 0308 	add.w	r3, r7, #8
 801347a:	2100      	movs	r1, #0
 801347c:	4618      	mov	r0, r3
 801347e:	f7f1 fa07 	bl	8004890 <osMessageCreate>
 8013482:	4602      	mov	r2, r0
 8013484:	687b      	ldr	r3, [r7, #4]
 8013486:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 8013488:	687b      	ldr	r3, [r7, #4]
 801348a:	681b      	ldr	r3, [r3, #0]
 801348c:	2b00      	cmp	r3, #0
 801348e:	d102      	bne.n	8013496 <sys_mbox_new+0x3a>
    return ERR_MEM;
 8013490:	f04f 33ff 	mov.w	r3, #4294967295
 8013494:	e000      	b.n	8013498 <sys_mbox_new+0x3c>

  return ERR_OK;
 8013496:	2300      	movs	r3, #0
}
 8013498:	4618      	mov	r0, r3
 801349a:	3718      	adds	r7, #24
 801349c:	46bd      	mov	sp, r7
 801349e:	bd80      	pop	{r7, pc}

080134a0 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 80134a0:	b580      	push	{r7, lr}
 80134a2:	b084      	sub	sp, #16
 80134a4:	af00      	add	r7, sp, #0
 80134a6:	6078      	str	r0, [r7, #4]
 80134a8:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 80134aa:	687b      	ldr	r3, [r7, #4]
 80134ac:	681b      	ldr	r3, [r3, #0]
 80134ae:	6839      	ldr	r1, [r7, #0]
 80134b0:	2200      	movs	r2, #0
 80134b2:	4618      	mov	r0, r3
 80134b4:	f7f1 fa16 	bl	80048e4 <osMessagePut>
 80134b8:	4603      	mov	r3, r0
 80134ba:	2b00      	cmp	r3, #0
 80134bc:	d102      	bne.n	80134c4 <sys_mbox_trypost+0x24>
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
#endif
  {
    result = ERR_OK;
 80134be:	2300      	movs	r3, #0
 80134c0:	73fb      	strb	r3, [r7, #15]
 80134c2:	e001      	b.n	80134c8 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 80134c4:	23ff      	movs	r3, #255	; 0xff
 80134c6:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 80134c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80134cc:	4618      	mov	r0, r3
 80134ce:	3710      	adds	r7, #16
 80134d0:	46bd      	mov	sp, r7
 80134d2:	bd80      	pop	{r7, pc}

080134d4 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 80134d4:	b580      	push	{r7, lr}
 80134d6:	b08c      	sub	sp, #48	; 0x30
 80134d8:	af00      	add	r7, sp, #0
 80134da:	61f8      	str	r0, [r7, #28]
 80134dc:	61b9      	str	r1, [r7, #24]
 80134de:	617a      	str	r2, [r7, #20]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 80134e0:	f7f1 f811 	bl	8004506 <osKernelSysTick>
 80134e4:	62f8      	str	r0, [r7, #44]	; 0x2c
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 80134e6:	697b      	ldr	r3, [r7, #20]
 80134e8:	2b00      	cmp	r3, #0
 80134ea:	d017      	beq.n	801351c <sys_arch_mbox_fetch+0x48>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 80134ec:	69fb      	ldr	r3, [r7, #28]
 80134ee:	6819      	ldr	r1, [r3, #0]
 80134f0:	f107 0320 	add.w	r3, r7, #32
 80134f4:	697a      	ldr	r2, [r7, #20]
 80134f6:	4618      	mov	r0, r3
 80134f8:	f7f1 fa34 	bl	8004964 <osMessageGet>

    if(event.status == osEventMessage)
 80134fc:	6a3b      	ldr	r3, [r7, #32]
 80134fe:	2b10      	cmp	r3, #16
 8013500:	d109      	bne.n	8013516 <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 8013502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013504:	461a      	mov	r2, r3
 8013506:	69bb      	ldr	r3, [r7, #24]
 8013508:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 801350a:	f7f0 fffc 	bl	8004506 <osKernelSysTick>
 801350e:	4602      	mov	r2, r0
 8013510:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013512:	1ad3      	subs	r3, r2, r3
 8013514:	e019      	b.n	801354a <sys_arch_mbox_fetch+0x76>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 8013516:	f04f 33ff 	mov.w	r3, #4294967295
 801351a:	e016      	b.n	801354a <sys_arch_mbox_fetch+0x76>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
 801351c:	69fb      	ldr	r3, [r7, #28]
 801351e:	6819      	ldr	r1, [r3, #0]
 8013520:	463b      	mov	r3, r7
 8013522:	f04f 32ff 	mov.w	r2, #4294967295
 8013526:	4618      	mov	r0, r3
 8013528:	f7f1 fa1c 	bl	8004964 <osMessageGet>
 801352c:	f107 0320 	add.w	r3, r7, #32
 8013530:	463a      	mov	r2, r7
 8013532:	ca07      	ldmia	r2, {r0, r1, r2}
 8013534:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 8013538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801353a:	461a      	mov	r2, r3
 801353c:	69bb      	ldr	r3, [r7, #24]
 801353e:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 8013540:	f7f0 ffe1 	bl	8004506 <osKernelSysTick>
 8013544:	4602      	mov	r2, r0
 8013546:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013548:	1ad3      	subs	r3, r2, r3
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 801354a:	4618      	mov	r0, r3
 801354c:	3730      	adds	r7, #48	; 0x30
 801354e:	46bd      	mov	sp, r7
 8013550:	bd80      	pop	{r7, pc}

08013552 <sys_mbox_valid>:
    return SYS_MBOX_EMPTY;
  }
}
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 8013552:	b480      	push	{r7}
 8013554:	b083      	sub	sp, #12
 8013556:	af00      	add	r7, sp, #0
 8013558:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 801355a:	687b      	ldr	r3, [r7, #4]
 801355c:	681b      	ldr	r3, [r3, #0]
 801355e:	2b00      	cmp	r3, #0
 8013560:	d101      	bne.n	8013566 <sys_mbox_valid+0x14>
    return 0;
 8013562:	2300      	movs	r3, #0
 8013564:	e000      	b.n	8013568 <sys_mbox_valid+0x16>
  else
    return 1;
 8013566:	2301      	movs	r3, #1
}
 8013568:	4618      	mov	r0, r3
 801356a:	370c      	adds	r7, #12
 801356c:	46bd      	mov	sp, r7
 801356e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013572:	4770      	bx	lr

08013574 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 8013574:	b580      	push	{r7, lr}
 8013576:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 8013578:	4803      	ldr	r0, [pc, #12]	; (8013588 <sys_init+0x14>)
 801357a:	f7f1 f834 	bl	80045e6 <osMutexCreate>
 801357e:	4602      	mov	r2, r0
 8013580:	4b02      	ldr	r3, [pc, #8]	; (801358c <sys_init+0x18>)
 8013582:	601a      	str	r2, [r3, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 8013584:	bf00      	nop
 8013586:	bd80      	pop	{r7, pc}
 8013588:	080175b0 	.word	0x080175b0
 801358c:	2000ef2c 	.word	0x2000ef2c

08013590 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 8013590:	b580      	push	{r7, lr}
 8013592:	b084      	sub	sp, #16
 8013594:	af00      	add	r7, sp, #0
 8013596:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 8013598:	2300      	movs	r3, #0
 801359a:	60bb      	str	r3, [r7, #8]
 801359c:	2300      	movs	r3, #0
 801359e:	60fb      	str	r3, [r7, #12]
  *mutex = osMutexCreate(osMutex(MUTEX));
 80135a0:	f107 0308 	add.w	r3, r7, #8
 80135a4:	4618      	mov	r0, r3
 80135a6:	f7f1 f81e 	bl	80045e6 <osMutexCreate>
 80135aa:	4602      	mov	r2, r0
 80135ac:	687b      	ldr	r3, [r7, #4]
 80135ae:	601a      	str	r2, [r3, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 80135b0:	687b      	ldr	r3, [r7, #4]
 80135b2:	681b      	ldr	r3, [r3, #0]
 80135b4:	2b00      	cmp	r3, #0
 80135b6:	d102      	bne.n	80135be <sys_mutex_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 80135b8:	f04f 33ff 	mov.w	r3, #4294967295
 80135bc:	e000      	b.n	80135c0 <sys_mutex_new+0x30>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 80135be:	2300      	movs	r3, #0
}
 80135c0:	4618      	mov	r0, r3
 80135c2:	3710      	adds	r7, #16
 80135c4:	46bd      	mov	sp, r7
 80135c6:	bd80      	pop	{r7, pc}

080135c8 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 80135c8:	b580      	push	{r7, lr}
 80135ca:	b082      	sub	sp, #8
 80135cc:	af00      	add	r7, sp, #0
 80135ce:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 80135d0:	687b      	ldr	r3, [r7, #4]
 80135d2:	681b      	ldr	r3, [r3, #0]
 80135d4:	f04f 31ff 	mov.w	r1, #4294967295
 80135d8:	4618      	mov	r0, r3
 80135da:	f7f1 f81d 	bl	8004618 <osMutexWait>
#else
  osMutexAcquire(*mutex, osWaitForever);
#endif
}
 80135de:	bf00      	nop
 80135e0:	3708      	adds	r7, #8
 80135e2:	46bd      	mov	sp, r7
 80135e4:	bd80      	pop	{r7, pc}

080135e6 <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 80135e6:	b580      	push	{r7, lr}
 80135e8:	b082      	sub	sp, #8
 80135ea:	af00      	add	r7, sp, #0
 80135ec:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 80135ee:	687b      	ldr	r3, [r7, #4]
 80135f0:	681b      	ldr	r3, [r3, #0]
 80135f2:	4618      	mov	r0, r3
 80135f4:	f7f1 f85e 	bl	80046b4 <osMutexRelease>
}
 80135f8:	bf00      	nop
 80135fa:	3708      	adds	r7, #8
 80135fc:	46bd      	mov	sp, r7
 80135fe:	bd80      	pop	{r7, pc}

08013600 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 8013600:	b580      	push	{r7, lr}
 8013602:	b08c      	sub	sp, #48	; 0x30
 8013604:	af00      	add	r7, sp, #0
 8013606:	60f8      	str	r0, [r7, #12]
 8013608:	60b9      	str	r1, [r7, #8]
 801360a:	607a      	str	r2, [r7, #4]
 801360c:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 801360e:	f107 0314 	add.w	r3, r7, #20
 8013612:	2200      	movs	r2, #0
 8013614:	601a      	str	r2, [r3, #0]
 8013616:	605a      	str	r2, [r3, #4]
 8013618:	609a      	str	r2, [r3, #8]
 801361a:	60da      	str	r2, [r3, #12]
 801361c:	611a      	str	r2, [r3, #16]
 801361e:	615a      	str	r2, [r3, #20]
 8013620:	619a      	str	r2, [r3, #24]
 8013622:	68fb      	ldr	r3, [r7, #12]
 8013624:	617b      	str	r3, [r7, #20]
 8013626:	68bb      	ldr	r3, [r7, #8]
 8013628:	61bb      	str	r3, [r7, #24]
 801362a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801362c:	b21b      	sxth	r3, r3
 801362e:	83bb      	strh	r3, [r7, #28]
 8013630:	683b      	ldr	r3, [r7, #0]
 8013632:	627b      	str	r3, [r7, #36]	; 0x24
  return osThreadCreate(&os_thread_def, arg);
 8013634:	f107 0314 	add.w	r3, r7, #20
 8013638:	6879      	ldr	r1, [r7, #4]
 801363a:	4618      	mov	r0, r3
 801363c:	f7f0 ff73 	bl	8004526 <osThreadCreate>
 8013640:	4603      	mov	r3, r0
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 8013642:	4618      	mov	r0, r3
 8013644:	3730      	adds	r7, #48	; 0x30
 8013646:	46bd      	mov	sp, r7
 8013648:	bd80      	pop	{r7, pc}
	...

0801364c <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 801364c:	b580      	push	{r7, lr}
 801364e:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 8013650:	4b04      	ldr	r3, [pc, #16]	; (8013664 <sys_arch_protect+0x18>)
 8013652:	681b      	ldr	r3, [r3, #0]
 8013654:	f04f 31ff 	mov.w	r1, #4294967295
 8013658:	4618      	mov	r0, r3
 801365a:	f7f0 ffdd 	bl	8004618 <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
 801365e:	2301      	movs	r3, #1
}
 8013660:	4618      	mov	r0, r3
 8013662:	bd80      	pop	{r7, pc}
 8013664:	2000ef2c 	.word	0x2000ef2c

08013668 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 8013668:	b580      	push	{r7, lr}
 801366a:	b082      	sub	sp, #8
 801366c:	af00      	add	r7, sp, #0
 801366e:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 8013670:	4b04      	ldr	r3, [pc, #16]	; (8013684 <sys_arch_unprotect+0x1c>)
 8013672:	681b      	ldr	r3, [r3, #0]
 8013674:	4618      	mov	r0, r3
 8013676:	f7f1 f81d 	bl	80046b4 <osMutexRelease>
}
 801367a:	bf00      	nop
 801367c:	3708      	adds	r7, #8
 801367e:	46bd      	mov	sp, r7
 8013680:	bd80      	pop	{r7, pc}
 8013682:	bf00      	nop
 8013684:	2000ef2c 	.word	0x2000ef2c

08013688 <__libc_init_array>:
 8013688:	b570      	push	{r4, r5, r6, lr}
 801368a:	4e0d      	ldr	r6, [pc, #52]	; (80136c0 <__libc_init_array+0x38>)
 801368c:	4c0d      	ldr	r4, [pc, #52]	; (80136c4 <__libc_init_array+0x3c>)
 801368e:	1ba4      	subs	r4, r4, r6
 8013690:	10a4      	asrs	r4, r4, #2
 8013692:	2500      	movs	r5, #0
 8013694:	42a5      	cmp	r5, r4
 8013696:	d109      	bne.n	80136ac <__libc_init_array+0x24>
 8013698:	4e0b      	ldr	r6, [pc, #44]	; (80136c8 <__libc_init_array+0x40>)
 801369a:	4c0c      	ldr	r4, [pc, #48]	; (80136cc <__libc_init_array+0x44>)
 801369c:	f000 ff5a 	bl	8014554 <_init>
 80136a0:	1ba4      	subs	r4, r4, r6
 80136a2:	10a4      	asrs	r4, r4, #2
 80136a4:	2500      	movs	r5, #0
 80136a6:	42a5      	cmp	r5, r4
 80136a8:	d105      	bne.n	80136b6 <__libc_init_array+0x2e>
 80136aa:	bd70      	pop	{r4, r5, r6, pc}
 80136ac:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80136b0:	4798      	blx	r3
 80136b2:	3501      	adds	r5, #1
 80136b4:	e7ee      	b.n	8013694 <__libc_init_array+0xc>
 80136b6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80136ba:	4798      	blx	r3
 80136bc:	3501      	adds	r5, #1
 80136be:	e7f2      	b.n	80136a6 <__libc_init_array+0x1e>
 80136c0:	08017658 	.word	0x08017658
 80136c4:	08017658 	.word	0x08017658
 80136c8:	08017658 	.word	0x08017658
 80136cc:	0801765c 	.word	0x0801765c

080136d0 <memcmp>:
 80136d0:	b530      	push	{r4, r5, lr}
 80136d2:	2400      	movs	r4, #0
 80136d4:	42a2      	cmp	r2, r4
 80136d6:	d101      	bne.n	80136dc <memcmp+0xc>
 80136d8:	2000      	movs	r0, #0
 80136da:	e007      	b.n	80136ec <memcmp+0x1c>
 80136dc:	5d03      	ldrb	r3, [r0, r4]
 80136de:	3401      	adds	r4, #1
 80136e0:	190d      	adds	r5, r1, r4
 80136e2:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 80136e6:	42ab      	cmp	r3, r5
 80136e8:	d0f4      	beq.n	80136d4 <memcmp+0x4>
 80136ea:	1b58      	subs	r0, r3, r5
 80136ec:	bd30      	pop	{r4, r5, pc}

080136ee <memcpy>:
 80136ee:	b510      	push	{r4, lr}
 80136f0:	1e43      	subs	r3, r0, #1
 80136f2:	440a      	add	r2, r1
 80136f4:	4291      	cmp	r1, r2
 80136f6:	d100      	bne.n	80136fa <memcpy+0xc>
 80136f8:	bd10      	pop	{r4, pc}
 80136fa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80136fe:	f803 4f01 	strb.w	r4, [r3, #1]!
 8013702:	e7f7      	b.n	80136f4 <memcpy+0x6>

08013704 <memset>:
 8013704:	4402      	add	r2, r0
 8013706:	4603      	mov	r3, r0
 8013708:	4293      	cmp	r3, r2
 801370a:	d100      	bne.n	801370e <memset+0xa>
 801370c:	4770      	bx	lr
 801370e:	f803 1b01 	strb.w	r1, [r3], #1
 8013712:	e7f9      	b.n	8013708 <memset+0x4>

08013714 <iprintf>:
 8013714:	b40f      	push	{r0, r1, r2, r3}
 8013716:	4b0a      	ldr	r3, [pc, #40]	; (8013740 <iprintf+0x2c>)
 8013718:	b513      	push	{r0, r1, r4, lr}
 801371a:	681c      	ldr	r4, [r3, #0]
 801371c:	b124      	cbz	r4, 8013728 <iprintf+0x14>
 801371e:	69a3      	ldr	r3, [r4, #24]
 8013720:	b913      	cbnz	r3, 8013728 <iprintf+0x14>
 8013722:	4620      	mov	r0, r4
 8013724:	f000 f882 	bl	801382c <__sinit>
 8013728:	ab05      	add	r3, sp, #20
 801372a:	9a04      	ldr	r2, [sp, #16]
 801372c:	68a1      	ldr	r1, [r4, #8]
 801372e:	9301      	str	r3, [sp, #4]
 8013730:	4620      	mov	r0, r4
 8013732:	f000 f9df 	bl	8013af4 <_vfiprintf_r>
 8013736:	b002      	add	sp, #8
 8013738:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801373c:	b004      	add	sp, #16
 801373e:	4770      	bx	lr
 8013740:	20000020 	.word	0x20000020

08013744 <rand>:
 8013744:	b538      	push	{r3, r4, r5, lr}
 8013746:	4b13      	ldr	r3, [pc, #76]	; (8013794 <rand+0x50>)
 8013748:	681c      	ldr	r4, [r3, #0]
 801374a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801374c:	b97b      	cbnz	r3, 801376e <rand+0x2a>
 801374e:	2018      	movs	r0, #24
 8013750:	f000 f8f6 	bl	8013940 <malloc>
 8013754:	4a10      	ldr	r2, [pc, #64]	; (8013798 <rand+0x54>)
 8013756:	4b11      	ldr	r3, [pc, #68]	; (801379c <rand+0x58>)
 8013758:	63a0      	str	r0, [r4, #56]	; 0x38
 801375a:	e9c0 2300 	strd	r2, r3, [r0]
 801375e:	4b10      	ldr	r3, [pc, #64]	; (80137a0 <rand+0x5c>)
 8013760:	6083      	str	r3, [r0, #8]
 8013762:	230b      	movs	r3, #11
 8013764:	8183      	strh	r3, [r0, #12]
 8013766:	2201      	movs	r2, #1
 8013768:	2300      	movs	r3, #0
 801376a:	e9c0 2304 	strd	r2, r3, [r0, #16]
 801376e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8013770:	480c      	ldr	r0, [pc, #48]	; (80137a4 <rand+0x60>)
 8013772:	690a      	ldr	r2, [r1, #16]
 8013774:	694b      	ldr	r3, [r1, #20]
 8013776:	4c0c      	ldr	r4, [pc, #48]	; (80137a8 <rand+0x64>)
 8013778:	4350      	muls	r0, r2
 801377a:	fb04 0003 	mla	r0, r4, r3, r0
 801377e:	fba2 2304 	umull	r2, r3, r2, r4
 8013782:	4403      	add	r3, r0
 8013784:	1c54      	adds	r4, r2, #1
 8013786:	f143 0500 	adc.w	r5, r3, #0
 801378a:	e9c1 4504 	strd	r4, r5, [r1, #16]
 801378e:	f025 4000 	bic.w	r0, r5, #2147483648	; 0x80000000
 8013792:	bd38      	pop	{r3, r4, r5, pc}
 8013794:	20000020 	.word	0x20000020
 8013798:	abcd330e 	.word	0xabcd330e
 801379c:	e66d1234 	.word	0xe66d1234
 80137a0:	0005deec 	.word	0x0005deec
 80137a4:	5851f42d 	.word	0x5851f42d
 80137a8:	4c957f2d 	.word	0x4c957f2d

080137ac <std>:
 80137ac:	2300      	movs	r3, #0
 80137ae:	b510      	push	{r4, lr}
 80137b0:	4604      	mov	r4, r0
 80137b2:	e9c0 3300 	strd	r3, r3, [r0]
 80137b6:	6083      	str	r3, [r0, #8]
 80137b8:	8181      	strh	r1, [r0, #12]
 80137ba:	6643      	str	r3, [r0, #100]	; 0x64
 80137bc:	81c2      	strh	r2, [r0, #14]
 80137be:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80137c2:	6183      	str	r3, [r0, #24]
 80137c4:	4619      	mov	r1, r3
 80137c6:	2208      	movs	r2, #8
 80137c8:	305c      	adds	r0, #92	; 0x5c
 80137ca:	f7ff ff9b 	bl	8013704 <memset>
 80137ce:	4b05      	ldr	r3, [pc, #20]	; (80137e4 <std+0x38>)
 80137d0:	6263      	str	r3, [r4, #36]	; 0x24
 80137d2:	4b05      	ldr	r3, [pc, #20]	; (80137e8 <std+0x3c>)
 80137d4:	62a3      	str	r3, [r4, #40]	; 0x28
 80137d6:	4b05      	ldr	r3, [pc, #20]	; (80137ec <std+0x40>)
 80137d8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80137da:	4b05      	ldr	r3, [pc, #20]	; (80137f0 <std+0x44>)
 80137dc:	6224      	str	r4, [r4, #32]
 80137de:	6323      	str	r3, [r4, #48]	; 0x30
 80137e0:	bd10      	pop	{r4, pc}
 80137e2:	bf00      	nop
 80137e4:	08014051 	.word	0x08014051
 80137e8:	08014073 	.word	0x08014073
 80137ec:	080140ab 	.word	0x080140ab
 80137f0:	080140cf 	.word	0x080140cf

080137f4 <_cleanup_r>:
 80137f4:	4901      	ldr	r1, [pc, #4]	; (80137fc <_cleanup_r+0x8>)
 80137f6:	f000 b885 	b.w	8013904 <_fwalk_reent>
 80137fa:	bf00      	nop
 80137fc:	080143a9 	.word	0x080143a9

08013800 <__sfmoreglue>:
 8013800:	b570      	push	{r4, r5, r6, lr}
 8013802:	1e4a      	subs	r2, r1, #1
 8013804:	2568      	movs	r5, #104	; 0x68
 8013806:	4355      	muls	r5, r2
 8013808:	460e      	mov	r6, r1
 801380a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801380e:	f000 f8ed 	bl	80139ec <_malloc_r>
 8013812:	4604      	mov	r4, r0
 8013814:	b140      	cbz	r0, 8013828 <__sfmoreglue+0x28>
 8013816:	2100      	movs	r1, #0
 8013818:	e9c0 1600 	strd	r1, r6, [r0]
 801381c:	300c      	adds	r0, #12
 801381e:	60a0      	str	r0, [r4, #8]
 8013820:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8013824:	f7ff ff6e 	bl	8013704 <memset>
 8013828:	4620      	mov	r0, r4
 801382a:	bd70      	pop	{r4, r5, r6, pc}

0801382c <__sinit>:
 801382c:	6983      	ldr	r3, [r0, #24]
 801382e:	b510      	push	{r4, lr}
 8013830:	4604      	mov	r4, r0
 8013832:	bb33      	cbnz	r3, 8013882 <__sinit+0x56>
 8013834:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8013838:	6503      	str	r3, [r0, #80]	; 0x50
 801383a:	4b12      	ldr	r3, [pc, #72]	; (8013884 <__sinit+0x58>)
 801383c:	4a12      	ldr	r2, [pc, #72]	; (8013888 <__sinit+0x5c>)
 801383e:	681b      	ldr	r3, [r3, #0]
 8013840:	6282      	str	r2, [r0, #40]	; 0x28
 8013842:	4298      	cmp	r0, r3
 8013844:	bf04      	itt	eq
 8013846:	2301      	moveq	r3, #1
 8013848:	6183      	streq	r3, [r0, #24]
 801384a:	f000 f81f 	bl	801388c <__sfp>
 801384e:	6060      	str	r0, [r4, #4]
 8013850:	4620      	mov	r0, r4
 8013852:	f000 f81b 	bl	801388c <__sfp>
 8013856:	60a0      	str	r0, [r4, #8]
 8013858:	4620      	mov	r0, r4
 801385a:	f000 f817 	bl	801388c <__sfp>
 801385e:	2200      	movs	r2, #0
 8013860:	60e0      	str	r0, [r4, #12]
 8013862:	2104      	movs	r1, #4
 8013864:	6860      	ldr	r0, [r4, #4]
 8013866:	f7ff ffa1 	bl	80137ac <std>
 801386a:	2201      	movs	r2, #1
 801386c:	2109      	movs	r1, #9
 801386e:	68a0      	ldr	r0, [r4, #8]
 8013870:	f7ff ff9c 	bl	80137ac <std>
 8013874:	2202      	movs	r2, #2
 8013876:	2112      	movs	r1, #18
 8013878:	68e0      	ldr	r0, [r4, #12]
 801387a:	f7ff ff97 	bl	80137ac <std>
 801387e:	2301      	movs	r3, #1
 8013880:	61a3      	str	r3, [r4, #24]
 8013882:	bd10      	pop	{r4, pc}
 8013884:	080175b8 	.word	0x080175b8
 8013888:	080137f5 	.word	0x080137f5

0801388c <__sfp>:
 801388c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801388e:	4b1b      	ldr	r3, [pc, #108]	; (80138fc <__sfp+0x70>)
 8013890:	681e      	ldr	r6, [r3, #0]
 8013892:	69b3      	ldr	r3, [r6, #24]
 8013894:	4607      	mov	r7, r0
 8013896:	b913      	cbnz	r3, 801389e <__sfp+0x12>
 8013898:	4630      	mov	r0, r6
 801389a:	f7ff ffc7 	bl	801382c <__sinit>
 801389e:	3648      	adds	r6, #72	; 0x48
 80138a0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80138a4:	3b01      	subs	r3, #1
 80138a6:	d503      	bpl.n	80138b0 <__sfp+0x24>
 80138a8:	6833      	ldr	r3, [r6, #0]
 80138aa:	b133      	cbz	r3, 80138ba <__sfp+0x2e>
 80138ac:	6836      	ldr	r6, [r6, #0]
 80138ae:	e7f7      	b.n	80138a0 <__sfp+0x14>
 80138b0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80138b4:	b16d      	cbz	r5, 80138d2 <__sfp+0x46>
 80138b6:	3468      	adds	r4, #104	; 0x68
 80138b8:	e7f4      	b.n	80138a4 <__sfp+0x18>
 80138ba:	2104      	movs	r1, #4
 80138bc:	4638      	mov	r0, r7
 80138be:	f7ff ff9f 	bl	8013800 <__sfmoreglue>
 80138c2:	6030      	str	r0, [r6, #0]
 80138c4:	2800      	cmp	r0, #0
 80138c6:	d1f1      	bne.n	80138ac <__sfp+0x20>
 80138c8:	230c      	movs	r3, #12
 80138ca:	603b      	str	r3, [r7, #0]
 80138cc:	4604      	mov	r4, r0
 80138ce:	4620      	mov	r0, r4
 80138d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80138d2:	4b0b      	ldr	r3, [pc, #44]	; (8013900 <__sfp+0x74>)
 80138d4:	6665      	str	r5, [r4, #100]	; 0x64
 80138d6:	e9c4 5500 	strd	r5, r5, [r4]
 80138da:	60a5      	str	r5, [r4, #8]
 80138dc:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80138e0:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80138e4:	2208      	movs	r2, #8
 80138e6:	4629      	mov	r1, r5
 80138e8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80138ec:	f7ff ff0a 	bl	8013704 <memset>
 80138f0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80138f4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80138f8:	e7e9      	b.n	80138ce <__sfp+0x42>
 80138fa:	bf00      	nop
 80138fc:	080175b8 	.word	0x080175b8
 8013900:	ffff0001 	.word	0xffff0001

08013904 <_fwalk_reent>:
 8013904:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013908:	4680      	mov	r8, r0
 801390a:	4689      	mov	r9, r1
 801390c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8013910:	2600      	movs	r6, #0
 8013912:	b914      	cbnz	r4, 801391a <_fwalk_reent+0x16>
 8013914:	4630      	mov	r0, r6
 8013916:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801391a:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 801391e:	3f01      	subs	r7, #1
 8013920:	d501      	bpl.n	8013926 <_fwalk_reent+0x22>
 8013922:	6824      	ldr	r4, [r4, #0]
 8013924:	e7f5      	b.n	8013912 <_fwalk_reent+0xe>
 8013926:	89ab      	ldrh	r3, [r5, #12]
 8013928:	2b01      	cmp	r3, #1
 801392a:	d907      	bls.n	801393c <_fwalk_reent+0x38>
 801392c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8013930:	3301      	adds	r3, #1
 8013932:	d003      	beq.n	801393c <_fwalk_reent+0x38>
 8013934:	4629      	mov	r1, r5
 8013936:	4640      	mov	r0, r8
 8013938:	47c8      	blx	r9
 801393a:	4306      	orrs	r6, r0
 801393c:	3568      	adds	r5, #104	; 0x68
 801393e:	e7ee      	b.n	801391e <_fwalk_reent+0x1a>

08013940 <malloc>:
 8013940:	4b02      	ldr	r3, [pc, #8]	; (801394c <malloc+0xc>)
 8013942:	4601      	mov	r1, r0
 8013944:	6818      	ldr	r0, [r3, #0]
 8013946:	f000 b851 	b.w	80139ec <_malloc_r>
 801394a:	bf00      	nop
 801394c:	20000020 	.word	0x20000020

08013950 <_free_r>:
 8013950:	b538      	push	{r3, r4, r5, lr}
 8013952:	4605      	mov	r5, r0
 8013954:	2900      	cmp	r1, #0
 8013956:	d045      	beq.n	80139e4 <_free_r+0x94>
 8013958:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801395c:	1f0c      	subs	r4, r1, #4
 801395e:	2b00      	cmp	r3, #0
 8013960:	bfb8      	it	lt
 8013962:	18e4      	addlt	r4, r4, r3
 8013964:	f000 fdc0 	bl	80144e8 <__malloc_lock>
 8013968:	4a1f      	ldr	r2, [pc, #124]	; (80139e8 <_free_r+0x98>)
 801396a:	6813      	ldr	r3, [r2, #0]
 801396c:	4610      	mov	r0, r2
 801396e:	b933      	cbnz	r3, 801397e <_free_r+0x2e>
 8013970:	6063      	str	r3, [r4, #4]
 8013972:	6014      	str	r4, [r2, #0]
 8013974:	4628      	mov	r0, r5
 8013976:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801397a:	f000 bdb6 	b.w	80144ea <__malloc_unlock>
 801397e:	42a3      	cmp	r3, r4
 8013980:	d90c      	bls.n	801399c <_free_r+0x4c>
 8013982:	6821      	ldr	r1, [r4, #0]
 8013984:	1862      	adds	r2, r4, r1
 8013986:	4293      	cmp	r3, r2
 8013988:	bf04      	itt	eq
 801398a:	681a      	ldreq	r2, [r3, #0]
 801398c:	685b      	ldreq	r3, [r3, #4]
 801398e:	6063      	str	r3, [r4, #4]
 8013990:	bf04      	itt	eq
 8013992:	1852      	addeq	r2, r2, r1
 8013994:	6022      	streq	r2, [r4, #0]
 8013996:	6004      	str	r4, [r0, #0]
 8013998:	e7ec      	b.n	8013974 <_free_r+0x24>
 801399a:	4613      	mov	r3, r2
 801399c:	685a      	ldr	r2, [r3, #4]
 801399e:	b10a      	cbz	r2, 80139a4 <_free_r+0x54>
 80139a0:	42a2      	cmp	r2, r4
 80139a2:	d9fa      	bls.n	801399a <_free_r+0x4a>
 80139a4:	6819      	ldr	r1, [r3, #0]
 80139a6:	1858      	adds	r0, r3, r1
 80139a8:	42a0      	cmp	r0, r4
 80139aa:	d10b      	bne.n	80139c4 <_free_r+0x74>
 80139ac:	6820      	ldr	r0, [r4, #0]
 80139ae:	4401      	add	r1, r0
 80139b0:	1858      	adds	r0, r3, r1
 80139b2:	4282      	cmp	r2, r0
 80139b4:	6019      	str	r1, [r3, #0]
 80139b6:	d1dd      	bne.n	8013974 <_free_r+0x24>
 80139b8:	6810      	ldr	r0, [r2, #0]
 80139ba:	6852      	ldr	r2, [r2, #4]
 80139bc:	605a      	str	r2, [r3, #4]
 80139be:	4401      	add	r1, r0
 80139c0:	6019      	str	r1, [r3, #0]
 80139c2:	e7d7      	b.n	8013974 <_free_r+0x24>
 80139c4:	d902      	bls.n	80139cc <_free_r+0x7c>
 80139c6:	230c      	movs	r3, #12
 80139c8:	602b      	str	r3, [r5, #0]
 80139ca:	e7d3      	b.n	8013974 <_free_r+0x24>
 80139cc:	6820      	ldr	r0, [r4, #0]
 80139ce:	1821      	adds	r1, r4, r0
 80139d0:	428a      	cmp	r2, r1
 80139d2:	bf04      	itt	eq
 80139d4:	6811      	ldreq	r1, [r2, #0]
 80139d6:	6852      	ldreq	r2, [r2, #4]
 80139d8:	6062      	str	r2, [r4, #4]
 80139da:	bf04      	itt	eq
 80139dc:	1809      	addeq	r1, r1, r0
 80139de:	6021      	streq	r1, [r4, #0]
 80139e0:	605c      	str	r4, [r3, #4]
 80139e2:	e7c7      	b.n	8013974 <_free_r+0x24>
 80139e4:	bd38      	pop	{r3, r4, r5, pc}
 80139e6:	bf00      	nop
 80139e8:	200085e8 	.word	0x200085e8

080139ec <_malloc_r>:
 80139ec:	b570      	push	{r4, r5, r6, lr}
 80139ee:	1ccd      	adds	r5, r1, #3
 80139f0:	f025 0503 	bic.w	r5, r5, #3
 80139f4:	3508      	adds	r5, #8
 80139f6:	2d0c      	cmp	r5, #12
 80139f8:	bf38      	it	cc
 80139fa:	250c      	movcc	r5, #12
 80139fc:	2d00      	cmp	r5, #0
 80139fe:	4606      	mov	r6, r0
 8013a00:	db01      	blt.n	8013a06 <_malloc_r+0x1a>
 8013a02:	42a9      	cmp	r1, r5
 8013a04:	d903      	bls.n	8013a0e <_malloc_r+0x22>
 8013a06:	230c      	movs	r3, #12
 8013a08:	6033      	str	r3, [r6, #0]
 8013a0a:	2000      	movs	r0, #0
 8013a0c:	bd70      	pop	{r4, r5, r6, pc}
 8013a0e:	f000 fd6b 	bl	80144e8 <__malloc_lock>
 8013a12:	4a21      	ldr	r2, [pc, #132]	; (8013a98 <_malloc_r+0xac>)
 8013a14:	6814      	ldr	r4, [r2, #0]
 8013a16:	4621      	mov	r1, r4
 8013a18:	b991      	cbnz	r1, 8013a40 <_malloc_r+0x54>
 8013a1a:	4c20      	ldr	r4, [pc, #128]	; (8013a9c <_malloc_r+0xb0>)
 8013a1c:	6823      	ldr	r3, [r4, #0]
 8013a1e:	b91b      	cbnz	r3, 8013a28 <_malloc_r+0x3c>
 8013a20:	4630      	mov	r0, r6
 8013a22:	f000 fb05 	bl	8014030 <_sbrk_r>
 8013a26:	6020      	str	r0, [r4, #0]
 8013a28:	4629      	mov	r1, r5
 8013a2a:	4630      	mov	r0, r6
 8013a2c:	f000 fb00 	bl	8014030 <_sbrk_r>
 8013a30:	1c43      	adds	r3, r0, #1
 8013a32:	d124      	bne.n	8013a7e <_malloc_r+0x92>
 8013a34:	230c      	movs	r3, #12
 8013a36:	6033      	str	r3, [r6, #0]
 8013a38:	4630      	mov	r0, r6
 8013a3a:	f000 fd56 	bl	80144ea <__malloc_unlock>
 8013a3e:	e7e4      	b.n	8013a0a <_malloc_r+0x1e>
 8013a40:	680b      	ldr	r3, [r1, #0]
 8013a42:	1b5b      	subs	r3, r3, r5
 8013a44:	d418      	bmi.n	8013a78 <_malloc_r+0x8c>
 8013a46:	2b0b      	cmp	r3, #11
 8013a48:	d90f      	bls.n	8013a6a <_malloc_r+0x7e>
 8013a4a:	600b      	str	r3, [r1, #0]
 8013a4c:	50cd      	str	r5, [r1, r3]
 8013a4e:	18cc      	adds	r4, r1, r3
 8013a50:	4630      	mov	r0, r6
 8013a52:	f000 fd4a 	bl	80144ea <__malloc_unlock>
 8013a56:	f104 000b 	add.w	r0, r4, #11
 8013a5a:	1d23      	adds	r3, r4, #4
 8013a5c:	f020 0007 	bic.w	r0, r0, #7
 8013a60:	1ac3      	subs	r3, r0, r3
 8013a62:	d0d3      	beq.n	8013a0c <_malloc_r+0x20>
 8013a64:	425a      	negs	r2, r3
 8013a66:	50e2      	str	r2, [r4, r3]
 8013a68:	e7d0      	b.n	8013a0c <_malloc_r+0x20>
 8013a6a:	428c      	cmp	r4, r1
 8013a6c:	684b      	ldr	r3, [r1, #4]
 8013a6e:	bf16      	itet	ne
 8013a70:	6063      	strne	r3, [r4, #4]
 8013a72:	6013      	streq	r3, [r2, #0]
 8013a74:	460c      	movne	r4, r1
 8013a76:	e7eb      	b.n	8013a50 <_malloc_r+0x64>
 8013a78:	460c      	mov	r4, r1
 8013a7a:	6849      	ldr	r1, [r1, #4]
 8013a7c:	e7cc      	b.n	8013a18 <_malloc_r+0x2c>
 8013a7e:	1cc4      	adds	r4, r0, #3
 8013a80:	f024 0403 	bic.w	r4, r4, #3
 8013a84:	42a0      	cmp	r0, r4
 8013a86:	d005      	beq.n	8013a94 <_malloc_r+0xa8>
 8013a88:	1a21      	subs	r1, r4, r0
 8013a8a:	4630      	mov	r0, r6
 8013a8c:	f000 fad0 	bl	8014030 <_sbrk_r>
 8013a90:	3001      	adds	r0, #1
 8013a92:	d0cf      	beq.n	8013a34 <_malloc_r+0x48>
 8013a94:	6025      	str	r5, [r4, #0]
 8013a96:	e7db      	b.n	8013a50 <_malloc_r+0x64>
 8013a98:	200085e8 	.word	0x200085e8
 8013a9c:	200085ec 	.word	0x200085ec

08013aa0 <__sfputc_r>:
 8013aa0:	6893      	ldr	r3, [r2, #8]
 8013aa2:	3b01      	subs	r3, #1
 8013aa4:	2b00      	cmp	r3, #0
 8013aa6:	b410      	push	{r4}
 8013aa8:	6093      	str	r3, [r2, #8]
 8013aaa:	da08      	bge.n	8013abe <__sfputc_r+0x1e>
 8013aac:	6994      	ldr	r4, [r2, #24]
 8013aae:	42a3      	cmp	r3, r4
 8013ab0:	db01      	blt.n	8013ab6 <__sfputc_r+0x16>
 8013ab2:	290a      	cmp	r1, #10
 8013ab4:	d103      	bne.n	8013abe <__sfputc_r+0x1e>
 8013ab6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013aba:	f000 bb0d 	b.w	80140d8 <__swbuf_r>
 8013abe:	6813      	ldr	r3, [r2, #0]
 8013ac0:	1c58      	adds	r0, r3, #1
 8013ac2:	6010      	str	r0, [r2, #0]
 8013ac4:	7019      	strb	r1, [r3, #0]
 8013ac6:	4608      	mov	r0, r1
 8013ac8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013acc:	4770      	bx	lr

08013ace <__sfputs_r>:
 8013ace:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013ad0:	4606      	mov	r6, r0
 8013ad2:	460f      	mov	r7, r1
 8013ad4:	4614      	mov	r4, r2
 8013ad6:	18d5      	adds	r5, r2, r3
 8013ad8:	42ac      	cmp	r4, r5
 8013ada:	d101      	bne.n	8013ae0 <__sfputs_r+0x12>
 8013adc:	2000      	movs	r0, #0
 8013ade:	e007      	b.n	8013af0 <__sfputs_r+0x22>
 8013ae0:	463a      	mov	r2, r7
 8013ae2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013ae6:	4630      	mov	r0, r6
 8013ae8:	f7ff ffda 	bl	8013aa0 <__sfputc_r>
 8013aec:	1c43      	adds	r3, r0, #1
 8013aee:	d1f3      	bne.n	8013ad8 <__sfputs_r+0xa>
 8013af0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08013af4 <_vfiprintf_r>:
 8013af4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013af8:	460c      	mov	r4, r1
 8013afa:	b09d      	sub	sp, #116	; 0x74
 8013afc:	4617      	mov	r7, r2
 8013afe:	461d      	mov	r5, r3
 8013b00:	4606      	mov	r6, r0
 8013b02:	b118      	cbz	r0, 8013b0c <_vfiprintf_r+0x18>
 8013b04:	6983      	ldr	r3, [r0, #24]
 8013b06:	b90b      	cbnz	r3, 8013b0c <_vfiprintf_r+0x18>
 8013b08:	f7ff fe90 	bl	801382c <__sinit>
 8013b0c:	4b7c      	ldr	r3, [pc, #496]	; (8013d00 <_vfiprintf_r+0x20c>)
 8013b0e:	429c      	cmp	r4, r3
 8013b10:	d158      	bne.n	8013bc4 <_vfiprintf_r+0xd0>
 8013b12:	6874      	ldr	r4, [r6, #4]
 8013b14:	89a3      	ldrh	r3, [r4, #12]
 8013b16:	0718      	lsls	r0, r3, #28
 8013b18:	d55e      	bpl.n	8013bd8 <_vfiprintf_r+0xe4>
 8013b1a:	6923      	ldr	r3, [r4, #16]
 8013b1c:	2b00      	cmp	r3, #0
 8013b1e:	d05b      	beq.n	8013bd8 <_vfiprintf_r+0xe4>
 8013b20:	2300      	movs	r3, #0
 8013b22:	9309      	str	r3, [sp, #36]	; 0x24
 8013b24:	2320      	movs	r3, #32
 8013b26:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8013b2a:	2330      	movs	r3, #48	; 0x30
 8013b2c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8013b30:	9503      	str	r5, [sp, #12]
 8013b32:	f04f 0b01 	mov.w	fp, #1
 8013b36:	46b8      	mov	r8, r7
 8013b38:	4645      	mov	r5, r8
 8013b3a:	f815 3b01 	ldrb.w	r3, [r5], #1
 8013b3e:	b10b      	cbz	r3, 8013b44 <_vfiprintf_r+0x50>
 8013b40:	2b25      	cmp	r3, #37	; 0x25
 8013b42:	d154      	bne.n	8013bee <_vfiprintf_r+0xfa>
 8013b44:	ebb8 0a07 	subs.w	sl, r8, r7
 8013b48:	d00b      	beq.n	8013b62 <_vfiprintf_r+0x6e>
 8013b4a:	4653      	mov	r3, sl
 8013b4c:	463a      	mov	r2, r7
 8013b4e:	4621      	mov	r1, r4
 8013b50:	4630      	mov	r0, r6
 8013b52:	f7ff ffbc 	bl	8013ace <__sfputs_r>
 8013b56:	3001      	adds	r0, #1
 8013b58:	f000 80c2 	beq.w	8013ce0 <_vfiprintf_r+0x1ec>
 8013b5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013b5e:	4453      	add	r3, sl
 8013b60:	9309      	str	r3, [sp, #36]	; 0x24
 8013b62:	f898 3000 	ldrb.w	r3, [r8]
 8013b66:	2b00      	cmp	r3, #0
 8013b68:	f000 80ba 	beq.w	8013ce0 <_vfiprintf_r+0x1ec>
 8013b6c:	2300      	movs	r3, #0
 8013b6e:	f04f 32ff 	mov.w	r2, #4294967295
 8013b72:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013b76:	9304      	str	r3, [sp, #16]
 8013b78:	9307      	str	r3, [sp, #28]
 8013b7a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8013b7e:	931a      	str	r3, [sp, #104]	; 0x68
 8013b80:	46a8      	mov	r8, r5
 8013b82:	2205      	movs	r2, #5
 8013b84:	f818 1b01 	ldrb.w	r1, [r8], #1
 8013b88:	485e      	ldr	r0, [pc, #376]	; (8013d04 <_vfiprintf_r+0x210>)
 8013b8a:	f7ec fb31 	bl	80001f0 <memchr>
 8013b8e:	9b04      	ldr	r3, [sp, #16]
 8013b90:	bb78      	cbnz	r0, 8013bf2 <_vfiprintf_r+0xfe>
 8013b92:	06d9      	lsls	r1, r3, #27
 8013b94:	bf44      	itt	mi
 8013b96:	2220      	movmi	r2, #32
 8013b98:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8013b9c:	071a      	lsls	r2, r3, #28
 8013b9e:	bf44      	itt	mi
 8013ba0:	222b      	movmi	r2, #43	; 0x2b
 8013ba2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8013ba6:	782a      	ldrb	r2, [r5, #0]
 8013ba8:	2a2a      	cmp	r2, #42	; 0x2a
 8013baa:	d02a      	beq.n	8013c02 <_vfiprintf_r+0x10e>
 8013bac:	9a07      	ldr	r2, [sp, #28]
 8013bae:	46a8      	mov	r8, r5
 8013bb0:	2000      	movs	r0, #0
 8013bb2:	250a      	movs	r5, #10
 8013bb4:	4641      	mov	r1, r8
 8013bb6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013bba:	3b30      	subs	r3, #48	; 0x30
 8013bbc:	2b09      	cmp	r3, #9
 8013bbe:	d969      	bls.n	8013c94 <_vfiprintf_r+0x1a0>
 8013bc0:	b360      	cbz	r0, 8013c1c <_vfiprintf_r+0x128>
 8013bc2:	e024      	b.n	8013c0e <_vfiprintf_r+0x11a>
 8013bc4:	4b50      	ldr	r3, [pc, #320]	; (8013d08 <_vfiprintf_r+0x214>)
 8013bc6:	429c      	cmp	r4, r3
 8013bc8:	d101      	bne.n	8013bce <_vfiprintf_r+0xda>
 8013bca:	68b4      	ldr	r4, [r6, #8]
 8013bcc:	e7a2      	b.n	8013b14 <_vfiprintf_r+0x20>
 8013bce:	4b4f      	ldr	r3, [pc, #316]	; (8013d0c <_vfiprintf_r+0x218>)
 8013bd0:	429c      	cmp	r4, r3
 8013bd2:	bf08      	it	eq
 8013bd4:	68f4      	ldreq	r4, [r6, #12]
 8013bd6:	e79d      	b.n	8013b14 <_vfiprintf_r+0x20>
 8013bd8:	4621      	mov	r1, r4
 8013bda:	4630      	mov	r0, r6
 8013bdc:	f000 fae0 	bl	80141a0 <__swsetup_r>
 8013be0:	2800      	cmp	r0, #0
 8013be2:	d09d      	beq.n	8013b20 <_vfiprintf_r+0x2c>
 8013be4:	f04f 30ff 	mov.w	r0, #4294967295
 8013be8:	b01d      	add	sp, #116	; 0x74
 8013bea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013bee:	46a8      	mov	r8, r5
 8013bf0:	e7a2      	b.n	8013b38 <_vfiprintf_r+0x44>
 8013bf2:	4a44      	ldr	r2, [pc, #272]	; (8013d04 <_vfiprintf_r+0x210>)
 8013bf4:	1a80      	subs	r0, r0, r2
 8013bf6:	fa0b f000 	lsl.w	r0, fp, r0
 8013bfa:	4318      	orrs	r0, r3
 8013bfc:	9004      	str	r0, [sp, #16]
 8013bfe:	4645      	mov	r5, r8
 8013c00:	e7be      	b.n	8013b80 <_vfiprintf_r+0x8c>
 8013c02:	9a03      	ldr	r2, [sp, #12]
 8013c04:	1d11      	adds	r1, r2, #4
 8013c06:	6812      	ldr	r2, [r2, #0]
 8013c08:	9103      	str	r1, [sp, #12]
 8013c0a:	2a00      	cmp	r2, #0
 8013c0c:	db01      	blt.n	8013c12 <_vfiprintf_r+0x11e>
 8013c0e:	9207      	str	r2, [sp, #28]
 8013c10:	e004      	b.n	8013c1c <_vfiprintf_r+0x128>
 8013c12:	4252      	negs	r2, r2
 8013c14:	f043 0302 	orr.w	r3, r3, #2
 8013c18:	9207      	str	r2, [sp, #28]
 8013c1a:	9304      	str	r3, [sp, #16]
 8013c1c:	f898 3000 	ldrb.w	r3, [r8]
 8013c20:	2b2e      	cmp	r3, #46	; 0x2e
 8013c22:	d10e      	bne.n	8013c42 <_vfiprintf_r+0x14e>
 8013c24:	f898 3001 	ldrb.w	r3, [r8, #1]
 8013c28:	2b2a      	cmp	r3, #42	; 0x2a
 8013c2a:	d138      	bne.n	8013c9e <_vfiprintf_r+0x1aa>
 8013c2c:	9b03      	ldr	r3, [sp, #12]
 8013c2e:	1d1a      	adds	r2, r3, #4
 8013c30:	681b      	ldr	r3, [r3, #0]
 8013c32:	9203      	str	r2, [sp, #12]
 8013c34:	2b00      	cmp	r3, #0
 8013c36:	bfb8      	it	lt
 8013c38:	f04f 33ff 	movlt.w	r3, #4294967295
 8013c3c:	f108 0802 	add.w	r8, r8, #2
 8013c40:	9305      	str	r3, [sp, #20]
 8013c42:	4d33      	ldr	r5, [pc, #204]	; (8013d10 <_vfiprintf_r+0x21c>)
 8013c44:	f898 1000 	ldrb.w	r1, [r8]
 8013c48:	2203      	movs	r2, #3
 8013c4a:	4628      	mov	r0, r5
 8013c4c:	f7ec fad0 	bl	80001f0 <memchr>
 8013c50:	b140      	cbz	r0, 8013c64 <_vfiprintf_r+0x170>
 8013c52:	2340      	movs	r3, #64	; 0x40
 8013c54:	1b40      	subs	r0, r0, r5
 8013c56:	fa03 f000 	lsl.w	r0, r3, r0
 8013c5a:	9b04      	ldr	r3, [sp, #16]
 8013c5c:	4303      	orrs	r3, r0
 8013c5e:	f108 0801 	add.w	r8, r8, #1
 8013c62:	9304      	str	r3, [sp, #16]
 8013c64:	f898 1000 	ldrb.w	r1, [r8]
 8013c68:	482a      	ldr	r0, [pc, #168]	; (8013d14 <_vfiprintf_r+0x220>)
 8013c6a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8013c6e:	2206      	movs	r2, #6
 8013c70:	f108 0701 	add.w	r7, r8, #1
 8013c74:	f7ec fabc 	bl	80001f0 <memchr>
 8013c78:	2800      	cmp	r0, #0
 8013c7a:	d037      	beq.n	8013cec <_vfiprintf_r+0x1f8>
 8013c7c:	4b26      	ldr	r3, [pc, #152]	; (8013d18 <_vfiprintf_r+0x224>)
 8013c7e:	bb1b      	cbnz	r3, 8013cc8 <_vfiprintf_r+0x1d4>
 8013c80:	9b03      	ldr	r3, [sp, #12]
 8013c82:	3307      	adds	r3, #7
 8013c84:	f023 0307 	bic.w	r3, r3, #7
 8013c88:	3308      	adds	r3, #8
 8013c8a:	9303      	str	r3, [sp, #12]
 8013c8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013c8e:	444b      	add	r3, r9
 8013c90:	9309      	str	r3, [sp, #36]	; 0x24
 8013c92:	e750      	b.n	8013b36 <_vfiprintf_r+0x42>
 8013c94:	fb05 3202 	mla	r2, r5, r2, r3
 8013c98:	2001      	movs	r0, #1
 8013c9a:	4688      	mov	r8, r1
 8013c9c:	e78a      	b.n	8013bb4 <_vfiprintf_r+0xc0>
 8013c9e:	2300      	movs	r3, #0
 8013ca0:	f108 0801 	add.w	r8, r8, #1
 8013ca4:	9305      	str	r3, [sp, #20]
 8013ca6:	4619      	mov	r1, r3
 8013ca8:	250a      	movs	r5, #10
 8013caa:	4640      	mov	r0, r8
 8013cac:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013cb0:	3a30      	subs	r2, #48	; 0x30
 8013cb2:	2a09      	cmp	r2, #9
 8013cb4:	d903      	bls.n	8013cbe <_vfiprintf_r+0x1ca>
 8013cb6:	2b00      	cmp	r3, #0
 8013cb8:	d0c3      	beq.n	8013c42 <_vfiprintf_r+0x14e>
 8013cba:	9105      	str	r1, [sp, #20]
 8013cbc:	e7c1      	b.n	8013c42 <_vfiprintf_r+0x14e>
 8013cbe:	fb05 2101 	mla	r1, r5, r1, r2
 8013cc2:	2301      	movs	r3, #1
 8013cc4:	4680      	mov	r8, r0
 8013cc6:	e7f0      	b.n	8013caa <_vfiprintf_r+0x1b6>
 8013cc8:	ab03      	add	r3, sp, #12
 8013cca:	9300      	str	r3, [sp, #0]
 8013ccc:	4622      	mov	r2, r4
 8013cce:	4b13      	ldr	r3, [pc, #76]	; (8013d1c <_vfiprintf_r+0x228>)
 8013cd0:	a904      	add	r1, sp, #16
 8013cd2:	4630      	mov	r0, r6
 8013cd4:	f3af 8000 	nop.w
 8013cd8:	f1b0 3fff 	cmp.w	r0, #4294967295
 8013cdc:	4681      	mov	r9, r0
 8013cde:	d1d5      	bne.n	8013c8c <_vfiprintf_r+0x198>
 8013ce0:	89a3      	ldrh	r3, [r4, #12]
 8013ce2:	065b      	lsls	r3, r3, #25
 8013ce4:	f53f af7e 	bmi.w	8013be4 <_vfiprintf_r+0xf0>
 8013ce8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013cea:	e77d      	b.n	8013be8 <_vfiprintf_r+0xf4>
 8013cec:	ab03      	add	r3, sp, #12
 8013cee:	9300      	str	r3, [sp, #0]
 8013cf0:	4622      	mov	r2, r4
 8013cf2:	4b0a      	ldr	r3, [pc, #40]	; (8013d1c <_vfiprintf_r+0x228>)
 8013cf4:	a904      	add	r1, sp, #16
 8013cf6:	4630      	mov	r0, r6
 8013cf8:	f000 f888 	bl	8013e0c <_printf_i>
 8013cfc:	e7ec      	b.n	8013cd8 <_vfiprintf_r+0x1e4>
 8013cfe:	bf00      	nop
 8013d00:	080175dc 	.word	0x080175dc
 8013d04:	0801761c 	.word	0x0801761c
 8013d08:	080175fc 	.word	0x080175fc
 8013d0c:	080175bc 	.word	0x080175bc
 8013d10:	08017622 	.word	0x08017622
 8013d14:	08017626 	.word	0x08017626
 8013d18:	00000000 	.word	0x00000000
 8013d1c:	08013acf 	.word	0x08013acf

08013d20 <_printf_common>:
 8013d20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013d24:	4691      	mov	r9, r2
 8013d26:	461f      	mov	r7, r3
 8013d28:	688a      	ldr	r2, [r1, #8]
 8013d2a:	690b      	ldr	r3, [r1, #16]
 8013d2c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8013d30:	4293      	cmp	r3, r2
 8013d32:	bfb8      	it	lt
 8013d34:	4613      	movlt	r3, r2
 8013d36:	f8c9 3000 	str.w	r3, [r9]
 8013d3a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8013d3e:	4606      	mov	r6, r0
 8013d40:	460c      	mov	r4, r1
 8013d42:	b112      	cbz	r2, 8013d4a <_printf_common+0x2a>
 8013d44:	3301      	adds	r3, #1
 8013d46:	f8c9 3000 	str.w	r3, [r9]
 8013d4a:	6823      	ldr	r3, [r4, #0]
 8013d4c:	0699      	lsls	r1, r3, #26
 8013d4e:	bf42      	ittt	mi
 8013d50:	f8d9 3000 	ldrmi.w	r3, [r9]
 8013d54:	3302      	addmi	r3, #2
 8013d56:	f8c9 3000 	strmi.w	r3, [r9]
 8013d5a:	6825      	ldr	r5, [r4, #0]
 8013d5c:	f015 0506 	ands.w	r5, r5, #6
 8013d60:	d107      	bne.n	8013d72 <_printf_common+0x52>
 8013d62:	f104 0a19 	add.w	sl, r4, #25
 8013d66:	68e3      	ldr	r3, [r4, #12]
 8013d68:	f8d9 2000 	ldr.w	r2, [r9]
 8013d6c:	1a9b      	subs	r3, r3, r2
 8013d6e:	42ab      	cmp	r3, r5
 8013d70:	dc28      	bgt.n	8013dc4 <_printf_common+0xa4>
 8013d72:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8013d76:	6822      	ldr	r2, [r4, #0]
 8013d78:	3300      	adds	r3, #0
 8013d7a:	bf18      	it	ne
 8013d7c:	2301      	movne	r3, #1
 8013d7e:	0692      	lsls	r2, r2, #26
 8013d80:	d42d      	bmi.n	8013dde <_printf_common+0xbe>
 8013d82:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8013d86:	4639      	mov	r1, r7
 8013d88:	4630      	mov	r0, r6
 8013d8a:	47c0      	blx	r8
 8013d8c:	3001      	adds	r0, #1
 8013d8e:	d020      	beq.n	8013dd2 <_printf_common+0xb2>
 8013d90:	6823      	ldr	r3, [r4, #0]
 8013d92:	68e5      	ldr	r5, [r4, #12]
 8013d94:	f8d9 2000 	ldr.w	r2, [r9]
 8013d98:	f003 0306 	and.w	r3, r3, #6
 8013d9c:	2b04      	cmp	r3, #4
 8013d9e:	bf08      	it	eq
 8013da0:	1aad      	subeq	r5, r5, r2
 8013da2:	68a3      	ldr	r3, [r4, #8]
 8013da4:	6922      	ldr	r2, [r4, #16]
 8013da6:	bf0c      	ite	eq
 8013da8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8013dac:	2500      	movne	r5, #0
 8013dae:	4293      	cmp	r3, r2
 8013db0:	bfc4      	itt	gt
 8013db2:	1a9b      	subgt	r3, r3, r2
 8013db4:	18ed      	addgt	r5, r5, r3
 8013db6:	f04f 0900 	mov.w	r9, #0
 8013dba:	341a      	adds	r4, #26
 8013dbc:	454d      	cmp	r5, r9
 8013dbe:	d11a      	bne.n	8013df6 <_printf_common+0xd6>
 8013dc0:	2000      	movs	r0, #0
 8013dc2:	e008      	b.n	8013dd6 <_printf_common+0xb6>
 8013dc4:	2301      	movs	r3, #1
 8013dc6:	4652      	mov	r2, sl
 8013dc8:	4639      	mov	r1, r7
 8013dca:	4630      	mov	r0, r6
 8013dcc:	47c0      	blx	r8
 8013dce:	3001      	adds	r0, #1
 8013dd0:	d103      	bne.n	8013dda <_printf_common+0xba>
 8013dd2:	f04f 30ff 	mov.w	r0, #4294967295
 8013dd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013dda:	3501      	adds	r5, #1
 8013ddc:	e7c3      	b.n	8013d66 <_printf_common+0x46>
 8013dde:	18e1      	adds	r1, r4, r3
 8013de0:	1c5a      	adds	r2, r3, #1
 8013de2:	2030      	movs	r0, #48	; 0x30
 8013de4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8013de8:	4422      	add	r2, r4
 8013dea:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8013dee:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8013df2:	3302      	adds	r3, #2
 8013df4:	e7c5      	b.n	8013d82 <_printf_common+0x62>
 8013df6:	2301      	movs	r3, #1
 8013df8:	4622      	mov	r2, r4
 8013dfa:	4639      	mov	r1, r7
 8013dfc:	4630      	mov	r0, r6
 8013dfe:	47c0      	blx	r8
 8013e00:	3001      	adds	r0, #1
 8013e02:	d0e6      	beq.n	8013dd2 <_printf_common+0xb2>
 8013e04:	f109 0901 	add.w	r9, r9, #1
 8013e08:	e7d8      	b.n	8013dbc <_printf_common+0x9c>
	...

08013e0c <_printf_i>:
 8013e0c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013e10:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8013e14:	460c      	mov	r4, r1
 8013e16:	7e09      	ldrb	r1, [r1, #24]
 8013e18:	b085      	sub	sp, #20
 8013e1a:	296e      	cmp	r1, #110	; 0x6e
 8013e1c:	4617      	mov	r7, r2
 8013e1e:	4606      	mov	r6, r0
 8013e20:	4698      	mov	r8, r3
 8013e22:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8013e24:	f000 80b3 	beq.w	8013f8e <_printf_i+0x182>
 8013e28:	d822      	bhi.n	8013e70 <_printf_i+0x64>
 8013e2a:	2963      	cmp	r1, #99	; 0x63
 8013e2c:	d036      	beq.n	8013e9c <_printf_i+0x90>
 8013e2e:	d80a      	bhi.n	8013e46 <_printf_i+0x3a>
 8013e30:	2900      	cmp	r1, #0
 8013e32:	f000 80b9 	beq.w	8013fa8 <_printf_i+0x19c>
 8013e36:	2958      	cmp	r1, #88	; 0x58
 8013e38:	f000 8083 	beq.w	8013f42 <_printf_i+0x136>
 8013e3c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8013e40:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8013e44:	e032      	b.n	8013eac <_printf_i+0xa0>
 8013e46:	2964      	cmp	r1, #100	; 0x64
 8013e48:	d001      	beq.n	8013e4e <_printf_i+0x42>
 8013e4a:	2969      	cmp	r1, #105	; 0x69
 8013e4c:	d1f6      	bne.n	8013e3c <_printf_i+0x30>
 8013e4e:	6820      	ldr	r0, [r4, #0]
 8013e50:	6813      	ldr	r3, [r2, #0]
 8013e52:	0605      	lsls	r5, r0, #24
 8013e54:	f103 0104 	add.w	r1, r3, #4
 8013e58:	d52a      	bpl.n	8013eb0 <_printf_i+0xa4>
 8013e5a:	681b      	ldr	r3, [r3, #0]
 8013e5c:	6011      	str	r1, [r2, #0]
 8013e5e:	2b00      	cmp	r3, #0
 8013e60:	da03      	bge.n	8013e6a <_printf_i+0x5e>
 8013e62:	222d      	movs	r2, #45	; 0x2d
 8013e64:	425b      	negs	r3, r3
 8013e66:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8013e6a:	486f      	ldr	r0, [pc, #444]	; (8014028 <_printf_i+0x21c>)
 8013e6c:	220a      	movs	r2, #10
 8013e6e:	e039      	b.n	8013ee4 <_printf_i+0xd8>
 8013e70:	2973      	cmp	r1, #115	; 0x73
 8013e72:	f000 809d 	beq.w	8013fb0 <_printf_i+0x1a4>
 8013e76:	d808      	bhi.n	8013e8a <_printf_i+0x7e>
 8013e78:	296f      	cmp	r1, #111	; 0x6f
 8013e7a:	d020      	beq.n	8013ebe <_printf_i+0xb2>
 8013e7c:	2970      	cmp	r1, #112	; 0x70
 8013e7e:	d1dd      	bne.n	8013e3c <_printf_i+0x30>
 8013e80:	6823      	ldr	r3, [r4, #0]
 8013e82:	f043 0320 	orr.w	r3, r3, #32
 8013e86:	6023      	str	r3, [r4, #0]
 8013e88:	e003      	b.n	8013e92 <_printf_i+0x86>
 8013e8a:	2975      	cmp	r1, #117	; 0x75
 8013e8c:	d017      	beq.n	8013ebe <_printf_i+0xb2>
 8013e8e:	2978      	cmp	r1, #120	; 0x78
 8013e90:	d1d4      	bne.n	8013e3c <_printf_i+0x30>
 8013e92:	2378      	movs	r3, #120	; 0x78
 8013e94:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8013e98:	4864      	ldr	r0, [pc, #400]	; (801402c <_printf_i+0x220>)
 8013e9a:	e055      	b.n	8013f48 <_printf_i+0x13c>
 8013e9c:	6813      	ldr	r3, [r2, #0]
 8013e9e:	1d19      	adds	r1, r3, #4
 8013ea0:	681b      	ldr	r3, [r3, #0]
 8013ea2:	6011      	str	r1, [r2, #0]
 8013ea4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8013ea8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8013eac:	2301      	movs	r3, #1
 8013eae:	e08c      	b.n	8013fca <_printf_i+0x1be>
 8013eb0:	681b      	ldr	r3, [r3, #0]
 8013eb2:	6011      	str	r1, [r2, #0]
 8013eb4:	f010 0f40 	tst.w	r0, #64	; 0x40
 8013eb8:	bf18      	it	ne
 8013eba:	b21b      	sxthne	r3, r3
 8013ebc:	e7cf      	b.n	8013e5e <_printf_i+0x52>
 8013ebe:	6813      	ldr	r3, [r2, #0]
 8013ec0:	6825      	ldr	r5, [r4, #0]
 8013ec2:	1d18      	adds	r0, r3, #4
 8013ec4:	6010      	str	r0, [r2, #0]
 8013ec6:	0628      	lsls	r0, r5, #24
 8013ec8:	d501      	bpl.n	8013ece <_printf_i+0xc2>
 8013eca:	681b      	ldr	r3, [r3, #0]
 8013ecc:	e002      	b.n	8013ed4 <_printf_i+0xc8>
 8013ece:	0668      	lsls	r0, r5, #25
 8013ed0:	d5fb      	bpl.n	8013eca <_printf_i+0xbe>
 8013ed2:	881b      	ldrh	r3, [r3, #0]
 8013ed4:	4854      	ldr	r0, [pc, #336]	; (8014028 <_printf_i+0x21c>)
 8013ed6:	296f      	cmp	r1, #111	; 0x6f
 8013ed8:	bf14      	ite	ne
 8013eda:	220a      	movne	r2, #10
 8013edc:	2208      	moveq	r2, #8
 8013ede:	2100      	movs	r1, #0
 8013ee0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8013ee4:	6865      	ldr	r5, [r4, #4]
 8013ee6:	60a5      	str	r5, [r4, #8]
 8013ee8:	2d00      	cmp	r5, #0
 8013eea:	f2c0 8095 	blt.w	8014018 <_printf_i+0x20c>
 8013eee:	6821      	ldr	r1, [r4, #0]
 8013ef0:	f021 0104 	bic.w	r1, r1, #4
 8013ef4:	6021      	str	r1, [r4, #0]
 8013ef6:	2b00      	cmp	r3, #0
 8013ef8:	d13d      	bne.n	8013f76 <_printf_i+0x16a>
 8013efa:	2d00      	cmp	r5, #0
 8013efc:	f040 808e 	bne.w	801401c <_printf_i+0x210>
 8013f00:	4665      	mov	r5, ip
 8013f02:	2a08      	cmp	r2, #8
 8013f04:	d10b      	bne.n	8013f1e <_printf_i+0x112>
 8013f06:	6823      	ldr	r3, [r4, #0]
 8013f08:	07db      	lsls	r3, r3, #31
 8013f0a:	d508      	bpl.n	8013f1e <_printf_i+0x112>
 8013f0c:	6923      	ldr	r3, [r4, #16]
 8013f0e:	6862      	ldr	r2, [r4, #4]
 8013f10:	429a      	cmp	r2, r3
 8013f12:	bfde      	ittt	le
 8013f14:	2330      	movle	r3, #48	; 0x30
 8013f16:	f805 3c01 	strble.w	r3, [r5, #-1]
 8013f1a:	f105 35ff 	addle.w	r5, r5, #4294967295
 8013f1e:	ebac 0305 	sub.w	r3, ip, r5
 8013f22:	6123      	str	r3, [r4, #16]
 8013f24:	f8cd 8000 	str.w	r8, [sp]
 8013f28:	463b      	mov	r3, r7
 8013f2a:	aa03      	add	r2, sp, #12
 8013f2c:	4621      	mov	r1, r4
 8013f2e:	4630      	mov	r0, r6
 8013f30:	f7ff fef6 	bl	8013d20 <_printf_common>
 8013f34:	3001      	adds	r0, #1
 8013f36:	d14d      	bne.n	8013fd4 <_printf_i+0x1c8>
 8013f38:	f04f 30ff 	mov.w	r0, #4294967295
 8013f3c:	b005      	add	sp, #20
 8013f3e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013f42:	4839      	ldr	r0, [pc, #228]	; (8014028 <_printf_i+0x21c>)
 8013f44:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8013f48:	6813      	ldr	r3, [r2, #0]
 8013f4a:	6821      	ldr	r1, [r4, #0]
 8013f4c:	1d1d      	adds	r5, r3, #4
 8013f4e:	681b      	ldr	r3, [r3, #0]
 8013f50:	6015      	str	r5, [r2, #0]
 8013f52:	060a      	lsls	r2, r1, #24
 8013f54:	d50b      	bpl.n	8013f6e <_printf_i+0x162>
 8013f56:	07ca      	lsls	r2, r1, #31
 8013f58:	bf44      	itt	mi
 8013f5a:	f041 0120 	orrmi.w	r1, r1, #32
 8013f5e:	6021      	strmi	r1, [r4, #0]
 8013f60:	b91b      	cbnz	r3, 8013f6a <_printf_i+0x15e>
 8013f62:	6822      	ldr	r2, [r4, #0]
 8013f64:	f022 0220 	bic.w	r2, r2, #32
 8013f68:	6022      	str	r2, [r4, #0]
 8013f6a:	2210      	movs	r2, #16
 8013f6c:	e7b7      	b.n	8013ede <_printf_i+0xd2>
 8013f6e:	064d      	lsls	r5, r1, #25
 8013f70:	bf48      	it	mi
 8013f72:	b29b      	uxthmi	r3, r3
 8013f74:	e7ef      	b.n	8013f56 <_printf_i+0x14a>
 8013f76:	4665      	mov	r5, ip
 8013f78:	fbb3 f1f2 	udiv	r1, r3, r2
 8013f7c:	fb02 3311 	mls	r3, r2, r1, r3
 8013f80:	5cc3      	ldrb	r3, [r0, r3]
 8013f82:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8013f86:	460b      	mov	r3, r1
 8013f88:	2900      	cmp	r1, #0
 8013f8a:	d1f5      	bne.n	8013f78 <_printf_i+0x16c>
 8013f8c:	e7b9      	b.n	8013f02 <_printf_i+0xf6>
 8013f8e:	6813      	ldr	r3, [r2, #0]
 8013f90:	6825      	ldr	r5, [r4, #0]
 8013f92:	6961      	ldr	r1, [r4, #20]
 8013f94:	1d18      	adds	r0, r3, #4
 8013f96:	6010      	str	r0, [r2, #0]
 8013f98:	0628      	lsls	r0, r5, #24
 8013f9a:	681b      	ldr	r3, [r3, #0]
 8013f9c:	d501      	bpl.n	8013fa2 <_printf_i+0x196>
 8013f9e:	6019      	str	r1, [r3, #0]
 8013fa0:	e002      	b.n	8013fa8 <_printf_i+0x19c>
 8013fa2:	066a      	lsls	r2, r5, #25
 8013fa4:	d5fb      	bpl.n	8013f9e <_printf_i+0x192>
 8013fa6:	8019      	strh	r1, [r3, #0]
 8013fa8:	2300      	movs	r3, #0
 8013faa:	6123      	str	r3, [r4, #16]
 8013fac:	4665      	mov	r5, ip
 8013fae:	e7b9      	b.n	8013f24 <_printf_i+0x118>
 8013fb0:	6813      	ldr	r3, [r2, #0]
 8013fb2:	1d19      	adds	r1, r3, #4
 8013fb4:	6011      	str	r1, [r2, #0]
 8013fb6:	681d      	ldr	r5, [r3, #0]
 8013fb8:	6862      	ldr	r2, [r4, #4]
 8013fba:	2100      	movs	r1, #0
 8013fbc:	4628      	mov	r0, r5
 8013fbe:	f7ec f917 	bl	80001f0 <memchr>
 8013fc2:	b108      	cbz	r0, 8013fc8 <_printf_i+0x1bc>
 8013fc4:	1b40      	subs	r0, r0, r5
 8013fc6:	6060      	str	r0, [r4, #4]
 8013fc8:	6863      	ldr	r3, [r4, #4]
 8013fca:	6123      	str	r3, [r4, #16]
 8013fcc:	2300      	movs	r3, #0
 8013fce:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013fd2:	e7a7      	b.n	8013f24 <_printf_i+0x118>
 8013fd4:	6923      	ldr	r3, [r4, #16]
 8013fd6:	462a      	mov	r2, r5
 8013fd8:	4639      	mov	r1, r7
 8013fda:	4630      	mov	r0, r6
 8013fdc:	47c0      	blx	r8
 8013fde:	3001      	adds	r0, #1
 8013fe0:	d0aa      	beq.n	8013f38 <_printf_i+0x12c>
 8013fe2:	6823      	ldr	r3, [r4, #0]
 8013fe4:	079b      	lsls	r3, r3, #30
 8013fe6:	d413      	bmi.n	8014010 <_printf_i+0x204>
 8013fe8:	68e0      	ldr	r0, [r4, #12]
 8013fea:	9b03      	ldr	r3, [sp, #12]
 8013fec:	4298      	cmp	r0, r3
 8013fee:	bfb8      	it	lt
 8013ff0:	4618      	movlt	r0, r3
 8013ff2:	e7a3      	b.n	8013f3c <_printf_i+0x130>
 8013ff4:	2301      	movs	r3, #1
 8013ff6:	464a      	mov	r2, r9
 8013ff8:	4639      	mov	r1, r7
 8013ffa:	4630      	mov	r0, r6
 8013ffc:	47c0      	blx	r8
 8013ffe:	3001      	adds	r0, #1
 8014000:	d09a      	beq.n	8013f38 <_printf_i+0x12c>
 8014002:	3501      	adds	r5, #1
 8014004:	68e3      	ldr	r3, [r4, #12]
 8014006:	9a03      	ldr	r2, [sp, #12]
 8014008:	1a9b      	subs	r3, r3, r2
 801400a:	42ab      	cmp	r3, r5
 801400c:	dcf2      	bgt.n	8013ff4 <_printf_i+0x1e8>
 801400e:	e7eb      	b.n	8013fe8 <_printf_i+0x1dc>
 8014010:	2500      	movs	r5, #0
 8014012:	f104 0919 	add.w	r9, r4, #25
 8014016:	e7f5      	b.n	8014004 <_printf_i+0x1f8>
 8014018:	2b00      	cmp	r3, #0
 801401a:	d1ac      	bne.n	8013f76 <_printf_i+0x16a>
 801401c:	7803      	ldrb	r3, [r0, #0]
 801401e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8014022:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8014026:	e76c      	b.n	8013f02 <_printf_i+0xf6>
 8014028:	0801762d 	.word	0x0801762d
 801402c:	0801763e 	.word	0x0801763e

08014030 <_sbrk_r>:
 8014030:	b538      	push	{r3, r4, r5, lr}
 8014032:	4c06      	ldr	r4, [pc, #24]	; (801404c <_sbrk_r+0x1c>)
 8014034:	2300      	movs	r3, #0
 8014036:	4605      	mov	r5, r0
 8014038:	4608      	mov	r0, r1
 801403a:	6023      	str	r3, [r4, #0]
 801403c:	f7ec fdce 	bl	8000bdc <_sbrk>
 8014040:	1c43      	adds	r3, r0, #1
 8014042:	d102      	bne.n	801404a <_sbrk_r+0x1a>
 8014044:	6823      	ldr	r3, [r4, #0]
 8014046:	b103      	cbz	r3, 801404a <_sbrk_r+0x1a>
 8014048:	602b      	str	r3, [r5, #0]
 801404a:	bd38      	pop	{r3, r4, r5, pc}
 801404c:	2000ef28 	.word	0x2000ef28

08014050 <__sread>:
 8014050:	b510      	push	{r4, lr}
 8014052:	460c      	mov	r4, r1
 8014054:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014058:	f000 fa48 	bl	80144ec <_read_r>
 801405c:	2800      	cmp	r0, #0
 801405e:	bfab      	itete	ge
 8014060:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8014062:	89a3      	ldrhlt	r3, [r4, #12]
 8014064:	181b      	addge	r3, r3, r0
 8014066:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801406a:	bfac      	ite	ge
 801406c:	6563      	strge	r3, [r4, #84]	; 0x54
 801406e:	81a3      	strhlt	r3, [r4, #12]
 8014070:	bd10      	pop	{r4, pc}

08014072 <__swrite>:
 8014072:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014076:	461f      	mov	r7, r3
 8014078:	898b      	ldrh	r3, [r1, #12]
 801407a:	05db      	lsls	r3, r3, #23
 801407c:	4605      	mov	r5, r0
 801407e:	460c      	mov	r4, r1
 8014080:	4616      	mov	r6, r2
 8014082:	d505      	bpl.n	8014090 <__swrite+0x1e>
 8014084:	2302      	movs	r3, #2
 8014086:	2200      	movs	r2, #0
 8014088:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801408c:	f000 f9b6 	bl	80143fc <_lseek_r>
 8014090:	89a3      	ldrh	r3, [r4, #12]
 8014092:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014096:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801409a:	81a3      	strh	r3, [r4, #12]
 801409c:	4632      	mov	r2, r6
 801409e:	463b      	mov	r3, r7
 80140a0:	4628      	mov	r0, r5
 80140a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80140a6:	f000 b869 	b.w	801417c <_write_r>

080140aa <__sseek>:
 80140aa:	b510      	push	{r4, lr}
 80140ac:	460c      	mov	r4, r1
 80140ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80140b2:	f000 f9a3 	bl	80143fc <_lseek_r>
 80140b6:	1c43      	adds	r3, r0, #1
 80140b8:	89a3      	ldrh	r3, [r4, #12]
 80140ba:	bf15      	itete	ne
 80140bc:	6560      	strne	r0, [r4, #84]	; 0x54
 80140be:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80140c2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80140c6:	81a3      	strheq	r3, [r4, #12]
 80140c8:	bf18      	it	ne
 80140ca:	81a3      	strhne	r3, [r4, #12]
 80140cc:	bd10      	pop	{r4, pc}

080140ce <__sclose>:
 80140ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80140d2:	f000 b8d3 	b.w	801427c <_close_r>
	...

080140d8 <__swbuf_r>:
 80140d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80140da:	460e      	mov	r6, r1
 80140dc:	4614      	mov	r4, r2
 80140de:	4605      	mov	r5, r0
 80140e0:	b118      	cbz	r0, 80140ea <__swbuf_r+0x12>
 80140e2:	6983      	ldr	r3, [r0, #24]
 80140e4:	b90b      	cbnz	r3, 80140ea <__swbuf_r+0x12>
 80140e6:	f7ff fba1 	bl	801382c <__sinit>
 80140ea:	4b21      	ldr	r3, [pc, #132]	; (8014170 <__swbuf_r+0x98>)
 80140ec:	429c      	cmp	r4, r3
 80140ee:	d12a      	bne.n	8014146 <__swbuf_r+0x6e>
 80140f0:	686c      	ldr	r4, [r5, #4]
 80140f2:	69a3      	ldr	r3, [r4, #24]
 80140f4:	60a3      	str	r3, [r4, #8]
 80140f6:	89a3      	ldrh	r3, [r4, #12]
 80140f8:	071a      	lsls	r2, r3, #28
 80140fa:	d52e      	bpl.n	801415a <__swbuf_r+0x82>
 80140fc:	6923      	ldr	r3, [r4, #16]
 80140fe:	b363      	cbz	r3, 801415a <__swbuf_r+0x82>
 8014100:	6923      	ldr	r3, [r4, #16]
 8014102:	6820      	ldr	r0, [r4, #0]
 8014104:	1ac0      	subs	r0, r0, r3
 8014106:	6963      	ldr	r3, [r4, #20]
 8014108:	b2f6      	uxtb	r6, r6
 801410a:	4283      	cmp	r3, r0
 801410c:	4637      	mov	r7, r6
 801410e:	dc04      	bgt.n	801411a <__swbuf_r+0x42>
 8014110:	4621      	mov	r1, r4
 8014112:	4628      	mov	r0, r5
 8014114:	f000 f948 	bl	80143a8 <_fflush_r>
 8014118:	bb28      	cbnz	r0, 8014166 <__swbuf_r+0x8e>
 801411a:	68a3      	ldr	r3, [r4, #8]
 801411c:	3b01      	subs	r3, #1
 801411e:	60a3      	str	r3, [r4, #8]
 8014120:	6823      	ldr	r3, [r4, #0]
 8014122:	1c5a      	adds	r2, r3, #1
 8014124:	6022      	str	r2, [r4, #0]
 8014126:	701e      	strb	r6, [r3, #0]
 8014128:	6963      	ldr	r3, [r4, #20]
 801412a:	3001      	adds	r0, #1
 801412c:	4283      	cmp	r3, r0
 801412e:	d004      	beq.n	801413a <__swbuf_r+0x62>
 8014130:	89a3      	ldrh	r3, [r4, #12]
 8014132:	07db      	lsls	r3, r3, #31
 8014134:	d519      	bpl.n	801416a <__swbuf_r+0x92>
 8014136:	2e0a      	cmp	r6, #10
 8014138:	d117      	bne.n	801416a <__swbuf_r+0x92>
 801413a:	4621      	mov	r1, r4
 801413c:	4628      	mov	r0, r5
 801413e:	f000 f933 	bl	80143a8 <_fflush_r>
 8014142:	b190      	cbz	r0, 801416a <__swbuf_r+0x92>
 8014144:	e00f      	b.n	8014166 <__swbuf_r+0x8e>
 8014146:	4b0b      	ldr	r3, [pc, #44]	; (8014174 <__swbuf_r+0x9c>)
 8014148:	429c      	cmp	r4, r3
 801414a:	d101      	bne.n	8014150 <__swbuf_r+0x78>
 801414c:	68ac      	ldr	r4, [r5, #8]
 801414e:	e7d0      	b.n	80140f2 <__swbuf_r+0x1a>
 8014150:	4b09      	ldr	r3, [pc, #36]	; (8014178 <__swbuf_r+0xa0>)
 8014152:	429c      	cmp	r4, r3
 8014154:	bf08      	it	eq
 8014156:	68ec      	ldreq	r4, [r5, #12]
 8014158:	e7cb      	b.n	80140f2 <__swbuf_r+0x1a>
 801415a:	4621      	mov	r1, r4
 801415c:	4628      	mov	r0, r5
 801415e:	f000 f81f 	bl	80141a0 <__swsetup_r>
 8014162:	2800      	cmp	r0, #0
 8014164:	d0cc      	beq.n	8014100 <__swbuf_r+0x28>
 8014166:	f04f 37ff 	mov.w	r7, #4294967295
 801416a:	4638      	mov	r0, r7
 801416c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801416e:	bf00      	nop
 8014170:	080175dc 	.word	0x080175dc
 8014174:	080175fc 	.word	0x080175fc
 8014178:	080175bc 	.word	0x080175bc

0801417c <_write_r>:
 801417c:	b538      	push	{r3, r4, r5, lr}
 801417e:	4c07      	ldr	r4, [pc, #28]	; (801419c <_write_r+0x20>)
 8014180:	4605      	mov	r5, r0
 8014182:	4608      	mov	r0, r1
 8014184:	4611      	mov	r1, r2
 8014186:	2200      	movs	r2, #0
 8014188:	6022      	str	r2, [r4, #0]
 801418a:	461a      	mov	r2, r3
 801418c:	f7ec fcd5 	bl	8000b3a <_write>
 8014190:	1c43      	adds	r3, r0, #1
 8014192:	d102      	bne.n	801419a <_write_r+0x1e>
 8014194:	6823      	ldr	r3, [r4, #0]
 8014196:	b103      	cbz	r3, 801419a <_write_r+0x1e>
 8014198:	602b      	str	r3, [r5, #0]
 801419a:	bd38      	pop	{r3, r4, r5, pc}
 801419c:	2000ef28 	.word	0x2000ef28

080141a0 <__swsetup_r>:
 80141a0:	4b32      	ldr	r3, [pc, #200]	; (801426c <__swsetup_r+0xcc>)
 80141a2:	b570      	push	{r4, r5, r6, lr}
 80141a4:	681d      	ldr	r5, [r3, #0]
 80141a6:	4606      	mov	r6, r0
 80141a8:	460c      	mov	r4, r1
 80141aa:	b125      	cbz	r5, 80141b6 <__swsetup_r+0x16>
 80141ac:	69ab      	ldr	r3, [r5, #24]
 80141ae:	b913      	cbnz	r3, 80141b6 <__swsetup_r+0x16>
 80141b0:	4628      	mov	r0, r5
 80141b2:	f7ff fb3b 	bl	801382c <__sinit>
 80141b6:	4b2e      	ldr	r3, [pc, #184]	; (8014270 <__swsetup_r+0xd0>)
 80141b8:	429c      	cmp	r4, r3
 80141ba:	d10f      	bne.n	80141dc <__swsetup_r+0x3c>
 80141bc:	686c      	ldr	r4, [r5, #4]
 80141be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80141c2:	b29a      	uxth	r2, r3
 80141c4:	0715      	lsls	r5, r2, #28
 80141c6:	d42c      	bmi.n	8014222 <__swsetup_r+0x82>
 80141c8:	06d0      	lsls	r0, r2, #27
 80141ca:	d411      	bmi.n	80141f0 <__swsetup_r+0x50>
 80141cc:	2209      	movs	r2, #9
 80141ce:	6032      	str	r2, [r6, #0]
 80141d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80141d4:	81a3      	strh	r3, [r4, #12]
 80141d6:	f04f 30ff 	mov.w	r0, #4294967295
 80141da:	e03e      	b.n	801425a <__swsetup_r+0xba>
 80141dc:	4b25      	ldr	r3, [pc, #148]	; (8014274 <__swsetup_r+0xd4>)
 80141de:	429c      	cmp	r4, r3
 80141e0:	d101      	bne.n	80141e6 <__swsetup_r+0x46>
 80141e2:	68ac      	ldr	r4, [r5, #8]
 80141e4:	e7eb      	b.n	80141be <__swsetup_r+0x1e>
 80141e6:	4b24      	ldr	r3, [pc, #144]	; (8014278 <__swsetup_r+0xd8>)
 80141e8:	429c      	cmp	r4, r3
 80141ea:	bf08      	it	eq
 80141ec:	68ec      	ldreq	r4, [r5, #12]
 80141ee:	e7e6      	b.n	80141be <__swsetup_r+0x1e>
 80141f0:	0751      	lsls	r1, r2, #29
 80141f2:	d512      	bpl.n	801421a <__swsetup_r+0x7a>
 80141f4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80141f6:	b141      	cbz	r1, 801420a <__swsetup_r+0x6a>
 80141f8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80141fc:	4299      	cmp	r1, r3
 80141fe:	d002      	beq.n	8014206 <__swsetup_r+0x66>
 8014200:	4630      	mov	r0, r6
 8014202:	f7ff fba5 	bl	8013950 <_free_r>
 8014206:	2300      	movs	r3, #0
 8014208:	6363      	str	r3, [r4, #52]	; 0x34
 801420a:	89a3      	ldrh	r3, [r4, #12]
 801420c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8014210:	81a3      	strh	r3, [r4, #12]
 8014212:	2300      	movs	r3, #0
 8014214:	6063      	str	r3, [r4, #4]
 8014216:	6923      	ldr	r3, [r4, #16]
 8014218:	6023      	str	r3, [r4, #0]
 801421a:	89a3      	ldrh	r3, [r4, #12]
 801421c:	f043 0308 	orr.w	r3, r3, #8
 8014220:	81a3      	strh	r3, [r4, #12]
 8014222:	6923      	ldr	r3, [r4, #16]
 8014224:	b94b      	cbnz	r3, 801423a <__swsetup_r+0x9a>
 8014226:	89a3      	ldrh	r3, [r4, #12]
 8014228:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801422c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8014230:	d003      	beq.n	801423a <__swsetup_r+0x9a>
 8014232:	4621      	mov	r1, r4
 8014234:	4630      	mov	r0, r6
 8014236:	f000 f917 	bl	8014468 <__smakebuf_r>
 801423a:	89a2      	ldrh	r2, [r4, #12]
 801423c:	f012 0301 	ands.w	r3, r2, #1
 8014240:	d00c      	beq.n	801425c <__swsetup_r+0xbc>
 8014242:	2300      	movs	r3, #0
 8014244:	60a3      	str	r3, [r4, #8]
 8014246:	6963      	ldr	r3, [r4, #20]
 8014248:	425b      	negs	r3, r3
 801424a:	61a3      	str	r3, [r4, #24]
 801424c:	6923      	ldr	r3, [r4, #16]
 801424e:	b953      	cbnz	r3, 8014266 <__swsetup_r+0xc6>
 8014250:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014254:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8014258:	d1ba      	bne.n	80141d0 <__swsetup_r+0x30>
 801425a:	bd70      	pop	{r4, r5, r6, pc}
 801425c:	0792      	lsls	r2, r2, #30
 801425e:	bf58      	it	pl
 8014260:	6963      	ldrpl	r3, [r4, #20]
 8014262:	60a3      	str	r3, [r4, #8]
 8014264:	e7f2      	b.n	801424c <__swsetup_r+0xac>
 8014266:	2000      	movs	r0, #0
 8014268:	e7f7      	b.n	801425a <__swsetup_r+0xba>
 801426a:	bf00      	nop
 801426c:	20000020 	.word	0x20000020
 8014270:	080175dc 	.word	0x080175dc
 8014274:	080175fc 	.word	0x080175fc
 8014278:	080175bc 	.word	0x080175bc

0801427c <_close_r>:
 801427c:	b538      	push	{r3, r4, r5, lr}
 801427e:	4c06      	ldr	r4, [pc, #24]	; (8014298 <_close_r+0x1c>)
 8014280:	2300      	movs	r3, #0
 8014282:	4605      	mov	r5, r0
 8014284:	4608      	mov	r0, r1
 8014286:	6023      	str	r3, [r4, #0]
 8014288:	f7ec fc73 	bl	8000b72 <_close>
 801428c:	1c43      	adds	r3, r0, #1
 801428e:	d102      	bne.n	8014296 <_close_r+0x1a>
 8014290:	6823      	ldr	r3, [r4, #0]
 8014292:	b103      	cbz	r3, 8014296 <_close_r+0x1a>
 8014294:	602b      	str	r3, [r5, #0]
 8014296:	bd38      	pop	{r3, r4, r5, pc}
 8014298:	2000ef28 	.word	0x2000ef28

0801429c <__sflush_r>:
 801429c:	898a      	ldrh	r2, [r1, #12]
 801429e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80142a2:	4605      	mov	r5, r0
 80142a4:	0710      	lsls	r0, r2, #28
 80142a6:	460c      	mov	r4, r1
 80142a8:	d458      	bmi.n	801435c <__sflush_r+0xc0>
 80142aa:	684b      	ldr	r3, [r1, #4]
 80142ac:	2b00      	cmp	r3, #0
 80142ae:	dc05      	bgt.n	80142bc <__sflush_r+0x20>
 80142b0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80142b2:	2b00      	cmp	r3, #0
 80142b4:	dc02      	bgt.n	80142bc <__sflush_r+0x20>
 80142b6:	2000      	movs	r0, #0
 80142b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80142bc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80142be:	2e00      	cmp	r6, #0
 80142c0:	d0f9      	beq.n	80142b6 <__sflush_r+0x1a>
 80142c2:	2300      	movs	r3, #0
 80142c4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80142c8:	682f      	ldr	r7, [r5, #0]
 80142ca:	6a21      	ldr	r1, [r4, #32]
 80142cc:	602b      	str	r3, [r5, #0]
 80142ce:	d032      	beq.n	8014336 <__sflush_r+0x9a>
 80142d0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80142d2:	89a3      	ldrh	r3, [r4, #12]
 80142d4:	075a      	lsls	r2, r3, #29
 80142d6:	d505      	bpl.n	80142e4 <__sflush_r+0x48>
 80142d8:	6863      	ldr	r3, [r4, #4]
 80142da:	1ac0      	subs	r0, r0, r3
 80142dc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80142de:	b10b      	cbz	r3, 80142e4 <__sflush_r+0x48>
 80142e0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80142e2:	1ac0      	subs	r0, r0, r3
 80142e4:	2300      	movs	r3, #0
 80142e6:	4602      	mov	r2, r0
 80142e8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80142ea:	6a21      	ldr	r1, [r4, #32]
 80142ec:	4628      	mov	r0, r5
 80142ee:	47b0      	blx	r6
 80142f0:	1c43      	adds	r3, r0, #1
 80142f2:	89a3      	ldrh	r3, [r4, #12]
 80142f4:	d106      	bne.n	8014304 <__sflush_r+0x68>
 80142f6:	6829      	ldr	r1, [r5, #0]
 80142f8:	291d      	cmp	r1, #29
 80142fa:	d848      	bhi.n	801438e <__sflush_r+0xf2>
 80142fc:	4a29      	ldr	r2, [pc, #164]	; (80143a4 <__sflush_r+0x108>)
 80142fe:	40ca      	lsrs	r2, r1
 8014300:	07d6      	lsls	r6, r2, #31
 8014302:	d544      	bpl.n	801438e <__sflush_r+0xf2>
 8014304:	2200      	movs	r2, #0
 8014306:	6062      	str	r2, [r4, #4]
 8014308:	04d9      	lsls	r1, r3, #19
 801430a:	6922      	ldr	r2, [r4, #16]
 801430c:	6022      	str	r2, [r4, #0]
 801430e:	d504      	bpl.n	801431a <__sflush_r+0x7e>
 8014310:	1c42      	adds	r2, r0, #1
 8014312:	d101      	bne.n	8014318 <__sflush_r+0x7c>
 8014314:	682b      	ldr	r3, [r5, #0]
 8014316:	b903      	cbnz	r3, 801431a <__sflush_r+0x7e>
 8014318:	6560      	str	r0, [r4, #84]	; 0x54
 801431a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801431c:	602f      	str	r7, [r5, #0]
 801431e:	2900      	cmp	r1, #0
 8014320:	d0c9      	beq.n	80142b6 <__sflush_r+0x1a>
 8014322:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014326:	4299      	cmp	r1, r3
 8014328:	d002      	beq.n	8014330 <__sflush_r+0x94>
 801432a:	4628      	mov	r0, r5
 801432c:	f7ff fb10 	bl	8013950 <_free_r>
 8014330:	2000      	movs	r0, #0
 8014332:	6360      	str	r0, [r4, #52]	; 0x34
 8014334:	e7c0      	b.n	80142b8 <__sflush_r+0x1c>
 8014336:	2301      	movs	r3, #1
 8014338:	4628      	mov	r0, r5
 801433a:	47b0      	blx	r6
 801433c:	1c41      	adds	r1, r0, #1
 801433e:	d1c8      	bne.n	80142d2 <__sflush_r+0x36>
 8014340:	682b      	ldr	r3, [r5, #0]
 8014342:	2b00      	cmp	r3, #0
 8014344:	d0c5      	beq.n	80142d2 <__sflush_r+0x36>
 8014346:	2b1d      	cmp	r3, #29
 8014348:	d001      	beq.n	801434e <__sflush_r+0xb2>
 801434a:	2b16      	cmp	r3, #22
 801434c:	d101      	bne.n	8014352 <__sflush_r+0xb6>
 801434e:	602f      	str	r7, [r5, #0]
 8014350:	e7b1      	b.n	80142b6 <__sflush_r+0x1a>
 8014352:	89a3      	ldrh	r3, [r4, #12]
 8014354:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014358:	81a3      	strh	r3, [r4, #12]
 801435a:	e7ad      	b.n	80142b8 <__sflush_r+0x1c>
 801435c:	690f      	ldr	r7, [r1, #16]
 801435e:	2f00      	cmp	r7, #0
 8014360:	d0a9      	beq.n	80142b6 <__sflush_r+0x1a>
 8014362:	0793      	lsls	r3, r2, #30
 8014364:	680e      	ldr	r6, [r1, #0]
 8014366:	bf08      	it	eq
 8014368:	694b      	ldreq	r3, [r1, #20]
 801436a:	600f      	str	r7, [r1, #0]
 801436c:	bf18      	it	ne
 801436e:	2300      	movne	r3, #0
 8014370:	eba6 0807 	sub.w	r8, r6, r7
 8014374:	608b      	str	r3, [r1, #8]
 8014376:	f1b8 0f00 	cmp.w	r8, #0
 801437a:	dd9c      	ble.n	80142b6 <__sflush_r+0x1a>
 801437c:	4643      	mov	r3, r8
 801437e:	463a      	mov	r2, r7
 8014380:	6a21      	ldr	r1, [r4, #32]
 8014382:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8014384:	4628      	mov	r0, r5
 8014386:	47b0      	blx	r6
 8014388:	2800      	cmp	r0, #0
 801438a:	dc06      	bgt.n	801439a <__sflush_r+0xfe>
 801438c:	89a3      	ldrh	r3, [r4, #12]
 801438e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014392:	81a3      	strh	r3, [r4, #12]
 8014394:	f04f 30ff 	mov.w	r0, #4294967295
 8014398:	e78e      	b.n	80142b8 <__sflush_r+0x1c>
 801439a:	4407      	add	r7, r0
 801439c:	eba8 0800 	sub.w	r8, r8, r0
 80143a0:	e7e9      	b.n	8014376 <__sflush_r+0xda>
 80143a2:	bf00      	nop
 80143a4:	20400001 	.word	0x20400001

080143a8 <_fflush_r>:
 80143a8:	b538      	push	{r3, r4, r5, lr}
 80143aa:	690b      	ldr	r3, [r1, #16]
 80143ac:	4605      	mov	r5, r0
 80143ae:	460c      	mov	r4, r1
 80143b0:	b1db      	cbz	r3, 80143ea <_fflush_r+0x42>
 80143b2:	b118      	cbz	r0, 80143bc <_fflush_r+0x14>
 80143b4:	6983      	ldr	r3, [r0, #24]
 80143b6:	b90b      	cbnz	r3, 80143bc <_fflush_r+0x14>
 80143b8:	f7ff fa38 	bl	801382c <__sinit>
 80143bc:	4b0c      	ldr	r3, [pc, #48]	; (80143f0 <_fflush_r+0x48>)
 80143be:	429c      	cmp	r4, r3
 80143c0:	d109      	bne.n	80143d6 <_fflush_r+0x2e>
 80143c2:	686c      	ldr	r4, [r5, #4]
 80143c4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80143c8:	b17b      	cbz	r3, 80143ea <_fflush_r+0x42>
 80143ca:	4621      	mov	r1, r4
 80143cc:	4628      	mov	r0, r5
 80143ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80143d2:	f7ff bf63 	b.w	801429c <__sflush_r>
 80143d6:	4b07      	ldr	r3, [pc, #28]	; (80143f4 <_fflush_r+0x4c>)
 80143d8:	429c      	cmp	r4, r3
 80143da:	d101      	bne.n	80143e0 <_fflush_r+0x38>
 80143dc:	68ac      	ldr	r4, [r5, #8]
 80143de:	e7f1      	b.n	80143c4 <_fflush_r+0x1c>
 80143e0:	4b05      	ldr	r3, [pc, #20]	; (80143f8 <_fflush_r+0x50>)
 80143e2:	429c      	cmp	r4, r3
 80143e4:	bf08      	it	eq
 80143e6:	68ec      	ldreq	r4, [r5, #12]
 80143e8:	e7ec      	b.n	80143c4 <_fflush_r+0x1c>
 80143ea:	2000      	movs	r0, #0
 80143ec:	bd38      	pop	{r3, r4, r5, pc}
 80143ee:	bf00      	nop
 80143f0:	080175dc 	.word	0x080175dc
 80143f4:	080175fc 	.word	0x080175fc
 80143f8:	080175bc 	.word	0x080175bc

080143fc <_lseek_r>:
 80143fc:	b538      	push	{r3, r4, r5, lr}
 80143fe:	4c07      	ldr	r4, [pc, #28]	; (801441c <_lseek_r+0x20>)
 8014400:	4605      	mov	r5, r0
 8014402:	4608      	mov	r0, r1
 8014404:	4611      	mov	r1, r2
 8014406:	2200      	movs	r2, #0
 8014408:	6022      	str	r2, [r4, #0]
 801440a:	461a      	mov	r2, r3
 801440c:	f7ec fbd8 	bl	8000bc0 <_lseek>
 8014410:	1c43      	adds	r3, r0, #1
 8014412:	d102      	bne.n	801441a <_lseek_r+0x1e>
 8014414:	6823      	ldr	r3, [r4, #0]
 8014416:	b103      	cbz	r3, 801441a <_lseek_r+0x1e>
 8014418:	602b      	str	r3, [r5, #0]
 801441a:	bd38      	pop	{r3, r4, r5, pc}
 801441c:	2000ef28 	.word	0x2000ef28

08014420 <__swhatbuf_r>:
 8014420:	b570      	push	{r4, r5, r6, lr}
 8014422:	460e      	mov	r6, r1
 8014424:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014428:	2900      	cmp	r1, #0
 801442a:	b096      	sub	sp, #88	; 0x58
 801442c:	4614      	mov	r4, r2
 801442e:	461d      	mov	r5, r3
 8014430:	da07      	bge.n	8014442 <__swhatbuf_r+0x22>
 8014432:	2300      	movs	r3, #0
 8014434:	602b      	str	r3, [r5, #0]
 8014436:	89b3      	ldrh	r3, [r6, #12]
 8014438:	061a      	lsls	r2, r3, #24
 801443a:	d410      	bmi.n	801445e <__swhatbuf_r+0x3e>
 801443c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8014440:	e00e      	b.n	8014460 <__swhatbuf_r+0x40>
 8014442:	466a      	mov	r2, sp
 8014444:	f000 f864 	bl	8014510 <_fstat_r>
 8014448:	2800      	cmp	r0, #0
 801444a:	dbf2      	blt.n	8014432 <__swhatbuf_r+0x12>
 801444c:	9a01      	ldr	r2, [sp, #4]
 801444e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8014452:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8014456:	425a      	negs	r2, r3
 8014458:	415a      	adcs	r2, r3
 801445a:	602a      	str	r2, [r5, #0]
 801445c:	e7ee      	b.n	801443c <__swhatbuf_r+0x1c>
 801445e:	2340      	movs	r3, #64	; 0x40
 8014460:	2000      	movs	r0, #0
 8014462:	6023      	str	r3, [r4, #0]
 8014464:	b016      	add	sp, #88	; 0x58
 8014466:	bd70      	pop	{r4, r5, r6, pc}

08014468 <__smakebuf_r>:
 8014468:	898b      	ldrh	r3, [r1, #12]
 801446a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801446c:	079d      	lsls	r5, r3, #30
 801446e:	4606      	mov	r6, r0
 8014470:	460c      	mov	r4, r1
 8014472:	d507      	bpl.n	8014484 <__smakebuf_r+0x1c>
 8014474:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8014478:	6023      	str	r3, [r4, #0]
 801447a:	6123      	str	r3, [r4, #16]
 801447c:	2301      	movs	r3, #1
 801447e:	6163      	str	r3, [r4, #20]
 8014480:	b002      	add	sp, #8
 8014482:	bd70      	pop	{r4, r5, r6, pc}
 8014484:	ab01      	add	r3, sp, #4
 8014486:	466a      	mov	r2, sp
 8014488:	f7ff ffca 	bl	8014420 <__swhatbuf_r>
 801448c:	9900      	ldr	r1, [sp, #0]
 801448e:	4605      	mov	r5, r0
 8014490:	4630      	mov	r0, r6
 8014492:	f7ff faab 	bl	80139ec <_malloc_r>
 8014496:	b948      	cbnz	r0, 80144ac <__smakebuf_r+0x44>
 8014498:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801449c:	059a      	lsls	r2, r3, #22
 801449e:	d4ef      	bmi.n	8014480 <__smakebuf_r+0x18>
 80144a0:	f023 0303 	bic.w	r3, r3, #3
 80144a4:	f043 0302 	orr.w	r3, r3, #2
 80144a8:	81a3      	strh	r3, [r4, #12]
 80144aa:	e7e3      	b.n	8014474 <__smakebuf_r+0xc>
 80144ac:	4b0d      	ldr	r3, [pc, #52]	; (80144e4 <__smakebuf_r+0x7c>)
 80144ae:	62b3      	str	r3, [r6, #40]	; 0x28
 80144b0:	89a3      	ldrh	r3, [r4, #12]
 80144b2:	6020      	str	r0, [r4, #0]
 80144b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80144b8:	81a3      	strh	r3, [r4, #12]
 80144ba:	9b00      	ldr	r3, [sp, #0]
 80144bc:	6163      	str	r3, [r4, #20]
 80144be:	9b01      	ldr	r3, [sp, #4]
 80144c0:	6120      	str	r0, [r4, #16]
 80144c2:	b15b      	cbz	r3, 80144dc <__smakebuf_r+0x74>
 80144c4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80144c8:	4630      	mov	r0, r6
 80144ca:	f000 f833 	bl	8014534 <_isatty_r>
 80144ce:	b128      	cbz	r0, 80144dc <__smakebuf_r+0x74>
 80144d0:	89a3      	ldrh	r3, [r4, #12]
 80144d2:	f023 0303 	bic.w	r3, r3, #3
 80144d6:	f043 0301 	orr.w	r3, r3, #1
 80144da:	81a3      	strh	r3, [r4, #12]
 80144dc:	89a3      	ldrh	r3, [r4, #12]
 80144de:	431d      	orrs	r5, r3
 80144e0:	81a5      	strh	r5, [r4, #12]
 80144e2:	e7cd      	b.n	8014480 <__smakebuf_r+0x18>
 80144e4:	080137f5 	.word	0x080137f5

080144e8 <__malloc_lock>:
 80144e8:	4770      	bx	lr

080144ea <__malloc_unlock>:
 80144ea:	4770      	bx	lr

080144ec <_read_r>:
 80144ec:	b538      	push	{r3, r4, r5, lr}
 80144ee:	4c07      	ldr	r4, [pc, #28]	; (801450c <_read_r+0x20>)
 80144f0:	4605      	mov	r5, r0
 80144f2:	4608      	mov	r0, r1
 80144f4:	4611      	mov	r1, r2
 80144f6:	2200      	movs	r2, #0
 80144f8:	6022      	str	r2, [r4, #0]
 80144fa:	461a      	mov	r2, r3
 80144fc:	f7ec fb00 	bl	8000b00 <_read>
 8014500:	1c43      	adds	r3, r0, #1
 8014502:	d102      	bne.n	801450a <_read_r+0x1e>
 8014504:	6823      	ldr	r3, [r4, #0]
 8014506:	b103      	cbz	r3, 801450a <_read_r+0x1e>
 8014508:	602b      	str	r3, [r5, #0]
 801450a:	bd38      	pop	{r3, r4, r5, pc}
 801450c:	2000ef28 	.word	0x2000ef28

08014510 <_fstat_r>:
 8014510:	b538      	push	{r3, r4, r5, lr}
 8014512:	4c07      	ldr	r4, [pc, #28]	; (8014530 <_fstat_r+0x20>)
 8014514:	2300      	movs	r3, #0
 8014516:	4605      	mov	r5, r0
 8014518:	4608      	mov	r0, r1
 801451a:	4611      	mov	r1, r2
 801451c:	6023      	str	r3, [r4, #0]
 801451e:	f7ec fb34 	bl	8000b8a <_fstat>
 8014522:	1c43      	adds	r3, r0, #1
 8014524:	d102      	bne.n	801452c <_fstat_r+0x1c>
 8014526:	6823      	ldr	r3, [r4, #0]
 8014528:	b103      	cbz	r3, 801452c <_fstat_r+0x1c>
 801452a:	602b      	str	r3, [r5, #0]
 801452c:	bd38      	pop	{r3, r4, r5, pc}
 801452e:	bf00      	nop
 8014530:	2000ef28 	.word	0x2000ef28

08014534 <_isatty_r>:
 8014534:	b538      	push	{r3, r4, r5, lr}
 8014536:	4c06      	ldr	r4, [pc, #24]	; (8014550 <_isatty_r+0x1c>)
 8014538:	2300      	movs	r3, #0
 801453a:	4605      	mov	r5, r0
 801453c:	4608      	mov	r0, r1
 801453e:	6023      	str	r3, [r4, #0]
 8014540:	f7ec fb33 	bl	8000baa <_isatty>
 8014544:	1c43      	adds	r3, r0, #1
 8014546:	d102      	bne.n	801454e <_isatty_r+0x1a>
 8014548:	6823      	ldr	r3, [r4, #0]
 801454a:	b103      	cbz	r3, 801454e <_isatty_r+0x1a>
 801454c:	602b      	str	r3, [r5, #0]
 801454e:	bd38      	pop	{r3, r4, r5, pc}
 8014550:	2000ef28 	.word	0x2000ef28

08014554 <_init>:
 8014554:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014556:	bf00      	nop
 8014558:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801455a:	bc08      	pop	{r3}
 801455c:	469e      	mov	lr, r3
 801455e:	4770      	bx	lr

08014560 <_fini>:
 8014560:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014562:	bf00      	nop
 8014564:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014566:	bc08      	pop	{r3}
 8014568:	469e      	mov	lr, r3
 801456a:	4770      	bx	lr
